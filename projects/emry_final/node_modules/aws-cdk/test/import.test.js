"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('promptly', () => {
    return {
        ...jest.requireActual('promptly'),
        confirm: jest.fn(),
        prompt: jest.fn(),
    };
});
const promptly = require("promptly");
const cloudformation_deployments_1 = require("../lib/api/cloudformation-deployments");
const import_1 = require("../lib/import");
const util_1 = require("./util");
const mock_sdk_1 = require("./util/mock-sdk");
const promptlyConfirm = promptly.confirm;
const promptlyPrompt = promptly.prompt;
let createChangeSetInput;
const STACK_WITH_QUEUE = util_1.testStack({
    stackName: 'StackWithQueue',
    template: {
        Resources: {
            MyQueue: {
                Type: 'AWS::SQS::Queue',
                Properties: {},
            },
        },
    },
});
const STACK_WITH_NAMED_QUEUE = util_1.testStack({
    stackName: 'StackWithQueue',
    template: {
        Resources: {
            MyQueue: {
                Type: 'AWS::SQS::Queue',
                Properties: {
                    QueueName: 'TheQueueName',
                },
            },
        },
    },
});
let sdkProvider;
let deployments;
beforeEach(() => {
    jest.resetAllMocks();
    sdkProvider = new mock_sdk_1.MockSdkProvider({ realSdk: false });
    deployments = new cloudformation_deployments_1.CloudFormationDeployments({ sdkProvider });
    createChangeSetInput = undefined;
});
test('discovers importable resources', async () => {
    givenCurrentStack(STACK_WITH_QUEUE.stackName, {
        Resources: {},
    });
    const importer = new import_1.ResourceImporter(STACK_WITH_QUEUE, deployments);
    const { additions } = await importer.discoverImportableResources();
    expect(additions).toEqual([
        expect.objectContaining({
            logicalId: 'MyQueue',
        }),
    ]);
});
test('by default, its an error if there are non-addition changes in the template', async () => {
    givenCurrentStack(STACK_WITH_QUEUE.stackName, {
        Resources: {
            SomethingThatDisappeared: {
                Type: 'AWS::S3::Bucket',
            },
        },
    });
    const importer = new import_1.ResourceImporter(STACK_WITH_QUEUE, deployments);
    await expect(importer.discoverImportableResources()).rejects.toThrow(/No resource updates or deletes/);
    // But the error can be silenced
    await expect(importer.discoverImportableResources(true)).resolves.toBeTruthy();
});
test('asks human for resource identifiers', async () => {
    // GIVEN
    givenCurrentStack(STACK_WITH_QUEUE.stackName, { Resources: {} });
    const importer = new import_1.ResourceImporter(STACK_WITH_QUEUE, deployments);
    const { additions } = await importer.discoverImportableResources();
    // WHEN
    promptlyPrompt.mockResolvedValue('TheQueueName');
    const importable = await importer.askForResourceIdentifiers(additions);
    // THEN
    expect(importable.resourceMap).toEqual({
        MyQueue: {
            QueueName: 'TheQueueName',
        },
    });
    expect(importable.importResources).toEqual([
        expect.objectContaining({
            logicalId: 'MyQueue',
        }),
    ]);
});
test('asks human to confirm automic import if identifier is in template', async () => {
    // GIVEN
    givenCurrentStack(STACK_WITH_NAMED_QUEUE.stackName, { Resources: {} });
    const importer = new import_1.ResourceImporter(STACK_WITH_NAMED_QUEUE, deployments);
    const { additions } = await importer.discoverImportableResources();
    // WHEN
    promptlyConfirm.mockResolvedValue(true);
    const importable = await importer.askForResourceIdentifiers(additions);
    // THEN
    expect(importable.resourceMap).toEqual({
        MyQueue: {
            QueueName: 'TheQueueName',
        },
    });
    expect(importable.importResources).toEqual([
        expect.objectContaining({
            logicalId: 'MyQueue',
        }),
    ]);
});
test('asks human to confirm automic import if identifier is in template', async () => {
    // GIVEN
    givenCurrentStack(STACK_WITH_QUEUE.stackName, { Resources: {} });
    const importer = new import_1.ResourceImporter(STACK_WITH_QUEUE, deployments);
    const { additions } = await importer.discoverImportableResources();
    const importMap = {
        importResources: additions,
        resourceMap: {
            MyQueue: { QueueName: 'TheQueueName' },
        },
    };
    // WHEN
    await importer.importResources(importMap, {
        stack: STACK_WITH_QUEUE,
    });
    expect(createChangeSetInput === null || createChangeSetInput === void 0 ? void 0 : createChangeSetInput.ResourcesToImport).toEqual([
        {
            LogicalResourceId: 'MyQueue',
            ResourceIdentifier: { QueueName: 'TheQueueName' },
            ResourceType: 'AWS::SQS::Queue',
        },
    ]);
});
function givenCurrentStack(stackName, template) {
    sdkProvider.stubCloudFormation({
        describeStacks() {
            return {
                Stacks: [
                    {
                        StackName: stackName,
                        CreationTime: new Date(),
                        StackStatus: 'UPDATE_COMPLETE',
                        StackStatusReason: 'It is magic',
                        Outputs: [],
                    },
                ],
            };
        },
        getTemplate() {
            return {
                TemplateBody: JSON.stringify(template),
            };
        },
        getTemplateSummary() {
            return {
                ResourceIdentifierSummaries: [
                    {
                        ResourceType: 'AWS::SQS::Queue',
                        ResourceIdentifiers: ['QueueName'],
                    },
                ],
            };
        },
        deleteChangeSet() {
            return {};
        },
        createChangeSet(request) {
            createChangeSetInput = request;
            return {};
        },
        describeChangeSet() {
            return {
                Status: 'CREATE_COMPLETE',
                Changes: [],
            };
        },
        executeChangeSet() {
            return {};
        },
        describeStackEvents() {
            return {};
        },
    });
}
//# sourceMappingURL=data:application/json;base64,