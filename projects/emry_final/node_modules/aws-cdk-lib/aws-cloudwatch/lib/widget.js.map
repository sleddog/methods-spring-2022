{
  "version": 3,
  "sources": ["widget.ts"],
  "sourcesContent": ["import { IMetric } from './metric-types';\n\n/**\n * The width of the grid we're filling\n */\nexport const GRID_WIDTH = 24;\n\n/**\n * A single dashboard widget\n */\nexport interface IWidget {\n  /**\n   * The amount of horizontal grid units the widget will take up\n   */\n  readonly width: number;\n\n  /**\n   * The amount of vertical grid units the widget will take up\n   */\n  readonly height: number;\n\n  /**\n   * Any warnings that are produced as a result of putting together this widget\n   */\n  readonly warnings?: string[];\n\n  /**\n   * Place the widget at a given position\n   */\n  position(x: number, y: number): void;\n\n  /**\n   * Return the widget JSON for use in the dashboard\n   */\n  toJson(): any[];\n}\n\n/**\n * A real CloudWatch widget that has its own fixed size and remembers its position\n *\n * This is in contrast to other widgets which exist for layout purposes.\n */\nexport abstract class ConcreteWidget implements IWidget {\n  public readonly width: number;\n  public readonly height: number;\n  protected x?: number;\n  protected y?: number;\n\n  public readonly warnings: string[] | undefined = [];\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n\n    if (this.width > GRID_WIDTH) {\n      throw new Error(`Widget is too wide, max ${GRID_WIDTH} units allowed`);\n    }\n  }\n\n  public position(x: number, y: number): void {\n    this.x = x;\n    this.y = y;\n  }\n\n  public abstract toJson(): any[];\n\n  /**\n   * Copy the warnings from the given metric\n   */\n  protected copyMetricWarnings(...ms: IMetric[]) {\n    this.warnings?.push(...ms.flatMap(m => m.warnings ?? []));\n  }\n}\n"],
  "mappings": "wOAKa,QAAA,WAAa,GAqC1B,MAAsB,cAAc,CAQlC,YAAY,MAAe,OAAc,CAIvC,GANc,KAAA,SAAiC,CAAA,EAG/C,KAAK,MAAQ,MACb,KAAK,OAAS,OAEV,KAAK,MAAQ,QAAA,WACf,KAAM,IAAI,OAAM,2BAA2B,QAAA,0BAA0B,EAIlE,SAAS,EAAW,EAAS,CAClC,KAAK,EAAI,EACT,KAAK,EAAI,EAQD,sBAAsB,GAAa,0NAC3C,AAAA,IAAA,KAAK,YAAQ,MAAA,KAAA,QAAA,GAAE,KAAK,GAAG,GAAG,QAAQ,GAAI,CAAA,GAAA,KAAA,MAAA,KAAC,EAAE,YAAQ,MAAA,MAAA,OAAA,IAAI,CAAA,CAAE,CAAA,CAAC,GA5B5D,QAAA,eAAA",
  "names": []
}
