{
  "version": 3,
  "sources": ["query-definition.ts"],
  "sourcesContent": ["import { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnQueryDefinition } from '.';\nimport { ILogGroup } from './log-group';\n\n\n/**\n * Properties for a QueryString\n */\nexport interface QueryStringProps {\n  /**\n  * Retrieves the specified fields from log events for display.\n  *\n  * @default - no fields in QueryString\n  */\n  readonly fields?: string[];\n\n  /**\n  * Extracts data from a log field and creates one or more ephemeral fields that you can process further in the query.\n  *\n  * @default - no parse in QueryString\n  */\n  readonly parse?: string;\n\n  /**\n  * Filters the results of a query that's based on one or more conditions.\n  *\n  * @default - no filter in QueryString\n  */\n  readonly filter?: string;\n\n  /**\n  * Uses log field values to calculate aggregate statistics.\n  *\n  * @default - no stats in QueryString\n  */\n  readonly stats?: string;\n\n  /**\n  * Sorts the retrieved log events.\n  *\n  * @default - no sort in QueryString\n  */\n  readonly sort?: string;\n\n  /**\n  * Specifies the number of log events returned by the query.\n  *\n  * @default - no limit in QueryString\n  */\n  readonly limit?: Number;\n\n  /**\n  * Specifies which fields to display in the query results.\n  *\n  * @default - no display in QueryString\n  */\n  readonly display?: string;\n}\n\ninterface QueryStringMap {\n  readonly fields?: string,\n  readonly parse?: string,\n  readonly filter?: string,\n  readonly stats?: string,\n  readonly sort?: string,\n  readonly limit?: Number,\n  readonly display?: string,\n}\n\n/**\n * Define a QueryString\n */\nexport class QueryString {\n  private readonly fields?: string[];\n  private readonly parse?: string;\n  private readonly filter?: string;\n  private readonly stats?: string;\n  private readonly sort?: string;\n  private readonly limit?: Number;\n  private readonly display?: string;\n\n  constructor(props: QueryStringProps = {}) {\n    this.fields = props.fields;\n    this.parse = props.parse;\n    this.filter = props.filter;\n    this.stats = props.stats;\n    this.sort = props.sort;\n    this.limit = props.limit;\n    this.display = props.display;\n  }\n\n  /**\n  * String representation of this QueryString.\n  */\n  public toString(): string {\n    return noUndef({\n      fields: this.fields !== undefined ? this.fields.join(', ') : this.fields,\n      parse: this.parse,\n      filter: this.filter,\n      stats: this.stats,\n      sort: this.sort,\n      limit: this.limit,\n      display: this.display,\n    }).join(' | ');\n  }\n}\n\nfunction noUndef(x: QueryStringMap): string[] {\n  const ret: string[] = [];\n  for (const [key, value] of Object.entries(x)) {\n    if (value !== undefined) {\n      ret.push(`${key} ${value}`);\n    }\n  }\n  return ret;\n}\n\n/**\n * Properties for a QueryDefinition\n */\nexport interface QueryDefinitionProps {\n  /**\n  * Name of the query definition.\n  */\n  readonly queryDefinitionName: string;\n\n  /**\n   * The query string to use for this query definition.\n   */\n  readonly queryString: QueryString;\n\n  /**\n  * Specify certain log groups for the query definition.\n  *\n  * @default - no specified log groups\n  */\n  readonly logGroups?: ILogGroup[];\n}\n\n/**\n * Define a query definition for CloudWatch Logs Insights\n */\nexport class QueryDefinition extends Resource {\n  /**\n   * The ID of the query definition.\n   *\n   * @attribute\n   */\n  public readonly queryDefinitionId: string;\n\n  constructor(scope: Construct, id: string, props: QueryDefinitionProps) {\n    super(scope, id, {\n      physicalName: props.queryDefinitionName,\n    });\n\n    const queryDefinition = new CfnQueryDefinition(this, 'Resource', {\n      name: props.queryDefinitionName,\n      queryString: props.queryString.toString(),\n      logGroupNames: typeof props.logGroups === 'undefined' ? [] : props.logGroups.flatMap(logGroup => logGroup.logGroupName),\n    });\n\n    this.queryDefinitionId = queryDefinition.attrQueryDefinitionId;\n  }\n}\n"],
  "mappings": "6OAAA,OAAA,QAAA,YAAA,EAEA,GAAA,QAAA,GAAA,EAuEA,MAAa,WAAW,CAStB,YAAY,MAA0B,CAAA,EAAE,kNACtC,KAAK,OAAS,MAAM,OACpB,KAAK,MAAQ,MAAM,MACnB,KAAK,OAAS,MAAM,OACpB,KAAK,MAAQ,MAAM,MACnB,KAAK,KAAO,MAAM,KAClB,KAAK,MAAQ,MAAM,MACnB,KAAK,QAAU,MAAM,QAMhB,UAAQ,CACb,MAAO,SAAQ,CACb,OAAQ,KAAK,SAAW,OAAY,KAAK,OAAO,KAAK,IAAI,EAAI,KAAK,OAClE,MAAO,KAAK,MACZ,OAAQ,KAAK,OACb,MAAO,KAAK,MACZ,KAAM,KAAK,KACX,MAAO,KAAK,MACZ,QAAS,KAAK,QACf,EAAE,KAAK,KAAK,GA/BjB,QAAA,YAAA,4GAmCA,iBAAiB,EAAiB,CAChC,KAAM,KAAgB,CAAA,EACtB,SAAW,CAAC,IAAK,QAAU,QAAO,QAAQ,CAAC,EACzC,AAAI,QAAU,QACZ,IAAI,KAAK,GAAG,OAAO,OAAO,EAG9B,MAAO,IACT,CA2BA,MAAa,uBAAwB,QAAA,QAAQ,CAQ3C,YAAY,MAAkB,GAAY,MAA2B,CACnE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,oBACrB,uNAED,KAAM,iBAAkB,GAAI,IAAA,mBAAmB,KAAM,WAAY,CAC/D,KAAM,MAAM,oBACZ,YAAa,MAAM,YAAY,SAAQ,EACvC,cAAe,MAAO,OAAM,WAAc,YAAc,CAAA,EAAK,MAAM,UAAU,QAAQ,UAAY,SAAS,YAAY,EACvH,EAED,KAAK,kBAAoB,gBAAgB,uBAnB7C,QAAA,gBAAA",
  "names": []
}
