{
  "version": "2",
  "toolVersion": "1.57.0",
  "snippets": {
    "0a65f6bab491418b403330d2fdc15782556f112e5448e1f1a3d97e5f20548730": {
      "translations": {
        "python": {
          "source": "MyStack(app, \"MyStack\",\n    synthesizer=DefaultStackSynthesizer(\n        file_assets_bucket_name=\"my-orgs-asset-bucket\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new MyStack(app, \"MyStack\", new StackProps {\n    Synthesizer = new DefaultStackSynthesizer(new DefaultStackSynthesizerProps {\n        FileAssetsBucketName = \"my-orgs-asset-bucket\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "MyStack.Builder.create(app, \"MyStack\")\n        .synthesizer(DefaultStackSynthesizer.Builder.create()\n                .fileAssetsBucketName(\"my-orgs-asset-bucket\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewMyStack(app, jsii.String(\"MyStack\"), &stackProps{\n\tsynthesizer: NewDefaultStackSynthesizer(&defaultStackSynthesizerProps{\n\t\tfileAssetsBucketName: jsii.String(\"my-orgs-asset-bucket\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new MyStack(app, 'MyStack', {\n  synthesizer: new DefaultStackSynthesizer({\n    fileAssetsBucketName: 'my-orgs-asset-bucket',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 88
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DefaultStackSynthesizer",
        "@aws-cdk/core.DefaultStackSynthesizerProps",
        "@aws-cdk/core.IStackSynthesizer",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew MyStack(app, 'MyStack', {\n  synthesizer: new DefaultStackSynthesizer({\n    fileAssetsBucketName: 'my-orgs-asset-bucket',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "193": 2,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "e75c7fba6c3fd228f26a2821f7cebb4999130b2035615022636a2071605ca8b8"
    },
    "dbbc7d38963743dd30456a59fe3451669202bc7e99cd3bc44bafdda154f4d496": {
      "translations": {
        "python": {
          "source": "class MyNestedStack(cfn.NestedStack):\n    def __init__(self, scope, id, *, parameters=None, timeout=None, notifications=None):\n        super().__init__(scope, id, parameters=parameters, timeout=timeout, notifications=notifications)\n\n        s3.Bucket(self, \"NestedBucket\")\n\nclass MyParentStack(Stack):\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        MyNestedStack(self, \"Nested1\")\n        MyNestedStack(self, \"Nested2\")",
          "version": "2"
        },
        "csharp": {
          "source": "class MyNestedStack : NestedStack\n{\n    public MyNestedStack(Construct scope, string id, NestedStackProps? props=null) : base(scope, id, props)\n    {\n\n        new Bucket(this, \"NestedBucket\");\n    }\n}\n\nclass MyParentStack : Stack\n{\n    public MyParentStack(Construct scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        new MyNestedStack(this, \"Nested1\");\n        new MyNestedStack(this, \"Nested2\");\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "public class MyNestedStack extends NestedStack {\n    public MyNestedStack(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyNestedStack(Construct scope, String id, NestedStackProps props) {\n        super(scope, id, props);\n\n        new Bucket(this, \"NestedBucket\");\n    }\n}\n\npublic class MyParentStack extends Stack {\n    public MyParentStack(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyParentStack(Construct scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        new MyNestedStack(this, \"Nested1\");\n        new MyNestedStack(this, \"Nested2\");\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "type myNestedStack struct {\n\tnestedStack\n}\n\nfunc newMyNestedStack(scope construct, id *string, props nestedStackProps) *myNestedStack {\n\tthis := &myNestedStack{}\n\tcfn.NewNestedStack_Override(this, scope, id, props)\n\n\ts3.NewBucket(this, jsii.String(\"NestedBucket\"))\n\treturn this\n}\n\ntype myParentStack struct {\n\tstack\n}\n\nfunc newMyParentStack(scope construct, id *string, props stackProps) *myParentStack {\n\tthis := &myParentStack{}\n\tnewStack_Override(this, scope, id, props)\n\n\tNewMyNestedStack(this, jsii.String(\"Nested1\"))\n\tNewMyNestedStack(this, jsii.String(\"Nested2\"))\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "class MyNestedStack extends cfn.NestedStack {\n  constructor(scope: Construct, id: string, props?: cfn.NestedStackProps) {\n    super(scope, id, props);\n\n    new s3.Bucket(this, 'NestedBucket');\n  }\n}\n\nclass MyParentStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    new MyNestedStack(this, 'Nested1');\n    new MyNestedStack(this, 'Nested2');\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 109
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudformation.NestedStack",
        "@aws-cdk/aws-cloudformation.NestedStackProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nclass MyNestedStack extends cfn.NestedStack {\n  constructor(scope: Construct, id: string, props?: cfn.NestedStackProps) {\n    super(scope, id, props);\n\n    new s3.Bucket(this, 'NestedBucket');\n  }\n}\n\nclass MyParentStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    new MyNestedStack(this, 'Nested1');\n    new MyNestedStack(this, 'Nested2');\n  }\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "57": 2,
        "75": 26,
        "102": 2,
        "104": 3,
        "143": 2,
        "153": 1,
        "156": 6,
        "162": 2,
        "169": 4,
        "194": 2,
        "196": 2,
        "197": 3,
        "216": 2,
        "223": 2,
        "226": 5,
        "245": 2,
        "279": 2
      },
      "fqnsFingerprint": "083acf6b04d94caf1dad423589044c763c9ddf5904b2c5a7e26c343a0616148c"
    },
    "d4a0182d304e985a737bb1666f67d9d8300d9921c6ee00d7c5425b90da98f2fb": {
      "translations": {
        "python": {
          "source": "prod = {\"account\": \"123456789012\", \"region\": \"us-east-1\"}\n\nstack1 = StackThatProvidesABucket(app, \"Stack1\", env=prod)\n\n# stack2 will take a property { bucket: IBucket }\nstack2 = StackThatExpectsABucket(app, \"Stack2\",\n    bucket=stack1.bucket,\n    env=prod\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IDictionary<string, string> prod = new Dictionary<string, string> { { \"account\", \"123456789012\" }, { \"region\", \"us-east-1\" } };\n\nStackThatProvidesABucket stack1 = new StackThatProvidesABucket(app, \"Stack1\", new StackProps { Env = prod });\n\n// stack2 will take a property { bucket: IBucket }\nStackThatExpectsABucket stack2 = new StackThatExpectsABucket(app, \"Stack2\", new StackThatExpectsABucketProps {\n    Bucket = stack1.Bucket,\n    Env = prod\n});",
          "version": "1"
        },
        "java": {
          "source": "Map<String, String> prod = Map.of(\"account\", \"123456789012\", \"region\", \"us-east-1\");\n\nStackThatProvidesABucket stack1 = StackThatProvidesABucket.Builder.create(app, \"Stack1\").env(prod).build();\n\n// stack2 will take a property { bucket: IBucket }\nStackThatExpectsABucket stack2 = new StackThatExpectsABucket(app, \"Stack2\", new StackThatExpectsABucketProps()\n        .bucket(stack1.getBucket())\n        .env(prod)\n        );",
          "version": "1"
        },
        "go": {
          "source": "prod := map[string]*string{\n\t\"account\": jsii.String(\"123456789012\"),\n\t\"region\": jsii.String(\"us-east-1\"),\n}\n\nstack1 := NewStackThatProvidesABucket(app, jsii.String(\"Stack1\"), &stackProps{\n\tenv: prod,\n})\n\n// stack2 will take a property { bucket: IBucket }\nstack2 := NewStackThatExpectsABucket(app, jsii.String(\"Stack2\"), &stackThatExpectsABucketProps{\n\tbucket: stack1.bucket,\n\tenv: prod,\n})",
          "version": "1"
        },
        "$": {
          "source": "const prod = { account: '123456789012', region: 'us-east-1' };\n\nconst stack1 = new StackThatProvidesABucket(app, 'Stack1' , { env: prod });\n\n// stack2 will take a property { bucket: IBucket }\nconst stack2 = new StackThatExpectsABucket(app, 'Stack2', {\n  bucket: stack1.bucket,\n  env: prod\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 143
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst prod = { account: '123456789012', region: 'us-east-1' };\n\nconst stack1 = new StackThatProvidesABucket(app, 'Stack1' , { env: prod });\n\n// stack2 will take a property { bucket: IBucket }\nconst stack2 = new StackThatExpectsABucket(app, 'Stack2', {\n  bucket: stack1.bucket,\n  env: prod\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "193": 3,
        "194": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "cef57a2eae30b8870068bf1ec31cbab470852162643a696224606a30af1afbde"
    },
    "af8931250b0afe2fe6d6ebfb99df783afd5755d4fe262dd6415b9e2cfa12a395": {
      "translations": {
        "python": {
          "source": "Duration.seconds(300) # 5 minutes\nDuration.minutes(5) # 5 minutes\nDuration.hours(1) # 1 hour\nDuration.days(7) # 7 days\nDuration.parse(\"PT5M\")",
          "version": "2"
        },
        "csharp": {
          "source": "Duration.Seconds(300); // 5 minutes\nDuration.Minutes(5); // 5 minutes\nDuration.Hours(1); // 1 hour\nDuration.Days(7); // 7 days\nDuration.Parse(\"PT5M\");",
          "version": "1"
        },
        "java": {
          "source": "Duration.seconds(300); // 5 minutes\nDuration.minutes(5); // 5 minutes\nDuration.hours(1); // 1 hour\nDuration.days(7); // 7 days\nDuration.parse(\"PT5M\");",
          "version": "1"
        },
        "go": {
          "source": "duration.seconds(jsii.Number(300)) // 5 minutes\nduration.minutes(jsii.Number(5)) // 5 minutes\nduration.hours(jsii.Number(1)) // 1 hour\nduration.days(jsii.Number(7)) // 7 days\nduration.parse(jsii.String(\"PT5M\"))",
          "version": "1"
        },
        "$": {
          "source": "Duration.seconds(300)   // 5 minutes\nDuration.minutes(5)     // 5 minutes\nDuration.hours(1)       // 1 hour\nDuration.days(7)        // 7 days\nDuration.parse('PT5M')  // 5 minutes",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 206
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#parse",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nDuration.seconds(300)   // 5 minutes\nDuration.minutes(5)     // 5 minutes\nDuration.hours(1)       // 1 hour\nDuration.days(7)        // 7 days\nDuration.parse('PT5M')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 1,
        "75": 10,
        "194": 5,
        "196": 5,
        "226": 5
      },
      "fqnsFingerprint": "ff4742cb220491e100ad89c1948ba01e31a7aff25edb0b26771254838ca8759c"
    },
    "0be2b0739fc41d887958acb059bcf02de34ba83c5ee4799fa709d099cbccff1e": {
      "translations": {
        "python": {
          "source": "Duration.minutes(1).plus(Duration.seconds(60)) # 2 minutes\nDuration.minutes(5).minus(Duration.seconds(10))",
          "version": "2"
        },
        "csharp": {
          "source": "Duration.Minutes(1).Plus(Duration.Seconds(60)); // 2 minutes\nDuration.Minutes(5).Minus(Duration.Seconds(10));",
          "version": "1"
        },
        "java": {
          "source": "Duration.minutes(1).plus(Duration.seconds(60)); // 2 minutes\nDuration.minutes(5).minus(Duration.seconds(10));",
          "version": "1"
        },
        "go": {
          "source": "duration.minutes(jsii.Number(1)).plus(duration.seconds(jsii.Number(60))) // 2 minutes\nduration.minutes(jsii.Number(5)).minus(duration.seconds(jsii.Number(10)))",
          "version": "1"
        },
        "$": {
          "source": "Duration.minutes(1).plus(Duration.seconds(60)); // 2 minutes\nDuration.minutes(5).minus(Duration.seconds(10)); // 290 secondes",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 216
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minus",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#plus",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nDuration.minutes(1).plus(Duration.seconds(60)); // 2 minutes\nDuration.minutes(5).minus(Duration.seconds(10));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "75": 10,
        "194": 6,
        "196": 6,
        "226": 2
      },
      "fqnsFingerprint": "e68309ac09be14e9bdd94bf3f0b7f835c410d21502d9ff7df51d1282a6f3d8b4"
    },
    "3d663a29fb56a1af9050019b75e3131800983e2ab294d1dce138a4a3d6ca63e5": {
      "translations": {
        "python": {
          "source": "Size.kibibytes(200) # 200 KiB\nSize.mebibytes(5) # 5 MiB\nSize.gibibytes(40) # 40 GiB\nSize.tebibytes(200) # 200 TiB\nSize.pebibytes(3)",
          "version": "2"
        },
        "csharp": {
          "source": "Size.Kibibytes(200); // 200 KiB\nSize.Mebibytes(5); // 5 MiB\nSize.Gibibytes(40); // 40 GiB\nSize.Tebibytes(200); // 200 TiB\nSize.Pebibytes(3);",
          "version": "1"
        },
        "java": {
          "source": "Size.kibibytes(200); // 200 KiB\nSize.mebibytes(5); // 5 MiB\nSize.gibibytes(40); // 40 GiB\nSize.tebibytes(200); // 200 TiB\nSize.pebibytes(3);",
          "version": "1"
        },
        "go": {
          "source": "size.kibibytes(jsii.Number(200)) // 200 KiB\nsize.mebibytes(jsii.Number(5)) // 5 MiB\nsize.gibibytes(jsii.Number(40)) // 40 GiB\nsize.tebibytes(jsii.Number(200)) // 200 TiB\nsize.pebibytes(jsii.Number(3))",
          "version": "1"
        },
        "$": {
          "source": "Size.kibibytes(200) // 200 KiB\nSize.mebibytes(5)   // 5 MiB\nSize.gibibytes(40)  // 40 GiB\nSize.tebibytes(200) // 200 TiB\nSize.pebibytes(3)   // 3 PiB",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 228
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Size#gibibytes",
        "@aws-cdk/core.Size#kibibytes",
        "@aws-cdk/core.Size#mebibytes",
        "@aws-cdk/core.Size#pebibytes",
        "@aws-cdk/core.Size#tebibytes"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nSize.kibibytes(200) // 200 KiB\nSize.mebibytes(5)   // 5 MiB\nSize.gibibytes(40)  // 40 GiB\nSize.tebibytes(200) // 200 TiB\nSize.pebibytes(3)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 5,
        "75": 10,
        "194": 5,
        "196": 5,
        "226": 5
      },
      "fqnsFingerprint": "51bcc7b7bf81c13904df8520083ce24ace8a6585271d79caada5e3a772e7bace"
    },
    "3aa29e66a94ca0a2d22a7d1d1b4a6a287e5644f586c6d0ee1a848056b44264b2": {
      "translations": {
        "python": {
          "source": "Size.mebibytes(2).to_kibibytes() # yields 2048\nSize.kibibytes(2050).to_mebibytes(rounding=SizeRoundingBehavior.FLOOR)",
          "version": "2"
        },
        "csharp": {
          "source": "Size.Mebibytes(2).ToKibibytes(); // yields 2048\nSize.Kibibytes(2050).ToMebibytes(new SizeConversionOptions { Rounding = SizeRoundingBehavior.FLOOR });",
          "version": "1"
        },
        "java": {
          "source": "Size.mebibytes(2).toKibibytes(); // yields 2048\nSize.kibibytes(2050).toMebibytes(SizeConversionOptions.builder().rounding(SizeRoundingBehavior.FLOOR).build());",
          "version": "1"
        },
        "go": {
          "source": "size.mebibytes(jsii.Number(2)).toKibibytes() // yields 2048\nsize.kibibytes(jsii.Number(2050)).toMebibytes(&sizeConversionOptions{\n\trounding: sizeRoundingBehavior_FLOOR,\n})",
          "version": "1"
        },
        "$": {
          "source": "Size.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })  // yields 2",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 240
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Size#kibibytes",
        "@aws-cdk/core.Size#mebibytes",
        "@aws-cdk/core.Size#toKibibytes",
        "@aws-cdk/core.Size#toMebibytes",
        "@aws-cdk/core.SizeConversionOptions",
        "@aws-cdk/core.SizeRoundingBehavior",
        "@aws-cdk/core.SizeRoundingBehavior#FLOOR"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nSize.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 9,
        "193": 1,
        "194": 5,
        "196": 4,
        "226": 2,
        "281": 1
      },
      "fqnsFingerprint": "52730944b088bfd2f3305386e138513bac525fffc6e200f9965ffb94c9fe50ec"
    },
    "ce57db5f62b71ba749a47894a5780dcb8a442e5248c97f04746bff62d40a979c": {
      "translations": {
        "python": {
          "source": "secret = SecretValue.secrets_manager(\"secretId\",\n    json_field=\"password\",  # optional: key of a JSON field to retrieve (defaults to all content),\n    version_id=\"id\",  # optional: id of the version (default AWSCURRENT)\n    version_stage=\"stage\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "SecretValue secret = SecretValue.SecretsManager(\"secretId\", new SecretsManagerSecretOptions {\n    JsonField = \"password\",  // optional: key of a JSON field to retrieve (defaults to all content),\n    VersionId = \"id\",  // optional: id of the version (default AWSCURRENT)\n    VersionStage = \"stage\"\n});",
          "version": "1"
        },
        "java": {
          "source": "SecretValue secret = SecretValue.secretsManager(\"secretId\", SecretsManagerSecretOptions.builder()\n        .jsonField(\"password\") // optional: key of a JSON field to retrieve (defaults to all content),\n        .versionId(\"id\") // optional: id of the version (default AWSCURRENT)\n        .versionStage(\"stage\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "secret := secretValue.secretsManager(jsii.String(\"secretId\"), &secretsManagerSecretOptions{\n\tjsonField: jsii.String(\"password\"),\n\t // optional: key of a JSON field to retrieve (defaults to all content),\n\tversionId: jsii.String(\"id\"),\n\t // optional: id of the version (default AWSCURRENT)\n\tversionStage: jsii.String(\"stage\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const secret = SecretValue.secretsManager('secretId', {\n  jsonField: 'password', // optional: key of a JSON field to retrieve (defaults to all content),\n  versionId: 'id',       // optional: id of the version (default AWSCURRENT)\n  versionStage: 'stage', // optional: version stage name (default AWSCURRENT)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 253
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = SecretValue.secretsManager('secretId', {\n  jsonField: 'password', // optional: key of a JSON field to retrieve (defaults to all content),\n  versionId: 'id',       // optional: id of the version (default AWSCURRENT)\n  versionStage: 'stage', // optional: version stage name (default AWSCURRENT)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "b28a570e90acbd51fc7cbebef030ab8327e5b3d09906eedef1e158649cd9c879"
    },
    "f9640aa5487b60508b7324c9e92bd77ddfc75bb4af3b4ea673cb59afeb204772": {
      "translations": {
        "python": {
          "source": "# stack: Stack\n\n\n# Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.format_arn(\n    service=\"lambda\",\n    resource=\"function\",\n    sep=\":\",\n    resource_name=\"MyFunction\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Stack stack;\n\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.FormatArn(new ArnComponents {\n    Service = \"lambda\",\n    Resource = \"function\",\n    Sep = \":\",\n    ResourceName = \"MyFunction\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack stack;\n\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.formatArn(ArnComponents.builder()\n        .service(\"lambda\")\n        .resource(\"function\")\n        .sep(\":\")\n        .resourceName(\"MyFunction\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var stack stack\n\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.formatArn(&arnComponents{\n\tservice: jsii.String(\"lambda\"),\n\tresource: jsii.String(\"function\"),\n\tsep: jsii.String(\":\"),\n\tresourceName: jsii.String(\"MyFunction\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const stack: Stack;\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.formatArn({\n  service: 'lambda',\n  resource: 'function',\n  sep: ':',\n  resourceName: 'MyFunction'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 288
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.formatArn({\n  service: 'lambda',\n  resource: 'function',\n  sep: ':',\n  resourceName: 'MyFunction'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "015c8b459b86dfc3b3ca68c238dc13ade82d23f489cb227b4e6b0d06d3f0db2b"
    },
    "b42c2173b8b5183131dfc7443cb345300700304bee0228d1bc42e667fe08f34a": {
      "translations": {
        "python": {
          "source": "# stack: Stack\n\n\n# Extracts the function name out of an AWS Lambda Function ARN\narn_components = stack.parse_arn(arn, \":\")\nfunction_name = arn_components.resource_name",
          "version": "2"
        },
        "csharp": {
          "source": "Stack stack;\n\n\n// Extracts the function name out of an AWS Lambda Function ARN\nArnComponents arnComponents = stack.ParseArn(arn, \":\");\nstring? functionName = arnComponents.ResourceName;",
          "version": "1"
        },
        "java": {
          "source": "Stack stack;\n\n\n// Extracts the function name out of an AWS Lambda Function ARN\nArnComponents arnComponents = stack.parseArn(arn, \":\");\nString functionName = arnComponents.getResourceName();",
          "version": "1"
        },
        "go": {
          "source": "var stack stack\n\n\n// Extracts the function name out of an AWS Lambda Function ARN\narnComponents := stack.parseArn(arn, jsii.String(\":\"))\nfunctionName := arnComponents.resourceName",
          "version": "1"
        },
        "$": {
          "source": "declare const stack: Stack;\n\n// Extracts the function name out of an AWS Lambda Function ARN\nconst arnComponents = stack.parseArn(arn, ':');\nconst functionName = arnComponents.resourceName;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 305
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.ArnComponents#resourceName",
        "@aws-cdk/core.Stack#parseArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Extracts the function name out of an AWS Lambda Function ARN\nconst arnComponents = stack.parseArn(arn, ':');\nconst functionName = arnComponents.resourceName;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "7852039a7c079e71b0d00f2360fb9523a9b0346061ef34420d3c93251d66f016"
    },
    "13db432093922f2eb52ad4486d8ce81dbd857de38aa4bdb394593d5cc75ba05e": {
      "translations": {
        "python": {
          "source": "# Declare the dependable object\nb_and_c = ConcreteDependable()\nb_and_c.add(construct_b)\nb_and_c.add(construct_c)\n\n# Take the dependency\nconstruct_a.node.add_dependency(b_and_c)",
          "version": "2"
        },
        "csharp": {
          "source": "// Declare the dependable object\nConcreteDependable bAndC = new ConcreteDependable();\nbAndC.Add(constructB);\nbAndC.Add(constructC);\n\n// Take the dependency\nconstructA.Node.AddDependency(bAndC);",
          "version": "1"
        },
        "java": {
          "source": "// Declare the dependable object\nConcreteDependable bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);",
          "version": "1"
        },
        "go": {
          "source": "// Declare the dependable object\nbAndC := NewConcreteDependable()\nbAndC.add(constructB)\nbAndC.add(constructC)\n\n// Take the dependency\nconstructA.node.addDependency(bAndC)",
          "version": "1"
        },
        "$": {
          "source": "// Declare the dependable object\nconst bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 345
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ConcreteDependable",
        "@aws-cdk/core.ConcreteDependable#add",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IConstruct",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Declare the dependable object\nconst bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 12,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "60d52b6e9453e9d2f97f3bd2b82d67fb90fcf8574c15d8c796edc3756c818647"
    },
    "7bfac950863d76e256d55f51f26816dd3a6c65abd2a22a0032d37d635be8211f": {
      "translations": {
        "python": {
          "source": "CustomResource(self, \"MyMagicalResource\",\n    resource_type=\"Custom::MyCustomResource\",  # must start with 'Custom::'\n\n    # the resource properties\n    properties={\n        \"Property1\": \"foo\",\n        \"Property2\": \"bar\"\n    },\n\n    # the ARN of the provider (SNS/Lambda) which handles\n    # CREATE, UPDATE or DELETE events for this resource type\n    # see next section for details\n    service_token=\"ARN\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CustomResource(this, \"MyMagicalResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResource\",  // must start with 'Custom::'\n\n    // the resource properties\n    Properties = new Dictionary<string, object> {\n        { \"Property1\", \"foo\" },\n        { \"Property2\", \"bar\" }\n    },\n\n    // the ARN of the provider (SNS/Lambda) which handles\n    // CREATE, UPDATE or DELETE events for this resource type\n    // see next section for details\n    ServiceToken = \"ARN\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CustomResource.Builder.create(this, \"MyMagicalResource\")\n        .resourceType(\"Custom::MyCustomResource\") // must start with 'Custom::'\n\n        // the resource properties\n        .properties(Map.of(\n                \"Property1\", \"foo\",\n                \"Property2\", \"bar\"))\n\n        // the ARN of the provider (SNS/Lambda) which handles\n        // CREATE, UPDATE or DELETE events for this resource type\n        // see next section for details\n        .serviceToken(\"ARN\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewCustomResource(this, jsii.String(\"MyMagicalResource\"), &customResourceProps{\n\tresourceType: jsii.String(\"Custom::MyCustomResource\"),\n\t // must start with 'Custom::'\n\n\t// the resource properties\n\tproperties: map[string]interface{}{\n\t\t\"Property1\": jsii.String(\"foo\"),\n\t\t\"Property2\": jsii.String(\"bar\"),\n\t},\n\n\t// the ARN of the provider (SNS/Lambda) which handles\n\t// CREATE, UPDATE or DELETE events for this resource type\n\t// see next section for details\n\tserviceToken: jsii.String(\"ARN\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new CustomResource(this, 'MyMagicalResource', {\n  resourceType: 'Custom::MyCustomResource', // must start with 'Custom::'\n\n  // the resource properties\n  properties: {\n    Property1: 'foo',\n    Property2: 'bar'\n  },\n\n  // the ARN of the provider (SNS/Lambda) which handles\n  // CREATE, UPDATE or DELETE events for this resource type\n  // see next section for details\n  serviceToken: 'ARN'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 382
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CustomResource(this, 'MyMagicalResource', {\n  resourceType: 'Custom::MyCustomResource', // must start with 'Custom::'\n\n  // the resource properties\n  properties: {\n    Property1: 'foo',\n    Property2: 'bar'\n  },\n\n  // the ARN of the provider (SNS/Lambda) which handles\n  // CREATE, UPDATE or DELETE events for this resource type\n  // see next section for details\n  serviceToken: 'ARN'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 6,
        "104": 1,
        "193": 2,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "d4449c14149350354688dbeb13836a9e23b50acd9a614c6bc2abacb2ce9a0755"
    },
    "4b6d78a2884fc95e889c812badefd467152e95a67155dedec5738058d99e8a9d": {
      "translations": {
        "python": {
          "source": "def get_or_create(self, scope):\n    stack = Stack.of(scope)\n    uniqueid = \"GloballyUniqueIdForSingleton\" # For example, a UUID from `uuidgen`\n    existing = stack.node.try_find_child(uniqueid)\n    if existing:\n        return existing\n    return sns.Topic(stack, uniqueid)",
          "version": "2"
        },
        "csharp": {
          "source": "public Topic GetOrCreate(Construct scope)\n{\n    Stack stack = Stack.Of(scope);\n    string uniqueid = \"GloballyUniqueIdForSingleton\"; // For example, a UUID from `uuidgen`\n    IConstruct? existing = stack.Node.TryFindChild(uniqueid);\n    if (existing)\n    {\n        return (Topic)existing;\n    }\n    return new Topic(stack, uniqueid);\n}",
          "version": "1"
        },
        "java": {
          "source": "public Topic getOrCreate(Construct scope) {\n    Stack stack = Stack.of(scope);\n    String uniqueid = \"GloballyUniqueIdForSingleton\"; // For example, a UUID from `uuidgen`\n    IConstruct existing = stack.node.tryFindChild(uniqueid);\n    if (existing) {\n        return (Topic)existing;\n    }\n    return new Topic(stack, uniqueid);\n}",
          "version": "1"
        },
        "go": {
          "source": "func getOrCreate(scope *construct) topic {\n\tstack := stack.of(*scope)\n\tuniqueid := \"GloballyUniqueIdForSingleton\" // For example, a UUID from `uuidgen`\n\texisting := stack.node.tryFindChild(uniqueid)\n\tif existing {\n\t\treturn existing.(topic)\n\t}\n\treturn sns.NewTopic(stack, uniqueid)\n}",
          "version": "1"
        },
        "$": {
          "source": "function getOrCreate(scope: Construct): sns.Topic {\n  const stack = Stack.of(scope);\n  const uniqueid = 'GloballyUniqueIdForSingleton'; // For example, a UUID from `uuidgen`\n  const existing = stack.node.tryFindChild(uniqueid);\n  if (existing) {\n    return existing as sns.Topic;\n  }\n  return new sns.Topic(stack, uniqueid);\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 435
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#tryFindChild",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nfunction getOrCreate(scope: Construct): sns.Topic {\n  const stack = Stack.of(scope);\n  const uniqueid = 'GloballyUniqueIdForSingleton'; // For example, a UUID from `uuidgen`\n  const existing = stack.node.tryFindChild(uniqueid);\n  if (existing) {\n    return existing as sns.Topic;\n  }\n  return new sns.Topic(stack, uniqueid);\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 23,
        "153": 2,
        "156": 1,
        "169": 3,
        "194": 4,
        "196": 2,
        "197": 1,
        "217": 1,
        "223": 2,
        "225": 3,
        "227": 1,
        "235": 2,
        "242": 3,
        "243": 3,
        "244": 1
      },
      "fqnsFingerprint": "23f6e98fe49b7d121874d0e1f08c3ad2bdd437ac9efc0d260e96972202391a68"
    },
    "be47c7c07511bebc07c9e2f14a82021b81d683024c7c877b4943e2d7d8d07539": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"MyProvider\")\n\nCustomResource(self, \"MyResource\",\n    service_token=topic.topic_arn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"MyProvider\");\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = topic.TopicArn\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"MyProvider\");\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(topic.getTopicArn())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "topic := sns.NewTopic(this, jsii.String(\"MyProvider\"))\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tserviceToken: topic.topicArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'MyProvider');\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: topic.topicArn\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 456
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'MyProvider');\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: topic.topicArn\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "2511941a12413cb2c3aa18ab3e5f75d43bdcffa1d186f077cf038210f125876d"
    },
    "b2724ba8ef515275d6786b65a9dc76c28423b8e18d6687dd032fbfdc2b6ce718": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyProvider\", function_props)\n\nCustomResource(self, \"MyResource\",\n    service_token=fn.function_arn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyProvider\", functionProps);\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = fn.FunctionArn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = new Function(this, \"MyProvider\", functionProps);\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(fn.getFunctionArn())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fn := lambda.NewFunction(this, jsii.String(\"MyProvider\"), functionProps)\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tserviceToken: fn.functionArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyProvider', functionProps);\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: fn.functionArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 472
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#functionArn",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyProvider', functionProps);\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: fn.functionArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "aad73b81e599bd259cd3431fd2531cf246044f59288b9af0171282bbda6a6d87"
    },
    "3b8a94725b7326d2dcf69af2574a6ec1d996a695154a38d7f469533276fd343a": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "serviceToken := customResourceProvider.getOrCreate(this, jsii.String(\"Custom::MyCustomResourceType\"), &customResourceProviderProps{\n\tcodeDirectory: fmt.Sprintf(\"%v/my-handler\", __dirname),\n\truntime: customResourceProviderRuntime_NODEJS_12_X,\n\tdescription: jsii.String(\"Lambda function created by the custom resource provider\"),\n})\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tresourceType: jsii.String(\"Custom::MyCustomResourceType\"),\n\tserviceToken: serviceToken,\n})",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 493
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b4abce7a92c27a259602e0c8a8c3aaae58c664dac659ebe7888561e1506ea01b"
    },
    "e13c9c048bd1c7530da02f128576ca22fea53a6b901756167df2d9a8088372bc": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Construct, CustomResource, CustomResourceProvider, CustomResourceProviderRuntime, Token\n\nclass Sum(Construct):\n\n    def __init__(self, scope, id, *, lhs, rhs):\n        super().__init__(scope, id)\n\n        resource_type = \"Custom::Sum\"\n        service_token = CustomResourceProvider.get_or_create(self, resource_type,\n            code_directory=f\"{__dirname}/sum-handler\",\n            runtime=CustomResourceProviderRuntime.NODEJS_12_X\n        )\n\n        resource = CustomResource(self, \"Resource\",\n            resource_type=resource_type,\n            service_token=service_token,\n            properties={\n                \"lhs\": lhs,\n                \"rhs\": rhs\n            }\n        )\n\n        self.result = Token.as_number(resource.get_att(\"Result\"))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\nclass SumProps\n{\n    public int Lhs { get; set; }\n    public int Rhs { get; set; }\n}\n\nclass Sum : Construct\n{\n    public int Result { get; }\n\n    public Sum(Construct scope, string id, SumProps props) : base(scope, id)\n    {\n\n        string resourceType = \"Custom::Sum\";\n        string serviceToken = CustomResourceProvider.GetOrCreate(this, resourceType, new CustomResourceProviderProps {\n            CodeDirectory = $\"{__dirname}/sum-handler\",\n            Runtime = CustomResourceProviderRuntime.NODEJS_12_X\n        });\n\n        CustomResource resource = new CustomResource(this, \"Resource\", new CustomResourceProps {\n            ResourceType = resourceType,\n            ServiceToken = serviceToken,\n            Properties = new Dictionary<string, object> {\n                { \"lhs\", props.Lhs },\n                { \"rhs\", props.Rhs }\n            }\n        });\n\n        Result = Token.AsNumber(resource.GetAtt(\"Result\"));\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Construct;\nimport software.amazon.awscdk.core.CustomResource;\nimport software.amazon.awscdk.core.CustomResourceProvider;\nimport software.amazon.awscdk.core.CustomResourceProviderRuntime;\nimport software.amazon.awscdk.core.Token;\n\npublic class SumProps {\n    private Number lhs;\n    public Number getLhs() {\n        return this.lhs;\n    }\n    public SumProps lhs(Number lhs) {\n        this.lhs = lhs;\n        return this;\n    }\n    private Number rhs;\n    public Number getRhs() {\n        return this.rhs;\n    }\n    public SumProps rhs(Number rhs) {\n        this.rhs = rhs;\n        return this;\n    }\n}\n\npublic class Sum extends Construct {\n    public final Number result;\n\n    public Sum(Construct scope, String id, SumProps props) {\n        super(scope, id);\n\n        String resourceType = \"Custom::Sum\";\n        String serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, CustomResourceProviderProps.builder()\n                .codeDirectory(String.format(\"%s/sum-handler\", __dirname))\n                .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n                .build());\n\n        CustomResource resource = CustomResource.Builder.create(this, \"Resource\")\n                .resourceType(resourceType)\n                .serviceToken(serviceToken)\n                .properties(Map.of(\n                        \"lhs\", props.getLhs(),\n                        \"rhs\", props.getRhs()))\n                .build();\n\n        this.result = Token.asNumber(resource.getAtt(\"Result\"));\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import awscdkcore \"github.com/aws-samples/dummy/awscdkcore\"type Construct awscdkcore.Construct\ntype CustomResource awscdkcore.CustomResource\ntype CustomResourceProvider awscdkcore.CustomResourceProvider\ntype CustomResourceProviderRuntime awscdkcore.CustomResourceProviderRuntime\ntype Token awscdkcore.Token\n\ntype sumProps struct {\n\tlhs *f64\n\trhs *f64\n}\n\ntype Sum struct {\n\tconstruct\n\tresult *f64\n}result *f64\n\nfunc NewSum(scope construct, id *string, props sumProps) *Sum {\n\tthis := &Sum{}\n\tnewConstruct_Override(this, scope, id)\n\n\tresourceType := \"Custom::Sum\"\n\tserviceToken := customResourceProvider.getOrCreate(this, resourceType, &customResourceProviderProps{\n\t\tcodeDirectory: fmt.Sprintf(\"%v/sum-handler\", __dirname),\n\t\truntime: customResourceProviderRuntime_NODEJS_12_X,\n\t})\n\n\tresource := NewCustomResource(this, jsii.String(\"Resource\"), &customResourceProps{\n\t\tresourceType: resourceType,\n\t\tserviceToken: serviceToken,\n\t\tproperties: map[string]interface{}{\n\t\t\t\"lhs\": props.lhs,\n\t\t\t\"rhs\": props.rhs,\n\t\t},\n\t})\n\n\tthis.result = token.asNumber(resource.getAtt(jsii.String(\"Result\")))\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import {\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  Token,\n} from '@aws-cdk/core';\n\nexport interface SumProps {\n  readonly lhs: number;\n  readonly rhs: number;\n}\n\nexport class Sum extends Construct {\n  public readonly result: number;\n\n  constructor(scope: Construct, id: string, props: SumProps) {\n    super(scope, id);\n\n    const resourceType = 'Custom::Sum';\n    const serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, {\n      codeDirectory: `${__dirname}/sum-handler`,\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n    });\n\n    const resource = new CustomResource(this, 'Resource', {\n      resourceType: resourceType,\n      serviceToken: serviceToken,\n      properties: {\n        lhs: props.lhs,\n        rhs: props.rhs\n      }\n    });\n\n    this.result = Token.asNumber(resource.getAtt('Result'));\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 568
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResource#getAtt",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "@aws-cdk/core.Token#asNumber",
        "constructs.Construct"
      ],
      "fullSource": "import {\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  Token,\n} from '@aws-cdk/core';\n\nexport interface SumProps {\n  readonly lhs: number;\n  readonly rhs: number;\n}\n\nexport class Sum extends Construct {\n  public readonly result: number;\n\n  constructor(scope: Construct, id: string, props: SumProps) {\n    super(scope, id);\n\n    const resourceType = 'Custom::Sum';\n    const serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, {\n      codeDirectory: `${__dirname}/sum-handler`,\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n    });\n\n    const resource = new CustomResource(this, 'Resource', {\n      resourceType: resourceType,\n      serviceToken: serviceToken,\n      properties: {\n        lhs: props.lhs,\n        rhs: props.rhs\n      }\n    });\n\n    this.result = Token.asNumber(resource.getAtt('Result'));\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "62": 1,
        "75": 46,
        "89": 2,
        "102": 1,
        "104": 3,
        "119": 1,
        "138": 3,
        "140": 3,
        "143": 1,
        "156": 3,
        "158": 2,
        "159": 1,
        "162": 1,
        "169": 2,
        "193": 3,
        "194": 7,
        "196": 4,
        "197": 1,
        "209": 1,
        "211": 1,
        "216": 1,
        "221": 1,
        "223": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "245": 1,
        "246": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 5,
        "279": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "7ecdceae80c0d9e17937c046d13067c5d03a4059b7ff783b09dcf440af3c92b9"
    },
    "954c0bf18f9e3f2693c3bb9a78982f419c03294b0b3aa317b03423c5e68c95ab": {
      "translations": {
        "python": {
          "source": "sum = Sum(self, \"MySum\", lhs=40, rhs=2)\nCfnOutput(self, \"Result\", value=Token.as_string(sum.result))",
          "version": "2"
        },
        "csharp": {
          "source": "Sum sum = new Sum(this, \"MySum\", new SumProps { Lhs = 40, Rhs = 2 });\nnew CfnOutput(this, \"Result\", new CfnOutputProps { Value = Token.AsString(sum.Result) });",
          "version": "1"
        },
        "java": {
          "source": "Sum sum = new Sum(this, \"MySum\", new SumProps().lhs(40).rhs(2));\nCfnOutput.Builder.create(this, \"Result\").value(Token.asString(sum.getResult())).build();",
          "version": "1"
        },
        "go": {
          "source": "sum := NewSum(this, jsii.String(\"MySum\"), &sumProps{\n\tlhs: jsii.Number(40),\n\trhs: jsii.Number(2),\n})\nNewCfnOutput(this, jsii.String(\"Result\"), &cfnOutputProps{\n\tvalue: token.asString(sum.result),\n})",
          "version": "1"
        },
        "$": {
          "source": "const sum = new Sum(this, 'MySum', { lhs: 40, rhs: 2 });\nnew CfnOutput(this, 'Result', { value: Token.asString(sum.result) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 610
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Token#asString",
        "constructs.Construct"
      ],
      "fullSource": "import { CfnOutput, Construct, Token } from '@aws-cdk/core';\n\ndeclare interface SumProps {\n  readonly lhs: number;\n  readonly rhs: number;\n}\ndeclare class Sum extends Construct {\n  public readonly result: number;\n  constructor(scope: Construct, id: string, props: SumProps);\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sum = new Sum(this, 'MySum', { lhs: 40, rhs: 2 });\nnew CfnOutput(this, 'Result', { value: Token.asString(sum.result) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 10,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "f75658f0cd9e10535b4ab38df5595c3b5c00bb061d741a0a2c2541d355466679"
    },
    "d2c649add2ba7ba9c8e59002769222d324235c7c758f020c491ea55603a5105a": {
      "translations": {
        "python": {
          "source": "provider = CustomResourceProvider.get_or_create_provider(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X\n)\n\nrole_arn = provider.role_arn",
          "version": "2"
        },
        "csharp": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.GetOrCreateProvider(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X\n});\n\nstring roleArn = provider.RoleArn;",
          "version": "1"
        },
        "java": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.getOrCreateProvider(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .build());\n\nString roleArn = provider.getRoleArn();",
          "version": "1"
        },
        "go": {
          "source": "provider := customResourceProvider.getOrCreateProvider(this, jsii.String(\"Custom::MyCustomResourceType\"), &customResourceProviderProps{\n\tcodeDirectory: fmt.Sprintf(\"%v/my-handler\", __dirname),\n\truntime: customResourceProviderRuntime_NODEJS_12_X,\n})\n\nroleArn := provider.roleArn",
          "version": "1"
        },
        "$": {
          "source": "const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n});\n\nconst roleArn = provider.roleArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 618
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResourceProvider",
        "@aws-cdk/core.CustomResourceProvider#getOrCreateProvider",
        "@aws-cdk/core.CustomResourceProvider#roleArn",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n});\n\nconst roleArn = provider.roleArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "15": 1,
        "17": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "211": 1,
        "221": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "d54aa08015b05a40aa3d61d24b2261357cf3bdd916f98325cc7d7fde1054daaf"
    },
    "6df06107f412d50cc6d9deae0961bf09bd25b1bd32fd70f5bf103e9e6a9e5772": {
      "translations": {
        "python": {
          "source": "provider = customresources.Provider(self, \"MyProvider\",\n    on_event_handler=on_event_handler,\n    is_complete_handler=is_complete_handler\n)\n\nCustomResource(self, \"MyResource\",\n    service_token=provider.service_token\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Provider provider = new Provider(this, \"MyProvider\", new ProviderProps {\n    OnEventHandler = onEventHandler,\n    IsCompleteHandler = isCompleteHandler\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = provider.ServiceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "Provider provider = Provider.Builder.create(this, \"MyProvider\")\n        .onEventHandler(onEventHandler)\n        .isCompleteHandler(isCompleteHandler)\n        .build();\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(provider.getServiceToken())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "provider := customresources.NewProvider(this, jsii.String(\"MyProvider\"), &providerProps{\n\tonEventHandler: onEventHandler,\n\tisCompleteHandler: isCompleteHandler,\n})\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tserviceToken: provider.serviceToken,\n})",
          "version": "1"
        },
        "$": {
          "source": "const provider = new customresources.Provider(this, 'MyProvider', {\n  onEventHandler,\n  isCompleteHandler, // optional async waiter\n});\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: provider.serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 644
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/custom-resources.Provider",
        "@aws-cdk/custom-resources.Provider#serviceToken",
        "@aws-cdk/custom-resources.ProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new customresources.Provider(this, 'MyProvider', {\n  onEventHandler,\n  isCompleteHandler, // optional async waiter\n});\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: provider.serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "282": 2
      },
      "fqnsFingerprint": "5a3442c42d3586145cea1310b071b4f7eb82705e2cb4b03d03fb64aeb32687ff"
    },
    "aea36e487ba712adcdb1e51c9d87e469a6eb49d056ce8fc94b3fc6c18ba4e2cf": {
      "translations": {
        "python": {
          "source": "CfnOutput(self, \"OutputName\",\n    value=my_bucket.bucket_name,\n    description=\"The name of an S3 bucket\",  # Optional\n    export_name=\"TheAwesomeBucket\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnOutput(this, \"OutputName\", new CfnOutputProps {\n    Value = myBucket.BucketName,\n    Description = \"The name of an S3 bucket\",  // Optional\n    ExportName = \"TheAwesomeBucket\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnOutput.Builder.create(this, \"OutputName\")\n        .value(myBucket.getBucketName())\n        .description(\"The name of an S3 bucket\") // Optional\n        .exportName(\"TheAwesomeBucket\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewCfnOutput(this, jsii.String(\"OutputName\"), &cfnOutputProps{\n\tvalue: myBucket.bucketName,\n\tdescription: jsii.String(\"The name of an S3 bucket\"),\n\t // Optional\n\texportName: jsii.String(\"TheAwesomeBucket\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new CfnOutput(this, 'OutputName', {\n  value: myBucket.bucketName,\n  description: 'The name of an S3 bucket', // Optional\n  exportName: 'TheAwesomeBucket', // Registers a CloudFormation export named \"TheAwesomeBucket\"\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 668
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.IBucket#bucketName",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnOutput(this, 'OutputName', {\n  value: myBucket.bucketName,\n  description: 'The name of an S3 bucket', // Optional\n  exportName: 'TheAwesomeBucket', // Registers a CloudFormation export named \"TheAwesomeBucket\"\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "1975be55c0c5aae0090ac1ce656782f78101bb48560241a73e632df69225556d"
    },
    "2379d36955183b01533c028bef82419cc5f787a768624bb59dc27bb426025c08": {
      "translations": {
        "python": {
          "source": "CfnParameter(self, \"MyParameter\",\n    type=\"Number\",\n    default=1337\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnParameter(this, \"MyParameter\", new CfnParameterProps {\n    Type = \"Number\",\n    Default = 1337\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter.Builder.create(this, \"MyParameter\")\n        .type(\"Number\")\n        .default(1337)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewCfnParameter(this, jsii.String(\"MyParameter\"), &cfnParameterProps{\n\ttype: jsii.String(\"Number\"),\n\tdefault: jsii.Number(1337),\n})",
          "version": "1"
        },
        "$": {
          "source": "new CfnParameter(this, 'MyParameter', {\n  type: 'Number',\n  default: 1337,\n  // See the API reference for more configuration props\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 689
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.CfnParameterProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnParameter(this, 'MyParameter', {\n  type: 'Number',\n  default: 1337,\n  // See the API reference for more configuration props\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "859682f60fafd9341416a413502f283dcedee74cf210472ecca2905f9e305d28"
    },
    "45cb4ebe46150ce88985af3a01c5a439791d8cf3eb770d191d5f298913cf93e8": {
      "translations": {
        "python": {
          "source": "param = CfnParameter(self, \"ParameterName\")\n\n# If the parameter is a String\nparam.value_as_string\n\n# If the parameter is a Number\nparam.value_as_number\n\n# If the parameter is a List\nparam.value_as_list",
          "version": "2"
        },
        "csharp": {
          "source": "CfnParameter param = new CfnParameter(this, \"ParameterName\", new CfnParameterProps { });\n\n// If the parameter is a String\nparam.ValueAsString;\n\n// If the parameter is a Number\nparam.ValueAsNumber;\n\n// If the parameter is a List\nparam.ValueAsList;",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter param = CfnParameter.Builder.create(this, \"ParameterName\").build();\n\n// If the parameter is a String\nparam.getValueAsString();\n\n// If the parameter is a Number\nparam.getValueAsNumber();\n\n// If the parameter is a List\nparam.getValueAsList();",
          "version": "1"
        },
        "go": {
          "source": "param := NewCfnParameter(this, jsii.String(\"ParameterName\"), &cfnParameterProps{\n})\n\n// If the parameter is a String\nparam.valueAsString\n\n// If the parameter is a Number\nparam.valueAsNumber\n\n// If the parameter is a List\nparam.valueAsList",
          "version": "1"
        },
        "$": {
          "source": "const param = new CfnParameter(this, 'ParameterName', { /* config */ });\n\n// If the parameter is a String\nparam.valueAsString;\n\n// If the parameter is a Number\nparam.valueAsNumber;\n\n// If the parameter is a List\nparam.valueAsList;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 702
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.CfnParameterProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst param = new CfnParameter(this, 'ParameterName', { /* config */ });\n\n// If the parameter is a String\nparam.valueAsString;\n\n// If the parameter is a Number\nparam.valueAsNumber;\n\n// If the parameter is a List\nparam.valueAsList;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "859682f60fafd9341416a413502f283dcedee74cf210472ecca2905f9e305d28"
    },
    "43348eebfa275f04900ac01c31394a3af0d9ec7002719f988a3f7c5a27418c5d": {
      "translations": {
        "python": {
          "source": "# \"this\" is the current construct\nstack = Stack.of(self)\n\nstack.account # Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.region # Returns the AWS::Region for this stack (or the literal value if known)\nstack.partition",
          "version": "2"
        },
        "csharp": {
          "source": "// \"this\" is the current construct\nStack stack = Stack.Of(this);\n\nstack.Account; // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.Region; // Returns the AWS::Region for this stack (or the literal value if known)\nstack.Partition;",
          "version": "1"
        },
        "java": {
          "source": "// \"this\" is the current construct\nStack stack = Stack.of(this);\n\nstack.getAccount(); // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.getRegion(); // Returns the AWS::Region for this stack (or the literal value if known)\nstack.getPartition();",
          "version": "1"
        },
        "go": {
          "source": "// \"this\" is the current construct\nstack := stack.of(this)\n\nstack.account // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.region // Returns the AWS::Region for this stack (or the literal value if known)\nstack.partition",
          "version": "1"
        },
        "$": {
          "source": "// \"this\" is the current construct\nconst stack = Stack.of(this);\n\nstack.account; // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.region;  // Returns the AWS::Region for this stack (or the literal value if known)\nstack.partition;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 727
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.IConstruct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// \"this\" is the current construct\nconst stack = Stack.of(this);\n\nstack.account; // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.region;  // Returns the AWS::Region for this stack (or the literal value if known)\nstack.partition;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "104": 1,
        "194": 4,
        "196": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "0a9d78ebe7626cf418eeac844be32c8c4a1d7b6145c2afcbdbcc6738c8affe5c"
    },
    "743a3474ce7a780d6fc19b006fd88ead76eae9ab838dbdcfb71f2b9aa21410c1": {
      "translations": {
        "python": {
          "source": "raw_bucket = s3.CfnBucket(self, \"Bucket\")\n# -or-\nraw_bucket_alt = my_bucket.node.default_child\n\n# then\nraw_bucket.cfn_options.condition = CfnCondition(self, \"EnableBucket\")\nraw_bucket.cfn_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "2"
        },
        "csharp": {
          "source": "CfnBucket rawBucket = new CfnBucket(this, \"Bucket\", new CfnBucketProps { });\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.Node.DefaultChild;\n\n// then\nrawBucket.CfnOptions.Condition = new CfnCondition(this, \"EnableBucket\", new CfnConditionProps { });\nrawBucket.CfnOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "CfnBucket rawBucket = CfnBucket.Builder.create(this, \"Bucket\").build();\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.getNode().getDefaultChild();\n\n// then\nrawBucket.getCfnOptions().getCondition() = CfnCondition.Builder.create(this, \"EnableBucket\").build();\nrawBucket.getCfnOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "go": {
          "source": "rawBucket := s3.NewCfnBucket(this, jsii.String(\"Bucket\"), &cfnBucketProps{\n})\n// -or-\nrawBucketAlt := myBucket.node.defaultChild.(cfnBucket)\n\n// then\nrawBucket.cfnOptions.condition = NewCfnCondition(this, jsii.String(\"EnableBucket\"), &cfnConditionProps{\n})\nrawBucket.cfnOptions.metadata = map[string]interface{}{\n\t\"metadataKey\": jsii.String(\"MetadataValue\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 744
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.CfnBucketProps",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.ICfnResourceOptions#metadata",
        "@aws-cdk/core.IConstruct#node",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "62": 2,
        "75": 17,
        "104": 2,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "197": 2,
        "209": 2,
        "217": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "8cfa6d22d7e3fb9050eac6b342fc8b118ea2fa99814465cd9c5ff2b7bc2c8ba5"
    },
    "a574d1d7bb4c0588e68522be72e12fc084d25ef9e41de5213ee53e9ec8af1abc": {
      "translations": {
        "python": {
          "source": "resource_a = CfnResource(self, \"ResourceA\", resource_props)\nresource_b = CfnResource(self, \"ResourceB\", resource_props)\n\nresource_b.add_depends_on(resource_a)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnResource resourceA = new CfnResource(this, \"ResourceA\", resourceProps);\nCfnResource resourceB = new CfnResource(this, \"ResourceB\", resourceProps);\n\nresourceB.AddDependsOn(resourceA);",
          "version": "1"
        },
        "java": {
          "source": "CfnResource resourceA = new CfnResource(this, \"ResourceA\", resourceProps);\nCfnResource resourceB = new CfnResource(this, \"ResourceB\", resourceProps);\n\nresourceB.addDependsOn(resourceA);",
          "version": "1"
        },
        "go": {
          "source": "resourceA := NewCfnResource(this, jsii.String(\"ResourceA\"), resourceProps)\nresourceB := NewCfnResource(this, jsii.String(\"ResourceB\"), resourceProps)\n\nresourceB.addDependsOn(resourceA)",
          "version": "1"
        },
        "$": {
          "source": "const resourceA = new CfnResource(this, 'ResourceA', resourceProps);\nconst resourceB = new CfnResource(this, 'ResourceB', resourceProps);\n\nresourceB.addDependsOn(resourceA);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 759
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResource#addDependsOn",
        "@aws-cdk/core.CfnResourceProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst resourceA = new CfnResource(this, 'ResourceA', resourceProps);\nconst resourceB = new CfnResource(this, 'ResourceB', resourceProps);\n\nresourceB.addDependsOn(resourceA);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "194": 1,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "64508c4e345dff3683eef954f3f5fa8108ac2b180d75655c6f0f6dcbad86686e"
    },
    "f00fce89f15f7de0a573335fb5c1757419246feccb22834f900709e305ddeb57": {
      "translations": {
        "python": {
          "source": "# To use Fn::Base64\nFn.base64(\"SGVsbG8gQ0RLIQo=\")\n\n# To compose condition expressions:\nenvironment_parameter = CfnParameter(self, \"Environment\")\nFn.condition_and(\n    # The \"Environment\" CloudFormation template parameter evaluates to \"Production\"\n    Fn.condition_equals(\"Production\", environment_parameter),\n    # The AWS::Region pseudo-parameter value is NOT equal to \"us-east-1\"\n    Fn.condition_not(Fn.condition_equals(\"us-east-1\", Aws.REGION)))",
          "version": "2"
        },
        "csharp": {
          "source": "// To use Fn::Base64\nFn.Base64(\"SGVsbG8gQ0RLIQo=\");\n\n// To compose condition expressions:\nCfnParameter environmentParameter = new CfnParameter(this, \"Environment\");\nFn.ConditionAnd(Fn.ConditionEquals(\"Production\", environmentParameter), Fn.ConditionNot(Fn.ConditionEquals(\"us-east-1\", Aws.REGION)));",
          "version": "1"
        },
        "java": {
          "source": "// To use Fn::Base64\nFn.base64(\"SGVsbG8gQ0RLIQo=\");\n\n// To compose condition expressions:\nCfnParameter environmentParameter = new CfnParameter(this, \"Environment\");\nFn.conditionAnd(Fn.conditionEquals(\"Production\", environmentParameter), Fn.conditionNot(Fn.conditionEquals(\"us-east-1\", Aws.REGION)));",
          "version": "1"
        },
        "go": {
          "source": "// To use Fn::Base64\nfn.base64(jsii.String(\"SGVsbG8gQ0RLIQo=\"))\n\n// To compose condition expressions:\nenvironmentParameter := NewCfnParameter(this, jsii.String(\"Environment\"))\nfn.conditionAnd(fn.conditionEquals(jsii.String(\"Production\"), environmentParameter), fn.conditionNot(fn.conditionEquals(jsii.String(\"us-east-1\"), aws_REGION())))",
          "version": "1"
        },
        "$": {
          "source": "// To use Fn::Base64\nFn.base64('SGVsbG8gQ0RLIQo=');\n\n// To compose condition expressions:\nconst environmentParameter = new CfnParameter(this, 'Environment');\nFn.conditionAnd(\n  // The \"Environment\" CloudFormation template parameter evaluates to \"Production\"\n  Fn.conditionEquals('Production', environmentParameter),\n  // The AWS::Region pseudo-parameter value is NOT equal to \"us-east-1\"\n  Fn.conditionNot(Fn.conditionEquals('us-east-1', Aws.REGION)),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 774
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.Fn#base64",
        "@aws-cdk/core.Fn#conditionAnd",
        "@aws-cdk/core.Fn#conditionEquals",
        "@aws-cdk/core.Fn#conditionNot",
        "@aws-cdk/core.ICfnConditionExpression",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// To use Fn::Base64\nFn.base64('SGVsbG8gQ0RLIQo=');\n\n// To compose condition expressions:\nconst environmentParameter = new CfnParameter(this, 'Environment');\nFn.conditionAnd(\n  // The \"Environment\" CloudFormation template parameter evaluates to \"Production\"\n  Fn.conditionEquals('Production', environmentParameter),\n  // The AWS::Region pseudo-parameter value is NOT equal to \"us-east-1\"\n  Fn.conditionNot(Fn.conditionEquals('us-east-1', Aws.REGION)),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 1,
        "194": 6,
        "196": 5,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "ead323933733cda306f69f05b69de5ea5a3c2570def3f3aef6eda0f1bf3f9e8d"
    },
    "f9e3865082204cd22c77e1512bd97ba84daf98a82869fac80355681118eeef54": {
      "translations": {
        "python": {
          "source": "environment_parameter = CfnParameter(self, \"Environment\")\nis_prod = CfnCondition(self, \"IsProduction\",\n    expression=Fn.condition_equals(\"Production\", environment_parameter)\n)\n\n# Configuration value that is a different string based on IsProduction\nstage = Fn.condition_if(is_prod.logical_id, \"Beta\", \"Prod\").to_string()\n\n# Make Bucket creation condition to IsProduction by accessing\n# and overriding the CloudFormation resource\nbucket = s3.Bucket(self, \"Bucket\")\ncfn_bucket = my_bucket.node.default_child\ncfn_bucket.cfn_options.condition = is_prod",
          "version": "2"
        },
        "csharp": {
          "source": "CfnParameter environmentParameter = new CfnParameter(this, \"Environment\");\nCfnCondition isProd = new CfnCondition(this, \"IsProduction\", new CfnConditionProps {\n    Expression = Fn.ConditionEquals(\"Production\", environmentParameter)\n});\n\n// Configuration value that is a different string based on IsProduction\nstring stage = Fn.ConditionIf(isProd.LogicalId, \"Beta\", \"Prod\").ToString();\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nBucket bucket = new Bucket(this, \"Bucket\");\nCfnBucket cfnBucket = (CfnBucket)myBucket.Node.DefaultChild;\ncfnBucket.CfnOptions.Condition = isProd;",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter environmentParameter = new CfnParameter(this, \"Environment\");\nCfnCondition isProd = CfnCondition.Builder.create(this, \"IsProduction\")\n        .expression(Fn.conditionEquals(\"Production\", environmentParameter))\n        .build();\n\n// Configuration value that is a different string based on IsProduction\nString stage = Fn.conditionIf(isProd.logicalId, \"Beta\", \"Prod\").toString();\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nBucket bucket = new Bucket(this, \"Bucket\");\nCfnBucket cfnBucket = (CfnBucket)myBucket.getNode().getDefaultChild();\ncfnBucket.getCfnOptions().getCondition() = isProd;",
          "version": "1"
        },
        "go": {
          "source": "environmentParameter := NewCfnParameter(this, jsii.String(\"Environment\"))\nisProd := NewCfnCondition(this, jsii.String(\"IsProduction\"), &cfnConditionProps{\n\texpression: fn.conditionEquals(jsii.String(\"Production\"), environmentParameter),\n})\n\n// Configuration value that is a different string based on IsProduction\nstage := fn.conditionIf(isProd.logicalId, jsii.String(\"Beta\"), jsii.String(\"Prod\")).toString()\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\ncfnBucket := myBucket.node.defaultChild.(cfnBucket)\ncfnBucket.cfnOptions.condition = isProd",
          "version": "1"
        },
        "$": {
          "source": "const environmentParameter = new CfnParameter(this, 'Environment');\nconst isProd = new CfnCondition(this, 'IsProduction', {\n  expression: Fn.conditionEquals('Production', environmentParameter),\n});\n\n// Configuration value that is a different string based on IsProduction\nconst stage = Fn.conditionIf(isProd.logicalId, 'Beta', 'Prod').toString();\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nconst bucket = new s3.Bucket(this, 'Bucket');\nconst cfnBucket = myBucket.node.defaultChild as s3.CfnBucket;\ncfnBucket.cfnOptions.condition = isProd;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 794
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnElement#logicalId",
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Fn#conditionEquals",
        "@aws-cdk/core.Fn#conditionIf",
        "@aws-cdk/core.ICfnConditionExpression",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.IConstruct#node",
        "@aws-cdk/core.IResolvable#toString",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst environmentParameter = new CfnParameter(this, 'Environment');\nconst isProd = new CfnCondition(this, 'IsProduction', {\n  expression: Fn.conditionEquals('Production', environmentParameter),\n});\n\n// Configuration value that is a different string based on IsProduction\nconst stage = Fn.conditionIf(isProd.logicalId, 'Beta', 'Prod').toString();\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nconst bucket = new s3.Bucket(this, 'Bucket');\nconst cfnBucket = myBucket.node.defaultChild as s3.CfnBucket;\ncfnBucket.cfnOptions.condition = isProd;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "62": 1,
        "75": 27,
        "104": 3,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 9,
        "196": 3,
        "197": 3,
        "209": 1,
        "217": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 1
      },
      "fqnsFingerprint": "9ded308ca32553ec01fcd5ae7c045c2c32c0ca0ff9060267c3802d02ab77b3f4"
    },
    "26740b928affc7221c8036d5547e6f169f2cd6ef18c4f549891a1e1febcd715a": {
      "translations": {
        "python": {
          "source": "region_table = CfnMapping(self, \"RegionTable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"US East (N. Virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"US East (Ohio)\"\n        }\n    }\n)\n\nregion_table.find_in_map(Aws.REGION, \"regionName\")",
          "version": "2"
        },
        "csharp": {
          "source": "CfnMapping regionTable = new CfnMapping(this, \"RegionTable\", new CfnMappingProps {\n    Mapping = new Dictionary<string, IDictionary<string, object>> {\n        { \"us-east-1\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (N. Virginia)\" }\n        } },\n        { \"us-east-2\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (Ohio)\" }\n        } }\n    }\n});\n\nregionTable.FindInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable = CfnMapping.Builder.create(this, \"RegionTable\")\n        .mapping(Map.of(\n                \"us-east-1\", Map.of(\n                        \"regionName\", \"US East (N. Virginia)\"),\n                \"us-east-2\", Map.of(\n                        \"regionName\", \"US East (Ohio)\")))\n        .build();\n\nregionTable.findInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "go": {
          "source": "regionTable := NewCfnMapping(this, jsii.String(\"RegionTable\"), &cfnMappingProps{\n\tmapping: map[string]map[string]interface{}{\n\t\t\"us-east-1\": map[string]interface{}{\n\t\t\t\"regionName\": jsii.String(\"US East (N. Virginia)\"),\n\t\t},\n\t\t\"us-east-2\": map[string]interface{}{\n\t\t\t\"regionName\": jsii.String(\"US East (Ohio)\"),\n\t\t},\n\t},\n})\n\nregionTable.findInMap(aws_REGION(), jsii.String(\"regionName\"))",
          "version": "1"
        },
        "$": {
          "source": "const regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 817
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnMapping",
        "@aws-cdk/core.CfnMapping#findInMap",
        "@aws-cdk/core.CfnMappingProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "193": 4,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b8c198f00c68f006d5e029ed547e3c07e2387b2cfb2d7b1f184a50b8d85fff3d"
    },
    "1186f91c8d3e58dd113dc451d044c32513fcf9ad338c7379f0d14ecb71a0be18": {
      "translations": {
        "python": {
          "source": "region_table = CfnMapping(self, \"RegionTable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"US East (N. Virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"US East (Ohio)\"\n        }\n    },\n    lazy=True\n)\n\nregion_table.find_in_map(\"us-east-2\", \"regionName\")",
          "version": "2"
        },
        "csharp": {
          "source": "CfnMapping regionTable = new CfnMapping(this, \"RegionTable\", new CfnMappingProps {\n    Mapping = new Dictionary<string, IDictionary<string, object>> {\n        { \"us-east-1\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (N. Virginia)\" }\n        } },\n        { \"us-east-2\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (Ohio)\" }\n        } }\n    },\n    Lazy = true\n});\n\nregionTable.FindInMap(\"us-east-2\", \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable = CfnMapping.Builder.create(this, \"RegionTable\")\n        .mapping(Map.of(\n                \"us-east-1\", Map.of(\n                        \"regionName\", \"US East (N. Virginia)\"),\n                \"us-east-2\", Map.of(\n                        \"regionName\", \"US East (Ohio)\")))\n        .lazy(true)\n        .build();\n\nregionTable.findInMap(\"us-east-2\", \"regionName\");",
          "version": "1"
        },
        "go": {
          "source": "regionTable := NewCfnMapping(this, jsii.String(\"RegionTable\"), &cfnMappingProps{\n\tmapping: map[string]map[string]interface{}{\n\t\t\"us-east-1\": map[string]interface{}{\n\t\t\t\"regionName\": jsii.String(\"US East (N. Virginia)\"),\n\t\t},\n\t\t\"us-east-2\": map[string]interface{}{\n\t\t\t\"regionName\": jsii.String(\"US East (Ohio)\"),\n\t\t},\n\t},\n\tlazy: jsii.Boolean(true),\n})\n\nregionTable.findInMap(jsii.String(\"us-east-2\"), jsii.String(\"regionName\"))",
          "version": "1"
        },
        "$": {
          "source": "const regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n    },\n  },\n  lazy: true,\n});\n\nregionTable.findInMap('us-east-2', 'regionName');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 855
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnMapping",
        "@aws-cdk/core.CfnMapping#findInMap",
        "@aws-cdk/core.CfnMappingProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n    },\n  },\n  lazy: true,\n});\n\nregionTable.findInMap('us-east-2', 'regionName');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 8,
        "104": 1,
        "106": 1,
        "193": 4,
        "194": 1,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "b752648f6fa8fb4aeb22a9dcfb87014877f84e2eb9cf5bebcf291947840cd9a8"
    },
    "8f3054278b516b2c4fbb09affeaf75ac3f95a0b825a4c08372cb669337dc9014": {
      "translations": {
        "python": {
          "source": "# region_table: CfnMapping\n\n\nregion_table.find_in_map(Aws.REGION, \"regionName\")",
          "version": "2"
        },
        "csharp": {
          "source": "CfnMapping regionTable;\n\n\nregionTable.FindInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable;\n\n\nregionTable.findInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "go": {
          "source": "var regionTable cfnMapping\n\n\nregionTable.findInMap(aws_REGION(), jsii.String(\"regionName\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const regionTable: CfnMapping;\n\nregionTable.findInMap(Aws.REGION, 'regionName');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 875
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnMapping#findInMap"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const regionTable: CfnMapping;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nregionTable.findInMap(Aws.REGION, 'regionName');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "130": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "23a518dfddb77a9405baee4b90414ef94913d4f2cf1c348f54d4ca99201ce8ae"
    },
    "b11ec1fc09d40bf3e2a16bdee344c7d39cded5a2f582a6521479634b3ddbf3b1": {
      "translations": {
        "python": {
          "source": "CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\")",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "java": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "go": {
          "source": "NewCfnDynamicReference(cfnDynamicReferenceService_SECRETS_MANAGER, jsii.String(\"secret-id:secret-string:json-key:version-stage:version-id\"))",
          "version": "1"
        },
        "$": {
          "source": "new CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 889
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnDynamicReference",
        "@aws-cdk/core.CfnDynamicReferenceService",
        "@aws-cdk/core.CfnDynamicReferenceService#SECRETS_MANAGER"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "194": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "50faf7f433413a0a5f352d7c4f0ee7d8d8400d9623b030a2777e1a1262496645"
    },
    "45cb2eeb92ba296ae65e732c2ddce191a17423b83e03af36e40fd63742efbc9d": {
      "translations": {
        "python": {
          "source": "stack = Stack(app, \"StackName\")\n\nstack.template_options.description = \"This will appear in the AWS console\"\nstack.template_options.transforms = [\"AWS::Serverless-2016-10-31\"]\nstack.template_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "2"
        },
        "csharp": {
          "source": "Stack stack = new Stack(app, \"StackName\");\n\nstack.TemplateOptions.Description = \"This will appear in the AWS console\";\nstack.TemplateOptions.Transforms = new [] { \"AWS::Serverless-2016-10-31\" };\nstack.TemplateOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "Stack stack = new Stack(app, \"StackName\");\n\nstack.getTemplateOptions().getDescription() = \"This will appear in the AWS console\";\nstack.getTemplateOptions().getTransforms() = List.of(\"AWS::Serverless-2016-10-31\");\nstack.getTemplateOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "go": {
          "source": "stack := NewStack(app, jsii.String(\"StackName\"))\n\nstack.templateOptions.description = \"This will appear in the AWS console\"\nstack.templateOptions.transforms = []*string{\n\t\"AWS::Serverless-2016-10-31\",\n}\nstack.templateOptions.metadata = map[string]interface{}{\n\t\"metadataKey\": jsii.String(\"MetadataValue\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "const stack = new Stack(app, 'StackName');\n\nstack.templateOptions.description = 'This will appear in the AWS console';\nstack.templateOptions.transforms = ['AWS::Serverless-2016-10-31'];\nstack.templateOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 904
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ITemplateOptions#description",
        "@aws-cdk/core.ITemplateOptions#metadata",
        "@aws-cdk/core.ITemplateOptions#transforms",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#templateOptions",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stack = new Stack(app, 'StackName');\n\nstack.templateOptions.description = 'This will appear in the AWS console';\nstack.templateOptions.transforms = ['AWS::Serverless-2016-10-31'];\nstack.templateOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "62": 3,
        "75": 13,
        "192": 1,
        "193": 1,
        "194": 6,
        "197": 1,
        "209": 3,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "ce8c6b7a99f4461806415951ba862c2fb9a7a79d7b5629b27c44743196365693"
    },
    "84588283cb998e1bff9452e6f0c66c58aef39819825b2cd75155d3c40cf4a20b": {
      "translations": {
        "python": {
          "source": "CfnResource(self, \"ResourceId\",\n    type=\"AWS::S3::Bucket\",\n    properties={\n        \"BucketName\": \"bucket-name\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnResource(this, \"ResourceId\", new CfnResourceProps {\n    Type = \"AWS::S3::Bucket\",\n    Properties = new Dictionary<string, object> {\n        { \"BucketName\", \"bucket-name\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnResource.Builder.create(this, \"ResourceId\")\n        .type(\"AWS::S3::Bucket\")\n        .properties(Map.of(\n                \"BucketName\", \"bucket-name\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewCfnResource(this, jsii.String(\"ResourceId\"), &cfnResourceProps{\n\ttype: jsii.String(\"AWS::S3::Bucket\"),\n\tproperties: map[string]interface{}{\n\t\t\"BucketName\": jsii.String(\"bucket-name\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new CfnResource(this, 'ResourceId', {\n  type: 'AWS::S3::Bucket',\n  properties: {\n    BucketName: 'bucket-name'\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 921
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnResource(this, 'ResourceId', {\n  type: 'AWS::S3::Bucket',\n  properties: {\n    BucketName: 'bucket-name'\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "104": 1,
        "193": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "b4160c299e01e5c1d5fcfbe167431027da3b4d2c4823a86294562e386232e0f0"
    },
    "a87f0e34089cf78a2be78018e5d34d7fd1aa460d051c6832afca7aa707580b6d": {
      "translations": {
        "python": {
          "source": "CfnInclude(self, \"ID\",\n    template={\n        \"Resources\": {\n            \"Bucket\": {\n                \"Type\": \"AWS::S3::Bucket\",\n                \"Properties\": {\n                    \"BucketName\": \"my-shiny-bucket\"\n                }\n            }\n        }\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnInclude(this, \"ID\", new CfnIncludeProps {\n    Template = new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n        { \"Resources\", new Struct {\n            Bucket = new Struct {\n                Type = \"AWS::S3::Bucket\",\n                Properties = new Struct {\n                    BucketName = \"my-shiny-bucket\"\n                }\n            }\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude.Builder.create(this, \"ID\")\n        .template(Map.of(\n                \"Resources\", Map.of(\n                        \"Bucket\", Map.of(\n                                \"Type\", \"AWS::S3::Bucket\",\n                                \"Properties\", Map.of(\n                                        \"BucketName\", \"my-shiny-bucket\")))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewCfnInclude(this, jsii.String(\"ID\"), &cfnIncludeProps{\n\ttemplate: map[string]map[string]map[string]interface{}{\n\t\t\"Resources\": map[string]map[string]interface{}{\n\t\t\t\"Bucket\": map[string]interface{}{\n\t\t\t\t\"Type\": jsii.String(\"AWS::S3::Bucket\"),\n\t\t\t\t\"Properties\": map[string]*string{\n\t\t\t\t\t\"BucketName\": jsii.String(\"my-shiny-bucket\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 942
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnInclude",
        "@aws-cdk/core.CfnIncludeProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "193": 5,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "ee7c3d04cdafc83cee5e505a690b1ec4244c338b7ea52ecd65c437e69172db2b"
    },
    "0c89447566dbdf5f2cb3a4c9fe1b34c79a1bbfa59507d70a2d1b7c5752195371": {
      "translations": {
        "python": {
          "source": "stack = Stack(app, \"StackName\",\n    termination_protection=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Stack stack = new Stack(app, \"StackName\", new StackProps {\n    TerminationProtection = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack stack = Stack.Builder.create(app, \"StackName\")\n        .terminationProtection(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "stack := NewStack(app, jsii.String(\"StackName\"), &stackProps{\n\tterminationProtection: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const stack = new Stack(app, 'StackName', {\n  terminationProtection: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 966
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stack = new Stack(app, 'StackName', {\n  terminationProtection: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "106": 1,
        "193": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "718df34f6c9b83bce13ce151d8fd35cc1e4aa83110c267d616ff5bb257413023"
    },
    "d30f5fd73724c9ff9b0edda28f54ae303c538bcabc9c7980ff45761d2226702d": {
      "translations": {
        "python": {
          "source": "tag_param = CfnParameter(self, \"TagName\")\n\nstring_equals = CfnJson(self, \"ConditionJson\",\n    value={\n        \"f\"aws:PrincipalTag/{tagParam.valueAsString}\"\": True\n    }\n)\n\nprincipal = iam.AccountRootPrincipal().with_conditions({\n    \"StringEquals\": string_equals\n})\n\niam.Role(self, \"MyRole\", assumed_by=principal)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = new CfnJson(this, \"ConditionJson\", new CfnJsonProps {\n    Value = new Dictionary<string, boolean> {\n        { $\"aws:PrincipalTag/{tagParam.valueAsString}\", true }\n    }\n});\n\nPrincipalBase principal = new AccountRootPrincipal().WithConditions(new Dictionary<string, object> {\n    { \"StringEquals\", stringEquals }\n});\n\nnew Role(this, \"MyRole\", new RoleProps { AssumedBy = principal });",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = CfnJson.Builder.create(this, \"ConditionJson\")\n        .value(Map.of(\n                String.format(\"aws:PrincipalTag/%s\", tagParam.getValueAsString()), true))\n        .build();\n\nPrincipalBase principal = new AccountRootPrincipal().withConditions(Map.of(\n        \"StringEquals\", stringEquals));\n\nRole.Builder.create(this, \"MyRole\").assumedBy(principal).build();",
          "version": "1"
        },
        "go": {
          "source": "tagParam := NewCfnParameter(this, jsii.String(\"TagName\"))\n\nstringEquals := NewCfnJson(this, jsii.String(\"ConditionJson\"), &cfnJsonProps{\n\tvalue: map[string]*bool{\n\t\tfmt.Sprintf(\"aws:PrincipalTag/%v\", tagParam.valueAsString): jsii.Boolean(true),\n\t},\n})\n\nprincipal := iam.NewAccountRootPrincipal().withConditions(map[string]interface{}{\n\t\"StringEquals\": stringEquals,\n})\n\niam.NewRole(this, jsii.String(\"MyRole\"), &roleProps{\n\tassumedBy: principal,\n})",
          "version": "1"
        },
        "$": {
          "source": "const tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 987
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.CfnJson",
        "@aws-cdk/core.CfnJsonProps",
        "@aws-cdk/core.CfnParameter",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "15": 1,
        "17": 1,
        "75": 17,
        "104": 3,
        "106": 1,
        "154": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 4,
        "211": 1,
        "221": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4
      },
      "fqnsFingerprint": "c1e60943d4a10c82530a139d69ae7230187ec9dd5897ed8b0d46c126cc0eaf0d"
    },
    "118203b4ee8cf7230400f9f8a9a48ba990fa1c424991a51c7d0d8d77d995b507": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nfrom constructs import Construct, IConstruct\n\nclass MyAspect(cdk.IAspect):\n    def visit(self, node):\n        if node instanceof cdk.CfnResource && node.cfn_resource_type == \"Foo::Bar\":\n            self.error(node, \"we do not want a Foo::Bar resource\")\n\n    def error(self, node, message):\n        cdk.Annotations.of(node).add_error(message)\n\nclass MyStack(cdk.Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        stack = cdk.Stack()\n        cdk.CfnResource(stack, \"Foo\",\n            type=\"Foo::Bar\",\n            properties={\n                \"Fred\": \"Thud\"\n            }\n        )\n        cdk.Aspects.of(stack).add(MyAspect())",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\n\nclass MyAspect : IAspect\n{\n    public void Visit(IConstruct node)\n    {\n        if (node instanceof CfnResource && node.CfnResourceType == \"Foo::Bar\")\n        {\n            Error(node, \"we do not want a Foo::Bar resource\");\n        }\n    }\n\n    protected void Error(IConstruct node, string message)\n    {\n        Annotations.Of(node).AddError(message);\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n\n        Stack stack = new Stack();\n        new CfnResource(stack, \"Foo\", new CfnResourceProps {\n            Type = \"Foo::Bar\",\n            Properties = new Dictionary<string, object> {\n                { \"Fred\", \"Thud\" }\n            }\n        });\n        Aspects.Of(stack).Add(new MyAspect());\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.constructs.Construct;\nimport software.constructs.IConstruct;\n\npublic class MyAspect implements IAspect {\n    public void visit(IConstruct node) {\n        if (node instanceof CfnResource && node.getCfnResourceType() == \"Foo::Bar\") {\n            this.error(node, \"we do not want a Foo::Bar resource\");\n        }\n    }\n\n    public void error(IConstruct node, String message) {\n        Annotations.of(node).addError(message);\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n\n        Stack stack = new Stack();\n        CfnResource.Builder.create(stack, \"Foo\")\n                .type(\"Foo::Bar\")\n                .properties(Map.of(\n                        \"Fred\", \"Thud\"))\n                .build();\n        Aspects.of(stack).add(new MyAspect());\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"import constructs \"github.com/aws/constructs-go/constructs\"type Construct constructs.Construct\ntype IConstruct constructs.IConstruct\n\ntype myAspect struct {\n}\n\nfunc (this *myAspect) visit(node iConstruct) {\n\tif *node instanceof cdk.cfnResource && *node.cfnResourceType == \"Foo::Bar\" {\n\t\tthis.error(*node, jsii.String(\"we do not want a Foo::Bar resource\"))\n\t}\n}\n\nfunc (this *myAspect) error(node iConstruct, message *string) {\n\tcdk.annotations.of(*node).addError(*message)\n}\n\ntype myStack struct {\n\tstack\n}\n\nfunc newMyStack(scope construct, id *string) *myStack {\n\tthis := &myStack{}\n\tcdk.NewStack_Override(this, scope, id)\n\n\tstack := cdk.NewStack()\n\tcdk.NewCfnResource(stack, jsii.String(\"Foo\"), &cfnResourceProps{\n\t\ttype: jsii.String(\"Foo::Bar\"),\n\t\tproperties: map[string]interface{}{\n\t\t\t\"Fred\": jsii.String(\"Thud\"),\n\t\t},\n\t})\n\tcdk.aspects.of(stack).add(NewMyAspect())\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport { Construct, IConstruct } from 'constructs';\n\nclass MyAspect implements cdk.IAspect {\n  public visit(node: IConstruct): void {\n    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {\n      this.error(node, 'we do not want a Foo::Bar resource');\n    }\n  }\n\n  protected error(node: IConstruct, message: string): void {\n    cdk.Annotations.of(node).addError(message);\n  }\n}\n\nclass MyStack extends cdk.Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new cdk.Stack();\n    new cdk.CfnResource(stack, 'Foo', {\n      type: 'Foo::Bar',\n      properties: {\n        Fred: 'Thud',\n      },\n    });\n    cdk.Aspects.of(stack).add(new MyAspect());\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Annotations"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Annotations",
        "@aws-cdk/core.Annotations#addError",
        "@aws-cdk/core.Annotations#of",
        "@aws-cdk/core.Aspects",
        "@aws-cdk/core.Aspects#add",
        "@aws-cdk/core.Aspects#of",
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResource#cfnResourceType",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.IAspect",
        "@aws-cdk/core.IConstruct",
        "@aws-cdk/core.Stack",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport { Construct, IConstruct } from 'constructs';\n\nclass MyAspect implements cdk.IAspect {\n  public visit(node: IConstruct): void {\n    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {\n      this.error(node, 'we do not want a Foo::Bar resource');\n    }\n  }\n\n  protected error(node: IConstruct, message: string): void {\n    cdk.Annotations.of(node).addError(message);\n  }\n}\n\nclass MyStack extends cdk.Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new cdk.Stack();\n    new cdk.CfnResource(stack, 'Foo', {\n      type: 'Foo::Bar',\n      properties: {\n        Fred: 'Thud',\n      },\n    });\n    cdk.Aspects.of(stack).add(new MyAspect());\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "36": 1,
        "55": 1,
        "75": 49,
        "98": 1,
        "102": 1,
        "104": 1,
        "110": 2,
        "118": 1,
        "119": 1,
        "143": 2,
        "156": 5,
        "161": 2,
        "162": 1,
        "169": 3,
        "193": 2,
        "194": 13,
        "196": 6,
        "197": 3,
        "209": 3,
        "216": 2,
        "223": 4,
        "225": 1,
        "226": 5,
        "227": 1,
        "242": 1,
        "243": 1,
        "245": 2,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 2,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "026a395f53833f7a3158255a2177936cb3f2f8d045d46c8ee718abad64876e5b"
    },
    "583283a0dd8573cff803cd2ba3645418404c3f4148d0d1315ea4cbb5ccae38ec": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer\n\n#\n# Stack verification steps:\n# * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n#\n\napp = App()\nstack = Stack(app, \"TokenAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.token-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = TokenAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.token-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = new TokenAuthorizer(stack, \"MyAuthorizer\", new TokenAuthorizerProps {\n    Handler = authorizerFn\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.TokenAuthorizer;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.token-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = TokenAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import path \"github.com/aws-samples/dummy/path\"import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"import awscdkcore \"github.com/aws-samples/dummy/awscdkcore\"type App awscdkcore.App\ntype Stack awscdkcore.Stackimport lib \"github.com/aws-samples/dummy/lib\"type MockIntegration lib.MockIntegration\ntype PassthroughBehavior lib.PassthroughBehavior\ntype RestApi lib.RestApi\ntype TokenAuthorizer lib.TokenAuthorizer\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\napp := NewApp()\nstack := NewStack(app, jsii.String(\"TokenAuthorizerInteg\"))\n\nauthorizerFn := lambda.NewFunction(stack, jsii.String(\"MyAuthorizerFunction\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_14_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.assetCode.fromAsset(path.join(__dirname, jsii.String(\"integ.token-authorizer.handler\"))),\n})\n\nrestapi := NewRestApi(stack, jsii.String(\"MyRestApi\"))\n\nauthorizer := NewTokenAuthorizer(stack, jsii.String(\"MyAuthorizer\"), &tokenAuthorizerProps{\n\thandler: authorizerFn,\n})\n\nrestapi.root.addMethod(jsii.String(\"ANY\"), NewMockIntegration(&integrationOptions{\n\tintegrationResponses: []integrationResponse{\n\t\t&integrationResponse{\n\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tpassthroughBehavior: passthroughBehavior_NEVER,\n\trequestTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t},\n}), &methodOptions{\n\tmethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.App"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 50,
        "192": 2,
        "193": 7,
        "194": 9,
        "196": 3,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 2,
        "257": 2,
        "258": 6,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dd3ec739e6674ea3474db107d1378d85b49c2ea62f49674050012c33ef64c2f9"
    },
    "15c7f15cc43b1cc74ddd627f2101e0db8daac93dc42cd1acb7fd22a8e57f52c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# context: Any\n\napp_props = cdk.AppProps(\n    analytics_reporting=False,\n    auto_synth=False,\n    context={\n        \"context_key\": context\n    },\n    outdir=\"outdir\",\n    runtime_info=False,\n    stack_traces=False,\n    tree_metadata=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar context;\nAppProps appProps = new AppProps {\n    AnalyticsReporting = false,\n    AutoSynth = false,\n    Context = new Dictionary<string, object> {\n        { \"contextKey\", context }\n    },\n    Outdir = \"outdir\",\n    RuntimeInfo = false,\n    StackTraces = false,\n    TreeMetadata = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject context;\n\nAppProps appProps = AppProps.builder()\n        .analyticsReporting(false)\n        .autoSynth(false)\n        .context(Map.of(\n                \"contextKey\", context))\n        .outdir(\"outdir\")\n        .runtimeInfo(false)\n        .stackTraces(false)\n        .treeMetadata(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar context interface{}\nappProps := &appProps{\n\tanalyticsReporting: jsii.Boolean(false),\n\tautoSynth: jsii.Boolean(false),\n\tcontext: map[string]interface{}{\n\t\t\"contextKey\": context,\n\t},\n\toutdir: jsii.String(\"outdir\"),\n\truntimeInfo: jsii.Boolean(false),\n\tstackTraces: jsii.Boolean(false),\n\ttreeMetadata: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const context: any;\nconst appProps: cdk.AppProps = {\n  analyticsReporting: false,\n  autoSynth: false,\n  context: {\n    contextKey: context,\n  },\n  outdir: 'outdir',\n  runtimeInfo: false,\n  stackTraces: false,\n  treeMetadata: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.AppProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.AppProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const context: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst appProps: cdk.AppProps = {\n  analyticsReporting: false,\n  autoSynth: false,\n  context: {\n    contextKey: context,\n  },\n  outdir: 'outdir',\n  runtimeInfo: false,\n  stackTraces: false,\n  treeMetadata: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "91": 5,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "79a29bd7e86fad4f23aa33b453c221d1caa17c32aff22e8313eee6920fd792cd"
    },
    "a3805f94114690245e7829ed9d9a828af499b727c2bc304242e03aa4848e49e1": {
      "translations": {
        "python": {
          "source": "sub_zone = route53.PublicHostedZone(self, \"SubZone\",\n    zone_name=\"sub.someexample.com\"\n)\n\n# import the delegation role by constructing the roleArn\ndelegation_role_arn = Stack.of(self).format_arn(\n    region=\"\",  # IAM is global in each partition\n    service=\"iam\",\n    account=\"parent-account-id\",\n    resource=\"role\",\n    resource_name=\"MyDelegationRole\"\n)\ndelegation_role = iam.Role.from_role_arn(self, \"DelegationRole\", delegation_role_arn)\n\n# create the record\nroute53.CrossAccountZoneDelegationRecord(self, \"delegate\",\n    delegated_zone=sub_zone,\n    parent_hosted_zone_name=\"someexample.com\",  # or you can use parentHostedZoneId\n    delegation_role=delegation_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PublicHostedZone subZone = new PublicHostedZone(this, \"SubZone\", new PublicHostedZoneProps {\n    ZoneName = \"sub.someexample.com\"\n});\n\n// import the delegation role by constructing the roleArn\nstring delegationRoleArn = Stack.Of(this).FormatArn(new ArnComponents {\n    Region = \"\",  // IAM is global in each partition\n    Service = \"iam\",\n    Account = \"parent-account-id\",\n    Resource = \"role\",\n    ResourceName = \"MyDelegationRole\"\n});\nIRole delegationRole = Role.FromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nnew CrossAccountZoneDelegationRecord(this, \"delegate\", new CrossAccountZoneDelegationRecordProps {\n    DelegatedZone = subZone,\n    ParentHostedZoneName = \"someexample.com\",  // or you can use parentHostedZoneId\n    DelegationRole = delegationRole\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone subZone = PublicHostedZone.Builder.create(this, \"SubZone\")\n        .zoneName(\"sub.someexample.com\")\n        .build();\n\n// import the delegation role by constructing the roleArn\nString delegationRoleArn = Stack.of(this).formatArn(ArnComponents.builder()\n        .region(\"\") // IAM is global in each partition\n        .service(\"iam\")\n        .account(\"parent-account-id\")\n        .resource(\"role\")\n        .resourceName(\"MyDelegationRole\")\n        .build());\nIRole delegationRole = Role.fromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nCrossAccountZoneDelegationRecord.Builder.create(this, \"delegate\")\n        .delegatedZone(subZone)\n        .parentHostedZoneName(\"someexample.com\") // or you can use parentHostedZoneId\n        .delegationRole(delegationRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "subZone := route53.NewPublicHostedZone(this, jsii.String(\"SubZone\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"sub.someexample.com\"),\n})\n\n// import the delegation role by constructing the roleArn\ndelegationRoleArn := stack.of(this).formatArn(&arnComponents{\n\tregion: jsii.String(\"\"),\n\t // IAM is global in each partition\n\tservice: jsii.String(\"iam\"),\n\taccount: jsii.String(\"parent-account-id\"),\n\tresource: jsii.String(\"role\"),\n\tresourceName: jsii.String(\"MyDelegationRole\"),\n})\ndelegationRole := iam.role.fromRoleArn(this, jsii.String(\"DelegationRole\"), delegationRoleArn)\n\n// create the record\n// create the record\nroute53.NewCrossAccountZoneDelegationRecord(this, jsii.String(\"delegate\"), &crossAccountZoneDelegationRecordProps{\n\tdelegatedZone: subZone,\n\tparentHostedZoneName: jsii.String(\"someexample.com\"),\n\t // or you can use parentHostedZoneId\n\tdelegationRole: delegationRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ArnComponents"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 24,
        "104": 4,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "3061daedf357f974ae881ed98bea65832b023d4d057e99d94dd87a05f0516707"
    },
    "02f01e2e644cfbb33f8252ef16c8b50aeb9b3802308a58823fcd0374ffde70f9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nfrom constructs import Construct, IConstruct\n\nclass MyAspect(cdk.IAspect):\n    def visit(self, node):\n        if node instanceof cdk.CfnResource && node.cfn_resource_type == \"Foo::Bar\":\n            self.error(node, \"we do not want a Foo::Bar resource\")\n\n    def error(self, node, message):\n        cdk.Annotations.of(node).add_error(message)\n\nclass MyStack(cdk.Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        stack = cdk.Stack()\n        cdk.CfnResource(stack, \"Foo\",\n            type=\"Foo::Bar\",\n            properties={\n                \"Fred\": \"Thud\"\n            }\n        )\n        cdk.Aspects.of(stack).add(MyAspect())",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\n\nclass MyAspect : IAspect\n{\n    public void Visit(IConstruct node)\n    {\n        if (node instanceof CfnResource && node.CfnResourceType == \"Foo::Bar\")\n        {\n            Error(node, \"we do not want a Foo::Bar resource\");\n        }\n    }\n\n    protected void Error(IConstruct node, string message)\n    {\n        Annotations.Of(node).AddError(message);\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n\n        Stack stack = new Stack();\n        new CfnResource(stack, \"Foo\", new CfnResourceProps {\n            Type = \"Foo::Bar\",\n            Properties = new Dictionary<string, object> {\n                { \"Fred\", \"Thud\" }\n            }\n        });\n        Aspects.Of(stack).Add(new MyAspect());\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.constructs.Construct;\nimport software.constructs.IConstruct;\n\npublic class MyAspect implements IAspect {\n    public void visit(IConstruct node) {\n        if (node instanceof CfnResource && node.getCfnResourceType() == \"Foo::Bar\") {\n            this.error(node, \"we do not want a Foo::Bar resource\");\n        }\n    }\n\n    public void error(IConstruct node, String message) {\n        Annotations.of(node).addError(message);\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n\n        Stack stack = new Stack();\n        CfnResource.Builder.create(stack, \"Foo\")\n                .type(\"Foo::Bar\")\n                .properties(Map.of(\n                        \"Fred\", \"Thud\"))\n                .build();\n        Aspects.of(stack).add(new MyAspect());\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"import constructs \"github.com/aws/constructs-go/constructs\"type Construct constructs.Construct\ntype IConstruct constructs.IConstruct\n\ntype myAspect struct {\n}\n\nfunc (this *myAspect) visit(node iConstruct) {\n\tif *node instanceof cdk.cfnResource && *node.cfnResourceType == \"Foo::Bar\" {\n\t\tthis.error(*node, jsii.String(\"we do not want a Foo::Bar resource\"))\n\t}\n}\n\nfunc (this *myAspect) error(node iConstruct, message *string) {\n\tcdk.annotations.of(*node).addError(*message)\n}\n\ntype myStack struct {\n\tstack\n}\n\nfunc newMyStack(scope construct, id *string) *myStack {\n\tthis := &myStack{}\n\tcdk.NewStack_Override(this, scope, id)\n\n\tstack := cdk.NewStack()\n\tcdk.NewCfnResource(stack, jsii.String(\"Foo\"), &cfnResourceProps{\n\t\ttype: jsii.String(\"Foo::Bar\"),\n\t\tproperties: map[string]interface{}{\n\t\t\t\"Fred\": jsii.String(\"Thud\"),\n\t\t},\n\t})\n\tcdk.aspects.of(stack).add(NewMyAspect())\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport { Construct, IConstruct } from 'constructs';\n\nclass MyAspect implements cdk.IAspect {\n  public visit(node: IConstruct): void {\n    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {\n      this.error(node, 'we do not want a Foo::Bar resource');\n    }\n  }\n\n  protected error(node: IConstruct, message: string): void {\n    cdk.Annotations.of(node).addError(message);\n  }\n}\n\nclass MyStack extends cdk.Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new cdk.Stack();\n    new cdk.CfnResource(stack, 'Foo', {\n      type: 'Foo::Bar',\n      properties: {\n        Fred: 'Thud',\n      },\n    });\n    cdk.Aspects.of(stack).add(new MyAspect());\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Aspects"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Annotations",
        "@aws-cdk/core.Annotations#addError",
        "@aws-cdk/core.Annotations#of",
        "@aws-cdk/core.Aspects",
        "@aws-cdk/core.Aspects#add",
        "@aws-cdk/core.Aspects#of",
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResource#cfnResourceType",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.IAspect",
        "@aws-cdk/core.IConstruct",
        "@aws-cdk/core.Stack",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport { Construct, IConstruct } from 'constructs';\n\nclass MyAspect implements cdk.IAspect {\n  public visit(node: IConstruct): void {\n    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {\n      this.error(node, 'we do not want a Foo::Bar resource');\n    }\n  }\n\n  protected error(node: IConstruct, message: string): void {\n    cdk.Annotations.of(node).addError(message);\n  }\n}\n\nclass MyStack extends cdk.Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new cdk.Stack();\n    new cdk.CfnResource(stack, 'Foo', {\n      type: 'Foo::Bar',\n      properties: {\n        Fred: 'Thud',\n      },\n    });\n    cdk.Aspects.of(stack).add(new MyAspect());\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "36": 1,
        "55": 1,
        "75": 49,
        "98": 1,
        "102": 1,
        "104": 1,
        "110": 2,
        "118": 1,
        "119": 1,
        "143": 2,
        "156": 5,
        "161": 2,
        "162": 1,
        "169": 3,
        "193": 2,
        "194": 13,
        "196": 6,
        "197": 3,
        "209": 3,
        "216": 2,
        "223": 4,
        "225": 1,
        "226": 5,
        "227": 1,
        "242": 1,
        "243": 1,
        "245": 2,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 2,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "026a395f53833f7a3158255a2177936cb3f2f8d045d46c8ee718abad64876e5b"
    },
    "7c25c04feb766f0781e6ff2af0e62cd77f9f8ea0e3116c50128f71cc427813ba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# docker_image: cdk.DockerImage\n# local_bundling: cdk.ILocalBundling\n\nasset_options = cdk.AssetOptions(\n    asset_hash=\"assetHash\",\n    asset_hash_type=cdk.AssetHashType.SOURCE,\n    bundling=cdk.BundlingOptions(\n        image=docker_image,\n\n        # the properties below are optional\n        command=[\"command\"],\n        entrypoint=[\"entrypoint\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        local=local_bundling,\n        output_type=cdk.BundlingOutput.ARCHIVED,\n        security_opt=\"securityOpt\",\n        user=\"user\",\n        volumes=[cdk.DockerVolume(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n\n            # the properties below are optional\n            consistency=cdk.DockerVolumeConsistency.CONSISTENT\n        )],\n        working_directory=\"workingDirectory\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nDockerImage dockerImage;\nILocalBundling localBundling;\nAssetOptions assetOptions = new AssetOptions {\n    AssetHash = \"assetHash\",\n    AssetHashType = AssetHashType.SOURCE,\n    Bundling = new BundlingOptions {\n        Image = dockerImage,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Local = localBundling,\n        OutputType = BundlingOutput.ARCHIVED,\n        SecurityOpt = \"securityOpt\",\n        User = \"user\",\n        Volumes = new [] { new DockerVolume {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n\n            // the properties below are optional\n            Consistency = DockerVolumeConsistency.CONSISTENT\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDockerImage dockerImage;\nILocalBundling localBundling;\n\nAssetOptions assetOptions = AssetOptions.builder()\n        .assetHash(\"assetHash\")\n        .assetHashType(AssetHashType.SOURCE)\n        .bundling(BundlingOptions.builder()\n                .image(dockerImage)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .local(localBundling)\n                .outputType(BundlingOutput.ARCHIVED)\n                .securityOpt(\"securityOpt\")\n                .user(\"user\")\n                .volumes(List.of(DockerVolume.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n\n                        // the properties below are optional\n                        .consistency(DockerVolumeConsistency.CONSISTENT)\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dockerImage dockerImage\nvar localBundling iLocalBundling\nassetOptions := &assetOptions{\n\tassetHash: jsii.String(\"assetHash\"),\n\tassetHashType: cdk.assetHashType_SOURCE,\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage,\n\n\t\t// the properties below are optional\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tentrypoint: []*string{\n\t\t\tjsii.String(\"entrypoint\"),\n\t\t},\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tlocal: localBundling,\n\t\toutputType: cdk.bundlingOutput_ARCHIVED,\n\t\tsecurityOpt: jsii.String(\"securityOpt\"),\n\t\tuser: jsii.String(\"user\"),\n\t\tvolumes: []dockerVolume{\n\t\t\t&dockerVolume{\n\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tconsistency: cdk.dockerVolumeConsistency_CONSISTENT,\n\t\t\t},\n\t\t},\n\t\tworkingDirectory: jsii.String(\"workingDirectory\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const localBundling: cdk.ILocalBundling;\nconst assetOptions: cdk.AssetOptions = {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.AssetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.AssetHashType",
        "@aws-cdk/core.AssetHashType#SOURCE",
        "@aws-cdk/core.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT",
        "@aws-cdk/core.ILocalBundling"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const localBundling: cdk.ILocalBundling;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetOptions: cdk.AssetOptions = {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 38,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 3,
        "193": 4,
        "194": 6,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "7e97aec6c085f3cb79b0f1ee2098dce4452bd83caa8e8ae1b5ce56df0f4b61c7"
    },
    "6b06657a46b652a468ddcc73745069ab47f9116dc3bb635dd81ea29f9f5533c5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# docker_image: cdk.DockerImage\n# local_bundling: cdk.ILocalBundling\n\nasset_staging = cdk.AssetStaging(self, \"MyAssetStaging\",\n    source_path=\"sourcePath\",\n\n    # the properties below are optional\n    asset_hash=\"assetHash\",\n    asset_hash_type=cdk.AssetHashType.SOURCE,\n    bundling=cdk.BundlingOptions(\n        image=docker_image,\n\n        # the properties below are optional\n        command=[\"command\"],\n        entrypoint=[\"entrypoint\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        local=local_bundling,\n        output_type=cdk.BundlingOutput.ARCHIVED,\n        security_opt=\"securityOpt\",\n        user=\"user\",\n        volumes=[cdk.DockerVolume(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n\n            # the properties below are optional\n            consistency=cdk.DockerVolumeConsistency.CONSISTENT\n        )],\n        working_directory=\"workingDirectory\"\n    ),\n    exclude=[\"exclude\"],\n    extra_hash=\"extraHash\",\n    follow=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nDockerImage dockerImage;\nILocalBundling localBundling;\nAssetStaging assetStaging = new AssetStaging(this, \"MyAssetStaging\", new AssetStagingProps {\n    SourcePath = \"sourcePath\",\n\n    // the properties below are optional\n    AssetHash = \"assetHash\",\n    AssetHashType = AssetHashType.SOURCE,\n    Bundling = new BundlingOptions {\n        Image = dockerImage,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Local = localBundling,\n        OutputType = BundlingOutput.ARCHIVED,\n        SecurityOpt = \"securityOpt\",\n        User = \"user\",\n        Volumes = new [] { new DockerVolume {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n\n            // the properties below are optional\n            Consistency = DockerVolumeConsistency.CONSISTENT\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    Exclude = new [] { \"exclude\" },\n    ExtraHash = \"extraHash\",\n    Follow = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDockerImage dockerImage;\nILocalBundling localBundling;\n\nAssetStaging assetStaging = AssetStaging.Builder.create(this, \"MyAssetStaging\")\n        .sourcePath(\"sourcePath\")\n\n        // the properties below are optional\n        .assetHash(\"assetHash\")\n        .assetHashType(AssetHashType.SOURCE)\n        .bundling(BundlingOptions.builder()\n                .image(dockerImage)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .local(localBundling)\n                .outputType(BundlingOutput.ARCHIVED)\n                .securityOpt(\"securityOpt\")\n                .user(\"user\")\n                .volumes(List.of(DockerVolume.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n\n                        // the properties below are optional\n                        .consistency(DockerVolumeConsistency.CONSISTENT)\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .exclude(List.of(\"exclude\"))\n        .extraHash(\"extraHash\")\n        .follow(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dockerImage dockerImage\nvar localBundling iLocalBundling\nassetStaging := cdk.NewAssetStaging(this, jsii.String(\"MyAssetStaging\"), &assetStagingProps{\n\tsourcePath: jsii.String(\"sourcePath\"),\n\n\t// the properties below are optional\n\tassetHash: jsii.String(\"assetHash\"),\n\tassetHashType: cdk.assetHashType_SOURCE,\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage,\n\n\t\t// the properties below are optional\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tentrypoint: []*string{\n\t\t\tjsii.String(\"entrypoint\"),\n\t\t},\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tlocal: localBundling,\n\t\toutputType: cdk.bundlingOutput_ARCHIVED,\n\t\tsecurityOpt: jsii.String(\"securityOpt\"),\n\t\tuser: jsii.String(\"user\"),\n\t\tvolumes: []dockerVolume{\n\t\t\t&dockerVolume{\n\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tconsistency: cdk.dockerVolumeConsistency_CONSISTENT,\n\t\t\t},\n\t\t},\n\t\tworkingDirectory: jsii.String(\"workingDirectory\"),\n\t},\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\textraHash: jsii.String(\"extraHash\"),\n\tfollow: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const localBundling: cdk.ILocalBundling;\nconst assetStaging = new cdk.AssetStaging(this, 'MyAssetStaging', {\n  sourcePath: 'sourcePath',\n\n  // the properties below are optional\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.AssetStaging"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.AssetHashType",
        "@aws-cdk/core.AssetHashType#SOURCE",
        "@aws-cdk/core.AssetStaging",
        "@aws-cdk/core.AssetStagingProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT",
        "@aws-cdk/core.ILocalBundling",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const localBundling: cdk.ILocalBundling;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetStaging = new cdk.AssetStaging(this, 'MyAssetStaging', {\n  sourcePath: 'sourcePath',\n\n  // the properties below are optional\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 49,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 4,
        "193": 4,
        "194": 11,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "7a2a446bd177b1036361124892ff06b1fae7648a0a58b3f1bcd4127d8919d894"
    },
    "517aadd353e3372653e3ddcf6c4f6878bb4cf504aaf0c5b441911f393a287bb2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# docker_image: cdk.DockerImage\n# local_bundling: cdk.ILocalBundling\n\nasset_staging_props = cdk.AssetStagingProps(\n    source_path=\"sourcePath\",\n\n    # the properties below are optional\n    asset_hash=\"assetHash\",\n    asset_hash_type=cdk.AssetHashType.SOURCE,\n    bundling=cdk.BundlingOptions(\n        image=docker_image,\n\n        # the properties below are optional\n        command=[\"command\"],\n        entrypoint=[\"entrypoint\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        local=local_bundling,\n        output_type=cdk.BundlingOutput.ARCHIVED,\n        security_opt=\"securityOpt\",\n        user=\"user\",\n        volumes=[cdk.DockerVolume(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n\n            # the properties below are optional\n            consistency=cdk.DockerVolumeConsistency.CONSISTENT\n        )],\n        working_directory=\"workingDirectory\"\n    ),\n    exclude=[\"exclude\"],\n    extra_hash=\"extraHash\",\n    follow=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nDockerImage dockerImage;\nILocalBundling localBundling;\nAssetStagingProps assetStagingProps = new AssetStagingProps {\n    SourcePath = \"sourcePath\",\n\n    // the properties below are optional\n    AssetHash = \"assetHash\",\n    AssetHashType = AssetHashType.SOURCE,\n    Bundling = new BundlingOptions {\n        Image = dockerImage,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Local = localBundling,\n        OutputType = BundlingOutput.ARCHIVED,\n        SecurityOpt = \"securityOpt\",\n        User = \"user\",\n        Volumes = new [] { new DockerVolume {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n\n            // the properties below are optional\n            Consistency = DockerVolumeConsistency.CONSISTENT\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    Exclude = new [] { \"exclude\" },\n    ExtraHash = \"extraHash\",\n    Follow = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDockerImage dockerImage;\nILocalBundling localBundling;\n\nAssetStagingProps assetStagingProps = AssetStagingProps.builder()\n        .sourcePath(\"sourcePath\")\n\n        // the properties below are optional\n        .assetHash(\"assetHash\")\n        .assetHashType(AssetHashType.SOURCE)\n        .bundling(BundlingOptions.builder()\n                .image(dockerImage)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .local(localBundling)\n                .outputType(BundlingOutput.ARCHIVED)\n                .securityOpt(\"securityOpt\")\n                .user(\"user\")\n                .volumes(List.of(DockerVolume.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n\n                        // the properties below are optional\n                        .consistency(DockerVolumeConsistency.CONSISTENT)\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .exclude(List.of(\"exclude\"))\n        .extraHash(\"extraHash\")\n        .follow(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dockerImage dockerImage\nvar localBundling iLocalBundling\nassetStagingProps := &assetStagingProps{\n\tsourcePath: jsii.String(\"sourcePath\"),\n\n\t// the properties below are optional\n\tassetHash: jsii.String(\"assetHash\"),\n\tassetHashType: cdk.assetHashType_SOURCE,\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage,\n\n\t\t// the properties below are optional\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tentrypoint: []*string{\n\t\t\tjsii.String(\"entrypoint\"),\n\t\t},\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tlocal: localBundling,\n\t\toutputType: cdk.bundlingOutput_ARCHIVED,\n\t\tsecurityOpt: jsii.String(\"securityOpt\"),\n\t\tuser: jsii.String(\"user\"),\n\t\tvolumes: []dockerVolume{\n\t\t\t&dockerVolume{\n\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tconsistency: cdk.dockerVolumeConsistency_CONSISTENT,\n\t\t\t},\n\t\t},\n\t\tworkingDirectory: jsii.String(\"workingDirectory\"),\n\t},\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\textraHash: jsii.String(\"extraHash\"),\n\tfollow: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const localBundling: cdk.ILocalBundling;\nconst assetStagingProps: cdk.AssetStagingProps = {\n  sourcePath: 'sourcePath',\n\n  // the properties below are optional\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.AssetStagingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.AssetHashType",
        "@aws-cdk/core.AssetHashType#SOURCE",
        "@aws-cdk/core.AssetStagingProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT",
        "@aws-cdk/core.ILocalBundling",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const localBundling: cdk.ILocalBundling;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetStagingProps: cdk.AssetStagingProps = {\n  sourcePath: 'sourcePath',\n\n  // the properties below are optional\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 13,
        "75": 49,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 4,
        "194": 10,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "4e94c3cdc0aada4021159e480db09e3e4461368b2ad2c1175626ec624c87c973"
    },
    "f498090e42b1aae23e73613e4433d1f86b6b91fd91b75e5aaf84218cc7a083d6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nbootstrapless_synthesizer = cdk.BootstraplessSynthesizer(\n    cloud_formation_execution_role_arn=\"cloudFormationExecutionRoleArn\",\n    deploy_role_arn=\"deployRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nBootstraplessSynthesizer bootstraplessSynthesizer = new BootstraplessSynthesizer(new BootstraplessSynthesizerProps {\n    CloudFormationExecutionRoleArn = \"cloudFormationExecutionRoleArn\",\n    DeployRoleArn = \"deployRoleArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nBootstraplessSynthesizer bootstraplessSynthesizer = BootstraplessSynthesizer.Builder.create()\n        .cloudFormationExecutionRoleArn(\"cloudFormationExecutionRoleArn\")\n        .deployRoleArn(\"deployRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nbootstraplessSynthesizer := cdk.NewBootstraplessSynthesizer(&bootstraplessSynthesizerProps{\n\tcloudFormationExecutionRoleArn: jsii.String(\"cloudFormationExecutionRoleArn\"),\n\tdeployRoleArn: jsii.String(\"deployRoleArn\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst bootstraplessSynthesizer = new cdk.BootstraplessSynthesizer({\n  cloudFormationExecutionRoleArn: 'cloudFormationExecutionRoleArn',\n  deployRoleArn: 'deployRoleArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.BootstraplessSynthesizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.BootstraplessSynthesizer",
        "@aws-cdk/core.BootstraplessSynthesizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bootstraplessSynthesizer = new cdk.BootstraplessSynthesizer({\n  cloudFormationExecutionRoleArn: 'cloudFormationExecutionRoleArn',\n  deployRoleArn: 'deployRoleArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "07e26f387053a3aa91b73b429be3a3bd63055f902b2367f0b22b329dde7ec285"
    },
    "c9b30b6b5ef496216748a7b79ba4ab815b9b1502070f64d7a2b268d49e41160b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nbootstrapless_synthesizer_props = cdk.BootstraplessSynthesizerProps(\n    cloud_formation_execution_role_arn=\"cloudFormationExecutionRoleArn\",\n    deploy_role_arn=\"deployRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nBootstraplessSynthesizerProps bootstraplessSynthesizerProps = new BootstraplessSynthesizerProps {\n    CloudFormationExecutionRoleArn = \"cloudFormationExecutionRoleArn\",\n    DeployRoleArn = \"deployRoleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nBootstraplessSynthesizerProps bootstraplessSynthesizerProps = BootstraplessSynthesizerProps.builder()\n        .cloudFormationExecutionRoleArn(\"cloudFormationExecutionRoleArn\")\n        .deployRoleArn(\"deployRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nbootstraplessSynthesizerProps := &bootstraplessSynthesizerProps{\n\tcloudFormationExecutionRoleArn: jsii.String(\"cloudFormationExecutionRoleArn\"),\n\tdeployRoleArn: jsii.String(\"deployRoleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst bootstraplessSynthesizerProps: cdk.BootstraplessSynthesizerProps = {\n  cloudFormationExecutionRoleArn: 'cloudFormationExecutionRoleArn',\n  deployRoleArn: 'deployRoleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.BootstraplessSynthesizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.BootstraplessSynthesizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bootstraplessSynthesizerProps: cdk.BootstraplessSynthesizerProps = {\n  cloudFormationExecutionRoleArn: 'cloudFormationExecutionRoleArn',\n  deployRoleArn: 'deployRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c61290d6019a3a900ae436c050dc26f7a019afa7994dbbd034dc271446d91747"
    },
    "f2c4e7f0947ee3e2d36a76b2442baecbf956ff75720c809584bb13e8167e2f76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nbundling_docker_image = cdk.BundlingDockerImage.from_asset(\"path\",\n    build_args={\n        \"build_args_key\": \"buildArgs\"\n    },\n    file=\"file\",\n    platform=\"platform\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nBundlingDockerImage bundlingDockerImage = BundlingDockerImage.FromAsset(\"path\", new DockerBuildOptions {\n    BuildArgs = new Dictionary<string, string> {\n        { \"buildArgsKey\", \"buildArgs\" }\n    },\n    File = \"file\",\n    Platform = \"platform\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nBundlingDockerImage bundlingDockerImage = BundlingDockerImage.fromAsset(\"path\", DockerBuildOptions.builder()\n        .buildArgs(Map.of(\n                \"buildArgsKey\", \"buildArgs\"))\n        .file(\"file\")\n        .platform(\"platform\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nbundlingDockerImage := cdk.bundlingDockerImage.fromAsset(jsii.String(\"path\"), &dockerBuildOptions{\n\tbuildArgs: map[string]*string{\n\t\t\"buildArgsKey\": jsii.String(\"buildArgs\"),\n\t},\n\tfile: jsii.String(\"file\"),\n\tplatform: jsii.String(\"platform\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst bundlingDockerImage = cdk.BundlingDockerImage.fromAsset('path', /* all optional props */ {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  file: 'file',\n  platform: 'platform',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.BundlingDockerImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.BundlingDockerImage",
        "@aws-cdk/core.BundlingDockerImage#fromAsset",
        "@aws-cdk/core.DockerBuildOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bundlingDockerImage = cdk.BundlingDockerImage.fromAsset('path', /* all optional props */ {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  file: 'file',\n  platform: 'platform',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7dc96d579d2bb14048f534a52cc08406da96206e42fd09e9b10cb64225227cb7"
    },
    "721d2512e91f3d2b24756e9bf71216cca5b6b6de01c720d1653baeb3b1d3ec58": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"BundledAsset\",\n    path=path.join(__dirname, \"markdown-asset\"),  # /asset-input and working directory in the container\n    bundling=BundlingOptions(\n        image=DockerImage.from_build(path.join(__dirname, \"alpine-markdown\")),  # Build an image\n        command=[\"sh\", \"-c\", \"\"\"\n                        markdown index.md > /asset-output/index.html\n                      \"\"\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"BundledAsset\", new AssetProps {\n    Path = Join(__dirname, \"markdown-asset\"),  // /asset-input and working directory in the container\n    Bundling = new BundlingOptions {\n        Image = DockerImage.FromBuild(Join(__dirname, \"alpine-markdown\")),  // Build an image\n        Command = new [] { \"sh\", \"-c\", @\"\n                        markdown index.md > /asset-output/index.html\n                      \" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"BundledAsset\")\n        .path(join(__dirname, \"markdown-asset\")) // /asset-input and working directory in the container\n        .bundling(BundlingOptions.builder()\n                .image(DockerImage.fromBuild(join(__dirname, \"alpine-markdown\"))) // Build an image\n                .command(List.of(\"sh\", \"-c\", \"\\n            markdown index.md > /asset-output/index.html\\n          \"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "asset := assets.NewAsset(this, jsii.String(\"BundledAsset\"), &assetProps{\n\tpath: path.join(__dirname, jsii.String(\"markdown-asset\")),\n\t // /asset-input and working directory in the container\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage.fromBuild(path.join(__dirname, jsii.String(\"alpine-markdown\"))),\n\t\t // Build an image\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"sh\"),\n\t\t\tjsii.String(\"-c\"),\n\t\t\tjsii.String(\"\\n            markdown index.md > /asset-output/index.html\\n          \"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const asset = new assets.Asset(this, 'BundledAsset', {\n  path: path.join(__dirname, 'markdown-asset'), // /asset-input and working directory in the container\n  bundling: {\n    image: DockerImage.fromBuild(path.join(__dirname, 'alpine-markdown')), // Build an image\n    command: [\n      'sh', '-c', `\n        markdown index.md > /asset-output/index.html\n      `,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.BundlingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { App, DockerImage, Stack, StackProps } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as assets from '../lib';\n\nclass TestStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    const asset = new assets.Asset(this, 'BundledAsset', {\n      path: path.join(__dirname, 'markdown-asset'), // /asset-input and working directory in the container\n      bundling: {\n        image: DockerImage.fromBuild(path.join(__dirname, 'alpine-markdown')), // Build an image\n        command: [\n          'sh', '-c', `\n            markdown index.md > /asset-output/index.html\n          `,\n        ],\n      },\n    });\n    /// !hide\n\n    const user = new iam.User(this, 'MyUser');\n    asset.grantRead(user);\n  }\n}\n\nconst app = new App();\nnew TestStack(app, 'cdk-integ-assets-bundling');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "14": 1,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "5a886b070c769d03999a19b6b9261d7b95035fd7b316c8e9fb97071632370540"
    },
    "61cbefae905f0182b8cdc405df6f3b5627c9df53f555cb635fadc7cfae9a5416": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"BundledAsset\",\n    path=\"/path/to/asset\",\n    bundling=BundlingOptions(\n        image=DockerImage.from_registry(\"alpine\"),\n        command=[\"command-that-produces-an-archive.sh\"],\n        output_type=BundlingOutput.NOT_ARCHIVED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"BundledAsset\", new AssetProps {\n    Path = \"/path/to/asset\",\n    Bundling = new BundlingOptions {\n        Image = DockerImage.FromRegistry(\"alpine\"),\n        Command = new [] { \"command-that-produces-an-archive.sh\" },\n        OutputType = BundlingOutput.NOT_ARCHIVED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"BundledAsset\")\n        .path(\"/path/to/asset\")\n        .bundling(BundlingOptions.builder()\n                .image(DockerImage.fromRegistry(\"alpine\"))\n                .command(List.of(\"command-that-produces-an-archive.sh\"))\n                .outputType(BundlingOutput.NOT_ARCHIVED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "asset := assets.NewAsset(this, jsii.String(\"BundledAsset\"), &assetProps{\n\tpath: jsii.String(\"/path/to/asset\"),\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage.fromRegistry(jsii.String(\"alpine\")),\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command-that-produces-an-archive.sh\"),\n\t\t},\n\t\toutputType: bundlingOutput_NOT_ARCHIVED,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const asset = new assets.Asset(this, 'BundledAsset', {\n  path: '/path/to/asset',\n  bundling: {\n    image: DockerImage.fromRegistry('alpine'),\n    command: ['command-that-produces-an-archive.sh'],\n    outputType: BundlingOutput.NOT_ARCHIVED, // Bundling output will be zipped even though it produces a single archive file.\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.BundlingOutput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#NOT_ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromRegistry",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { BundlingOptions, BundlingOutput, DockerImage, ILocalBundling, Stack } from '@aws-cdk/core';\nimport * as assets from '@aws-cdk/aws-s3-assets';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst asset = new assets.Asset(this, 'BundledAsset', {\n  path: '/path/to/asset',\n  bundling: {\n    image: DockerImage.fromRegistry('alpine'),\n    command: ['command-that-produces-an-archive.sh'],\n    outputType: BundlingOutput.NOT_ARCHIVED, // Bundling output will be zipped even though it produces a single archive file.\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "1902c94ca9ceadaf38bb5e36d8e372fc434344149fcb7fef96ed44b0bc37994b"
    },
    "21c0ce0816ead3601b93c716069cb50de465c6f3ae3b98d4922f2d4d31d774f3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_auto_scaling_replacing_update = cdk.CfnAutoScalingReplacingUpdate(\n    will_replace=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnAutoScalingReplacingUpdate cfnAutoScalingReplacingUpdate = new CfnAutoScalingReplacingUpdate {\n    WillReplace = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnAutoScalingReplacingUpdate cfnAutoScalingReplacingUpdate = CfnAutoScalingReplacingUpdate.builder()\n        .willReplace(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnAutoScalingReplacingUpdate := &cfnAutoScalingReplacingUpdate{\n\twillReplace: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnAutoScalingReplacingUpdate: cdk.CfnAutoScalingReplacingUpdate = {\n  willReplace: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnAutoScalingReplacingUpdate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnAutoScalingReplacingUpdate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAutoScalingReplacingUpdate: cdk.CfnAutoScalingReplacingUpdate = {\n  willReplace: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d20474d33e0663dfa55e0733b1331f44fa000c30fc1512dc909c768ce6d48485"
    },
    "f5e1905442f665858de2fa49229e58d909c13f50ae890745819c13c87c4cb490": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_auto_scaling_rolling_update = cdk.CfnAutoScalingRollingUpdate(\n    max_batch_size=123,\n    min_instances_in_service=123,\n    min_successful_instances_percent=123,\n    pause_time=\"pauseTime\",\n    suspend_processes=[\"suspendProcesses\"],\n    wait_on_resource_signals=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnAutoScalingRollingUpdate cfnAutoScalingRollingUpdate = new CfnAutoScalingRollingUpdate {\n    MaxBatchSize = 123,\n    MinInstancesInService = 123,\n    MinSuccessfulInstancesPercent = 123,\n    PauseTime = \"pauseTime\",\n    SuspendProcesses = new [] { \"suspendProcesses\" },\n    WaitOnResourceSignals = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnAutoScalingRollingUpdate cfnAutoScalingRollingUpdate = CfnAutoScalingRollingUpdate.builder()\n        .maxBatchSize(123)\n        .minInstancesInService(123)\n        .minSuccessfulInstancesPercent(123)\n        .pauseTime(\"pauseTime\")\n        .suspendProcesses(List.of(\"suspendProcesses\"))\n        .waitOnResourceSignals(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnAutoScalingRollingUpdate := &cfnAutoScalingRollingUpdate{\n\tmaxBatchSize: jsii.Number(123),\n\tminInstancesInService: jsii.Number(123),\n\tminSuccessfulInstancesPercent: jsii.Number(123),\n\tpauseTime: jsii.String(\"pauseTime\"),\n\tsuspendProcesses: []*string{\n\t\tjsii.String(\"suspendProcesses\"),\n\t},\n\twaitOnResourceSignals: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnAutoScalingRollingUpdate: cdk.CfnAutoScalingRollingUpdate = {\n  maxBatchSize: 123,\n  minInstancesInService: 123,\n  minSuccessfulInstancesPercent: 123,\n  pauseTime: 'pauseTime',\n  suspendProcesses: ['suspendProcesses'],\n  waitOnResourceSignals: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnAutoScalingRollingUpdate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnAutoScalingRollingUpdate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAutoScalingRollingUpdate: cdk.CfnAutoScalingRollingUpdate = {\n  maxBatchSize: 123,\n  minInstancesInService: 123,\n  minSuccessfulInstancesPercent: 123,\n  pauseTime: 'pauseTime',\n  suspendProcesses: ['suspendProcesses'],\n  waitOnResourceSignals: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 10,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "19de884bb59b16e688fd6cb939818f03a02957515bb872c9992434362105b7b0"
    },
    "e9837707965ae993f2bdd2ac0b5df27a7b84edefa7c697afc89e1f7cf1c5406a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_auto_scaling_scheduled_action = cdk.CfnAutoScalingScheduledAction(\n    ignore_unmodified_group_size_properties=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnAutoScalingScheduledAction cfnAutoScalingScheduledAction = new CfnAutoScalingScheduledAction {\n    IgnoreUnmodifiedGroupSizeProperties = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnAutoScalingScheduledAction cfnAutoScalingScheduledAction = CfnAutoScalingScheduledAction.builder()\n        .ignoreUnmodifiedGroupSizeProperties(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnAutoScalingScheduledAction := &cfnAutoScalingScheduledAction{\n\tignoreUnmodifiedGroupSizeProperties: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnAutoScalingScheduledAction: cdk.CfnAutoScalingScheduledAction = {\n  ignoreUnmodifiedGroupSizeProperties: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnAutoScalingScheduledAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnAutoScalingScheduledAction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAutoScalingScheduledAction: cdk.CfnAutoScalingScheduledAction = {\n  ignoreUnmodifiedGroupSizeProperties: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d4bb2a0490d4cb6bb335bcdcc39e32dfb64f604bf05f5201aff5007ddcd70618"
    },
    "6fc203d2adc73dd7a7c1b00b797f569750b2e4d30182c3f7bc773abef4c7a591": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_code_deploy_blue_green_additional_options = cdk.CfnCodeDeployBlueGreenAdditionalOptions(\n    termination_wait_time_in_minutes=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCodeDeployBlueGreenAdditionalOptions cfnCodeDeployBlueGreenAdditionalOptions = new CfnCodeDeployBlueGreenAdditionalOptions {\n    TerminationWaitTimeInMinutes = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCodeDeployBlueGreenAdditionalOptions cfnCodeDeployBlueGreenAdditionalOptions = CfnCodeDeployBlueGreenAdditionalOptions.builder()\n        .terminationWaitTimeInMinutes(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCodeDeployBlueGreenAdditionalOptions := &cfnCodeDeployBlueGreenAdditionalOptions{\n\tterminationWaitTimeInMinutes: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCodeDeployBlueGreenAdditionalOptions: cdk.CfnCodeDeployBlueGreenAdditionalOptions = {\n  terminationWaitTimeInMinutes: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployBlueGreenAdditionalOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCodeDeployBlueGreenAdditionalOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeDeployBlueGreenAdditionalOptions: cdk.CfnCodeDeployBlueGreenAdditionalOptions = {\n  terminationWaitTimeInMinutes: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2aa42bf3f5e5e6f7fd7700b0e7433ace1ac08a7250e23ab9c5d4a4ca17cfdaf8"
    },
    "135ef1815960ac37c57002d0727baa92deaf39174cfa2a32068a98364c990c1a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_code_deploy_blue_green_application = cdk.CfnCodeDeployBlueGreenApplication(\n    ecs_attributes=cdk.CfnCodeDeployBlueGreenEcsAttributes(\n        task_definitions=[\"taskDefinitions\"],\n        task_sets=[\"taskSets\"],\n        traffic_routing=cdk.CfnTrafficRouting(\n            prod_traffic_route=cdk.CfnTrafficRoute(\n                logical_id=\"logicalId\",\n                type=\"type\"\n            ),\n            target_groups=[\"targetGroups\"],\n            test_traffic_route=cdk.CfnTrafficRoute(\n                logical_id=\"logicalId\",\n                type=\"type\"\n            )\n        )\n    ),\n    target=cdk.CfnCodeDeployBlueGreenApplicationTarget(\n        logical_id=\"logicalId\",\n        type=\"type\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCodeDeployBlueGreenApplication cfnCodeDeployBlueGreenApplication = new CfnCodeDeployBlueGreenApplication {\n    EcsAttributes = new CfnCodeDeployBlueGreenEcsAttributes {\n        TaskDefinitions = new [] { \"taskDefinitions\" },\n        TaskSets = new [] { \"taskSets\" },\n        TrafficRouting = new CfnTrafficRouting {\n            ProdTrafficRoute = new CfnTrafficRoute {\n                LogicalId = \"logicalId\",\n                Type = \"type\"\n            },\n            TargetGroups = new [] { \"targetGroups\" },\n            TestTrafficRoute = new CfnTrafficRoute {\n                LogicalId = \"logicalId\",\n                Type = \"type\"\n            }\n        }\n    },\n    Target = new CfnCodeDeployBlueGreenApplicationTarget {\n        LogicalId = \"logicalId\",\n        Type = \"type\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCodeDeployBlueGreenApplication cfnCodeDeployBlueGreenApplication = CfnCodeDeployBlueGreenApplication.builder()\n        .ecsAttributes(CfnCodeDeployBlueGreenEcsAttributes.builder()\n                .taskDefinitions(List.of(\"taskDefinitions\"))\n                .taskSets(List.of(\"taskSets\"))\n                .trafficRouting(CfnTrafficRouting.builder()\n                        .prodTrafficRoute(CfnTrafficRoute.builder()\n                                .logicalId(\"logicalId\")\n                                .type(\"type\")\n                                .build())\n                        .targetGroups(List.of(\"targetGroups\"))\n                        .testTrafficRoute(CfnTrafficRoute.builder()\n                                .logicalId(\"logicalId\")\n                                .type(\"type\")\n                                .build())\n                        .build())\n                .build())\n        .target(CfnCodeDeployBlueGreenApplicationTarget.builder()\n                .logicalId(\"logicalId\")\n                .type(\"type\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCodeDeployBlueGreenApplication := &cfnCodeDeployBlueGreenApplication{\n\tecsAttributes: &cfnCodeDeployBlueGreenEcsAttributes{\n\t\ttaskDefinitions: []*string{\n\t\t\tjsii.String(\"taskDefinitions\"),\n\t\t},\n\t\ttaskSets: []*string{\n\t\t\tjsii.String(\"taskSets\"),\n\t\t},\n\t\ttrafficRouting: &cfnTrafficRouting{\n\t\t\tprodTrafficRoute: &cfnTrafficRoute{\n\t\t\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t\ttargetGroups: []*string{\n\t\t\t\tjsii.String(\"targetGroups\"),\n\t\t\t},\n\t\t\ttestTrafficRoute: &cfnTrafficRoute{\n\t\t\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t},\n\ttarget: &cfnCodeDeployBlueGreenApplicationTarget{\n\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\ttype: jsii.String(\"type\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCodeDeployBlueGreenApplication: cdk.CfnCodeDeployBlueGreenApplication = {\n  ecsAttributes: {\n    taskDefinitions: ['taskDefinitions'],\n    taskSets: ['taskSets'],\n    trafficRouting: {\n      prodTrafficRoute: {\n        logicalId: 'logicalId',\n        type: 'type',\n      },\n      targetGroups: ['targetGroups'],\n      testTrafficRoute: {\n        logicalId: 'logicalId',\n        type: 'type',\n      },\n    },\n  },\n  target: {\n    logicalId: 'logicalId',\n    type: 'type',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployBlueGreenApplication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCodeDeployBlueGreenApplication",
        "@aws-cdk/core.CfnCodeDeployBlueGreenApplicationTarget",
        "@aws-cdk/core.CfnCodeDeployBlueGreenEcsAttributes",
        "@aws-cdk/core.CfnTrafficRoute",
        "@aws-cdk/core.CfnTrafficRouting"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeDeployBlueGreenApplication: cdk.CfnCodeDeployBlueGreenApplication = {\n  ecsAttributes: {\n    taskDefinitions: ['taskDefinitions'],\n    taskSets: ['taskSets'],\n    trafficRouting: {\n      prodTrafficRoute: {\n        logicalId: 'logicalId',\n        type: 'type',\n      },\n      targetGroups: ['targetGroups'],\n      testTrafficRoute: {\n        logicalId: 'logicalId',\n        type: 'type',\n      },\n    },\n  },\n  target: {\n    logicalId: 'logicalId',\n    type: 'type',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 18,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "a724c4f22e549a54da8b5293ee6f4f2ea409dda07623eecf24b1b3123840fee0"
    },
    "db90fcb26e7a8eb3e7c7497fbf7f65fec7675424591d18ee31e868eca9289498": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_code_deploy_blue_green_application_target = cdk.CfnCodeDeployBlueGreenApplicationTarget(\n    logical_id=\"logicalId\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCodeDeployBlueGreenApplicationTarget cfnCodeDeployBlueGreenApplicationTarget = new CfnCodeDeployBlueGreenApplicationTarget {\n    LogicalId = \"logicalId\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCodeDeployBlueGreenApplicationTarget cfnCodeDeployBlueGreenApplicationTarget = CfnCodeDeployBlueGreenApplicationTarget.builder()\n        .logicalId(\"logicalId\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCodeDeployBlueGreenApplicationTarget := &cfnCodeDeployBlueGreenApplicationTarget{\n\tlogicalId: jsii.String(\"logicalId\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCodeDeployBlueGreenApplicationTarget: cdk.CfnCodeDeployBlueGreenApplicationTarget = {\n  logicalId: 'logicalId',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployBlueGreenApplicationTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCodeDeployBlueGreenApplicationTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeDeployBlueGreenApplicationTarget: cdk.CfnCodeDeployBlueGreenApplicationTarget = {\n  logicalId: 'logicalId',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1b0d6398bf5f4cc4eb8df23fff74709e4fdef21941a86386698d36c16fc4496c"
    },
    "b7a423bdaf30f42496476342b529e9e71748b40ce10394f8c1b5dbb99b252c12": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_code_deploy_blue_green_ecs_attributes = cdk.CfnCodeDeployBlueGreenEcsAttributes(\n    task_definitions=[\"taskDefinitions\"],\n    task_sets=[\"taskSets\"],\n    traffic_routing=cdk.CfnTrafficRouting(\n        prod_traffic_route=cdk.CfnTrafficRoute(\n            logical_id=\"logicalId\",\n            type=\"type\"\n        ),\n        target_groups=[\"targetGroups\"],\n        test_traffic_route=cdk.CfnTrafficRoute(\n            logical_id=\"logicalId\",\n            type=\"type\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCodeDeployBlueGreenEcsAttributes cfnCodeDeployBlueGreenEcsAttributes = new CfnCodeDeployBlueGreenEcsAttributes {\n    TaskDefinitions = new [] { \"taskDefinitions\" },\n    TaskSets = new [] { \"taskSets\" },\n    TrafficRouting = new CfnTrafficRouting {\n        ProdTrafficRoute = new CfnTrafficRoute {\n            LogicalId = \"logicalId\",\n            Type = \"type\"\n        },\n        TargetGroups = new [] { \"targetGroups\" },\n        TestTrafficRoute = new CfnTrafficRoute {\n            LogicalId = \"logicalId\",\n            Type = \"type\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCodeDeployBlueGreenEcsAttributes cfnCodeDeployBlueGreenEcsAttributes = CfnCodeDeployBlueGreenEcsAttributes.builder()\n        .taskDefinitions(List.of(\"taskDefinitions\"))\n        .taskSets(List.of(\"taskSets\"))\n        .trafficRouting(CfnTrafficRouting.builder()\n                .prodTrafficRoute(CfnTrafficRoute.builder()\n                        .logicalId(\"logicalId\")\n                        .type(\"type\")\n                        .build())\n                .targetGroups(List.of(\"targetGroups\"))\n                .testTrafficRoute(CfnTrafficRoute.builder()\n                        .logicalId(\"logicalId\")\n                        .type(\"type\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCodeDeployBlueGreenEcsAttributes := &cfnCodeDeployBlueGreenEcsAttributes{\n\ttaskDefinitions: []*string{\n\t\tjsii.String(\"taskDefinitions\"),\n\t},\n\ttaskSets: []*string{\n\t\tjsii.String(\"taskSets\"),\n\t},\n\ttrafficRouting: &cfnTrafficRouting{\n\t\tprodTrafficRoute: &cfnTrafficRoute{\n\t\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t\ttargetGroups: []*string{\n\t\t\tjsii.String(\"targetGroups\"),\n\t\t},\n\t\ttestTrafficRoute: &cfnTrafficRoute{\n\t\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCodeDeployBlueGreenEcsAttributes: cdk.CfnCodeDeployBlueGreenEcsAttributes = {\n  taskDefinitions: ['taskDefinitions'],\n  taskSets: ['taskSets'],\n  trafficRouting: {\n    prodTrafficRoute: {\n      logicalId: 'logicalId',\n      type: 'type',\n    },\n    targetGroups: ['targetGroups'],\n    testTrafficRoute: {\n      logicalId: 'logicalId',\n      type: 'type',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployBlueGreenEcsAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCodeDeployBlueGreenEcsAttributes",
        "@aws-cdk/core.CfnTrafficRoute",
        "@aws-cdk/core.CfnTrafficRouting"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeDeployBlueGreenEcsAttributes: cdk.CfnCodeDeployBlueGreenEcsAttributes = {\n  taskDefinitions: ['taskDefinitions'],\n  taskSets: ['taskSets'],\n  trafficRouting: {\n    prodTrafficRoute: {\n      logicalId: 'logicalId',\n      type: 'type',\n    },\n    targetGroups: ['targetGroups'],\n    testTrafficRoute: {\n      logicalId: 'logicalId',\n      type: 'type',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "4143bc3fd42c33056f06c301432dc9428965535cd5f19d6f60c1c3b25b1e694d"
    },
    "2a8dd00888257444bfb3e72213d541822459cff52d3cefb8860e404f5b12c800": {
      "translations": {
        "python": {
          "source": "# cfn_template: cfn_inc.CfnInclude\n\n# mutating the hook\n# my_role: iam.Role\n\nhook = cfn_template.get_hook(\"MyOutput\")\ncode_deploy_hook = hook\ncode_deploy_hook.service_role = my_role.role_arn",
          "version": "2"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the hook\nRole myRole;\n\nCfnHook hook = cfnTemplate.GetHook(\"MyOutput\");\nCfnCodeDeployBlueGreenHook codeDeployHook = (CfnCodeDeployBlueGreenHook)hook;\ncodeDeployHook.ServiceRole = myRole.RoleArn;",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the hook\nRole myRole;\n\nCfnHook hook = cfnTemplate.getHook(\"MyOutput\");\nCfnCodeDeployBlueGreenHook codeDeployHook = (CfnCodeDeployBlueGreenHook)hook;\ncodeDeployHook.getServiceRole() = myRole.getRoleArn();",
          "version": "1"
        },
        "go": {
          "source": "var cfnTemplate cfnInclude\n\n// mutating the hook\nvar myRole role\nhook := cfnTemplate.getHook(jsii.String(\"MyOutput\"))\ncodeDeployHook := hook.(cfnCodeDeployBlueGreenHook)\ncodeDeployHook.serviceRole = myRole.roleArn",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\nconst hook: core.CfnHook = cfnTemplate.getHook('MyOutput');\n\n// mutating the hook\ndeclare const myRole: iam.Role;\nconst codeDeployHook = hook as core.CfnCodeDeployBlueGreenHook;\ncodeDeployHook.serviceRole = myRole.roleArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployBlueGreenHook"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Role#roleArn",
        "@aws-cdk/cloudformation-include.CfnInclude#getHook",
        "@aws-cdk/core.CfnCodeDeployBlueGreenHook",
        "@aws-cdk/core.CfnHook"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// mutating the hook\ndeclare const myRole: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst hook: core.CfnHook = cfnTemplate.getHook('MyOutput');\nconst codeDeployHook = hook as core.CfnCodeDeployBlueGreenHook;\ncodeDeployHook.serviceRole = myRole.roleArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "62": 1,
        "75": 19,
        "130": 2,
        "153": 4,
        "169": 4,
        "194": 3,
        "196": 1,
        "209": 1,
        "217": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "f9f1b9f1c816fa086ec331be889655ddc231cbfa1b5fb8290cda337f21f3ac6c"
    },
    "9eb84b29e448218b1bcacf4b9742b0715f69971879b746857230b1ac6a7983b6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_code_deploy_blue_green_hook_props = cdk.CfnCodeDeployBlueGreenHookProps(\n    applications=[cdk.CfnCodeDeployBlueGreenApplication(\n        ecs_attributes=cdk.CfnCodeDeployBlueGreenEcsAttributes(\n            task_definitions=[\"taskDefinitions\"],\n            task_sets=[\"taskSets\"],\n            traffic_routing=cdk.CfnTrafficRouting(\n                prod_traffic_route=cdk.CfnTrafficRoute(\n                    logical_id=\"logicalId\",\n                    type=\"type\"\n                ),\n                target_groups=[\"targetGroups\"],\n                test_traffic_route=cdk.CfnTrafficRoute(\n                    logical_id=\"logicalId\",\n                    type=\"type\"\n                )\n            )\n        ),\n        target=cdk.CfnCodeDeployBlueGreenApplicationTarget(\n            logical_id=\"logicalId\",\n            type=\"type\"\n        )\n    )],\n    service_role=\"serviceRole\",\n\n    # the properties below are optional\n    additional_options=cdk.CfnCodeDeployBlueGreenAdditionalOptions(\n        termination_wait_time_in_minutes=123\n    ),\n    lifecycle_event_hooks=cdk.CfnCodeDeployBlueGreenLifecycleEventHooks(\n        after_allow_test_traffic=\"afterAllowTestTraffic\",\n        after_allow_traffic=\"afterAllowTraffic\",\n        after_install=\"afterInstall\",\n        before_allow_traffic=\"beforeAllowTraffic\",\n        before_install=\"beforeInstall\"\n    ),\n    traffic_routing_config=cdk.CfnTrafficRoutingConfig(\n        type=cdk.CfnTrafficRoutingType.ALL_AT_ONCE,\n\n        # the properties below are optional\n        time_based_canary=cdk.CfnTrafficRoutingTimeBasedCanary(\n            bake_time_mins=123,\n            step_percentage=123\n        ),\n        time_based_linear=cdk.CfnTrafficRoutingTimeBasedLinear(\n            bake_time_mins=123,\n            step_percentage=123\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCodeDeployBlueGreenHookProps cfnCodeDeployBlueGreenHookProps = new CfnCodeDeployBlueGreenHookProps {\n    Applications = new [] { new CfnCodeDeployBlueGreenApplication {\n        EcsAttributes = new CfnCodeDeployBlueGreenEcsAttributes {\n            TaskDefinitions = new [] { \"taskDefinitions\" },\n            TaskSets = new [] { \"taskSets\" },\n            TrafficRouting = new CfnTrafficRouting {\n                ProdTrafficRoute = new CfnTrafficRoute {\n                    LogicalId = \"logicalId\",\n                    Type = \"type\"\n                },\n                TargetGroups = new [] { \"targetGroups\" },\n                TestTrafficRoute = new CfnTrafficRoute {\n                    LogicalId = \"logicalId\",\n                    Type = \"type\"\n                }\n            }\n        },\n        Target = new CfnCodeDeployBlueGreenApplicationTarget {\n            LogicalId = \"logicalId\",\n            Type = \"type\"\n        }\n    } },\n    ServiceRole = \"serviceRole\",\n\n    // the properties below are optional\n    AdditionalOptions = new CfnCodeDeployBlueGreenAdditionalOptions {\n        TerminationWaitTimeInMinutes = 123\n    },\n    LifecycleEventHooks = new CfnCodeDeployBlueGreenLifecycleEventHooks {\n        AfterAllowTestTraffic = \"afterAllowTestTraffic\",\n        AfterAllowTraffic = \"afterAllowTraffic\",\n        AfterInstall = \"afterInstall\",\n        BeforeAllowTraffic = \"beforeAllowTraffic\",\n        BeforeInstall = \"beforeInstall\"\n    },\n    TrafficRoutingConfig = new CfnTrafficRoutingConfig {\n        Type = CfnTrafficRoutingType.ALL_AT_ONCE,\n\n        // the properties below are optional\n        TimeBasedCanary = new CfnTrafficRoutingTimeBasedCanary {\n            BakeTimeMins = 123,\n            StepPercentage = 123\n        },\n        TimeBasedLinear = new CfnTrafficRoutingTimeBasedLinear {\n            BakeTimeMins = 123,\n            StepPercentage = 123\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCodeDeployBlueGreenHookProps cfnCodeDeployBlueGreenHookProps = CfnCodeDeployBlueGreenHookProps.builder()\n        .applications(List.of(CfnCodeDeployBlueGreenApplication.builder()\n                .ecsAttributes(CfnCodeDeployBlueGreenEcsAttributes.builder()\n                        .taskDefinitions(List.of(\"taskDefinitions\"))\n                        .taskSets(List.of(\"taskSets\"))\n                        .trafficRouting(CfnTrafficRouting.builder()\n                                .prodTrafficRoute(CfnTrafficRoute.builder()\n                                        .logicalId(\"logicalId\")\n                                        .type(\"type\")\n                                        .build())\n                                .targetGroups(List.of(\"targetGroups\"))\n                                .testTrafficRoute(CfnTrafficRoute.builder()\n                                        .logicalId(\"logicalId\")\n                                        .type(\"type\")\n                                        .build())\n                                .build())\n                        .build())\n                .target(CfnCodeDeployBlueGreenApplicationTarget.builder()\n                        .logicalId(\"logicalId\")\n                        .type(\"type\")\n                        .build())\n                .build()))\n        .serviceRole(\"serviceRole\")\n\n        // the properties below are optional\n        .additionalOptions(CfnCodeDeployBlueGreenAdditionalOptions.builder()\n                .terminationWaitTimeInMinutes(123)\n                .build())\n        .lifecycleEventHooks(CfnCodeDeployBlueGreenLifecycleEventHooks.builder()\n                .afterAllowTestTraffic(\"afterAllowTestTraffic\")\n                .afterAllowTraffic(\"afterAllowTraffic\")\n                .afterInstall(\"afterInstall\")\n                .beforeAllowTraffic(\"beforeAllowTraffic\")\n                .beforeInstall(\"beforeInstall\")\n                .build())\n        .trafficRoutingConfig(CfnTrafficRoutingConfig.builder()\n                .type(CfnTrafficRoutingType.ALL_AT_ONCE)\n\n                // the properties below are optional\n                .timeBasedCanary(CfnTrafficRoutingTimeBasedCanary.builder()\n                        .bakeTimeMins(123)\n                        .stepPercentage(123)\n                        .build())\n                .timeBasedLinear(CfnTrafficRoutingTimeBasedLinear.builder()\n                        .bakeTimeMins(123)\n                        .stepPercentage(123)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCodeDeployBlueGreenHookProps := &cfnCodeDeployBlueGreenHookProps{\n\tapplications: []cfnCodeDeployBlueGreenApplication{\n\t\t&cfnCodeDeployBlueGreenApplication{\n\t\t\tecsAttributes: &cfnCodeDeployBlueGreenEcsAttributes{\n\t\t\t\ttaskDefinitions: []*string{\n\t\t\t\t\tjsii.String(\"taskDefinitions\"),\n\t\t\t\t},\n\t\t\t\ttaskSets: []*string{\n\t\t\t\t\tjsii.String(\"taskSets\"),\n\t\t\t\t},\n\t\t\t\ttrafficRouting: &cfnTrafficRouting{\n\t\t\t\t\tprodTrafficRoute: &cfnTrafficRoute{\n\t\t\t\t\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t\ttargetGroups: []*string{\n\t\t\t\t\t\tjsii.String(\"targetGroups\"),\n\t\t\t\t\t},\n\t\t\t\t\ttestTrafficRoute: &cfnTrafficRoute{\n\t\t\t\t\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttarget: &cfnCodeDeployBlueGreenApplicationTarget{\n\t\t\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t},\n\tserviceRole: jsii.String(\"serviceRole\"),\n\n\t// the properties below are optional\n\tadditionalOptions: &cfnCodeDeployBlueGreenAdditionalOptions{\n\t\tterminationWaitTimeInMinutes: jsii.Number(123),\n\t},\n\tlifecycleEventHooks: &cfnCodeDeployBlueGreenLifecycleEventHooks{\n\t\tafterAllowTestTraffic: jsii.String(\"afterAllowTestTraffic\"),\n\t\tafterAllowTraffic: jsii.String(\"afterAllowTraffic\"),\n\t\tafterInstall: jsii.String(\"afterInstall\"),\n\t\tbeforeAllowTraffic: jsii.String(\"beforeAllowTraffic\"),\n\t\tbeforeInstall: jsii.String(\"beforeInstall\"),\n\t},\n\ttrafficRoutingConfig: &cfnTrafficRoutingConfig{\n\t\ttype: cdk.cfnTrafficRoutingType_ALL_AT_ONCE,\n\n\t\t// the properties below are optional\n\t\ttimeBasedCanary: &cfnTrafficRoutingTimeBasedCanary{\n\t\t\tbakeTimeMins: jsii.Number(123),\n\t\t\tstepPercentage: jsii.Number(123),\n\t\t},\n\t\ttimeBasedLinear: &cfnTrafficRoutingTimeBasedLinear{\n\t\t\tbakeTimeMins: jsii.Number(123),\n\t\t\tstepPercentage: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCodeDeployBlueGreenHookProps: cdk.CfnCodeDeployBlueGreenHookProps = {\n  applications: [{\n    ecsAttributes: {\n      taskDefinitions: ['taskDefinitions'],\n      taskSets: ['taskSets'],\n      trafficRouting: {\n        prodTrafficRoute: {\n          logicalId: 'logicalId',\n          type: 'type',\n        },\n        targetGroups: ['targetGroups'],\n        testTrafficRoute: {\n          logicalId: 'logicalId',\n          type: 'type',\n        },\n      },\n    },\n    target: {\n      logicalId: 'logicalId',\n      type: 'type',\n    },\n  }],\n  serviceRole: 'serviceRole',\n\n  // the properties below are optional\n  additionalOptions: {\n    terminationWaitTimeInMinutes: 123,\n  },\n  lifecycleEventHooks: {\n    afterAllowTestTraffic: 'afterAllowTestTraffic',\n    afterAllowTraffic: 'afterAllowTraffic',\n    afterInstall: 'afterInstall',\n    beforeAllowTraffic: 'beforeAllowTraffic',\n    beforeInstall: 'beforeInstall',\n  },\n  trafficRoutingConfig: {\n    type: cdk.CfnTrafficRoutingType.ALL_AT_ONCE,\n\n    // the properties below are optional\n    timeBasedCanary: {\n      bakeTimeMins: 123,\n      stepPercentage: 123,\n    },\n    timeBasedLinear: {\n      bakeTimeMins: 123,\n      stepPercentage: 123,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployBlueGreenHookProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCodeDeployBlueGreenAdditionalOptions",
        "@aws-cdk/core.CfnCodeDeployBlueGreenApplicationTarget",
        "@aws-cdk/core.CfnCodeDeployBlueGreenEcsAttributes",
        "@aws-cdk/core.CfnCodeDeployBlueGreenHookProps",
        "@aws-cdk/core.CfnCodeDeployBlueGreenLifecycleEventHooks",
        "@aws-cdk/core.CfnTrafficRoute",
        "@aws-cdk/core.CfnTrafficRouting",
        "@aws-cdk/core.CfnTrafficRoutingConfig",
        "@aws-cdk/core.CfnTrafficRoutingTimeBasedCanary",
        "@aws-cdk/core.CfnTrafficRoutingTimeBasedLinear",
        "@aws-cdk/core.CfnTrafficRoutingType",
        "@aws-cdk/core.CfnTrafficRoutingType#ALL_AT_ONCE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeDeployBlueGreenHookProps: cdk.CfnCodeDeployBlueGreenHookProps = {\n  applications: [{\n    ecsAttributes: {\n      taskDefinitions: ['taskDefinitions'],\n      taskSets: ['taskSets'],\n      trafficRouting: {\n        prodTrafficRoute: {\n          logicalId: 'logicalId',\n          type: 'type',\n        },\n        targetGroups: ['targetGroups'],\n        testTrafficRoute: {\n          logicalId: 'logicalId',\n          type: 'type',\n        },\n      },\n    },\n    target: {\n      logicalId: 'logicalId',\n      type: 'type',\n    },\n  }],\n  serviceRole: 'serviceRole',\n\n  // the properties below are optional\n  additionalOptions: {\n    terminationWaitTimeInMinutes: 123,\n  },\n  lifecycleEventHooks: {\n    afterAllowTestTraffic: 'afterAllowTestTraffic',\n    afterAllowTraffic: 'afterAllowTraffic',\n    afterInstall: 'afterInstall',\n    beforeAllowTraffic: 'beforeAllowTraffic',\n    beforeInstall: 'beforeInstall',\n  },\n  trafficRoutingConfig: {\n    type: cdk.CfnTrafficRoutingType.ALL_AT_ONCE,\n\n    // the properties below are optional\n    timeBasedCanary: {\n      bakeTimeMins: 123,\n      stepPercentage: 123,\n    },\n    timeBasedLinear: {\n      bakeTimeMins: 123,\n      stepPercentage: 123,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 5,
        "10": 16,
        "75": 39,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 12,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 32,
        "290": 1
      },
      "fqnsFingerprint": "18bcf8c0e196813231ffbc72c6dbf8bda8a7464c271a33d041e7a61ba5b3c99c"
    },
    "cde70e05f8b6fe563c4cdf54a14953ed37a188810395c2561003c9b2aa522145": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_code_deploy_blue_green_lifecycle_event_hooks = cdk.CfnCodeDeployBlueGreenLifecycleEventHooks(\n    after_allow_test_traffic=\"afterAllowTestTraffic\",\n    after_allow_traffic=\"afterAllowTraffic\",\n    after_install=\"afterInstall\",\n    before_allow_traffic=\"beforeAllowTraffic\",\n    before_install=\"beforeInstall\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCodeDeployBlueGreenLifecycleEventHooks cfnCodeDeployBlueGreenLifecycleEventHooks = new CfnCodeDeployBlueGreenLifecycleEventHooks {\n    AfterAllowTestTraffic = \"afterAllowTestTraffic\",\n    AfterAllowTraffic = \"afterAllowTraffic\",\n    AfterInstall = \"afterInstall\",\n    BeforeAllowTraffic = \"beforeAllowTraffic\",\n    BeforeInstall = \"beforeInstall\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCodeDeployBlueGreenLifecycleEventHooks cfnCodeDeployBlueGreenLifecycleEventHooks = CfnCodeDeployBlueGreenLifecycleEventHooks.builder()\n        .afterAllowTestTraffic(\"afterAllowTestTraffic\")\n        .afterAllowTraffic(\"afterAllowTraffic\")\n        .afterInstall(\"afterInstall\")\n        .beforeAllowTraffic(\"beforeAllowTraffic\")\n        .beforeInstall(\"beforeInstall\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCodeDeployBlueGreenLifecycleEventHooks := &cfnCodeDeployBlueGreenLifecycleEventHooks{\n\tafterAllowTestTraffic: jsii.String(\"afterAllowTestTraffic\"),\n\tafterAllowTraffic: jsii.String(\"afterAllowTraffic\"),\n\tafterInstall: jsii.String(\"afterInstall\"),\n\tbeforeAllowTraffic: jsii.String(\"beforeAllowTraffic\"),\n\tbeforeInstall: jsii.String(\"beforeInstall\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCodeDeployBlueGreenLifecycleEventHooks: cdk.CfnCodeDeployBlueGreenLifecycleEventHooks = {\n  afterAllowTestTraffic: 'afterAllowTestTraffic',\n  afterAllowTraffic: 'afterAllowTraffic',\n  afterInstall: 'afterInstall',\n  beforeAllowTraffic: 'beforeAllowTraffic',\n  beforeInstall: 'beforeInstall',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployBlueGreenLifecycleEventHooks"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCodeDeployBlueGreenLifecycleEventHooks"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeDeployBlueGreenLifecycleEventHooks: cdk.CfnCodeDeployBlueGreenLifecycleEventHooks = {\n  afterAllowTestTraffic: 'afterAllowTestTraffic',\n  afterAllowTraffic: 'afterAllowTraffic',\n  afterInstall: 'afterInstall',\n  beforeAllowTraffic: 'beforeAllowTraffic',\n  beforeInstall: 'beforeInstall',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "60447f3fa74089b1fe7a62de9517c03e9f2cc3f3c5713da80a2ea8cbdfc59cf7"
    },
    "6cf37aec1fe50be9774a55097a0e1f470d8df614808089b5da622234b721336b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_code_deploy_lambda_alias_update = cdk.CfnCodeDeployLambdaAliasUpdate(\n    application_name=\"applicationName\",\n    deployment_group_name=\"deploymentGroupName\",\n\n    # the properties below are optional\n    after_allow_traffic_hook=\"afterAllowTrafficHook\",\n    before_allow_traffic_hook=\"beforeAllowTrafficHook\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCodeDeployLambdaAliasUpdate cfnCodeDeployLambdaAliasUpdate = new CfnCodeDeployLambdaAliasUpdate {\n    ApplicationName = \"applicationName\",\n    DeploymentGroupName = \"deploymentGroupName\",\n\n    // the properties below are optional\n    AfterAllowTrafficHook = \"afterAllowTrafficHook\",\n    BeforeAllowTrafficHook = \"beforeAllowTrafficHook\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCodeDeployLambdaAliasUpdate cfnCodeDeployLambdaAliasUpdate = CfnCodeDeployLambdaAliasUpdate.builder()\n        .applicationName(\"applicationName\")\n        .deploymentGroupName(\"deploymentGroupName\")\n\n        // the properties below are optional\n        .afterAllowTrafficHook(\"afterAllowTrafficHook\")\n        .beforeAllowTrafficHook(\"beforeAllowTrafficHook\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCodeDeployLambdaAliasUpdate := &cfnCodeDeployLambdaAliasUpdate{\n\tapplicationName: jsii.String(\"applicationName\"),\n\tdeploymentGroupName: jsii.String(\"deploymentGroupName\"),\n\n\t// the properties below are optional\n\tafterAllowTrafficHook: jsii.String(\"afterAllowTrafficHook\"),\n\tbeforeAllowTrafficHook: jsii.String(\"beforeAllowTrafficHook\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCodeDeployLambdaAliasUpdate: cdk.CfnCodeDeployLambdaAliasUpdate = {\n  applicationName: 'applicationName',\n  deploymentGroupName: 'deploymentGroupName',\n\n  // the properties below are optional\n  afterAllowTrafficHook: 'afterAllowTrafficHook',\n  beforeAllowTrafficHook: 'beforeAllowTrafficHook',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployLambdaAliasUpdate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCodeDeployLambdaAliasUpdate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCodeDeployLambdaAliasUpdate: cdk.CfnCodeDeployLambdaAliasUpdate = {\n  applicationName: 'applicationName',\n  deploymentGroupName: 'deploymentGroupName',\n\n  // the properties below are optional\n  afterAllowTrafficHook: 'afterAllowTrafficHook',\n  beforeAllowTrafficHook: 'beforeAllowTrafficHook',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3ca625abc416669290cc233cee675c8c530efc11c8373aecd3764cbb044069a4"
    },
    "45e7c0dc02f9ad0299544c90e35823b438641dce6719f05950c0d93f6b6efdca": {
      "translations": {
        "python": {
          "source": "raw_bucket = s3.CfnBucket(self, \"Bucket\")\n# -or-\nraw_bucket_alt = my_bucket.node.default_child\n\n# then\nraw_bucket.cfn_options.condition = CfnCondition(self, \"EnableBucket\")\nraw_bucket.cfn_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "2"
        },
        "csharp": {
          "source": "CfnBucket rawBucket = new CfnBucket(this, \"Bucket\", new CfnBucketProps { });\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.Node.DefaultChild;\n\n// then\nrawBucket.CfnOptions.Condition = new CfnCondition(this, \"EnableBucket\", new CfnConditionProps { });\nrawBucket.CfnOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "CfnBucket rawBucket = CfnBucket.Builder.create(this, \"Bucket\").build();\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.getNode().getDefaultChild();\n\n// then\nrawBucket.getCfnOptions().getCondition() = CfnCondition.Builder.create(this, \"EnableBucket\").build();\nrawBucket.getCfnOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "go": {
          "source": "rawBucket := s3.NewCfnBucket(this, jsii.String(\"Bucket\"), &cfnBucketProps{\n})\n// -or-\nrawBucketAlt := myBucket.node.defaultChild.(cfnBucket)\n\n// then\nrawBucket.cfnOptions.condition = NewCfnCondition(this, jsii.String(\"EnableBucket\"), &cfnConditionProps{\n})\nrawBucket.cfnOptions.metadata = map[string]interface{}{\n\t\"metadataKey\": jsii.String(\"MetadataValue\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.CfnBucketProps",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.ICfnResourceOptions#metadata",
        "@aws-cdk/core.IConstruct#node",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "62": 2,
        "75": 17,
        "104": 2,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "197": 2,
        "209": 2,
        "217": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "8cfa6d22d7e3fb9050eac6b342fc8b118ea2fa99814465cd9c5ff2b7bc2c8ba5"
    },
    "51321fc081b7604dad80762a655a7f1cf1320ac7c4a412b1b8f34d7aa02ebef1": {
      "translations": {
        "python": {
          "source": "raw_bucket = s3.CfnBucket(self, \"Bucket\")\n# -or-\nraw_bucket_alt = my_bucket.node.default_child\n\n# then\nraw_bucket.cfn_options.condition = CfnCondition(self, \"EnableBucket\")\nraw_bucket.cfn_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "2"
        },
        "csharp": {
          "source": "CfnBucket rawBucket = new CfnBucket(this, \"Bucket\", new CfnBucketProps { });\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.Node.DefaultChild;\n\n// then\nrawBucket.CfnOptions.Condition = new CfnCondition(this, \"EnableBucket\", new CfnConditionProps { });\nrawBucket.CfnOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "CfnBucket rawBucket = CfnBucket.Builder.create(this, \"Bucket\").build();\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.getNode().getDefaultChild();\n\n// then\nrawBucket.getCfnOptions().getCondition() = CfnCondition.Builder.create(this, \"EnableBucket\").build();\nrawBucket.getCfnOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "go": {
          "source": "rawBucket := s3.NewCfnBucket(this, jsii.String(\"Bucket\"), &cfnBucketProps{\n})\n// -or-\nrawBucketAlt := myBucket.node.defaultChild.(cfnBucket)\n\n// then\nrawBucket.cfnOptions.condition = NewCfnCondition(this, jsii.String(\"EnableBucket\"), &cfnConditionProps{\n})\nrawBucket.cfnOptions.metadata = map[string]interface{}{\n\t\"metadataKey\": jsii.String(\"MetadataValue\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnConditionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.CfnBucketProps",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.ICfnResourceOptions#metadata",
        "@aws-cdk/core.IConstruct#node",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "62": 2,
        "75": 17,
        "104": 2,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "197": 2,
        "209": 2,
        "217": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "8cfa6d22d7e3fb9050eac6b342fc8b118ea2fa99814465cd9c5ff2b7bc2c8ba5"
    },
    "46f6e0b2af1fcd52151acd064959d1211582426a8e757d22f1354b6e23bbf1dc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_creation_policy = cdk.CfnCreationPolicy(\n    auto_scaling_creation_policy=cdk.CfnResourceAutoScalingCreationPolicy(\n        min_successful_instances_percent=123\n    ),\n    resource_signal=cdk.CfnResourceSignal(\n        count=123,\n        timeout=\"timeout\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCreationPolicy cfnCreationPolicy = new CfnCreationPolicy {\n    AutoScalingCreationPolicy = new CfnResourceAutoScalingCreationPolicy {\n        MinSuccessfulInstancesPercent = 123\n    },\n    ResourceSignal = new CfnResourceSignal {\n        Count = 123,\n        Timeout = \"timeout\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCreationPolicy cfnCreationPolicy = CfnCreationPolicy.builder()\n        .autoScalingCreationPolicy(CfnResourceAutoScalingCreationPolicy.builder()\n                .minSuccessfulInstancesPercent(123)\n                .build())\n        .resourceSignal(CfnResourceSignal.builder()\n                .count(123)\n                .timeout(\"timeout\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCreationPolicy := &cfnCreationPolicy{\n\tautoScalingCreationPolicy: &cfnResourceAutoScalingCreationPolicy{\n\t\tminSuccessfulInstancesPercent: jsii.Number(123),\n\t},\n\tresourceSignal: &cfnResourceSignal{\n\t\tcount: jsii.Number(123),\n\t\ttimeout: jsii.String(\"timeout\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCreationPolicy: cdk.CfnCreationPolicy = {\n  autoScalingCreationPolicy: {\n    minSuccessfulInstancesPercent: 123,\n  },\n  resourceSignal: {\n    count: 123,\n    timeout: 'timeout',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCreationPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCreationPolicy",
        "@aws-cdk/core.CfnResourceAutoScalingCreationPolicy",
        "@aws-cdk/core.CfnResourceSignal"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCreationPolicy: cdk.CfnCreationPolicy = {\n  autoScalingCreationPolicy: {\n    minSuccessfulInstancesPercent: 123,\n  },\n  resourceSignal: {\n    count: 123,\n    timeout: 'timeout',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c0ced934821af1bdc342f67145a46b20f767be054344562900c564473c97e4e1"
    },
    "1320e440edadc051560291b438b2190a83eb3328291007b9a6dd0801cf307ef4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_custom_resource = cdk.CfnCustomResource(self, \"MyCfnCustomResource\",\n    service_token=\"serviceToken\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCustomResource cfnCustomResource = new CfnCustomResource(this, \"MyCfnCustomResource\", new CfnCustomResourceProps {\n    ServiceToken = \"serviceToken\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCustomResource cfnCustomResource = CfnCustomResource.Builder.create(this, \"MyCfnCustomResource\")\n        .serviceToken(\"serviceToken\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCustomResource := cdk.NewCfnCustomResource(this, jsii.String(\"MyCfnCustomResource\"), &cfnCustomResourceProps{\n\tserviceToken: jsii.String(\"serviceToken\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCustomResource = new cdk.CfnCustomResource(this, 'MyCfnCustomResource', {\n  serviceToken: 'serviceToken',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCustomResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCustomResource",
        "@aws-cdk/core.CfnCustomResourceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCustomResource = new cdk.CfnCustomResource(this, 'MyCfnCustomResource', {\n  serviceToken: 'serviceToken',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6919cfffd63e803f8fb3e1c2a690140a17b7f6bc78b19af96c819f70d8e95e40"
    },
    "d2873ccf2d34f80f9b53fd8a47666c5b6b3b18a18d752a6b11faa3bc43faa08e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_custom_resource_props = cdk.CfnCustomResourceProps(\n    service_token=\"serviceToken\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnCustomResourceProps cfnCustomResourceProps = new CfnCustomResourceProps {\n    ServiceToken = \"serviceToken\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnCustomResourceProps cfnCustomResourceProps = CfnCustomResourceProps.builder()\n        .serviceToken(\"serviceToken\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnCustomResourceProps := &cfnCustomResourceProps{\n\tserviceToken: jsii.String(\"serviceToken\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnCustomResourceProps: cdk.CfnCustomResourceProps = {\n  serviceToken: 'serviceToken',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCustomResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnCustomResourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCustomResourceProps: cdk.CfnCustomResourceProps = {\n  serviceToken: 'serviceToken',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "52b4783db32c68e9288cb95e630a71f122dd756e06dc47a0b3a4c83411d68f89"
    },
    "7b222a0ad75f038003924731e14afc71602c89adc7f070d4b8d3d78bda116dde": {
      "translations": {
        "python": {
          "source": "CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\")",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "java": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "go": {
          "source": "NewCfnDynamicReference(cfnDynamicReferenceService_SECRETS_MANAGER, jsii.String(\"secret-id:secret-string:json-key:version-stage:version-id\"))",
          "version": "1"
        },
        "$": {
          "source": "new CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnDynamicReference"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnDynamicReference",
        "@aws-cdk/core.CfnDynamicReferenceService",
        "@aws-cdk/core.CfnDynamicReferenceService#SECRETS_MANAGER"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "194": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "50faf7f433413a0a5f352d7c4f0ee7d8d8400d9623b030a2777e1a1262496645"
    },
    "e5b39fdf72bd105e59e7f9bc761a9382e621d244630fb5362aea27fd0a565351": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_dynamic_reference_props = cdk.CfnDynamicReferenceProps(\n    reference_key=\"referenceKey\",\n    service=cdk.CfnDynamicReferenceService.SSM\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnDynamicReferenceProps cfnDynamicReferenceProps = new CfnDynamicReferenceProps {\n    ReferenceKey = \"referenceKey\",\n    Service = CfnDynamicReferenceService.SSM\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnDynamicReferenceProps cfnDynamicReferenceProps = CfnDynamicReferenceProps.builder()\n        .referenceKey(\"referenceKey\")\n        .service(CfnDynamicReferenceService.SSM)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnDynamicReferenceProps := &cfnDynamicReferenceProps{\n\treferenceKey: jsii.String(\"referenceKey\"),\n\tservice: cdk.cfnDynamicReferenceService_SSM,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnDynamicReferenceProps: cdk.CfnDynamicReferenceProps = {\n  referenceKey: 'referenceKey',\n  service: cdk.CfnDynamicReferenceService.SSM,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnDynamicReferenceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnDynamicReferenceProps",
        "@aws-cdk/core.CfnDynamicReferenceService",
        "@aws-cdk/core.CfnDynamicReferenceService#SSM"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDynamicReferenceProps: cdk.CfnDynamicReferenceProps = {\n  referenceKey: 'referenceKey',\n  service: cdk.CfnDynamicReferenceService.SSM,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "544b196945cd3ea7d0f90292005bd919199f7ee116f39fafaef837b28f9113c2"
    },
    "528cf9d0437909e775d7445c27c1693aefb343b74384b71c7ea1487fd4ed22d9": {
      "translations": {
        "python": {
          "source": "CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\")",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "java": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "go": {
          "source": "NewCfnDynamicReference(cfnDynamicReferenceService_SECRETS_MANAGER, jsii.String(\"secret-id:secret-string:json-key:version-stage:version-id\"))",
          "version": "1"
        },
        "$": {
          "source": "new CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnDynamicReferenceService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnDynamicReference",
        "@aws-cdk/core.CfnDynamicReferenceService",
        "@aws-cdk/core.CfnDynamicReferenceService#SECRETS_MANAGER"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "194": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "50faf7f433413a0a5f352d7c4f0ee7d8d8400d9623b030a2777e1a1262496645"
    },
    "1a9cd4bb7606a5accee9029793ec25362afb699d63864f63601c2125f0438a55": {
      "translations": {
        "python": {
          "source": "# cfn_template: cfn_inc.CfnInclude\n\n# mutating the hook\n# my_role: iam.Role\n\nhook = cfn_template.get_hook(\"MyOutput\")\ncode_deploy_hook = hook\ncode_deploy_hook.service_role = my_role.role_arn",
          "version": "2"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the hook\nRole myRole;\n\nCfnHook hook = cfnTemplate.GetHook(\"MyOutput\");\nCfnCodeDeployBlueGreenHook codeDeployHook = (CfnCodeDeployBlueGreenHook)hook;\ncodeDeployHook.ServiceRole = myRole.RoleArn;",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the hook\nRole myRole;\n\nCfnHook hook = cfnTemplate.getHook(\"MyOutput\");\nCfnCodeDeployBlueGreenHook codeDeployHook = (CfnCodeDeployBlueGreenHook)hook;\ncodeDeployHook.getServiceRole() = myRole.getRoleArn();",
          "version": "1"
        },
        "go": {
          "source": "var cfnTemplate cfnInclude\n\n// mutating the hook\nvar myRole role\nhook := cfnTemplate.getHook(jsii.String(\"MyOutput\"))\ncodeDeployHook := hook.(cfnCodeDeployBlueGreenHook)\ncodeDeployHook.serviceRole = myRole.roleArn",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\nconst hook: core.CfnHook = cfnTemplate.getHook('MyOutput');\n\n// mutating the hook\ndeclare const myRole: iam.Role;\nconst codeDeployHook = hook as core.CfnCodeDeployBlueGreenHook;\ncodeDeployHook.serviceRole = myRole.roleArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHook"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Role#roleArn",
        "@aws-cdk/cloudformation-include.CfnInclude#getHook",
        "@aws-cdk/core.CfnCodeDeployBlueGreenHook",
        "@aws-cdk/core.CfnHook"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// mutating the hook\ndeclare const myRole: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst hook: core.CfnHook = cfnTemplate.getHook('MyOutput');\nconst codeDeployHook = hook as core.CfnCodeDeployBlueGreenHook;\ncodeDeployHook.serviceRole = myRole.roleArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "62": 1,
        "75": 19,
        "130": 2,
        "153": 4,
        "169": 4,
        "194": 3,
        "196": 1,
        "209": 1,
        "217": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "f9f1b9f1c816fa086ec331be889655ddc231cbfa1b5fb8290cda337f21f3ac6c"
    },
    "f532413423dc2706484b28fc4df4c094fc389cc022485aa274102d98cf16944a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_hook_default_version = cdk.CfnHookDefaultVersion(self, \"MyCfnHookDefaultVersion\",\n    type_name=\"typeName\",\n    type_version_arn=\"typeVersionArn\",\n    version_id=\"versionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnHookDefaultVersion cfnHookDefaultVersion = new CfnHookDefaultVersion(this, \"MyCfnHookDefaultVersion\", new CfnHookDefaultVersionProps {\n    TypeName = \"typeName\",\n    TypeVersionArn = \"typeVersionArn\",\n    VersionId = \"versionId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnHookDefaultVersion cfnHookDefaultVersion = CfnHookDefaultVersion.Builder.create(this, \"MyCfnHookDefaultVersion\")\n        .typeName(\"typeName\")\n        .typeVersionArn(\"typeVersionArn\")\n        .versionId(\"versionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnHookDefaultVersion := cdk.NewCfnHookDefaultVersion(this, jsii.String(\"MyCfnHookDefaultVersion\"), &cfnHookDefaultVersionProps{\n\ttypeName: jsii.String(\"typeName\"),\n\ttypeVersionArn: jsii.String(\"typeVersionArn\"),\n\tversionId: jsii.String(\"versionId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnHookDefaultVersion = new cdk.CfnHookDefaultVersion(this, 'MyCfnHookDefaultVersion', /* all optional props */ {\n  typeName: 'typeName',\n  typeVersionArn: 'typeVersionArn',\n  versionId: 'versionId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHookDefaultVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnHookDefaultVersion",
        "@aws-cdk/core.CfnHookDefaultVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHookDefaultVersion = new cdk.CfnHookDefaultVersion(this, 'MyCfnHookDefaultVersion', /* all optional props */ {\n  typeName: 'typeName',\n  typeVersionArn: 'typeVersionArn',\n  versionId: 'versionId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f5cd8cc463606d6e0de6deeef84e0c7770cc610e2d234bf9847495dd2eea52a3"
    },
    "c510ffe203ea62f279986b45d388b3a25fe71e7965e4e94d569087bd1eea2248": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_hook_default_version_props = cdk.CfnHookDefaultVersionProps(\n    type_name=\"typeName\",\n    type_version_arn=\"typeVersionArn\",\n    version_id=\"versionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnHookDefaultVersionProps cfnHookDefaultVersionProps = new CfnHookDefaultVersionProps {\n    TypeName = \"typeName\",\n    TypeVersionArn = \"typeVersionArn\",\n    VersionId = \"versionId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnHookDefaultVersionProps cfnHookDefaultVersionProps = CfnHookDefaultVersionProps.builder()\n        .typeName(\"typeName\")\n        .typeVersionArn(\"typeVersionArn\")\n        .versionId(\"versionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnHookDefaultVersionProps := &cfnHookDefaultVersionProps{\n\ttypeName: jsii.String(\"typeName\"),\n\ttypeVersionArn: jsii.String(\"typeVersionArn\"),\n\tversionId: jsii.String(\"versionId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnHookDefaultVersionProps: cdk.CfnHookDefaultVersionProps = {\n  typeName: 'typeName',\n  typeVersionArn: 'typeVersionArn',\n  versionId: 'versionId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHookDefaultVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnHookDefaultVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHookDefaultVersionProps: cdk.CfnHookDefaultVersionProps = {\n  typeName: 'typeName',\n  typeVersionArn: 'typeVersionArn',\n  versionId: 'versionId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a1278c43e0588051b32d66c41ae7b71f45018409575c44731cee066c3d2c5f0f"
    },
    "583c1c8e5c539d425a01f1674cc758ec82f38e2fb1f083b945e37c8f237396c5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# properties: Any\n\ncfn_hook_props = cdk.CfnHookProps(\n    type=\"type\",\n\n    # the properties below are optional\n    properties={\n        \"properties_key\": properties\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar properties;\nCfnHookProps cfnHookProps = new CfnHookProps {\n    Type = \"type\",\n\n    // the properties below are optional\n    Properties = new Dictionary<string, object> {\n        { \"propertiesKey\", properties }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject properties;\n\nCfnHookProps cfnHookProps = CfnHookProps.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .properties(Map.of(\n                \"propertiesKey\", properties))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar properties interface{}\ncfnHookProps := &cfnHookProps{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tproperties: map[string]interface{}{\n\t\t\"propertiesKey\": properties,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const properties: any;\nconst cfnHookProps: cdk.CfnHookProps = {\n  type: 'type',\n\n  // the properties below are optional\n  properties: {\n    propertiesKey: properties,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHookProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnHookProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const properties: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHookProps: cdk.CfnHookProps = {\n  type: 'type',\n\n  // the properties below are optional\n  properties: {\n    propertiesKey: properties,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "c2a6906f0a6858223afbaef2afc9b95b07169312dcc0068d7a87ff6c6d8df8c5"
    },
    "29979439d31cbe001ffc07d5e4cc1cc13c709abf2ea8628a32ca10c45a10561f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_hook_type_config = cdk.CfnHookTypeConfig(self, \"MyCfnHookTypeConfig\",\n    configuration=\"configuration\",\n\n    # the properties below are optional\n    configuration_alias=\"configurationAlias\",\n    type_arn=\"typeArn\",\n    type_name=\"typeName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnHookTypeConfig cfnHookTypeConfig = new CfnHookTypeConfig(this, \"MyCfnHookTypeConfig\", new CfnHookTypeConfigProps {\n    Configuration = \"configuration\",\n\n    // the properties below are optional\n    ConfigurationAlias = \"configurationAlias\",\n    TypeArn = \"typeArn\",\n    TypeName = \"typeName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnHookTypeConfig cfnHookTypeConfig = CfnHookTypeConfig.Builder.create(this, \"MyCfnHookTypeConfig\")\n        .configuration(\"configuration\")\n\n        // the properties below are optional\n        .configurationAlias(\"configurationAlias\")\n        .typeArn(\"typeArn\")\n        .typeName(\"typeName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnHookTypeConfig := cdk.NewCfnHookTypeConfig(this, jsii.String(\"MyCfnHookTypeConfig\"), &cfnHookTypeConfigProps{\n\tconfiguration: jsii.String(\"configuration\"),\n\n\t// the properties below are optional\n\tconfigurationAlias: jsii.String(\"configurationAlias\"),\n\ttypeArn: jsii.String(\"typeArn\"),\n\ttypeName: jsii.String(\"typeName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnHookTypeConfig = new cdk.CfnHookTypeConfig(this, 'MyCfnHookTypeConfig', {\n  configuration: 'configuration',\n\n  // the properties below are optional\n  configurationAlias: 'configurationAlias',\n  typeArn: 'typeArn',\n  typeName: 'typeName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHookTypeConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnHookTypeConfig",
        "@aws-cdk/core.CfnHookTypeConfigProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHookTypeConfig = new cdk.CfnHookTypeConfig(this, 'MyCfnHookTypeConfig', {\n  configuration: 'configuration',\n\n  // the properties below are optional\n  configurationAlias: 'configurationAlias',\n  typeArn: 'typeArn',\n  typeName: 'typeName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b4c08e1a752582832c6fbfe8a2dae8e75a72a4fe393111d0599cc29f8c1dbca7"
    },
    "8958101a6c0894e3c2bcea2b6bf38297b16412fcf394e3da5fafdaedeaeee598": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_hook_type_config_props = cdk.CfnHookTypeConfigProps(\n    configuration=\"configuration\",\n\n    # the properties below are optional\n    configuration_alias=\"configurationAlias\",\n    type_arn=\"typeArn\",\n    type_name=\"typeName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnHookTypeConfigProps cfnHookTypeConfigProps = new CfnHookTypeConfigProps {\n    Configuration = \"configuration\",\n\n    // the properties below are optional\n    ConfigurationAlias = \"configurationAlias\",\n    TypeArn = \"typeArn\",\n    TypeName = \"typeName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnHookTypeConfigProps cfnHookTypeConfigProps = CfnHookTypeConfigProps.builder()\n        .configuration(\"configuration\")\n\n        // the properties below are optional\n        .configurationAlias(\"configurationAlias\")\n        .typeArn(\"typeArn\")\n        .typeName(\"typeName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnHookTypeConfigProps := &cfnHookTypeConfigProps{\n\tconfiguration: jsii.String(\"configuration\"),\n\n\t// the properties below are optional\n\tconfigurationAlias: jsii.String(\"configurationAlias\"),\n\ttypeArn: jsii.String(\"typeArn\"),\n\ttypeName: jsii.String(\"typeName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnHookTypeConfigProps: cdk.CfnHookTypeConfigProps = {\n  configuration: 'configuration',\n\n  // the properties below are optional\n  configurationAlias: 'configurationAlias',\n  typeArn: 'typeArn',\n  typeName: 'typeName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHookTypeConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnHookTypeConfigProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHookTypeConfigProps: cdk.CfnHookTypeConfigProps = {\n  configuration: 'configuration',\n\n  // the properties below are optional\n  configurationAlias: 'configurationAlias',\n  typeArn: 'typeArn',\n  typeName: 'typeName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "fbc5582fc958d17a8e24abccd1a17ebea780d809b429a9e71e468c91a0ffec6c"
    },
    "d48802f7046708a13c6af6ecc73453a6182ed7f3283237c601fd9c70f79adfb9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_hook_version = cdk.CfnHookVersion(self, \"MyCfnHookVersion\",\n    schema_handler_package=\"schemaHandlerPackage\",\n    type_name=\"typeName\",\n\n    # the properties below are optional\n    execution_role_arn=\"executionRoleArn\",\n    logging_config=cdk.CfnHookVersion.LoggingConfigProperty(\n        log_group_name=\"logGroupName\",\n        log_role_arn=\"logRoleArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnHookVersion cfnHookVersion = new CfnHookVersion(this, \"MyCfnHookVersion\", new CfnHookVersionProps {\n    SchemaHandlerPackage = \"schemaHandlerPackage\",\n    TypeName = \"typeName\",\n\n    // the properties below are optional\n    ExecutionRoleArn = \"executionRoleArn\",\n    LoggingConfig = new LoggingConfigProperty {\n        LogGroupName = \"logGroupName\",\n        LogRoleArn = \"logRoleArn\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnHookVersion cfnHookVersion = CfnHookVersion.Builder.create(this, \"MyCfnHookVersion\")\n        .schemaHandlerPackage(\"schemaHandlerPackage\")\n        .typeName(\"typeName\")\n\n        // the properties below are optional\n        .executionRoleArn(\"executionRoleArn\")\n        .loggingConfig(LoggingConfigProperty.builder()\n                .logGroupName(\"logGroupName\")\n                .logRoleArn(\"logRoleArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnHookVersion := cdk.NewCfnHookVersion(this, jsii.String(\"MyCfnHookVersion\"), &cfnHookVersionProps{\n\tschemaHandlerPackage: jsii.String(\"schemaHandlerPackage\"),\n\ttypeName: jsii.String(\"typeName\"),\n\n\t// the properties below are optional\n\texecutionRoleArn: jsii.String(\"executionRoleArn\"),\n\tloggingConfig: &loggingConfigProperty{\n\t\tlogGroupName: jsii.String(\"logGroupName\"),\n\t\tlogRoleArn: jsii.String(\"logRoleArn\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnHookVersion = new cdk.CfnHookVersion(this, 'MyCfnHookVersion', {\n  schemaHandlerPackage: 'schemaHandlerPackage',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHookVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnHookVersion",
        "@aws-cdk/core.CfnHookVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHookVersion = new cdk.CfnHookVersion(this, 'MyCfnHookVersion', {\n  schemaHandlerPackage: 'schemaHandlerPackage',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "19d6648963905070c7f42e97cbabdc5017cc0f5e8b1cb8ab1f87212812b19233"
    },
    "d879ea951fd7d66d4dbda38781756981d74fe5a29ef4743a867ec1179c92400a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nlogging_config_property = cdk.CfnHookVersion.LoggingConfigProperty(\n    log_group_name=\"logGroupName\",\n    log_role_arn=\"logRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nLoggingConfigProperty loggingConfigProperty = new LoggingConfigProperty {\n    LogGroupName = \"logGroupName\",\n    LogRoleArn = \"logRoleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nLoggingConfigProperty loggingConfigProperty = LoggingConfigProperty.builder()\n        .logGroupName(\"logGroupName\")\n        .logRoleArn(\"logRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nloggingConfigProperty := &loggingConfigProperty{\n\tlogGroupName: jsii.String(\"logGroupName\"),\n\tlogRoleArn: jsii.String(\"logRoleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst loggingConfigProperty: cdk.CfnHookVersion.LoggingConfigProperty = {\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHookVersion.LoggingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnHookVersion.LoggingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loggingConfigProperty: cdk.CfnHookVersion.LoggingConfigProperty = {\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "78b1b00b3af19667d7b8e727b561f8888d8f482653329257adc204fe83568460"
    },
    "dc5b22424e8de6fb7107ba0d7d91956e779d9999da110f7b669119b015b826c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_hook_version_props = cdk.CfnHookVersionProps(\n    schema_handler_package=\"schemaHandlerPackage\",\n    type_name=\"typeName\",\n\n    # the properties below are optional\n    execution_role_arn=\"executionRoleArn\",\n    logging_config=cdk.CfnHookVersion.LoggingConfigProperty(\n        log_group_name=\"logGroupName\",\n        log_role_arn=\"logRoleArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnHookVersionProps cfnHookVersionProps = new CfnHookVersionProps {\n    SchemaHandlerPackage = \"schemaHandlerPackage\",\n    TypeName = \"typeName\",\n\n    // the properties below are optional\n    ExecutionRoleArn = \"executionRoleArn\",\n    LoggingConfig = new LoggingConfigProperty {\n        LogGroupName = \"logGroupName\",\n        LogRoleArn = \"logRoleArn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnHookVersionProps cfnHookVersionProps = CfnHookVersionProps.builder()\n        .schemaHandlerPackage(\"schemaHandlerPackage\")\n        .typeName(\"typeName\")\n\n        // the properties below are optional\n        .executionRoleArn(\"executionRoleArn\")\n        .loggingConfig(LoggingConfigProperty.builder()\n                .logGroupName(\"logGroupName\")\n                .logRoleArn(\"logRoleArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnHookVersionProps := &cfnHookVersionProps{\n\tschemaHandlerPackage: jsii.String(\"schemaHandlerPackage\"),\n\ttypeName: jsii.String(\"typeName\"),\n\n\t// the properties below are optional\n\texecutionRoleArn: jsii.String(\"executionRoleArn\"),\n\tloggingConfig: &loggingConfigProperty{\n\t\tlogGroupName: jsii.String(\"logGroupName\"),\n\t\tlogRoleArn: jsii.String(\"logRoleArn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnHookVersionProps: cdk.CfnHookVersionProps = {\n  schemaHandlerPackage: 'schemaHandlerPackage',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHookVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnHookVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHookVersionProps: cdk.CfnHookVersionProps = {\n  schemaHandlerPackage: 'schemaHandlerPackage',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0077c7a408332bf8945f1c72a0ee9e9f4bdd9871420a2b9f1609ce28773cbf66"
    },
    "cec3e729561793c8742e25dfe7aaa78dff862b013be765462b9c81da47a59280": {
      "translations": {
        "python": {
          "source": "CfnInclude(self, \"ID\",\n    template={\n        \"Resources\": {\n            \"Bucket\": {\n                \"Type\": \"AWS::S3::Bucket\",\n                \"Properties\": {\n                    \"BucketName\": \"my-shiny-bucket\"\n                }\n            }\n        }\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnInclude(this, \"ID\", new CfnIncludeProps {\n    Template = new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n        { \"Resources\", new Struct {\n            Bucket = new Struct {\n                Type = \"AWS::S3::Bucket\",\n                Properties = new Struct {\n                    BucketName = \"my-shiny-bucket\"\n                }\n            }\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude.Builder.create(this, \"ID\")\n        .template(Map.of(\n                \"Resources\", Map.of(\n                        \"Bucket\", Map.of(\n                                \"Type\", \"AWS::S3::Bucket\",\n                                \"Properties\", Map.of(\n                                        \"BucketName\", \"my-shiny-bucket\")))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewCfnInclude(this, jsii.String(\"ID\"), &cfnIncludeProps{\n\ttemplate: map[string]map[string]map[string]interface{}{\n\t\t\"Resources\": map[string]map[string]interface{}{\n\t\t\t\"Bucket\": map[string]interface{}{\n\t\t\t\t\"Type\": jsii.String(\"AWS::S3::Bucket\"),\n\t\t\t\t\"Properties\": map[string]*string{\n\t\t\t\t\t\"BucketName\": jsii.String(\"my-shiny-bucket\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnInclude"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnInclude",
        "@aws-cdk/core.CfnIncludeProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "193": 5,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "ee7c3d04cdafc83cee5e505a690b1ec4244c338b7ea52ecd65c437e69172db2b"
    },
    "73c18fa5a53cf43b45679c6fafae698a13f2cedffc8a335ea84cc03c0e0bbba0": {
      "translations": {
        "python": {
          "source": "CfnInclude(self, \"ID\",\n    template={\n        \"Resources\": {\n            \"Bucket\": {\n                \"Type\": \"AWS::S3::Bucket\",\n                \"Properties\": {\n                    \"BucketName\": \"my-shiny-bucket\"\n                }\n            }\n        }\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnInclude(this, \"ID\", new CfnIncludeProps {\n    Template = new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n        { \"Resources\", new Struct {\n            Bucket = new Struct {\n                Type = \"AWS::S3::Bucket\",\n                Properties = new Struct {\n                    BucketName = \"my-shiny-bucket\"\n                }\n            }\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude.Builder.create(this, \"ID\")\n        .template(Map.of(\n                \"Resources\", Map.of(\n                        \"Bucket\", Map.of(\n                                \"Type\", \"AWS::S3::Bucket\",\n                                \"Properties\", Map.of(\n                                        \"BucketName\", \"my-shiny-bucket\")))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewCfnInclude(this, jsii.String(\"ID\"), &cfnIncludeProps{\n\ttemplate: map[string]map[string]map[string]interface{}{\n\t\t\"Resources\": map[string]map[string]interface{}{\n\t\t\t\"Bucket\": map[string]interface{}{\n\t\t\t\t\"Type\": jsii.String(\"AWS::S3::Bucket\"),\n\t\t\t\t\"Properties\": map[string]*string{\n\t\t\t\t\t\"BucketName\": jsii.String(\"my-shiny-bucket\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnIncludeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnInclude",
        "@aws-cdk/core.CfnIncludeProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "193": 5,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "ee7c3d04cdafc83cee5e505a690b1ec4244c338b7ea52ecd65c437e69172db2b"
    },
    "cbddba650e24e7dd7bd6865d1695ecd072880e58723df961bd54ad4a469578a9": {
      "translations": {
        "python": {
          "source": "tag_param = CfnParameter(self, \"TagName\")\n\nstring_equals = CfnJson(self, \"ConditionJson\",\n    value={\n        \"f\"aws:PrincipalTag/{tagParam.valueAsString}\"\": True\n    }\n)\n\nprincipal = iam.AccountRootPrincipal().with_conditions({\n    \"StringEquals\": string_equals\n})\n\niam.Role(self, \"MyRole\", assumed_by=principal)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = new CfnJson(this, \"ConditionJson\", new CfnJsonProps {\n    Value = new Dictionary<string, boolean> {\n        { $\"aws:PrincipalTag/{tagParam.valueAsString}\", true }\n    }\n});\n\nPrincipalBase principal = new AccountRootPrincipal().WithConditions(new Dictionary<string, object> {\n    { \"StringEquals\", stringEquals }\n});\n\nnew Role(this, \"MyRole\", new RoleProps { AssumedBy = principal });",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = CfnJson.Builder.create(this, \"ConditionJson\")\n        .value(Map.of(\n                String.format(\"aws:PrincipalTag/%s\", tagParam.getValueAsString()), true))\n        .build();\n\nPrincipalBase principal = new AccountRootPrincipal().withConditions(Map.of(\n        \"StringEquals\", stringEquals));\n\nRole.Builder.create(this, \"MyRole\").assumedBy(principal).build();",
          "version": "1"
        },
        "go": {
          "source": "tagParam := NewCfnParameter(this, jsii.String(\"TagName\"))\n\nstringEquals := NewCfnJson(this, jsii.String(\"ConditionJson\"), &cfnJsonProps{\n\tvalue: map[string]*bool{\n\t\tfmt.Sprintf(\"aws:PrincipalTag/%v\", tagParam.valueAsString): jsii.Boolean(true),\n\t},\n})\n\nprincipal := iam.NewAccountRootPrincipal().withConditions(map[string]interface{}{\n\t\"StringEquals\": stringEquals,\n})\n\niam.NewRole(this, jsii.String(\"MyRole\"), &roleProps{\n\tassumedBy: principal,\n})",
          "version": "1"
        },
        "$": {
          "source": "const tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnJson"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.CfnJson",
        "@aws-cdk/core.CfnJsonProps",
        "@aws-cdk/core.CfnParameter",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "15": 1,
        "17": 1,
        "75": 17,
        "104": 3,
        "106": 1,
        "154": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 4,
        "211": 1,
        "221": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4
      },
      "fqnsFingerprint": "c1e60943d4a10c82530a139d69ae7230187ec9dd5897ed8b0d46c126cc0eaf0d"
    },
    "f654db7aa2ea7c8ede2d0a9bc66b6786e3eae83cdd5a78254aa1086d5fe3e523": {
      "translations": {
        "python": {
          "source": "tag_param = CfnParameter(self, \"TagName\")\n\nstring_equals = CfnJson(self, \"ConditionJson\",\n    value={\n        \"f\"aws:PrincipalTag/{tagParam.valueAsString}\"\": True\n    }\n)\n\nprincipal = iam.AccountRootPrincipal().with_conditions({\n    \"StringEquals\": string_equals\n})\n\niam.Role(self, \"MyRole\", assumed_by=principal)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = new CfnJson(this, \"ConditionJson\", new CfnJsonProps {\n    Value = new Dictionary<string, boolean> {\n        { $\"aws:PrincipalTag/{tagParam.valueAsString}\", true }\n    }\n});\n\nPrincipalBase principal = new AccountRootPrincipal().WithConditions(new Dictionary<string, object> {\n    { \"StringEquals\", stringEquals }\n});\n\nnew Role(this, \"MyRole\", new RoleProps { AssumedBy = principal });",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = CfnJson.Builder.create(this, \"ConditionJson\")\n        .value(Map.of(\n                String.format(\"aws:PrincipalTag/%s\", tagParam.getValueAsString()), true))\n        .build();\n\nPrincipalBase principal = new AccountRootPrincipal().withConditions(Map.of(\n        \"StringEquals\", stringEquals));\n\nRole.Builder.create(this, \"MyRole\").assumedBy(principal).build();",
          "version": "1"
        },
        "go": {
          "source": "tagParam := NewCfnParameter(this, jsii.String(\"TagName\"))\n\nstringEquals := NewCfnJson(this, jsii.String(\"ConditionJson\"), &cfnJsonProps{\n\tvalue: map[string]*bool{\n\t\tfmt.Sprintf(\"aws:PrincipalTag/%v\", tagParam.valueAsString): jsii.Boolean(true),\n\t},\n})\n\nprincipal := iam.NewAccountRootPrincipal().withConditions(map[string]interface{}{\n\t\"StringEquals\": stringEquals,\n})\n\niam.NewRole(this, jsii.String(\"MyRole\"), &roleProps{\n\tassumedBy: principal,\n})",
          "version": "1"
        },
        "$": {
          "source": "const tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnJsonProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.CfnJson",
        "@aws-cdk/core.CfnJsonProps",
        "@aws-cdk/core.CfnParameter",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "15": 1,
        "17": 1,
        "75": 17,
        "104": 3,
        "106": 1,
        "154": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 4,
        "211": 1,
        "221": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4
      },
      "fqnsFingerprint": "c1e60943d4a10c82530a139d69ae7230187ec9dd5897ed8b0d46c126cc0eaf0d"
    },
    "7d81fffa718abdfaf969a11b01f1dd73295ff3e4ab44a1a09eafe331493901c3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_macro = cdk.CfnMacro(self, \"MyCfnMacro\",\n    function_name=\"functionName\",\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    log_group_name=\"logGroupName\",\n    log_role_arn=\"logRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnMacro cfnMacro = new CfnMacro(this, \"MyCfnMacro\", new CfnMacroProps {\n    FunctionName = \"functionName\",\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    LogGroupName = \"logGroupName\",\n    LogRoleArn = \"logRoleArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnMacro cfnMacro = CfnMacro.Builder.create(this, \"MyCfnMacro\")\n        .functionName(\"functionName\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .logGroupName(\"logGroupName\")\n        .logRoleArn(\"logRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnMacro := cdk.NewCfnMacro(this, jsii.String(\"MyCfnMacro\"), &cfnMacroProps{\n\tfunctionName: jsii.String(\"functionName\"),\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tlogGroupName: jsii.String(\"logGroupName\"),\n\tlogRoleArn: jsii.String(\"logRoleArn\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnMacro = new cdk.CfnMacro(this, 'MyCfnMacro', {\n  functionName: 'functionName',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnMacro"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnMacro",
        "@aws-cdk/core.CfnMacroProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMacro = new cdk.CfnMacro(this, 'MyCfnMacro', {\n  functionName: 'functionName',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "3bcdb47c5c1fb1fa2858db13b7f34256fd4d85d2d62ad33044a5cf43a4ecc7d0"
    },
    "0345c88104300d7326bf75537fa4d20659b36d03e00759d4682b43b9b00be460": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_macro_props = cdk.CfnMacroProps(\n    function_name=\"functionName\",\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    log_group_name=\"logGroupName\",\n    log_role_arn=\"logRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnMacroProps cfnMacroProps = new CfnMacroProps {\n    FunctionName = \"functionName\",\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    LogGroupName = \"logGroupName\",\n    LogRoleArn = \"logRoleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnMacroProps cfnMacroProps = CfnMacroProps.builder()\n        .functionName(\"functionName\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .logGroupName(\"logGroupName\")\n        .logRoleArn(\"logRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnMacroProps := &cfnMacroProps{\n\tfunctionName: jsii.String(\"functionName\"),\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tlogGroupName: jsii.String(\"logGroupName\"),\n\tlogRoleArn: jsii.String(\"logRoleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnMacroProps: cdk.CfnMacroProps = {\n  functionName: 'functionName',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnMacroProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnMacroProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMacroProps: cdk.CfnMacroProps = {\n  functionName: 'functionName',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2d9b2f65cdf9cd41806b176957e60944fba3c5c1ebe67a2223cbfcbeb55e9a3f"
    },
    "16620fd80635ebdd5251c70805825778c3397c7a483754dfb4c0be5dc1dbaf57": {
      "translations": {
        "python": {
          "source": "region_table = CfnMapping(self, \"RegionTable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"US East (N. Virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"US East (Ohio)\"\n        }\n    }\n)\n\nregion_table.find_in_map(Aws.REGION, \"regionName\")",
          "version": "2"
        },
        "csharp": {
          "source": "CfnMapping regionTable = new CfnMapping(this, \"RegionTable\", new CfnMappingProps {\n    Mapping = new Dictionary<string, IDictionary<string, object>> {\n        { \"us-east-1\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (N. Virginia)\" }\n        } },\n        { \"us-east-2\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (Ohio)\" }\n        } }\n    }\n});\n\nregionTable.FindInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable = CfnMapping.Builder.create(this, \"RegionTable\")\n        .mapping(Map.of(\n                \"us-east-1\", Map.of(\n                        \"regionName\", \"US East (N. Virginia)\"),\n                \"us-east-2\", Map.of(\n                        \"regionName\", \"US East (Ohio)\")))\n        .build();\n\nregionTable.findInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "go": {
          "source": "regionTable := NewCfnMapping(this, jsii.String(\"RegionTable\"), &cfnMappingProps{\n\tmapping: map[string]map[string]interface{}{\n\t\t\"us-east-1\": map[string]interface{}{\n\t\t\t\"regionName\": jsii.String(\"US East (N. Virginia)\"),\n\t\t},\n\t\t\"us-east-2\": map[string]interface{}{\n\t\t\t\"regionName\": jsii.String(\"US East (Ohio)\"),\n\t\t},\n\t},\n})\n\nregionTable.findInMap(aws_REGION(), jsii.String(\"regionName\"))",
          "version": "1"
        },
        "$": {
          "source": "const regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnMapping",
        "@aws-cdk/core.CfnMapping#findInMap",
        "@aws-cdk/core.CfnMappingProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "193": 4,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b8c198f00c68f006d5e029ed547e3c07e2387b2cfb2d7b1f184a50b8d85fff3d"
    },
    "dec2a46f6b9aa4d15b6c70f3a0355dc63446f29f27bf81d934a0f5c71118919b": {
      "translations": {
        "python": {
          "source": "region_table = CfnMapping(self, \"RegionTable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"US East (N. Virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"US East (Ohio)\"\n        }\n    }\n)\n\nregion_table.find_in_map(Aws.REGION, \"regionName\")",
          "version": "2"
        },
        "csharp": {
          "source": "CfnMapping regionTable = new CfnMapping(this, \"RegionTable\", new CfnMappingProps {\n    Mapping = new Dictionary<string, IDictionary<string, object>> {\n        { \"us-east-1\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (N. Virginia)\" }\n        } },\n        { \"us-east-2\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (Ohio)\" }\n        } }\n    }\n});\n\nregionTable.FindInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable = CfnMapping.Builder.create(this, \"RegionTable\")\n        .mapping(Map.of(\n                \"us-east-1\", Map.of(\n                        \"regionName\", \"US East (N. Virginia)\"),\n                \"us-east-2\", Map.of(\n                        \"regionName\", \"US East (Ohio)\")))\n        .build();\n\nregionTable.findInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "go": {
          "source": "regionTable := NewCfnMapping(this, jsii.String(\"RegionTable\"), &cfnMappingProps{\n\tmapping: map[string]map[string]interface{}{\n\t\t\"us-east-1\": map[string]interface{}{\n\t\t\t\"regionName\": jsii.String(\"US East (N. Virginia)\"),\n\t\t},\n\t\t\"us-east-2\": map[string]interface{}{\n\t\t\t\"regionName\": jsii.String(\"US East (Ohio)\"),\n\t\t},\n\t},\n})\n\nregionTable.findInMap(aws_REGION(), jsii.String(\"regionName\"))",
          "version": "1"
        },
        "$": {
          "source": "const regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnMappingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnMapping",
        "@aws-cdk/core.CfnMapping#findInMap",
        "@aws-cdk/core.CfnMappingProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "193": 4,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b8c198f00c68f006d5e029ed547e3c07e2387b2cfb2d7b1f184a50b8d85fff3d"
    },
    "2148c48e70f1e38a267e4cc9c066573c3645c45ad0fb9186db25326aa4116aff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_module_default_version = cdk.CfnModuleDefaultVersion(self, \"MyCfnModuleDefaultVersion\",\n    arn=\"arn\",\n    module_name=\"moduleName\",\n    version_id=\"versionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnModuleDefaultVersion cfnModuleDefaultVersion = new CfnModuleDefaultVersion(this, \"MyCfnModuleDefaultVersion\", new CfnModuleDefaultVersionProps {\n    Arn = \"arn\",\n    ModuleName = \"moduleName\",\n    VersionId = \"versionId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnModuleDefaultVersion cfnModuleDefaultVersion = CfnModuleDefaultVersion.Builder.create(this, \"MyCfnModuleDefaultVersion\")\n        .arn(\"arn\")\n        .moduleName(\"moduleName\")\n        .versionId(\"versionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnModuleDefaultVersion := cdk.NewCfnModuleDefaultVersion(this, jsii.String(\"MyCfnModuleDefaultVersion\"), &cfnModuleDefaultVersionProps{\n\tarn: jsii.String(\"arn\"),\n\tmoduleName: jsii.String(\"moduleName\"),\n\tversionId: jsii.String(\"versionId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnModuleDefaultVersion = new cdk.CfnModuleDefaultVersion(this, 'MyCfnModuleDefaultVersion', /* all optional props */ {\n  arn: 'arn',\n  moduleName: 'moduleName',\n  versionId: 'versionId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnModuleDefaultVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnModuleDefaultVersion",
        "@aws-cdk/core.CfnModuleDefaultVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModuleDefaultVersion = new cdk.CfnModuleDefaultVersion(this, 'MyCfnModuleDefaultVersion', /* all optional props */ {\n  arn: 'arn',\n  moduleName: 'moduleName',\n  versionId: 'versionId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b654667960df89bc01fb7133ee4e2adc00469557a985649e64b813b7841df8c0"
    },
    "6cf209bded6919cc056cd1b99e78aca82f29f3687bca0a669b9e048654f277b6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_module_default_version_props = cdk.CfnModuleDefaultVersionProps(\n    arn=\"arn\",\n    module_name=\"moduleName\",\n    version_id=\"versionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnModuleDefaultVersionProps cfnModuleDefaultVersionProps = new CfnModuleDefaultVersionProps {\n    Arn = \"arn\",\n    ModuleName = \"moduleName\",\n    VersionId = \"versionId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnModuleDefaultVersionProps cfnModuleDefaultVersionProps = CfnModuleDefaultVersionProps.builder()\n        .arn(\"arn\")\n        .moduleName(\"moduleName\")\n        .versionId(\"versionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnModuleDefaultVersionProps := &cfnModuleDefaultVersionProps{\n\tarn: jsii.String(\"arn\"),\n\tmoduleName: jsii.String(\"moduleName\"),\n\tversionId: jsii.String(\"versionId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnModuleDefaultVersionProps: cdk.CfnModuleDefaultVersionProps = {\n  arn: 'arn',\n  moduleName: 'moduleName',\n  versionId: 'versionId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnModuleDefaultVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnModuleDefaultVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModuleDefaultVersionProps: cdk.CfnModuleDefaultVersionProps = {\n  arn: 'arn',\n  moduleName: 'moduleName',\n  versionId: 'versionId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d02636c2993d6c8fb012f7504808f6e4a1ec64410e7442cd84f24b1a464c7a97"
    },
    "95206b13d0f281feebcb29d7d28e62e050355e9c9df3e75001d77451406615d8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_module_version = cdk.CfnModuleVersion(self, \"MyCfnModuleVersion\",\n    module_name=\"moduleName\",\n    module_package=\"modulePackage\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnModuleVersion cfnModuleVersion = new CfnModuleVersion(this, \"MyCfnModuleVersion\", new CfnModuleVersionProps {\n    ModuleName = \"moduleName\",\n    ModulePackage = \"modulePackage\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnModuleVersion cfnModuleVersion = CfnModuleVersion.Builder.create(this, \"MyCfnModuleVersion\")\n        .moduleName(\"moduleName\")\n        .modulePackage(\"modulePackage\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnModuleVersion := cdk.NewCfnModuleVersion(this, jsii.String(\"MyCfnModuleVersion\"), &cfnModuleVersionProps{\n\tmoduleName: jsii.String(\"moduleName\"),\n\tmodulePackage: jsii.String(\"modulePackage\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnModuleVersion = new cdk.CfnModuleVersion(this, 'MyCfnModuleVersion', {\n  moduleName: 'moduleName',\n  modulePackage: 'modulePackage',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnModuleVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnModuleVersion",
        "@aws-cdk/core.CfnModuleVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModuleVersion = new cdk.CfnModuleVersion(this, 'MyCfnModuleVersion', {\n  moduleName: 'moduleName',\n  modulePackage: 'modulePackage',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2bf013e749c9f788e96af809452ef6ce6b9c260852abc8a50fd164bed07613bc"
    },
    "43089dc9ad4f0a3b66168186ba03bfdc0502b789631f60adb950f6010853e3fa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_module_version_props = cdk.CfnModuleVersionProps(\n    module_name=\"moduleName\",\n    module_package=\"modulePackage\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnModuleVersionProps cfnModuleVersionProps = new CfnModuleVersionProps {\n    ModuleName = \"moduleName\",\n    ModulePackage = \"modulePackage\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnModuleVersionProps cfnModuleVersionProps = CfnModuleVersionProps.builder()\n        .moduleName(\"moduleName\")\n        .modulePackage(\"modulePackage\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnModuleVersionProps := &cfnModuleVersionProps{\n\tmoduleName: jsii.String(\"moduleName\"),\n\tmodulePackage: jsii.String(\"modulePackage\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnModuleVersionProps: cdk.CfnModuleVersionProps = {\n  moduleName: 'moduleName',\n  modulePackage: 'modulePackage',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnModuleVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnModuleVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModuleVersionProps: cdk.CfnModuleVersionProps = {\n  moduleName: 'moduleName',\n  modulePackage: 'modulePackage',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4e069fe3e1e9a9c14c5a801f6c41ae807002793feb6fc9f254d0708a500ce1f5"
    },
    "1584528071b4c63dd4e0ef12b8d834b4d9e522ffb2fb4790ec514f903d126b74": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# add service account\nservice_account = cluster.add_service_account(\"MyServiceAccount\")\n\nbucket = s3.Bucket(self, \"Bucket\")\nbucket.grant_read_write(service_account)\n\nmypod = cluster.add_manifest(\"mypod\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\"name\": \"mypod\"},\n    \"spec\": {\n        \"service_account_name\": service_account.service_account_name,\n        \"containers\": [{\n            \"name\": \"hello\",\n            \"image\": \"paulbouwer/hello-kubernetes:1.5\",\n            \"ports\": [{\"container_port\": 8080}]\n        }\n        ]\n    }\n})\n\n# create the resource after the service account.\nmypod.node.add_dependency(service_account)\n\n# print the IAM role arn for this service account\nCfnOutput(self, \"ServiceAccountIamRole\", value=service_account.role.role_arn)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.AddServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.GrantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.AddManifest(\"mypod\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Pod\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"mypod\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"serviceAccountName\", serviceAccount.ServiceAccountName },\n        { \"containers\", new [] { new Struct {\n            Name = \"hello\",\n            Image = \"paulbouwer/hello-kubernetes:1.5\",\n            Ports = new [] { new Struct { ContainerPort = 8080 } }\n        } } }\n    } }\n});\n\n// create the resource after the service account.\nmypod.Node.AddDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nnew CfnOutput(this, \"ServiceAccountIamRole\", new CfnOutputProps { Value = serviceAccount.Role.RoleArn });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.addServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.grantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.addManifest(\"mypod\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Pod\",\n        \"metadata\", Map.of(\"name\", \"mypod\"),\n        \"spec\", Map.of(\n                \"serviceAccountName\", serviceAccount.getServiceAccountName(),\n                \"containers\", List.of(Map.of(\n                        \"name\", \"hello\",\n                        \"image\", \"paulbouwer/hello-kubernetes:1.5\",\n                        \"ports\", List.of(Map.of(\"containerPort\", 8080)))))));\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nCfnOutput.Builder.create(this, \"ServiceAccountIamRole\").value(serviceAccount.getRole().getRoleArn()).build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// add service account\nserviceAccount := cluster.addServiceAccount(jsii.String(\"MyServiceAccount\"))\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nbucket.grantReadWrite(serviceAccount)\n\nmypod := cluster.addManifest(jsii.String(\"mypod\"), map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Pod\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"mypod\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t\t\"serviceAccountName\": serviceAccount.serviceAccountName,\n\t\t\"containers\": []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"name\": jsii.String(\"hello\"),\n\t\t\t\t\"image\": jsii.String(\"paulbouwer/hello-kubernetes:1.5\"),\n\t\t\t\t\"ports\": []map[string]*f64{\n\t\t\t\t\tmap[string]*f64{\n\t\t\t\t\t\t\"containerPort\": jsii.Number(8080),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount)\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nNewCfnOutput(this, jsii.String(\"ServiceAccountIamRole\"), &cfnOutputProps{\n\tvalue: serviceAccount.role.roleArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnOutput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/aws-eks.ServiceAccount",
        "@aws-cdk/aws-eks.ServiceAccount#role",
        "@aws-cdk/aws-eks.ServiceAccount#serviceAccountName",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IRole#roleArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 9,
        "196": 4,
        "197": 2,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "eeef5972a59749a8a8bb14bb166bf7f03b405b69957862c90692484eb8c26d15"
    },
    "65827c068ded2700961fd6c0f6dcd4905d106abffc253efe8429eac9a01334e7": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# add service account\nservice_account = cluster.add_service_account(\"MyServiceAccount\")\n\nbucket = s3.Bucket(self, \"Bucket\")\nbucket.grant_read_write(service_account)\n\nmypod = cluster.add_manifest(\"mypod\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\"name\": \"mypod\"},\n    \"spec\": {\n        \"service_account_name\": service_account.service_account_name,\n        \"containers\": [{\n            \"name\": \"hello\",\n            \"image\": \"paulbouwer/hello-kubernetes:1.5\",\n            \"ports\": [{\"container_port\": 8080}]\n        }\n        ]\n    }\n})\n\n# create the resource after the service account.\nmypod.node.add_dependency(service_account)\n\n# print the IAM role arn for this service account\nCfnOutput(self, \"ServiceAccountIamRole\", value=service_account.role.role_arn)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.AddServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.GrantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.AddManifest(\"mypod\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Pod\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"mypod\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"serviceAccountName\", serviceAccount.ServiceAccountName },\n        { \"containers\", new [] { new Struct {\n            Name = \"hello\",\n            Image = \"paulbouwer/hello-kubernetes:1.5\",\n            Ports = new [] { new Struct { ContainerPort = 8080 } }\n        } } }\n    } }\n});\n\n// create the resource after the service account.\nmypod.Node.AddDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nnew CfnOutput(this, \"ServiceAccountIamRole\", new CfnOutputProps { Value = serviceAccount.Role.RoleArn });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.addServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.grantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.addManifest(\"mypod\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Pod\",\n        \"metadata\", Map.of(\"name\", \"mypod\"),\n        \"spec\", Map.of(\n                \"serviceAccountName\", serviceAccount.getServiceAccountName(),\n                \"containers\", List.of(Map.of(\n                        \"name\", \"hello\",\n                        \"image\", \"paulbouwer/hello-kubernetes:1.5\",\n                        \"ports\", List.of(Map.of(\"containerPort\", 8080)))))));\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nCfnOutput.Builder.create(this, \"ServiceAccountIamRole\").value(serviceAccount.getRole().getRoleArn()).build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// add service account\nserviceAccount := cluster.addServiceAccount(jsii.String(\"MyServiceAccount\"))\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nbucket.grantReadWrite(serviceAccount)\n\nmypod := cluster.addManifest(jsii.String(\"mypod\"), map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Pod\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"mypod\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t\t\"serviceAccountName\": serviceAccount.serviceAccountName,\n\t\t\"containers\": []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"name\": jsii.String(\"hello\"),\n\t\t\t\t\"image\": jsii.String(\"paulbouwer/hello-kubernetes:1.5\"),\n\t\t\t\t\"ports\": []map[string]*f64{\n\t\t\t\t\tmap[string]*f64{\n\t\t\t\t\t\t\"containerPort\": jsii.Number(8080),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount)\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nNewCfnOutput(this, jsii.String(\"ServiceAccountIamRole\"), &cfnOutputProps{\n\tvalue: serviceAccount.role.roleArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnOutputProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/aws-eks.ServiceAccount",
        "@aws-cdk/aws-eks.ServiceAccount#role",
        "@aws-cdk/aws-eks.ServiceAccount#serviceAccountName",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IRole#roleArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 9,
        "196": 4,
        "197": 2,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "eeef5972a59749a8a8bb14bb166bf7f03b405b69957862c90692484eb8c26d15"
    },
    "dba6144a170203598a7ba9a2de3d0539a1058ee06bf7be38c69043836418f203": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\nurl = CfnParameter(self, \"url-param\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(url.value_as_string))",
          "version": "2"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nCfnParameter url = new CfnParameter(this, \"url-param\");\n\nmyTopic.AddSubscription(new UrlSubscription(url.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nCfnParameter url = new CfnParameter(this, \"url-param\");\n\nmyTopic.addSubscription(new UrlSubscription(url.getValueAsString()));",
          "version": "1"
        },
        "go": {
          "source": "myTopic := sns.NewTopic(this, jsii.String(\"MyTopic\"))\nurl := NewCfnParameter(this, jsii.String(\"url-param\"))\n\nmyTopic.addSubscription(subscriptions.NewUrlSubscription(url.valueAsString))",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\nconst url = new CfnParameter(this, 'url-param');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription(url.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnParameter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\nconst url = new CfnParameter(this, 'url-param');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription(url.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "e60bcb361242112084b98dfe021000e6988f7759439598205f5e1adbd39722d1"
    },
    "a5573e5a1b13ecca687a0615f01f51a1cd7dd9c6598bd0174ebbc355aee61979": {
      "translations": {
        "python": {
          "source": "CfnParameter(self, \"MyParameter\",\n    type=\"Number\",\n    default=1337\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CfnParameter(this, \"MyParameter\", new CfnParameterProps {\n    Type = \"Number\",\n    Default = 1337\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter.Builder.create(this, \"MyParameter\")\n        .type(\"Number\")\n        .default(1337)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewCfnParameter(this, jsii.String(\"MyParameter\"), &cfnParameterProps{\n\ttype: jsii.String(\"Number\"),\n\tdefault: jsii.Number(1337),\n})",
          "version": "1"
        },
        "$": {
          "source": "new CfnParameter(this, 'MyParameter', {\n  type: 'Number',\n  default: 1337,\n  // See the API reference for more configuration props\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnParameterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.CfnParameterProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnParameter(this, 'MyParameter', {\n  type: 'Number',\n  default: 1337,\n  // See the API reference for more configuration props\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "859682f60fafd9341416a413502f283dcedee74cf210472ecca2905f9e305d28"
    },
    "13e69fae1aee8ae4be6f935462c2c072bd1fac59e9ddf9d88fef66ef0e31936e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_public_type_version = cdk.CfnPublicTypeVersion(self, \"MyCfnPublicTypeVersion\",\n    arn=\"arn\",\n    log_delivery_bucket=\"logDeliveryBucket\",\n    public_version_number=\"publicVersionNumber\",\n    type=\"type\",\n    type_name=\"typeName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnPublicTypeVersion cfnPublicTypeVersion = new CfnPublicTypeVersion(this, \"MyCfnPublicTypeVersion\", new CfnPublicTypeVersionProps {\n    Arn = \"arn\",\n    LogDeliveryBucket = \"logDeliveryBucket\",\n    PublicVersionNumber = \"publicVersionNumber\",\n    Type = \"type\",\n    TypeName = \"typeName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnPublicTypeVersion cfnPublicTypeVersion = CfnPublicTypeVersion.Builder.create(this, \"MyCfnPublicTypeVersion\")\n        .arn(\"arn\")\n        .logDeliveryBucket(\"logDeliveryBucket\")\n        .publicVersionNumber(\"publicVersionNumber\")\n        .type(\"type\")\n        .typeName(\"typeName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnPublicTypeVersion := cdk.NewCfnPublicTypeVersion(this, jsii.String(\"MyCfnPublicTypeVersion\"), &cfnPublicTypeVersionProps{\n\tarn: jsii.String(\"arn\"),\n\tlogDeliveryBucket: jsii.String(\"logDeliveryBucket\"),\n\tpublicVersionNumber: jsii.String(\"publicVersionNumber\"),\n\ttype: jsii.String(\"type\"),\n\ttypeName: jsii.String(\"typeName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnPublicTypeVersion = new cdk.CfnPublicTypeVersion(this, 'MyCfnPublicTypeVersion', /* all optional props */ {\n  arn: 'arn',\n  logDeliveryBucket: 'logDeliveryBucket',\n  publicVersionNumber: 'publicVersionNumber',\n  type: 'type',\n  typeName: 'typeName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnPublicTypeVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnPublicTypeVersion",
        "@aws-cdk/core.CfnPublicTypeVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPublicTypeVersion = new cdk.CfnPublicTypeVersion(this, 'MyCfnPublicTypeVersion', /* all optional props */ {\n  arn: 'arn',\n  logDeliveryBucket: 'logDeliveryBucket',\n  publicVersionNumber: 'publicVersionNumber',\n  type: 'type',\n  typeName: 'typeName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "76906470584fa194d9aaf60fdcbc6d94d143421d10cd1486dd9644c9eba7b7d0"
    },
    "db24acb072ba284687b59a2fb62c97c934772998f9b1b68a9dbdc3a532b8e09c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_public_type_version_props = cdk.CfnPublicTypeVersionProps(\n    arn=\"arn\",\n    log_delivery_bucket=\"logDeliveryBucket\",\n    public_version_number=\"publicVersionNumber\",\n    type=\"type\",\n    type_name=\"typeName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnPublicTypeVersionProps cfnPublicTypeVersionProps = new CfnPublicTypeVersionProps {\n    Arn = \"arn\",\n    LogDeliveryBucket = \"logDeliveryBucket\",\n    PublicVersionNumber = \"publicVersionNumber\",\n    Type = \"type\",\n    TypeName = \"typeName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnPublicTypeVersionProps cfnPublicTypeVersionProps = CfnPublicTypeVersionProps.builder()\n        .arn(\"arn\")\n        .logDeliveryBucket(\"logDeliveryBucket\")\n        .publicVersionNumber(\"publicVersionNumber\")\n        .type(\"type\")\n        .typeName(\"typeName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnPublicTypeVersionProps := &cfnPublicTypeVersionProps{\n\tarn: jsii.String(\"arn\"),\n\tlogDeliveryBucket: jsii.String(\"logDeliveryBucket\"),\n\tpublicVersionNumber: jsii.String(\"publicVersionNumber\"),\n\ttype: jsii.String(\"type\"),\n\ttypeName: jsii.String(\"typeName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnPublicTypeVersionProps: cdk.CfnPublicTypeVersionProps = {\n  arn: 'arn',\n  logDeliveryBucket: 'logDeliveryBucket',\n  publicVersionNumber: 'publicVersionNumber',\n  type: 'type',\n  typeName: 'typeName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnPublicTypeVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnPublicTypeVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPublicTypeVersionProps: cdk.CfnPublicTypeVersionProps = {\n  arn: 'arn',\n  logDeliveryBucket: 'logDeliveryBucket',\n  publicVersionNumber: 'publicVersionNumber',\n  type: 'type',\n  typeName: 'typeName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a894b3c4d2b20eed6bb4889901baee34f2bdb1f5281cbedcdf6842390db62810"
    },
    "b80b5a52b98e52d962c0581865971771bccd124888eff40308c673cbb5ebb823": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_publisher = cdk.CfnPublisher(self, \"MyCfnPublisher\",\n    accept_terms_and_conditions=False,\n\n    # the properties below are optional\n    connection_arn=\"connectionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnPublisher cfnPublisher = new CfnPublisher(this, \"MyCfnPublisher\", new CfnPublisherProps {\n    AcceptTermsAndConditions = false,\n\n    // the properties below are optional\n    ConnectionArn = \"connectionArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnPublisher cfnPublisher = CfnPublisher.Builder.create(this, \"MyCfnPublisher\")\n        .acceptTermsAndConditions(false)\n\n        // the properties below are optional\n        .connectionArn(\"connectionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnPublisher := cdk.NewCfnPublisher(this, jsii.String(\"MyCfnPublisher\"), &cfnPublisherProps{\n\tacceptTermsAndConditions: jsii.Boolean(false),\n\n\t// the properties below are optional\n\tconnectionArn: jsii.String(\"connectionArn\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnPublisher = new cdk.CfnPublisher(this, 'MyCfnPublisher', {\n  acceptTermsAndConditions: false,\n\n  // the properties below are optional\n  connectionArn: 'connectionArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnPublisher"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnPublisher",
        "@aws-cdk/core.CfnPublisherProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPublisher = new cdk.CfnPublisher(this, 'MyCfnPublisher', {\n  acceptTermsAndConditions: false,\n\n  // the properties below are optional\n  connectionArn: 'connectionArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c591a5ec9631e229d1b86fda1d722b51d6ef5b554baab99be1004083277ef2f3"
    },
    "3d9dbb6836e94b236c3950058d0df94e7e7b1d694eb99bdcd9b9327475f570bc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_publisher_props = cdk.CfnPublisherProps(\n    accept_terms_and_conditions=False,\n\n    # the properties below are optional\n    connection_arn=\"connectionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnPublisherProps cfnPublisherProps = new CfnPublisherProps {\n    AcceptTermsAndConditions = false,\n\n    // the properties below are optional\n    ConnectionArn = \"connectionArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnPublisherProps cfnPublisherProps = CfnPublisherProps.builder()\n        .acceptTermsAndConditions(false)\n\n        // the properties below are optional\n        .connectionArn(\"connectionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnPublisherProps := &cfnPublisherProps{\n\tacceptTermsAndConditions: jsii.Boolean(false),\n\n\t// the properties below are optional\n\tconnectionArn: jsii.String(\"connectionArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnPublisherProps: cdk.CfnPublisherProps = {\n  acceptTermsAndConditions: false,\n\n  // the properties below are optional\n  connectionArn: 'connectionArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnPublisherProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnPublisherProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPublisherProps: cdk.CfnPublisherProps = {\n  acceptTermsAndConditions: false,\n\n  // the properties below are optional\n  connectionArn: 'connectionArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "21af9e2a5c5dc3462955b0df5a05942559e8754239702049c23d8dbfa255093a"
    },
    "6d2cda2fd5f80986655c11656dd3a6f372a6c39de89bd97c05a8ccc8e1a49cb0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\n\ntype myConstruct struct {\n\tresource\n\ttags\n}\n\nfunc newMyConstruct(scope construct, id *string) *myConstruct {\n\tthis := &myConstruct{}\n\tcdk.NewResource_Override(this, scope, id)\n\n\tcdk.NewCfnResource(this, jsii.String(\"Resource\"), &cfnResourceProps{\n\t\ttype: jsii.String(\"Whatever::The::Type\"),\n\t\tproperties: map[string]interface{}{\n\t\t\t// ...\n\t\t\t\"Tags\": this.tags.renderedTags,\n\t\t},\n\t})\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "98fc9bd0f49fabd4caf18ad709eae110c8e2975d2df375d1d67fed047643a45c"
    },
    "7d532eb28565fa46e73f8d0c3f23eef1656c787ac5d0cf27fd5820346bf7f770": {
      "translations": {
        "python": {
          "source": "cfn_resource.add_override(\"Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes\", [\"myattribute\"])\ncfn_resource.add_override(\"Properties.GlobalSecondaryIndexes.1.ProjectionType\", \"INCLUDE\")",
          "version": "2"
        },
        "csharp": {
          "source": "cfnResource.AddOverride(\"Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes\", new [] { \"myattribute\" });\ncfnResource.AddOverride(\"Properties.GlobalSecondaryIndexes.1.ProjectionType\", \"INCLUDE\");",
          "version": "1"
        },
        "java": {
          "source": "cfnResource.addOverride(\"Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes\", List.of(\"myattribute\"));\ncfnResource.addOverride(\"Properties.GlobalSecondaryIndexes.1.ProjectionType\", \"INCLUDE\");",
          "version": "1"
        },
        "go": {
          "source": "cfnResource.addOverride(jsii.String(\"Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes\"), []interface{}{\n\tjsii.String(\"myattribute\"),\n})\ncfnResource.addOverride(jsii.String(\"Properties.GlobalSecondaryIndexes.1.ProjectionType\"), jsii.String(\"INCLUDE\"))",
          "version": "1"
        },
        "$": {
          "source": "cfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);\ncfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CfnResource",
          "memberName": "addOverride"
        },
        "field": {
          "field": "markdown",
          "line": 13
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource#addOverride"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\ncfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);\ncfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 4,
        "192": 1,
        "194": 2,
        "196": 2,
        "226": 2
      },
      "fqnsFingerprint": "773a1f90ec17b9cca6d996fdd482df98993d9fc853a4ef6ad2f0bda8bbc1f03f"
    },
    "755eeb58cc5c92552d6e9cf82b200a45b00d16f85afe8e62e761018867423f3f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_resource_auto_scaling_creation_policy = cdk.CfnResourceAutoScalingCreationPolicy(\n    min_successful_instances_percent=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnResourceAutoScalingCreationPolicy cfnResourceAutoScalingCreationPolicy = new CfnResourceAutoScalingCreationPolicy {\n    MinSuccessfulInstancesPercent = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnResourceAutoScalingCreationPolicy cfnResourceAutoScalingCreationPolicy = CfnResourceAutoScalingCreationPolicy.builder()\n        .minSuccessfulInstancesPercent(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnResourceAutoScalingCreationPolicy := &cfnResourceAutoScalingCreationPolicy{\n\tminSuccessfulInstancesPercent: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnResourceAutoScalingCreationPolicy: cdk.CfnResourceAutoScalingCreationPolicy = {\n  minSuccessfulInstancesPercent: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceAutoScalingCreationPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResourceAutoScalingCreationPolicy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourceAutoScalingCreationPolicy: cdk.CfnResourceAutoScalingCreationPolicy = {\n  minSuccessfulInstancesPercent: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b2376396a76aec8333974dd4d719d674bba9691b9dd734b9c7ebb936ae4c9232"
    },
    "e7014aefcb88f7e6c3e9d38d5d7135d33b6ca639ed9fbabf6e6c4b853d492f76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_resource_default_version = cdk.CfnResourceDefaultVersion(self, \"MyCfnResourceDefaultVersion\",\n    type_name=\"typeName\",\n    type_version_arn=\"typeVersionArn\",\n    version_id=\"versionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnResourceDefaultVersion cfnResourceDefaultVersion = new CfnResourceDefaultVersion(this, \"MyCfnResourceDefaultVersion\", new CfnResourceDefaultVersionProps {\n    TypeName = \"typeName\",\n    TypeVersionArn = \"typeVersionArn\",\n    VersionId = \"versionId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnResourceDefaultVersion cfnResourceDefaultVersion = CfnResourceDefaultVersion.Builder.create(this, \"MyCfnResourceDefaultVersion\")\n        .typeName(\"typeName\")\n        .typeVersionArn(\"typeVersionArn\")\n        .versionId(\"versionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnResourceDefaultVersion := cdk.NewCfnResourceDefaultVersion(this, jsii.String(\"MyCfnResourceDefaultVersion\"), &cfnResourceDefaultVersionProps{\n\ttypeName: jsii.String(\"typeName\"),\n\ttypeVersionArn: jsii.String(\"typeVersionArn\"),\n\tversionId: jsii.String(\"versionId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnResourceDefaultVersion = new cdk.CfnResourceDefaultVersion(this, 'MyCfnResourceDefaultVersion', /* all optional props */ {\n  typeName: 'typeName',\n  typeVersionArn: 'typeVersionArn',\n  versionId: 'versionId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceDefaultVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResourceDefaultVersion",
        "@aws-cdk/core.CfnResourceDefaultVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourceDefaultVersion = new cdk.CfnResourceDefaultVersion(this, 'MyCfnResourceDefaultVersion', /* all optional props */ {\n  typeName: 'typeName',\n  typeVersionArn: 'typeVersionArn',\n  versionId: 'versionId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "23de93bfbd9319207d09d100acd300e7c4dffc56cb4708f066f3161fef57807e"
    },
    "1f63d3a771d4fda33c136a5eff0f39f0176c24861c993967075d1a5e4cbd3642": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_resource_default_version_props = cdk.CfnResourceDefaultVersionProps(\n    type_name=\"typeName\",\n    type_version_arn=\"typeVersionArn\",\n    version_id=\"versionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnResourceDefaultVersionProps cfnResourceDefaultVersionProps = new CfnResourceDefaultVersionProps {\n    TypeName = \"typeName\",\n    TypeVersionArn = \"typeVersionArn\",\n    VersionId = \"versionId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnResourceDefaultVersionProps cfnResourceDefaultVersionProps = CfnResourceDefaultVersionProps.builder()\n        .typeName(\"typeName\")\n        .typeVersionArn(\"typeVersionArn\")\n        .versionId(\"versionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnResourceDefaultVersionProps := &cfnResourceDefaultVersionProps{\n\ttypeName: jsii.String(\"typeName\"),\n\ttypeVersionArn: jsii.String(\"typeVersionArn\"),\n\tversionId: jsii.String(\"versionId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnResourceDefaultVersionProps: cdk.CfnResourceDefaultVersionProps = {\n  typeName: 'typeName',\n  typeVersionArn: 'typeVersionArn',\n  versionId: 'versionId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceDefaultVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResourceDefaultVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourceDefaultVersionProps: cdk.CfnResourceDefaultVersionProps = {\n  typeName: 'typeName',\n  typeVersionArn: 'typeVersionArn',\n  versionId: 'versionId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a7b7aabca19e25be2bc4d424f82e07fe968147f4fcced8d8a4e7b5a6ea33f381"
    },
    "8f4a20593178eab818e1a2ca98eef6e7ea0bca9dd40b09300fff001deeb086d2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\n\ntype myConstruct struct {\n\tresource\n\ttags\n}\n\nfunc newMyConstruct(scope construct, id *string) *myConstruct {\n\tthis := &myConstruct{}\n\tcdk.NewResource_Override(this, scope, id)\n\n\tcdk.NewCfnResource(this, jsii.String(\"Resource\"), &cfnResourceProps{\n\t\ttype: jsii.String(\"Whatever::The::Type\"),\n\t\tproperties: map[string]interface{}{\n\t\t\t// ...\n\t\t\t\"Tags\": this.tags.renderedTags,\n\t\t},\n\t})\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "98fc9bd0f49fabd4caf18ad709eae110c8e2975d2df375d1d67fed047643a45c"
    },
    "7a1cfa0b4b1cab2a62ecebbcbe30b9e8688da2d830d58b68d4e44d5a084fb7cd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_resource_signal = cdk.CfnResourceSignal(\n    count=123,\n    timeout=\"timeout\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnResourceSignal cfnResourceSignal = new CfnResourceSignal {\n    Count = 123,\n    Timeout = \"timeout\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnResourceSignal cfnResourceSignal = CfnResourceSignal.builder()\n        .count(123)\n        .timeout(\"timeout\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnResourceSignal := &cfnResourceSignal{\n\tcount: jsii.Number(123),\n\ttimeout: jsii.String(\"timeout\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnResourceSignal: cdk.CfnResourceSignal = {\n  count: 123,\n  timeout: 'timeout',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceSignal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResourceSignal"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourceSignal: cdk.CfnResourceSignal = {\n  count: 123,\n  timeout: 'timeout',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1be63c1799e5421fb1ca2d63676312831fa7cc32ca2c966d4319cac7840de1a2"
    },
    "6f8310102bdbb526949579608a9ee9ffb71a539e3d383e838d52c9b289f46024": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_resource_version = cdk.CfnResourceVersion(self, \"MyCfnResourceVersion\",\n    schema_handler_package=\"schemaHandlerPackage\",\n    type_name=\"typeName\",\n\n    # the properties below are optional\n    execution_role_arn=\"executionRoleArn\",\n    logging_config=cdk.CfnResourceVersion.LoggingConfigProperty(\n        log_group_name=\"logGroupName\",\n        log_role_arn=\"logRoleArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnResourceVersion cfnResourceVersion = new CfnResourceVersion(this, \"MyCfnResourceVersion\", new CfnResourceVersionProps {\n    SchemaHandlerPackage = \"schemaHandlerPackage\",\n    TypeName = \"typeName\",\n\n    // the properties below are optional\n    ExecutionRoleArn = \"executionRoleArn\",\n    LoggingConfig = new LoggingConfigProperty {\n        LogGroupName = \"logGroupName\",\n        LogRoleArn = \"logRoleArn\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnResourceVersion cfnResourceVersion = CfnResourceVersion.Builder.create(this, \"MyCfnResourceVersion\")\n        .schemaHandlerPackage(\"schemaHandlerPackage\")\n        .typeName(\"typeName\")\n\n        // the properties below are optional\n        .executionRoleArn(\"executionRoleArn\")\n        .loggingConfig(LoggingConfigProperty.builder()\n                .logGroupName(\"logGroupName\")\n                .logRoleArn(\"logRoleArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnResourceVersion := cdk.NewCfnResourceVersion(this, jsii.String(\"MyCfnResourceVersion\"), &cfnResourceVersionProps{\n\tschemaHandlerPackage: jsii.String(\"schemaHandlerPackage\"),\n\ttypeName: jsii.String(\"typeName\"),\n\n\t// the properties below are optional\n\texecutionRoleArn: jsii.String(\"executionRoleArn\"),\n\tloggingConfig: &loggingConfigProperty{\n\t\tlogGroupName: jsii.String(\"logGroupName\"),\n\t\tlogRoleArn: jsii.String(\"logRoleArn\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnResourceVersion = new cdk.CfnResourceVersion(this, 'MyCfnResourceVersion', {\n  schemaHandlerPackage: 'schemaHandlerPackage',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResourceVersion",
        "@aws-cdk/core.CfnResourceVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourceVersion = new cdk.CfnResourceVersion(this, 'MyCfnResourceVersion', {\n  schemaHandlerPackage: 'schemaHandlerPackage',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "35a05787fd0b3108e27550dd003fd47c9116c8bd646cb4ceb5613ad7871ad65a"
    },
    "e44b658700c3829e1f834f76208c98b43f08bfc0e2810b13a621eb71d66aebda": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nlogging_config_property = cdk.CfnResourceVersion.LoggingConfigProperty(\n    log_group_name=\"logGroupName\",\n    log_role_arn=\"logRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nLoggingConfigProperty loggingConfigProperty = new LoggingConfigProperty {\n    LogGroupName = \"logGroupName\",\n    LogRoleArn = \"logRoleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nLoggingConfigProperty loggingConfigProperty = LoggingConfigProperty.builder()\n        .logGroupName(\"logGroupName\")\n        .logRoleArn(\"logRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nloggingConfigProperty := &loggingConfigProperty{\n\tlogGroupName: jsii.String(\"logGroupName\"),\n\tlogRoleArn: jsii.String(\"logRoleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst loggingConfigProperty: cdk.CfnResourceVersion.LoggingConfigProperty = {\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceVersion.LoggingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResourceVersion.LoggingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loggingConfigProperty: cdk.CfnResourceVersion.LoggingConfigProperty = {\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "180d9385386e2e3607075d94f484c5f85131fad79ba69fa4e6b5a4fcea7b86cf"
    },
    "02a3a835a90cbb051ae61de2556b32e548f14e7e6e35d2238c190dfb80415e64": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_resource_version_props = cdk.CfnResourceVersionProps(\n    schema_handler_package=\"schemaHandlerPackage\",\n    type_name=\"typeName\",\n\n    # the properties below are optional\n    execution_role_arn=\"executionRoleArn\",\n    logging_config=cdk.CfnResourceVersion.LoggingConfigProperty(\n        log_group_name=\"logGroupName\",\n        log_role_arn=\"logRoleArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnResourceVersionProps cfnResourceVersionProps = new CfnResourceVersionProps {\n    SchemaHandlerPackage = \"schemaHandlerPackage\",\n    TypeName = \"typeName\",\n\n    // the properties below are optional\n    ExecutionRoleArn = \"executionRoleArn\",\n    LoggingConfig = new LoggingConfigProperty {\n        LogGroupName = \"logGroupName\",\n        LogRoleArn = \"logRoleArn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnResourceVersionProps cfnResourceVersionProps = CfnResourceVersionProps.builder()\n        .schemaHandlerPackage(\"schemaHandlerPackage\")\n        .typeName(\"typeName\")\n\n        // the properties below are optional\n        .executionRoleArn(\"executionRoleArn\")\n        .loggingConfig(LoggingConfigProperty.builder()\n                .logGroupName(\"logGroupName\")\n                .logRoleArn(\"logRoleArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnResourceVersionProps := &cfnResourceVersionProps{\n\tschemaHandlerPackage: jsii.String(\"schemaHandlerPackage\"),\n\ttypeName: jsii.String(\"typeName\"),\n\n\t// the properties below are optional\n\texecutionRoleArn: jsii.String(\"executionRoleArn\"),\n\tloggingConfig: &loggingConfigProperty{\n\t\tlogGroupName: jsii.String(\"logGroupName\"),\n\t\tlogRoleArn: jsii.String(\"logRoleArn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnResourceVersionProps: cdk.CfnResourceVersionProps = {\n  schemaHandlerPackage: 'schemaHandlerPackage',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResourceVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourceVersionProps: cdk.CfnResourceVersionProps = {\n  schemaHandlerPackage: 'schemaHandlerPackage',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "3e926344898968553ddd9aea5ef5ba58f904c1ec087cde4c08271f105ee85633"
    },
    "db5678463e4256baa691c7ff3c18affd17cd995f7c8308569325110bd598b171": {
      "translations": {
        "python": {
          "source": "# cfn_template: cfn_inc.CfnInclude\n\n# mutating the rule\n# my_parameter: core.CfnParameter\n\nrule = cfn_template.get_rule(\"MyRule\")\nrule.add_assertion(core.Fn.condition_contains([\"m1.small\"], my_parameter.value_as_string), \"MyParameter has to be m1.small\")",
          "version": "2"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the rule\nCfnParameter myParameter;\n\nCfnRule rule = cfnTemplate.GetRule(\"MyRule\");\nrule.AddAssertion(Fn.ConditionContains(new [] { \"m1.small\" }, myParameter.ValueAsString), \"MyParameter has to be m1.small\");",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the rule\nCfnParameter myParameter;\n\nCfnRule rule = cfnTemplate.getRule(\"MyRule\");\nrule.addAssertion(Fn.conditionContains(List.of(\"m1.small\"), myParameter.getValueAsString()), \"MyParameter has to be m1.small\");",
          "version": "1"
        },
        "go": {
          "source": "var cfnTemplate cfnInclude\n\n// mutating the rule\nvar myParameter cfnParameter\nrule := cfnTemplate.getRule(jsii.String(\"MyRule\"))\nrule.addAssertion(core.fn.conditionContains([]*string{\n\tjsii.String(\"m1.small\"),\n}, myParameter.valueAsString), jsii.String(\"MyParameter has to be m1.small\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\nconst rule: core.CfnRule = cfnTemplate.getRule('MyRule');\n\n// mutating the rule\ndeclare const myParameter: core.CfnParameter;\nrule.addAssertion(core.Fn.conditionContains(['m1.small'], myParameter.valueAsString),\n  'MyParameter has to be m1.small');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/cloudformation-include.CfnInclude#getRule",
        "@aws-cdk/core.CfnRule",
        "@aws-cdk/core.CfnRule#addAssertion",
        "@aws-cdk/core.Fn",
        "@aws-cdk/core.Fn#conditionContains",
        "@aws-cdk/core.ICfnConditionExpression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// mutating the rule\ndeclare const myParameter: core.CfnParameter;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule: core.CfnRule = cfnTemplate.getRule('MyRule');\nrule.addAssertion(core.Fn.conditionContains(['m1.small'], myParameter.valueAsString),\n  'MyParameter has to be m1.small');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "194": 5,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "c640fa62268845c431f8edd7f82e219e451b2082c6ec5dddf75624c7508cd15a"
    },
    "5a5d939718eebd3dfe55a5414ca78941298185177b05ab4af3ea5460353d2d20": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# cfn_condition_expression: cdk.ICfnConditionExpression\n\ncfn_rule_assertion = cdk.CfnRuleAssertion(\n    assert=cfn_condition_expression,\n    assert_description=\"assertDescription\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nICfnConditionExpression cfnConditionExpression;\nCfnRuleAssertion cfnRuleAssertion = new CfnRuleAssertion {\n    Assert = cfnConditionExpression,\n    AssertDescription = \"assertDescription\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nICfnConditionExpression cfnConditionExpression;\n\nCfnRuleAssertion cfnRuleAssertion = CfnRuleAssertion.builder()\n        .assert(cfnConditionExpression)\n        .assertDescription(\"assertDescription\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar cfnConditionExpression iCfnConditionExpression\ncfnRuleAssertion := &cfnRuleAssertion{\n\tassert: cfnConditionExpression,\n\tassertDescription: jsii.String(\"assertDescription\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cfnConditionExpression: cdk.ICfnConditionExpression;\nconst cfnRuleAssertion: cdk.CfnRuleAssertion = {\n  assert: cfnConditionExpression,\n  assertDescription: 'assertDescription',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnRuleAssertion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnRuleAssertion",
        "@aws-cdk/core.ICfnConditionExpression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cfnConditionExpression: cdk.ICfnConditionExpression;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRuleAssertion: cdk.CfnRuleAssertion = {\n  assert: cfnConditionExpression,\n  assertDescription: 'assertDescription',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a3c2ac8cf7ddda58ce20f4afb7d8b8da4c522cfb05a392530dc41bb76e8b6091"
    },
    "cb342595144f1da62861525c1546a76da45fe864b6f500d1ed35a8c9dd244b52": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# cfn_condition_expression: cdk.ICfnConditionExpression\n\ncfn_rule_props = cdk.CfnRuleProps(\n    assertions=[cdk.CfnRuleAssertion(\n        assert=cfn_condition_expression,\n        assert_description=\"assertDescription\"\n    )],\n    rule_condition=cfn_condition_expression\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nICfnConditionExpression cfnConditionExpression;\nCfnRuleProps cfnRuleProps = new CfnRuleProps {\n    Assertions = new [] { new CfnRuleAssertion {\n        Assert = cfnConditionExpression,\n        AssertDescription = \"assertDescription\"\n    } },\n    RuleCondition = cfnConditionExpression\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nICfnConditionExpression cfnConditionExpression;\n\nCfnRuleProps cfnRuleProps = CfnRuleProps.builder()\n        .assertions(List.of(CfnRuleAssertion.builder()\n                .assert(cfnConditionExpression)\n                .assertDescription(\"assertDescription\")\n                .build()))\n        .ruleCondition(cfnConditionExpression)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar cfnConditionExpression iCfnConditionExpression\ncfnRuleProps := &cfnRuleProps{\n\tassertions: []cfnRuleAssertion{\n\t\t&cfnRuleAssertion{\n\t\t\tassert: cfnConditionExpression,\n\t\t\tassertDescription: jsii.String(\"assertDescription\"),\n\t\t},\n\t},\n\truleCondition: cfnConditionExpression,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cfnConditionExpression: cdk.ICfnConditionExpression;\nconst cfnRuleProps: cdk.CfnRuleProps = {\n  assertions: [{\n    assert: cfnConditionExpression,\n    assertDescription: 'assertDescription',\n  }],\n  ruleCondition: cfnConditionExpression,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnRuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnRuleProps",
        "@aws-cdk/core.ICfnConditionExpression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cfnConditionExpression: cdk.ICfnConditionExpression;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRuleProps: cdk.CfnRuleProps = {\n  assertions: [{\n    assert: cfnConditionExpression,\n    assertDescription: 'assertDescription',\n  }],\n  ruleCondition: cfnConditionExpression,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "80068764d112afdc97089d9d59f54edbb683cdf677202eaa5eb7850c697240e4"
    },
    "b2a2b4a3089be090b55e1152286f974d0215acf551b8abd4e182c4c4ae766072": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_stack = cdk.CfnStack(self, \"MyCfnStack\",\n    template_url=\"templateUrl\",\n\n    # the properties below are optional\n    notification_arns=[\"notificationArns\"],\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    tags=[cdk.CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    timeout_in_minutes=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnStack cfnStack = new CfnStack(this, \"MyCfnStack\", new CfnStackProps {\n    TemplateUrl = \"templateUrl\",\n\n    // the properties below are optional\n    NotificationArns = new [] { \"notificationArns\" },\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TimeoutInMinutes = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnStack cfnStack = CfnStack.Builder.create(this, \"MyCfnStack\")\n        .templateUrl(\"templateUrl\")\n\n        // the properties below are optional\n        .notificationArns(List.of(\"notificationArns\"))\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .timeoutInMinutes(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnStack := cdk.NewCfnStack(this, jsii.String(\"MyCfnStack\"), &cfnStackProps{\n\ttemplateUrl: jsii.String(\"templateUrl\"),\n\n\t// the properties below are optional\n\tnotificationArns: []*string{\n\t\tjsii.String(\"notificationArns\"),\n\t},\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttimeoutInMinutes: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnStack = new cdk.CfnStack(this, 'MyCfnStack', {\n  templateUrl: 'templateUrl',\n\n  // the properties below are optional\n  notificationArns: ['notificationArns'],\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeoutInMinutes: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStack"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStack",
        "@aws-cdk/core.CfnStackProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStack = new cdk.CfnStack(this, 'MyCfnStack', {\n  templateUrl: 'templateUrl',\n\n  // the properties below are optional\n  notificationArns: ['notificationArns'],\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeoutInMinutes: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 12,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "28fe70be24b0bae0311a10d8e2cd2e880990fcfe22bda9bc2cee4fc0df4fc23a"
    },
    "a68967d820a8bd93a1c4d7450fe3c96160bd500b1c4a2dcac65eaebf968f2ac0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_stack_props = cdk.CfnStackProps(\n    template_url=\"templateUrl\",\n\n    # the properties below are optional\n    notification_arns=[\"notificationArns\"],\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    tags=[cdk.CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    timeout_in_minutes=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnStackProps cfnStackProps = new CfnStackProps {\n    TemplateUrl = \"templateUrl\",\n\n    // the properties below are optional\n    NotificationArns = new [] { \"notificationArns\" },\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TimeoutInMinutes = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnStackProps cfnStackProps = CfnStackProps.builder()\n        .templateUrl(\"templateUrl\")\n\n        // the properties below are optional\n        .notificationArns(List.of(\"notificationArns\"))\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .timeoutInMinutes(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnStackProps := &cfnStackProps{\n\ttemplateUrl: jsii.String(\"templateUrl\"),\n\n\t// the properties below are optional\n\tnotificationArns: []*string{\n\t\tjsii.String(\"notificationArns\"),\n\t},\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttimeoutInMinutes: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnStackProps: cdk.CfnStackProps = {\n  templateUrl: 'templateUrl',\n\n  // the properties below are optional\n  notificationArns: ['notificationArns'],\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeoutInMinutes: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStackProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStackProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStackProps: cdk.CfnStackProps = {\n  templateUrl: 'templateUrl',\n\n  // the properties below are optional\n  notificationArns: ['notificationArns'],\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeoutInMinutes: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 12,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "2777cc60bb7f0a49507560619769a8706e5757a3fb6cf3cd11f41d7e64c8a4a1"
    },
    "d1e7116ba8ef233d11c634ccc59799a1754053919fe073db4acb71af12dd41c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# managed_execution: Any\n\ncfn_stack_set = cdk.CfnStackSet(self, \"MyCfnStackSet\",\n    permission_model=\"permissionModel\",\n    stack_set_name=\"stackSetName\",\n\n    # the properties below are optional\n    administration_role_arn=\"administrationRoleArn\",\n    auto_deployment=cdk.CfnStackSet.AutoDeploymentProperty(\n        enabled=False,\n        retain_stacks_on_account_removal=False\n    ),\n    call_as=\"callAs\",\n    capabilities=[\"capabilities\"],\n    description=\"description\",\n    execution_role_name=\"executionRoleName\",\n    managed_execution=managed_execution,\n    operation_preferences=cdk.CfnStackSet.OperationPreferencesProperty(\n        failure_tolerance_count=123,\n        failure_tolerance_percentage=123,\n        max_concurrent_count=123,\n        max_concurrent_percentage=123,\n        region_concurrency_type=\"regionConcurrencyType\",\n        region_order=[\"regionOrder\"]\n    ),\n    parameters=[cdk.CfnStackSet.ParameterProperty(\n        parameter_key=\"parameterKey\",\n        parameter_value=\"parameterValue\"\n    )],\n    stack_instances_group=[cdk.CfnStackSet.StackInstancesProperty(\n        deployment_targets=cdk.CfnStackSet.DeploymentTargetsProperty(\n            accounts=[\"accounts\"],\n            organizational_unit_ids=[\"organizationalUnitIds\"]\n        ),\n        regions=[\"regions\"],\n\n        # the properties below are optional\n        parameter_overrides=[cdk.CfnStackSet.ParameterProperty(\n            parameter_key=\"parameterKey\",\n            parameter_value=\"parameterValue\"\n        )]\n    )],\n    tags=[cdk.CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    template_body=\"templateBody\",\n    template_url=\"templateUrl\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar managedExecution;\nCfnStackSet cfnStackSet = new CfnStackSet(this, \"MyCfnStackSet\", new CfnStackSetProps {\n    PermissionModel = \"permissionModel\",\n    StackSetName = \"stackSetName\",\n\n    // the properties below are optional\n    AdministrationRoleArn = \"administrationRoleArn\",\n    AutoDeployment = new AutoDeploymentProperty {\n        Enabled = false,\n        RetainStacksOnAccountRemoval = false\n    },\n    CallAs = \"callAs\",\n    Capabilities = new [] { \"capabilities\" },\n    Description = \"description\",\n    ExecutionRoleName = \"executionRoleName\",\n    ManagedExecution = managedExecution,\n    OperationPreferences = new OperationPreferencesProperty {\n        FailureToleranceCount = 123,\n        FailureTolerancePercentage = 123,\n        MaxConcurrentCount = 123,\n        MaxConcurrentPercentage = 123,\n        RegionConcurrencyType = \"regionConcurrencyType\",\n        RegionOrder = new [] { \"regionOrder\" }\n    },\n    Parameters = new [] { new ParameterProperty {\n        ParameterKey = \"parameterKey\",\n        ParameterValue = \"parameterValue\"\n    } },\n    StackInstancesGroup = new [] { new StackInstancesProperty {\n        DeploymentTargets = new DeploymentTargetsProperty {\n            Accounts = new [] { \"accounts\" },\n            OrganizationalUnitIds = new [] { \"organizationalUnitIds\" }\n        },\n        Regions = new [] { \"regions\" },\n\n        // the properties below are optional\n        ParameterOverrides = new [] { new ParameterProperty {\n            ParameterKey = \"parameterKey\",\n            ParameterValue = \"parameterValue\"\n        } }\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TemplateBody = \"templateBody\",\n    TemplateUrl = \"templateUrl\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject managedExecution;\n\nCfnStackSet cfnStackSet = CfnStackSet.Builder.create(this, \"MyCfnStackSet\")\n        .permissionModel(\"permissionModel\")\n        .stackSetName(\"stackSetName\")\n\n        // the properties below are optional\n        .administrationRoleArn(\"administrationRoleArn\")\n        .autoDeployment(AutoDeploymentProperty.builder()\n                .enabled(false)\n                .retainStacksOnAccountRemoval(false)\n                .build())\n        .callAs(\"callAs\")\n        .capabilities(List.of(\"capabilities\"))\n        .description(\"description\")\n        .executionRoleName(\"executionRoleName\")\n        .managedExecution(managedExecution)\n        .operationPreferences(OperationPreferencesProperty.builder()\n                .failureToleranceCount(123)\n                .failureTolerancePercentage(123)\n                .maxConcurrentCount(123)\n                .maxConcurrentPercentage(123)\n                .regionConcurrencyType(\"regionConcurrencyType\")\n                .regionOrder(List.of(\"regionOrder\"))\n                .build())\n        .parameters(List.of(ParameterProperty.builder()\n                .parameterKey(\"parameterKey\")\n                .parameterValue(\"parameterValue\")\n                .build()))\n        .stackInstancesGroup(List.of(StackInstancesProperty.builder()\n                .deploymentTargets(DeploymentTargetsProperty.builder()\n                        .accounts(List.of(\"accounts\"))\n                        .organizationalUnitIds(List.of(\"organizationalUnitIds\"))\n                        .build())\n                .regions(List.of(\"regions\"))\n\n                // the properties below are optional\n                .parameterOverrides(List.of(ParameterProperty.builder()\n                        .parameterKey(\"parameterKey\")\n                        .parameterValue(\"parameterValue\")\n                        .build()))\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .templateBody(\"templateBody\")\n        .templateUrl(\"templateUrl\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar managedExecution interface{}\ncfnStackSet := cdk.NewCfnStackSet(this, jsii.String(\"MyCfnStackSet\"), &cfnStackSetProps{\n\tpermissionModel: jsii.String(\"permissionModel\"),\n\tstackSetName: jsii.String(\"stackSetName\"),\n\n\t// the properties below are optional\n\tadministrationRoleArn: jsii.String(\"administrationRoleArn\"),\n\tautoDeployment: &autoDeploymentProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\tretainStacksOnAccountRemoval: jsii.Boolean(false),\n\t},\n\tcallAs: jsii.String(\"callAs\"),\n\tcapabilities: []*string{\n\t\tjsii.String(\"capabilities\"),\n\t},\n\tdescription: jsii.String(\"description\"),\n\texecutionRoleName: jsii.String(\"executionRoleName\"),\n\tmanagedExecution: managedExecution,\n\toperationPreferences: &operationPreferencesProperty{\n\t\tfailureToleranceCount: jsii.Number(123),\n\t\tfailureTolerancePercentage: jsii.Number(123),\n\t\tmaxConcurrentCount: jsii.Number(123),\n\t\tmaxConcurrentPercentage: jsii.Number(123),\n\t\tregionConcurrencyType: jsii.String(\"regionConcurrencyType\"),\n\t\tregionOrder: []*string{\n\t\t\tjsii.String(\"regionOrder\"),\n\t\t},\n\t},\n\tparameters: []interface{}{\n\t\t&parameterProperty{\n\t\t\tparameterKey: jsii.String(\"parameterKey\"),\n\t\t\tparameterValue: jsii.String(\"parameterValue\"),\n\t\t},\n\t},\n\tstackInstancesGroup: []interface{}{\n\t\t&stackInstancesProperty{\n\t\t\tdeploymentTargets: &deploymentTargetsProperty{\n\t\t\t\taccounts: []*string{\n\t\t\t\t\tjsii.String(\"accounts\"),\n\t\t\t\t},\n\t\t\t\torganizationalUnitIds: []*string{\n\t\t\t\t\tjsii.String(\"organizationalUnitIds\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tregions: []*string{\n\t\t\t\tjsii.String(\"regions\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tparameterOverrides: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tparameterKey: jsii.String(\"parameterKey\"),\n\t\t\t\t\tparameterValue: jsii.String(\"parameterValue\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttemplateBody: jsii.String(\"templateBody\"),\n\ttemplateUrl: jsii.String(\"templateUrl\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const managedExecution: any;\nconst cfnStackSet = new cdk.CfnStackSet(this, 'MyCfnStackSet', {\n  permissionModel: 'permissionModel',\n  stackSetName: 'stackSetName',\n\n  // the properties below are optional\n  administrationRoleArn: 'administrationRoleArn',\n  autoDeployment: {\n    enabled: false,\n    retainStacksOnAccountRemoval: false,\n  },\n  callAs: 'callAs',\n  capabilities: ['capabilities'],\n  description: 'description',\n  executionRoleName: 'executionRoleName',\n  managedExecution: managedExecution,\n  operationPreferences: {\n    failureToleranceCount: 123,\n    failureTolerancePercentage: 123,\n    maxConcurrentCount: 123,\n    maxConcurrentPercentage: 123,\n    regionConcurrencyType: 'regionConcurrencyType',\n    regionOrder: ['regionOrder'],\n  },\n  parameters: [{\n    parameterKey: 'parameterKey',\n    parameterValue: 'parameterValue',\n  }],\n  stackInstancesGroup: [{\n    deploymentTargets: {\n      accounts: ['accounts'],\n      organizationalUnitIds: ['organizationalUnitIds'],\n    },\n    regions: ['regions'],\n\n    // the properties below are optional\n    parameterOverrides: [{\n      parameterKey: 'parameterKey',\n      parameterValue: 'parameterValue',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  templateBody: 'templateBody',\n  templateUrl: 'templateUrl',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStackSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStackSet",
        "@aws-cdk/core.CfnStackSetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const managedExecution: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStackSet = new cdk.CfnStackSet(this, 'MyCfnStackSet', {\n  permissionModel: 'permissionModel',\n  stackSetName: 'stackSetName',\n\n  // the properties below are optional\n  administrationRoleArn: 'administrationRoleArn',\n  autoDeployment: {\n    enabled: false,\n    retainStacksOnAccountRemoval: false,\n  },\n  callAs: 'callAs',\n  capabilities: ['capabilities'],\n  description: 'description',\n  executionRoleName: 'executionRoleName',\n  managedExecution: managedExecution,\n  operationPreferences: {\n    failureToleranceCount: 123,\n    failureTolerancePercentage: 123,\n    maxConcurrentCount: 123,\n    maxConcurrentPercentage: 123,\n    regionConcurrencyType: 'regionConcurrencyType',\n    regionOrder: ['regionOrder'],\n  },\n  parameters: [{\n    parameterKey: 'parameterKey',\n    parameterValue: 'parameterValue',\n  }],\n  stackInstancesGroup: [{\n    deploymentTargets: {\n      accounts: ['accounts'],\n      organizationalUnitIds: ['organizationalUnitIds'],\n    },\n    regions: ['regions'],\n\n    // the properties below are optional\n    parameterOverrides: [{\n      parameterKey: 'parameterKey',\n      parameterValue: 'parameterValue',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  templateBody: 'templateBody',\n  templateUrl: 'templateUrl',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 22,
        "75": 40,
        "91": 2,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 9,
        "193": 8,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 34,
        "290": 1
      },
      "fqnsFingerprint": "20c08e485486ed9381cb46acbaa984d85bbe46e92842da09f5b670ed903144e3"
    },
    "392a1e69769409b0e58867c073d8f497046ccb53a929405bb90590a9ec792c4a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nauto_deployment_property = cdk.CfnStackSet.AutoDeploymentProperty(\n    enabled=False,\n    retain_stacks_on_account_removal=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nAutoDeploymentProperty autoDeploymentProperty = new AutoDeploymentProperty {\n    Enabled = false,\n    RetainStacksOnAccountRemoval = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nAutoDeploymentProperty autoDeploymentProperty = AutoDeploymentProperty.builder()\n        .enabled(false)\n        .retainStacksOnAccountRemoval(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nautoDeploymentProperty := &autoDeploymentProperty{\n\tenabled: jsii.Boolean(false),\n\tretainStacksOnAccountRemoval: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst autoDeploymentProperty: cdk.CfnStackSet.AutoDeploymentProperty = {\n  enabled: false,\n  retainStacksOnAccountRemoval: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStackSet.AutoDeploymentProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStackSet.AutoDeploymentProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst autoDeploymentProperty: cdk.CfnStackSet.AutoDeploymentProperty = {\n  enabled: false,\n  retainStacksOnAccountRemoval: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2be73ee64a0e2d0d633930d93aa3edd85612c533977a9d00faf551fe1a9ba345"
    },
    "11e03b70469e9ca0295c2a8a8fdd06e88a8017a4366e6400e65953cda748ed73": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ndeployment_targets_property = cdk.CfnStackSet.DeploymentTargetsProperty(\n    accounts=[\"accounts\"],\n    organizational_unit_ids=[\"organizationalUnitIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nDeploymentTargetsProperty deploymentTargetsProperty = new DeploymentTargetsProperty {\n    Accounts = new [] { \"accounts\" },\n    OrganizationalUnitIds = new [] { \"organizationalUnitIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDeploymentTargetsProperty deploymentTargetsProperty = DeploymentTargetsProperty.builder()\n        .accounts(List.of(\"accounts\"))\n        .organizationalUnitIds(List.of(\"organizationalUnitIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ndeploymentTargetsProperty := &deploymentTargetsProperty{\n\taccounts: []*string{\n\t\tjsii.String(\"accounts\"),\n\t},\n\torganizationalUnitIds: []*string{\n\t\tjsii.String(\"organizationalUnitIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst deploymentTargetsProperty: cdk.CfnStackSet.DeploymentTargetsProperty = {\n  accounts: ['accounts'],\n  organizationalUnitIds: ['organizationalUnitIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStackSet.DeploymentTargetsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStackSet.DeploymentTargetsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentTargetsProperty: cdk.CfnStackSet.DeploymentTargetsProperty = {\n  accounts: ['accounts'],\n  organizationalUnitIds: ['organizationalUnitIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4366a4859169d30b2f33745e1d1e76e6365bc4518859a1813c979667d81d839b"
    },
    "97be5f91da09feb4c136ba7c1056f1598fd58d71e00f2a8e1899e6fa5b2b1d7d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\noperation_preferences_property = cdk.CfnStackSet.OperationPreferencesProperty(\n    failure_tolerance_count=123,\n    failure_tolerance_percentage=123,\n    max_concurrent_count=123,\n    max_concurrent_percentage=123,\n    region_concurrency_type=\"regionConcurrencyType\",\n    region_order=[\"regionOrder\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nOperationPreferencesProperty operationPreferencesProperty = new OperationPreferencesProperty {\n    FailureToleranceCount = 123,\n    FailureTolerancePercentage = 123,\n    MaxConcurrentCount = 123,\n    MaxConcurrentPercentage = 123,\n    RegionConcurrencyType = \"regionConcurrencyType\",\n    RegionOrder = new [] { \"regionOrder\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nOperationPreferencesProperty operationPreferencesProperty = OperationPreferencesProperty.builder()\n        .failureToleranceCount(123)\n        .failureTolerancePercentage(123)\n        .maxConcurrentCount(123)\n        .maxConcurrentPercentage(123)\n        .regionConcurrencyType(\"regionConcurrencyType\")\n        .regionOrder(List.of(\"regionOrder\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\noperationPreferencesProperty := &operationPreferencesProperty{\n\tfailureToleranceCount: jsii.Number(123),\n\tfailureTolerancePercentage: jsii.Number(123),\n\tmaxConcurrentCount: jsii.Number(123),\n\tmaxConcurrentPercentage: jsii.Number(123),\n\tregionConcurrencyType: jsii.String(\"regionConcurrencyType\"),\n\tregionOrder: []*string{\n\t\tjsii.String(\"regionOrder\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst operationPreferencesProperty: cdk.CfnStackSet.OperationPreferencesProperty = {\n  failureToleranceCount: 123,\n  failureTolerancePercentage: 123,\n  maxConcurrentCount: 123,\n  maxConcurrentPercentage: 123,\n  regionConcurrencyType: 'regionConcurrencyType',\n  regionOrder: ['regionOrder'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStackSet.OperationPreferencesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStackSet.OperationPreferencesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst operationPreferencesProperty: cdk.CfnStackSet.OperationPreferencesProperty = {\n  failureToleranceCount: 123,\n  failureTolerancePercentage: 123,\n  maxConcurrentCount: 123,\n  maxConcurrentPercentage: 123,\n  regionConcurrencyType: 'regionConcurrencyType',\n  regionOrder: ['regionOrder'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 11,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "4e05150faca5b5c5f8ded5f9a7e69b490394ad1a62eb1525be1d8a42459b231c"
    },
    "f0839d669d7a3fff1619a94fe90e48772153b9e429752de43356cab661221c25": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nparameter_property = cdk.CfnStackSet.ParameterProperty(\n    parameter_key=\"parameterKey\",\n    parameter_value=\"parameterValue\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nParameterProperty parameterProperty = new ParameterProperty {\n    ParameterKey = \"parameterKey\",\n    ParameterValue = \"parameterValue\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nParameterProperty parameterProperty = ParameterProperty.builder()\n        .parameterKey(\"parameterKey\")\n        .parameterValue(\"parameterValue\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nparameterProperty := &parameterProperty{\n\tparameterKey: jsii.String(\"parameterKey\"),\n\tparameterValue: jsii.String(\"parameterValue\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst parameterProperty: cdk.CfnStackSet.ParameterProperty = {\n  parameterKey: 'parameterKey',\n  parameterValue: 'parameterValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStackSet.ParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStackSet.ParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterProperty: cdk.CfnStackSet.ParameterProperty = {\n  parameterKey: 'parameterKey',\n  parameterValue: 'parameterValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1c8d85190212eca061c094f1be492c2d7fa62a7ea56e6af0ad6e3da13f14adee"
    },
    "1c5f949807acc81a5fc351cc6be08de23fd9ec0c971b6d974c81d49de28b8d01": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nstack_instances_property = cdk.CfnStackSet.StackInstancesProperty(\n    deployment_targets=cdk.CfnStackSet.DeploymentTargetsProperty(\n        accounts=[\"accounts\"],\n        organizational_unit_ids=[\"organizationalUnitIds\"]\n    ),\n    regions=[\"regions\"],\n\n    # the properties below are optional\n    parameter_overrides=[cdk.CfnStackSet.ParameterProperty(\n        parameter_key=\"parameterKey\",\n        parameter_value=\"parameterValue\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nStackInstancesProperty stackInstancesProperty = new StackInstancesProperty {\n    DeploymentTargets = new DeploymentTargetsProperty {\n        Accounts = new [] { \"accounts\" },\n        OrganizationalUnitIds = new [] { \"organizationalUnitIds\" }\n    },\n    Regions = new [] { \"regions\" },\n\n    // the properties below are optional\n    ParameterOverrides = new [] { new ParameterProperty {\n        ParameterKey = \"parameterKey\",\n        ParameterValue = \"parameterValue\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nStackInstancesProperty stackInstancesProperty = StackInstancesProperty.builder()\n        .deploymentTargets(DeploymentTargetsProperty.builder()\n                .accounts(List.of(\"accounts\"))\n                .organizationalUnitIds(List.of(\"organizationalUnitIds\"))\n                .build())\n        .regions(List.of(\"regions\"))\n\n        // the properties below are optional\n        .parameterOverrides(List.of(ParameterProperty.builder()\n                .parameterKey(\"parameterKey\")\n                .parameterValue(\"parameterValue\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nstackInstancesProperty := &stackInstancesProperty{\n\tdeploymentTargets: &deploymentTargetsProperty{\n\t\taccounts: []*string{\n\t\t\tjsii.String(\"accounts\"),\n\t\t},\n\t\torganizationalUnitIds: []*string{\n\t\t\tjsii.String(\"organizationalUnitIds\"),\n\t\t},\n\t},\n\tregions: []*string{\n\t\tjsii.String(\"regions\"),\n\t},\n\n\t// the properties below are optional\n\tparameterOverrides: []interface{}{\n\t\t&parameterProperty{\n\t\t\tparameterKey: jsii.String(\"parameterKey\"),\n\t\t\tparameterValue: jsii.String(\"parameterValue\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst stackInstancesProperty: cdk.CfnStackSet.StackInstancesProperty = {\n  deploymentTargets: {\n    accounts: ['accounts'],\n    organizationalUnitIds: ['organizationalUnitIds'],\n  },\n  regions: ['regions'],\n\n  // the properties below are optional\n  parameterOverrides: [{\n    parameterKey: 'parameterKey',\n    parameterValue: 'parameterValue',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStackSet.StackInstancesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStackSet.StackInstancesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stackInstancesProperty: cdk.CfnStackSet.StackInstancesProperty = {\n  deploymentTargets: {\n    accounts: ['accounts'],\n    organizationalUnitIds: ['organizationalUnitIds'],\n  },\n  regions: ['regions'],\n\n  // the properties below are optional\n  parameterOverrides: [{\n    parameterKey: 'parameterKey',\n    parameterValue: 'parameterValue',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 12,
        "153": 2,
        "169": 1,
        "192": 4,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "abf89a86f9eb6159daf21fb8a50e8f7e3a6d4bd2fb4db9951f44fb053c415ddc"
    },
    "e9332896362cfc469d9bd6696592f75e21394e72e4844ec755a00ff61e3928a7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# managed_execution: Any\n\ncfn_stack_set_props = cdk.CfnStackSetProps(\n    permission_model=\"permissionModel\",\n    stack_set_name=\"stackSetName\",\n\n    # the properties below are optional\n    administration_role_arn=\"administrationRoleArn\",\n    auto_deployment=cdk.CfnStackSet.AutoDeploymentProperty(\n        enabled=False,\n        retain_stacks_on_account_removal=False\n    ),\n    call_as=\"callAs\",\n    capabilities=[\"capabilities\"],\n    description=\"description\",\n    execution_role_name=\"executionRoleName\",\n    managed_execution=managed_execution,\n    operation_preferences=cdk.CfnStackSet.OperationPreferencesProperty(\n        failure_tolerance_count=123,\n        failure_tolerance_percentage=123,\n        max_concurrent_count=123,\n        max_concurrent_percentage=123,\n        region_concurrency_type=\"regionConcurrencyType\",\n        region_order=[\"regionOrder\"]\n    ),\n    parameters=[cdk.CfnStackSet.ParameterProperty(\n        parameter_key=\"parameterKey\",\n        parameter_value=\"parameterValue\"\n    )],\n    stack_instances_group=[cdk.CfnStackSet.StackInstancesProperty(\n        deployment_targets=cdk.CfnStackSet.DeploymentTargetsProperty(\n            accounts=[\"accounts\"],\n            organizational_unit_ids=[\"organizationalUnitIds\"]\n        ),\n        regions=[\"regions\"],\n\n        # the properties below are optional\n        parameter_overrides=[cdk.CfnStackSet.ParameterProperty(\n            parameter_key=\"parameterKey\",\n            parameter_value=\"parameterValue\"\n        )]\n    )],\n    tags=[cdk.CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    template_body=\"templateBody\",\n    template_url=\"templateUrl\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar managedExecution;\nCfnStackSetProps cfnStackSetProps = new CfnStackSetProps {\n    PermissionModel = \"permissionModel\",\n    StackSetName = \"stackSetName\",\n\n    // the properties below are optional\n    AdministrationRoleArn = \"administrationRoleArn\",\n    AutoDeployment = new AutoDeploymentProperty {\n        Enabled = false,\n        RetainStacksOnAccountRemoval = false\n    },\n    CallAs = \"callAs\",\n    Capabilities = new [] { \"capabilities\" },\n    Description = \"description\",\n    ExecutionRoleName = \"executionRoleName\",\n    ManagedExecution = managedExecution,\n    OperationPreferences = new OperationPreferencesProperty {\n        FailureToleranceCount = 123,\n        FailureTolerancePercentage = 123,\n        MaxConcurrentCount = 123,\n        MaxConcurrentPercentage = 123,\n        RegionConcurrencyType = \"regionConcurrencyType\",\n        RegionOrder = new [] { \"regionOrder\" }\n    },\n    Parameters = new [] { new ParameterProperty {\n        ParameterKey = \"parameterKey\",\n        ParameterValue = \"parameterValue\"\n    } },\n    StackInstancesGroup = new [] { new StackInstancesProperty {\n        DeploymentTargets = new DeploymentTargetsProperty {\n            Accounts = new [] { \"accounts\" },\n            OrganizationalUnitIds = new [] { \"organizationalUnitIds\" }\n        },\n        Regions = new [] { \"regions\" },\n\n        // the properties below are optional\n        ParameterOverrides = new [] { new ParameterProperty {\n            ParameterKey = \"parameterKey\",\n            ParameterValue = \"parameterValue\"\n        } }\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TemplateBody = \"templateBody\",\n    TemplateUrl = \"templateUrl\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject managedExecution;\n\nCfnStackSetProps cfnStackSetProps = CfnStackSetProps.builder()\n        .permissionModel(\"permissionModel\")\n        .stackSetName(\"stackSetName\")\n\n        // the properties below are optional\n        .administrationRoleArn(\"administrationRoleArn\")\n        .autoDeployment(AutoDeploymentProperty.builder()\n                .enabled(false)\n                .retainStacksOnAccountRemoval(false)\n                .build())\n        .callAs(\"callAs\")\n        .capabilities(List.of(\"capabilities\"))\n        .description(\"description\")\n        .executionRoleName(\"executionRoleName\")\n        .managedExecution(managedExecution)\n        .operationPreferences(OperationPreferencesProperty.builder()\n                .failureToleranceCount(123)\n                .failureTolerancePercentage(123)\n                .maxConcurrentCount(123)\n                .maxConcurrentPercentage(123)\n                .regionConcurrencyType(\"regionConcurrencyType\")\n                .regionOrder(List.of(\"regionOrder\"))\n                .build())\n        .parameters(List.of(ParameterProperty.builder()\n                .parameterKey(\"parameterKey\")\n                .parameterValue(\"parameterValue\")\n                .build()))\n        .stackInstancesGroup(List.of(StackInstancesProperty.builder()\n                .deploymentTargets(DeploymentTargetsProperty.builder()\n                        .accounts(List.of(\"accounts\"))\n                        .organizationalUnitIds(List.of(\"organizationalUnitIds\"))\n                        .build())\n                .regions(List.of(\"regions\"))\n\n                // the properties below are optional\n                .parameterOverrides(List.of(ParameterProperty.builder()\n                        .parameterKey(\"parameterKey\")\n                        .parameterValue(\"parameterValue\")\n                        .build()))\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .templateBody(\"templateBody\")\n        .templateUrl(\"templateUrl\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar managedExecution interface{}\ncfnStackSetProps := &cfnStackSetProps{\n\tpermissionModel: jsii.String(\"permissionModel\"),\n\tstackSetName: jsii.String(\"stackSetName\"),\n\n\t// the properties below are optional\n\tadministrationRoleArn: jsii.String(\"administrationRoleArn\"),\n\tautoDeployment: &autoDeploymentProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\tretainStacksOnAccountRemoval: jsii.Boolean(false),\n\t},\n\tcallAs: jsii.String(\"callAs\"),\n\tcapabilities: []*string{\n\t\tjsii.String(\"capabilities\"),\n\t},\n\tdescription: jsii.String(\"description\"),\n\texecutionRoleName: jsii.String(\"executionRoleName\"),\n\tmanagedExecution: managedExecution,\n\toperationPreferences: &operationPreferencesProperty{\n\t\tfailureToleranceCount: jsii.Number(123),\n\t\tfailureTolerancePercentage: jsii.Number(123),\n\t\tmaxConcurrentCount: jsii.Number(123),\n\t\tmaxConcurrentPercentage: jsii.Number(123),\n\t\tregionConcurrencyType: jsii.String(\"regionConcurrencyType\"),\n\t\tregionOrder: []*string{\n\t\t\tjsii.String(\"regionOrder\"),\n\t\t},\n\t},\n\tparameters: []interface{}{\n\t\t&parameterProperty{\n\t\t\tparameterKey: jsii.String(\"parameterKey\"),\n\t\t\tparameterValue: jsii.String(\"parameterValue\"),\n\t\t},\n\t},\n\tstackInstancesGroup: []interface{}{\n\t\t&stackInstancesProperty{\n\t\t\tdeploymentTargets: &deploymentTargetsProperty{\n\t\t\t\taccounts: []*string{\n\t\t\t\t\tjsii.String(\"accounts\"),\n\t\t\t\t},\n\t\t\t\torganizationalUnitIds: []*string{\n\t\t\t\t\tjsii.String(\"organizationalUnitIds\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tregions: []*string{\n\t\t\t\tjsii.String(\"regions\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tparameterOverrides: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tparameterKey: jsii.String(\"parameterKey\"),\n\t\t\t\t\tparameterValue: jsii.String(\"parameterValue\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttemplateBody: jsii.String(\"templateBody\"),\n\ttemplateUrl: jsii.String(\"templateUrl\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const managedExecution: any;\nconst cfnStackSetProps: cdk.CfnStackSetProps = {\n  permissionModel: 'permissionModel',\n  stackSetName: 'stackSetName',\n\n  // the properties below are optional\n  administrationRoleArn: 'administrationRoleArn',\n  autoDeployment: {\n    enabled: false,\n    retainStacksOnAccountRemoval: false,\n  },\n  callAs: 'callAs',\n  capabilities: ['capabilities'],\n  description: 'description',\n  executionRoleName: 'executionRoleName',\n  managedExecution: managedExecution,\n  operationPreferences: {\n    failureToleranceCount: 123,\n    failureTolerancePercentage: 123,\n    maxConcurrentCount: 123,\n    maxConcurrentPercentage: 123,\n    regionConcurrencyType: 'regionConcurrencyType',\n    regionOrder: ['regionOrder'],\n  },\n  parameters: [{\n    parameterKey: 'parameterKey',\n    parameterValue: 'parameterValue',\n  }],\n  stackInstancesGroup: [{\n    deploymentTargets: {\n      accounts: ['accounts'],\n      organizationalUnitIds: ['organizationalUnitIds'],\n    },\n    regions: ['regions'],\n\n    // the properties below are optional\n    parameterOverrides: [{\n      parameterKey: 'parameterKey',\n      parameterValue: 'parameterValue',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  templateBody: 'templateBody',\n  templateUrl: 'templateUrl',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnStackSetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnStackSetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const managedExecution: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStackSetProps: cdk.CfnStackSetProps = {\n  permissionModel: 'permissionModel',\n  stackSetName: 'stackSetName',\n\n  // the properties below are optional\n  administrationRoleArn: 'administrationRoleArn',\n  autoDeployment: {\n    enabled: false,\n    retainStacksOnAccountRemoval: false,\n  },\n  callAs: 'callAs',\n  capabilities: ['capabilities'],\n  description: 'description',\n  executionRoleName: 'executionRoleName',\n  managedExecution: managedExecution,\n  operationPreferences: {\n    failureToleranceCount: 123,\n    failureTolerancePercentage: 123,\n    maxConcurrentCount: 123,\n    maxConcurrentPercentage: 123,\n    regionConcurrencyType: 'regionConcurrencyType',\n    regionOrder: ['regionOrder'],\n  },\n  parameters: [{\n    parameterKey: 'parameterKey',\n    parameterValue: 'parameterValue',\n  }],\n  stackInstancesGroup: [{\n    deploymentTargets: {\n      accounts: ['accounts'],\n      organizationalUnitIds: ['organizationalUnitIds'],\n    },\n    regions: ['regions'],\n\n    // the properties below are optional\n    parameterOverrides: [{\n      parameterKey: 'parameterKey',\n      parameterValue: 'parameterValue',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  templateBody: 'templateBody',\n  templateUrl: 'templateUrl',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 21,
        "75": 40,
        "91": 2,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 9,
        "193": 8,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 34,
        "290": 1
      },
      "fqnsFingerprint": "4b8f8386db366ffdcbc663dc5da151e43063e7aab4980862507b1fda28057488"
    },
    "ab9d6075e382f0142707b81a54b71cf788ec35b975f250b6a86e140294dda2b9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_tag = cdk.CfnTag(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnTag cfnTag = new CfnTag {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnTag cfnTag = CfnTag.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnTag := &cfnTag{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnTag: cdk.CfnTag = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTag"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTag"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTag: cdk.CfnTag = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1ed11f6f0bc7439d395fb68b6a35dc894b754441199652aeba28e46c44a953e8"
    },
    "980f44090b5189837fa611a60361f1385ccd617616a7885546ef58d6163c1afd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_traffic_route = cdk.CfnTrafficRoute(\n    logical_id=\"logicalId\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnTrafficRoute cfnTrafficRoute = new CfnTrafficRoute {\n    LogicalId = \"logicalId\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnTrafficRoute cfnTrafficRoute = CfnTrafficRoute.builder()\n        .logicalId(\"logicalId\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnTrafficRoute := &cfnTrafficRoute{\n\tlogicalId: jsii.String(\"logicalId\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnTrafficRoute: cdk.CfnTrafficRoute = {\n  logicalId: 'logicalId',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTrafficRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTrafficRoute"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficRoute: cdk.CfnTrafficRoute = {\n  logicalId: 'logicalId',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e4677c5bc8dd26d0944889b1a9c0b3ae415bef917ccf511ce0e98134b18f3941"
    },
    "953b47162338f62e5a6fc34db2fb739fb60e567b8b7f056bf80d6c01c79d8458": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_traffic_routing = cdk.CfnTrafficRouting(\n    prod_traffic_route=cdk.CfnTrafficRoute(\n        logical_id=\"logicalId\",\n        type=\"type\"\n    ),\n    target_groups=[\"targetGroups\"],\n    test_traffic_route=cdk.CfnTrafficRoute(\n        logical_id=\"logicalId\",\n        type=\"type\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnTrafficRouting cfnTrafficRouting = new CfnTrafficRouting {\n    ProdTrafficRoute = new CfnTrafficRoute {\n        LogicalId = \"logicalId\",\n        Type = \"type\"\n    },\n    TargetGroups = new [] { \"targetGroups\" },\n    TestTrafficRoute = new CfnTrafficRoute {\n        LogicalId = \"logicalId\",\n        Type = \"type\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnTrafficRouting cfnTrafficRouting = CfnTrafficRouting.builder()\n        .prodTrafficRoute(CfnTrafficRoute.builder()\n                .logicalId(\"logicalId\")\n                .type(\"type\")\n                .build())\n        .targetGroups(List.of(\"targetGroups\"))\n        .testTrafficRoute(CfnTrafficRoute.builder()\n                .logicalId(\"logicalId\")\n                .type(\"type\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnTrafficRouting := &cfnTrafficRouting{\n\tprodTrafficRoute: &cfnTrafficRoute{\n\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\ttype: jsii.String(\"type\"),\n\t},\n\ttargetGroups: []*string{\n\t\tjsii.String(\"targetGroups\"),\n\t},\n\ttestTrafficRoute: &cfnTrafficRoute{\n\t\tlogicalId: jsii.String(\"logicalId\"),\n\t\ttype: jsii.String(\"type\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnTrafficRouting: cdk.CfnTrafficRouting = {\n  prodTrafficRoute: {\n    logicalId: 'logicalId',\n    type: 'type',\n  },\n  targetGroups: ['targetGroups'],\n  testTrafficRoute: {\n    logicalId: 'logicalId',\n    type: 'type',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTrafficRouting"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTrafficRoute",
        "@aws-cdk/core.CfnTrafficRouting"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficRouting: cdk.CfnTrafficRouting = {\n  prodTrafficRoute: {\n    logicalId: 'logicalId',\n    type: 'type',\n  },\n  targetGroups: ['targetGroups'],\n  testTrafficRoute: {\n    logicalId: 'logicalId',\n    type: 'type',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "bece4fbf4580d12a856999ff8947520071db3fc2b2fc5f26120f96f199a5a245"
    },
    "af14f68e441cc4e128a1e4a38f36768a14cfef565454fb285820babeb99ebf3a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_traffic_routing_config = cdk.CfnTrafficRoutingConfig(\n    type=cdk.CfnTrafficRoutingType.ALL_AT_ONCE,\n\n    # the properties below are optional\n    time_based_canary=cdk.CfnTrafficRoutingTimeBasedCanary(\n        bake_time_mins=123,\n        step_percentage=123\n    ),\n    time_based_linear=cdk.CfnTrafficRoutingTimeBasedLinear(\n        bake_time_mins=123,\n        step_percentage=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnTrafficRoutingConfig cfnTrafficRoutingConfig = new CfnTrafficRoutingConfig {\n    Type = CfnTrafficRoutingType.ALL_AT_ONCE,\n\n    // the properties below are optional\n    TimeBasedCanary = new CfnTrafficRoutingTimeBasedCanary {\n        BakeTimeMins = 123,\n        StepPercentage = 123\n    },\n    TimeBasedLinear = new CfnTrafficRoutingTimeBasedLinear {\n        BakeTimeMins = 123,\n        StepPercentage = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnTrafficRoutingConfig cfnTrafficRoutingConfig = CfnTrafficRoutingConfig.builder()\n        .type(CfnTrafficRoutingType.ALL_AT_ONCE)\n\n        // the properties below are optional\n        .timeBasedCanary(CfnTrafficRoutingTimeBasedCanary.builder()\n                .bakeTimeMins(123)\n                .stepPercentage(123)\n                .build())\n        .timeBasedLinear(CfnTrafficRoutingTimeBasedLinear.builder()\n                .bakeTimeMins(123)\n                .stepPercentage(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnTrafficRoutingConfig := &cfnTrafficRoutingConfig{\n\ttype: cdk.cfnTrafficRoutingType_ALL_AT_ONCE,\n\n\t// the properties below are optional\n\ttimeBasedCanary: &cfnTrafficRoutingTimeBasedCanary{\n\t\tbakeTimeMins: jsii.Number(123),\n\t\tstepPercentage: jsii.Number(123),\n\t},\n\ttimeBasedLinear: &cfnTrafficRoutingTimeBasedLinear{\n\t\tbakeTimeMins: jsii.Number(123),\n\t\tstepPercentage: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnTrafficRoutingConfig: cdk.CfnTrafficRoutingConfig = {\n  type: cdk.CfnTrafficRoutingType.ALL_AT_ONCE,\n\n  // the properties below are optional\n  timeBasedCanary: {\n    bakeTimeMins: 123,\n    stepPercentage: 123,\n  },\n  timeBasedLinear: {\n    bakeTimeMins: 123,\n    stepPercentage: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTrafficRoutingConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTrafficRoutingConfig",
        "@aws-cdk/core.CfnTrafficRoutingTimeBasedCanary",
        "@aws-cdk/core.CfnTrafficRoutingTimeBasedLinear",
        "@aws-cdk/core.CfnTrafficRoutingType",
        "@aws-cdk/core.CfnTrafficRoutingType#ALL_AT_ONCE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficRoutingConfig: cdk.CfnTrafficRoutingConfig = {\n  type: cdk.CfnTrafficRoutingType.ALL_AT_ONCE,\n\n  // the properties below are optional\n  timeBasedCanary: {\n    bakeTimeMins: 123,\n    stepPercentage: 123,\n  },\n  timeBasedLinear: {\n    bakeTimeMins: 123,\n    stepPercentage: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 1,
        "75": 14,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "deec67ee6d408521d7cf5a140dc8c043c013132de92e7a30ec5d9de4a5608c10"
    },
    "b821922435088b55b12f798dc9d71b6304f59b6a1c5816fe825feb7cbc77ea42": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_traffic_routing_time_based_canary = cdk.CfnTrafficRoutingTimeBasedCanary(\n    bake_time_mins=123,\n    step_percentage=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnTrafficRoutingTimeBasedCanary cfnTrafficRoutingTimeBasedCanary = new CfnTrafficRoutingTimeBasedCanary {\n    BakeTimeMins = 123,\n    StepPercentage = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnTrafficRoutingTimeBasedCanary cfnTrafficRoutingTimeBasedCanary = CfnTrafficRoutingTimeBasedCanary.builder()\n        .bakeTimeMins(123)\n        .stepPercentage(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnTrafficRoutingTimeBasedCanary := &cfnTrafficRoutingTimeBasedCanary{\n\tbakeTimeMins: jsii.Number(123),\n\tstepPercentage: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnTrafficRoutingTimeBasedCanary: cdk.CfnTrafficRoutingTimeBasedCanary = {\n  bakeTimeMins: 123,\n  stepPercentage: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTrafficRoutingTimeBasedCanary"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTrafficRoutingTimeBasedCanary"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficRoutingTimeBasedCanary: cdk.CfnTrafficRoutingTimeBasedCanary = {\n  bakeTimeMins: 123,\n  stepPercentage: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c68c36f309a41b47e882828108515f984e8d2c2d5fd14734a3c5f357027e8d02"
    },
    "6ff891d19f0fbe1a9ba9424446bb3f48b80d67c6714ab9527c2dc84622065adb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_traffic_routing_time_based_linear = cdk.CfnTrafficRoutingTimeBasedLinear(\n    bake_time_mins=123,\n    step_percentage=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnTrafficRoutingTimeBasedLinear cfnTrafficRoutingTimeBasedLinear = new CfnTrafficRoutingTimeBasedLinear {\n    BakeTimeMins = 123,\n    StepPercentage = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnTrafficRoutingTimeBasedLinear cfnTrafficRoutingTimeBasedLinear = CfnTrafficRoutingTimeBasedLinear.builder()\n        .bakeTimeMins(123)\n        .stepPercentage(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnTrafficRoutingTimeBasedLinear := &cfnTrafficRoutingTimeBasedLinear{\n\tbakeTimeMins: jsii.Number(123),\n\tstepPercentage: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnTrafficRoutingTimeBasedLinear: cdk.CfnTrafficRoutingTimeBasedLinear = {\n  bakeTimeMins: 123,\n  stepPercentage: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTrafficRoutingTimeBasedLinear"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTrafficRoutingTimeBasedLinear"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficRoutingTimeBasedLinear: cdk.CfnTrafficRoutingTimeBasedLinear = {\n  bakeTimeMins: 123,\n  stepPercentage: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "41e10801faa96b1dbb85f47b94737c88253d541a7687576ef76b0d5a9016ff9f"
    },
    "e4c8c9ce5407c0c752916faf8a5e1e5942764cd49978148ab28eae826921e1ce": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_type_activation = cdk.CfnTypeActivation(self, \"MyCfnTypeActivation\",\n    auto_update=False,\n    execution_role_arn=\"executionRoleArn\",\n    logging_config=cdk.CfnTypeActivation.LoggingConfigProperty(\n        log_group_name=\"logGroupName\",\n        log_role_arn=\"logRoleArn\"\n    ),\n    major_version=\"majorVersion\",\n    public_type_arn=\"publicTypeArn\",\n    publisher_id=\"publisherId\",\n    type=\"type\",\n    type_name=\"typeName\",\n    type_name_alias=\"typeNameAlias\",\n    version_bump=\"versionBump\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnTypeActivation cfnTypeActivation = new CfnTypeActivation(this, \"MyCfnTypeActivation\", new CfnTypeActivationProps {\n    AutoUpdate = false,\n    ExecutionRoleArn = \"executionRoleArn\",\n    LoggingConfig = new LoggingConfigProperty {\n        LogGroupName = \"logGroupName\",\n        LogRoleArn = \"logRoleArn\"\n    },\n    MajorVersion = \"majorVersion\",\n    PublicTypeArn = \"publicTypeArn\",\n    PublisherId = \"publisherId\",\n    Type = \"type\",\n    TypeName = \"typeName\",\n    TypeNameAlias = \"typeNameAlias\",\n    VersionBump = \"versionBump\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnTypeActivation cfnTypeActivation = CfnTypeActivation.Builder.create(this, \"MyCfnTypeActivation\")\n        .autoUpdate(false)\n        .executionRoleArn(\"executionRoleArn\")\n        .loggingConfig(LoggingConfigProperty.builder()\n                .logGroupName(\"logGroupName\")\n                .logRoleArn(\"logRoleArn\")\n                .build())\n        .majorVersion(\"majorVersion\")\n        .publicTypeArn(\"publicTypeArn\")\n        .publisherId(\"publisherId\")\n        .type(\"type\")\n        .typeName(\"typeName\")\n        .typeNameAlias(\"typeNameAlias\")\n        .versionBump(\"versionBump\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnTypeActivation := cdk.NewCfnTypeActivation(this, jsii.String(\"MyCfnTypeActivation\"), &cfnTypeActivationProps{\n\tautoUpdate: jsii.Boolean(false),\n\texecutionRoleArn: jsii.String(\"executionRoleArn\"),\n\tloggingConfig: &loggingConfigProperty{\n\t\tlogGroupName: jsii.String(\"logGroupName\"),\n\t\tlogRoleArn: jsii.String(\"logRoleArn\"),\n\t},\n\tmajorVersion: jsii.String(\"majorVersion\"),\n\tpublicTypeArn: jsii.String(\"publicTypeArn\"),\n\tpublisherId: jsii.String(\"publisherId\"),\n\ttype: jsii.String(\"type\"),\n\ttypeName: jsii.String(\"typeName\"),\n\ttypeNameAlias: jsii.String(\"typeNameAlias\"),\n\tversionBump: jsii.String(\"versionBump\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnTypeActivation = new cdk.CfnTypeActivation(this, 'MyCfnTypeActivation', /* all optional props */ {\n  autoUpdate: false,\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n  majorVersion: 'majorVersion',\n  publicTypeArn: 'publicTypeArn',\n  publisherId: 'publisherId',\n  type: 'type',\n  typeName: 'typeName',\n  typeNameAlias: 'typeNameAlias',\n  versionBump: 'versionBump',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTypeActivation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTypeActivation",
        "@aws-cdk/core.CfnTypeActivationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTypeActivation = new cdk.CfnTypeActivation(this, 'MyCfnTypeActivation', /* all optional props */ {\n  autoUpdate: false,\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n  majorVersion: 'majorVersion',\n  publicTypeArn: 'publicTypeArn',\n  publisherId: 'publisherId',\n  type: 'type',\n  typeName: 'typeName',\n  typeNameAlias: 'typeNameAlias',\n  versionBump: 'versionBump',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 12,
        "75": 16,
        "91": 1,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "1c9b0e6ba3f7c7745a4365a35639e64cb19a7d30d241ddbbd89e037b9f4d65de"
    },
    "005bf428b8c9f2232aaabb44220c089a4a46b4f67ad656260b22ca3f317668bc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nlogging_config_property = cdk.CfnTypeActivation.LoggingConfigProperty(\n    log_group_name=\"logGroupName\",\n    log_role_arn=\"logRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nLoggingConfigProperty loggingConfigProperty = new LoggingConfigProperty {\n    LogGroupName = \"logGroupName\",\n    LogRoleArn = \"logRoleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nLoggingConfigProperty loggingConfigProperty = LoggingConfigProperty.builder()\n        .logGroupName(\"logGroupName\")\n        .logRoleArn(\"logRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nloggingConfigProperty := &loggingConfigProperty{\n\tlogGroupName: jsii.String(\"logGroupName\"),\n\tlogRoleArn: jsii.String(\"logRoleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst loggingConfigProperty: cdk.CfnTypeActivation.LoggingConfigProperty = {\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTypeActivation.LoggingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTypeActivation.LoggingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loggingConfigProperty: cdk.CfnTypeActivation.LoggingConfigProperty = {\n  logGroupName: 'logGroupName',\n  logRoleArn: 'logRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a534e0856bac26c4c4ee2030dce84d009b4cbe8c8dcd5337ee946a9dd34e9511"
    },
    "3021f18999c150820642e8dfa3379a8127a559dd19c55b5bf1f54d0dc0a87ad2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_type_activation_props = cdk.CfnTypeActivationProps(\n    auto_update=False,\n    execution_role_arn=\"executionRoleArn\",\n    logging_config=cdk.CfnTypeActivation.LoggingConfigProperty(\n        log_group_name=\"logGroupName\",\n        log_role_arn=\"logRoleArn\"\n    ),\n    major_version=\"majorVersion\",\n    public_type_arn=\"publicTypeArn\",\n    publisher_id=\"publisherId\",\n    type=\"type\",\n    type_name=\"typeName\",\n    type_name_alias=\"typeNameAlias\",\n    version_bump=\"versionBump\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnTypeActivationProps cfnTypeActivationProps = new CfnTypeActivationProps {\n    AutoUpdate = false,\n    ExecutionRoleArn = \"executionRoleArn\",\n    LoggingConfig = new LoggingConfigProperty {\n        LogGroupName = \"logGroupName\",\n        LogRoleArn = \"logRoleArn\"\n    },\n    MajorVersion = \"majorVersion\",\n    PublicTypeArn = \"publicTypeArn\",\n    PublisherId = \"publisherId\",\n    Type = \"type\",\n    TypeName = \"typeName\",\n    TypeNameAlias = \"typeNameAlias\",\n    VersionBump = \"versionBump\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnTypeActivationProps cfnTypeActivationProps = CfnTypeActivationProps.builder()\n        .autoUpdate(false)\n        .executionRoleArn(\"executionRoleArn\")\n        .loggingConfig(LoggingConfigProperty.builder()\n                .logGroupName(\"logGroupName\")\n                .logRoleArn(\"logRoleArn\")\n                .build())\n        .majorVersion(\"majorVersion\")\n        .publicTypeArn(\"publicTypeArn\")\n        .publisherId(\"publisherId\")\n        .type(\"type\")\n        .typeName(\"typeName\")\n        .typeNameAlias(\"typeNameAlias\")\n        .versionBump(\"versionBump\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnTypeActivationProps := &cfnTypeActivationProps{\n\tautoUpdate: jsii.Boolean(false),\n\texecutionRoleArn: jsii.String(\"executionRoleArn\"),\n\tloggingConfig: &loggingConfigProperty{\n\t\tlogGroupName: jsii.String(\"logGroupName\"),\n\t\tlogRoleArn: jsii.String(\"logRoleArn\"),\n\t},\n\tmajorVersion: jsii.String(\"majorVersion\"),\n\tpublicTypeArn: jsii.String(\"publicTypeArn\"),\n\tpublisherId: jsii.String(\"publisherId\"),\n\ttype: jsii.String(\"type\"),\n\ttypeName: jsii.String(\"typeName\"),\n\ttypeNameAlias: jsii.String(\"typeNameAlias\"),\n\tversionBump: jsii.String(\"versionBump\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnTypeActivationProps: cdk.CfnTypeActivationProps = {\n  autoUpdate: false,\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n  majorVersion: 'majorVersion',\n  publicTypeArn: 'publicTypeArn',\n  publisherId: 'publisherId',\n  type: 'type',\n  typeName: 'typeName',\n  typeNameAlias: 'typeNameAlias',\n  versionBump: 'versionBump',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnTypeActivationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnTypeActivationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTypeActivationProps: cdk.CfnTypeActivationProps = {\n  autoUpdate: false,\n  executionRoleArn: 'executionRoleArn',\n  loggingConfig: {\n    logGroupName: 'logGroupName',\n    logRoleArn: 'logRoleArn',\n  },\n  majorVersion: 'majorVersion',\n  publicTypeArn: 'publicTypeArn',\n  publisherId: 'publisherId',\n  type: 'type',\n  typeName: 'typeName',\n  typeNameAlias: 'typeNameAlias',\n  versionBump: 'versionBump',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 16,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "23cb2a13a523272b1129c399c7846dd039c872460aaa6bf508c06e5cf3fe16d1"
    },
    "475cae04018a97ceef246afd3442e349e3a09be23609081b451022c629a85432": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_update_policy = cdk.CfnUpdatePolicy(\n    auto_scaling_replacing_update=cdk.CfnAutoScalingReplacingUpdate(\n        will_replace=False\n    ),\n    auto_scaling_rolling_update=cdk.CfnAutoScalingRollingUpdate(\n        max_batch_size=123,\n        min_instances_in_service=123,\n        min_successful_instances_percent=123,\n        pause_time=\"pauseTime\",\n        suspend_processes=[\"suspendProcesses\"],\n        wait_on_resource_signals=False\n    ),\n    auto_scaling_scheduled_action=cdk.CfnAutoScalingScheduledAction(\n        ignore_unmodified_group_size_properties=False\n    ),\n    code_deploy_lambda_alias_update=cdk.CfnCodeDeployLambdaAliasUpdate(\n        application_name=\"applicationName\",\n        deployment_group_name=\"deploymentGroupName\",\n\n        # the properties below are optional\n        after_allow_traffic_hook=\"afterAllowTrafficHook\",\n        before_allow_traffic_hook=\"beforeAllowTrafficHook\"\n    ),\n    enable_version_upgrade=False,\n    use_online_resharding=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnUpdatePolicy cfnUpdatePolicy = new CfnUpdatePolicy {\n    AutoScalingReplacingUpdate = new CfnAutoScalingReplacingUpdate {\n        WillReplace = false\n    },\n    AutoScalingRollingUpdate = new CfnAutoScalingRollingUpdate {\n        MaxBatchSize = 123,\n        MinInstancesInService = 123,\n        MinSuccessfulInstancesPercent = 123,\n        PauseTime = \"pauseTime\",\n        SuspendProcesses = new [] { \"suspendProcesses\" },\n        WaitOnResourceSignals = false\n    },\n    AutoScalingScheduledAction = new CfnAutoScalingScheduledAction {\n        IgnoreUnmodifiedGroupSizeProperties = false\n    },\n    CodeDeployLambdaAliasUpdate = new CfnCodeDeployLambdaAliasUpdate {\n        ApplicationName = \"applicationName\",\n        DeploymentGroupName = \"deploymentGroupName\",\n\n        // the properties below are optional\n        AfterAllowTrafficHook = \"afterAllowTrafficHook\",\n        BeforeAllowTrafficHook = \"beforeAllowTrafficHook\"\n    },\n    EnableVersionUpgrade = false,\n    UseOnlineResharding = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnUpdatePolicy cfnUpdatePolicy = CfnUpdatePolicy.builder()\n        .autoScalingReplacingUpdate(CfnAutoScalingReplacingUpdate.builder()\n                .willReplace(false)\n                .build())\n        .autoScalingRollingUpdate(CfnAutoScalingRollingUpdate.builder()\n                .maxBatchSize(123)\n                .minInstancesInService(123)\n                .minSuccessfulInstancesPercent(123)\n                .pauseTime(\"pauseTime\")\n                .suspendProcesses(List.of(\"suspendProcesses\"))\n                .waitOnResourceSignals(false)\n                .build())\n        .autoScalingScheduledAction(CfnAutoScalingScheduledAction.builder()\n                .ignoreUnmodifiedGroupSizeProperties(false)\n                .build())\n        .codeDeployLambdaAliasUpdate(CfnCodeDeployLambdaAliasUpdate.builder()\n                .applicationName(\"applicationName\")\n                .deploymentGroupName(\"deploymentGroupName\")\n\n                // the properties below are optional\n                .afterAllowTrafficHook(\"afterAllowTrafficHook\")\n                .beforeAllowTrafficHook(\"beforeAllowTrafficHook\")\n                .build())\n        .enableVersionUpgrade(false)\n        .useOnlineResharding(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnUpdatePolicy := &cfnUpdatePolicy{\n\tautoScalingReplacingUpdate: &cfnAutoScalingReplacingUpdate{\n\t\twillReplace: jsii.Boolean(false),\n\t},\n\tautoScalingRollingUpdate: &cfnAutoScalingRollingUpdate{\n\t\tmaxBatchSize: jsii.Number(123),\n\t\tminInstancesInService: jsii.Number(123),\n\t\tminSuccessfulInstancesPercent: jsii.Number(123),\n\t\tpauseTime: jsii.String(\"pauseTime\"),\n\t\tsuspendProcesses: []*string{\n\t\t\tjsii.String(\"suspendProcesses\"),\n\t\t},\n\t\twaitOnResourceSignals: jsii.Boolean(false),\n\t},\n\tautoScalingScheduledAction: &cfnAutoScalingScheduledAction{\n\t\tignoreUnmodifiedGroupSizeProperties: jsii.Boolean(false),\n\t},\n\tcodeDeployLambdaAliasUpdate: &cfnCodeDeployLambdaAliasUpdate{\n\t\tapplicationName: jsii.String(\"applicationName\"),\n\t\tdeploymentGroupName: jsii.String(\"deploymentGroupName\"),\n\n\t\t// the properties below are optional\n\t\tafterAllowTrafficHook: jsii.String(\"afterAllowTrafficHook\"),\n\t\tbeforeAllowTrafficHook: jsii.String(\"beforeAllowTrafficHook\"),\n\t},\n\tenableVersionUpgrade: jsii.Boolean(false),\n\tuseOnlineResharding: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnUpdatePolicy: cdk.CfnUpdatePolicy = {\n  autoScalingReplacingUpdate: {\n    willReplace: false,\n  },\n  autoScalingRollingUpdate: {\n    maxBatchSize: 123,\n    minInstancesInService: 123,\n    minSuccessfulInstancesPercent: 123,\n    pauseTime: 'pauseTime',\n    suspendProcesses: ['suspendProcesses'],\n    waitOnResourceSignals: false,\n  },\n  autoScalingScheduledAction: {\n    ignoreUnmodifiedGroupSizeProperties: false,\n  },\n  codeDeployLambdaAliasUpdate: {\n    applicationName: 'applicationName',\n    deploymentGroupName: 'deploymentGroupName',\n\n    // the properties below are optional\n    afterAllowTrafficHook: 'afterAllowTrafficHook',\n    beforeAllowTrafficHook: 'beforeAllowTrafficHook',\n  },\n  enableVersionUpgrade: false,\n  useOnlineResharding: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnUpdatePolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnAutoScalingReplacingUpdate",
        "@aws-cdk/core.CfnAutoScalingRollingUpdate",
        "@aws-cdk/core.CfnAutoScalingScheduledAction",
        "@aws-cdk/core.CfnCodeDeployLambdaAliasUpdate",
        "@aws-cdk/core.CfnUpdatePolicy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUpdatePolicy: cdk.CfnUpdatePolicy = {\n  autoScalingReplacingUpdate: {\n    willReplace: false,\n  },\n  autoScalingRollingUpdate: {\n    maxBatchSize: 123,\n    minInstancesInService: 123,\n    minSuccessfulInstancesPercent: 123,\n    pauseTime: 'pauseTime',\n    suspendProcesses: ['suspendProcesses'],\n    waitOnResourceSignals: false,\n  },\n  autoScalingScheduledAction: {\n    ignoreUnmodifiedGroupSizeProperties: false,\n  },\n  codeDeployLambdaAliasUpdate: {\n    applicationName: 'applicationName',\n    deploymentGroupName: 'deploymentGroupName',\n\n    // the properties below are optional\n    afterAllowTrafficHook: 'afterAllowTrafficHook',\n    beforeAllowTrafficHook: 'beforeAllowTrafficHook',\n  },\n  enableVersionUpgrade: false,\n  useOnlineResharding: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 22,
        "91": 5,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "7e17675925a03b4fce89485043dc794b0fb859482c5c28b5a60cf387bbb9bc47"
    },
    "d8a8ddd5fc3935f0e941b99852221a8280679f669d613f4f81954fc6fe942a97": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_wait_condition = cdk.CfnWaitCondition(self, \"MyCfnWaitCondition\",\n    count=123,\n    handle=\"handle\",\n    timeout=\"timeout\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnWaitCondition cfnWaitCondition = new CfnWaitCondition(this, \"MyCfnWaitCondition\", new CfnWaitConditionProps {\n    Count = 123,\n    Handle = \"handle\",\n    Timeout = \"timeout\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnWaitCondition cfnWaitCondition = CfnWaitCondition.Builder.create(this, \"MyCfnWaitCondition\")\n        .count(123)\n        .handle(\"handle\")\n        .timeout(\"timeout\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnWaitCondition := cdk.NewCfnWaitCondition(this, jsii.String(\"MyCfnWaitCondition\"), &cfnWaitConditionProps{\n\tcount: jsii.Number(123),\n\thandle: jsii.String(\"handle\"),\n\ttimeout: jsii.String(\"timeout\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnWaitCondition = new cdk.CfnWaitCondition(this, 'MyCfnWaitCondition', /* all optional props */ {\n  count: 123,\n  handle: 'handle',\n  timeout: 'timeout',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnWaitCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnWaitCondition",
        "@aws-cdk/core.CfnWaitConditionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnWaitCondition = new cdk.CfnWaitCondition(this, 'MyCfnWaitCondition', /* all optional props */ {\n  count: 123,\n  handle: 'handle',\n  timeout: 'timeout',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4b2c0aa828e418628c32f882dd66c1b70953b8872902edb42bbefb22df7cddb4"
    },
    "0242698479436466374a74503869bf00586a2b499c7d4cf40ee6798cc9367791": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_wait_condition_handle = cdk.CfnWaitConditionHandle(self, \"MyCfnWaitConditionHandle\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnWaitConditionHandle cfnWaitConditionHandle = new CfnWaitConditionHandle(this, \"MyCfnWaitConditionHandle\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnWaitConditionHandle cfnWaitConditionHandle = new CfnWaitConditionHandle(this, \"MyCfnWaitConditionHandle\");",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnWaitConditionHandle := cdk.NewCfnWaitConditionHandle(this, jsii.String(\"MyCfnWaitConditionHandle\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnWaitConditionHandle = new cdk.CfnWaitConditionHandle(this, 'MyCfnWaitConditionHandle');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnWaitConditionHandle"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnWaitConditionHandle",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnWaitConditionHandle = new cdk.CfnWaitConditionHandle(this, 'MyCfnWaitConditionHandle');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "c6297db64e6100f16ab6932bcb30241ad9af5da02f19b92487f498d18a5aed8d"
    },
    "16a3708046d241bf99205a3877a003c0a1559d334b484f36412c9dcf6ac5a87e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncfn_wait_condition_props = cdk.CfnWaitConditionProps(\n    count=123,\n    handle=\"handle\",\n    timeout=\"timeout\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCfnWaitConditionProps cfnWaitConditionProps = new CfnWaitConditionProps {\n    Count = 123,\n    Handle = \"handle\",\n    Timeout = \"timeout\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCfnWaitConditionProps cfnWaitConditionProps = CfnWaitConditionProps.builder()\n        .count(123)\n        .handle(\"handle\")\n        .timeout(\"timeout\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncfnWaitConditionProps := &cfnWaitConditionProps{\n\tcount: jsii.Number(123),\n\thandle: jsii.String(\"handle\"),\n\ttimeout: jsii.String(\"timeout\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cfnWaitConditionProps: cdk.CfnWaitConditionProps = {\n  count: 123,\n  handle: 'handle',\n  timeout: 'timeout',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnWaitConditionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnWaitConditionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnWaitConditionProps: cdk.CfnWaitConditionProps = {\n  count: 123,\n  handle: 'handle',\n  timeout: 'timeout',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "c9b7a2ec8da59f47ad5b97ec96cfa74b3b7c0a9b8f631d970f7d1daa78796cd3"
    },
    "46df06b00c774040b93d442e19f4a1e0623132fb796303c342bb37493bdd3155": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncli_credentials_stack_synthesizer = cdk.CliCredentialsStackSynthesizer(\n    bucket_prefix=\"bucketPrefix\",\n    docker_tag_prefix=\"dockerTagPrefix\",\n    file_assets_bucket_name=\"fileAssetsBucketName\",\n    image_assets_repository_name=\"imageAssetsRepositoryName\",\n    qualifier=\"qualifier\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCliCredentialsStackSynthesizer cliCredentialsStackSynthesizer = new CliCredentialsStackSynthesizer(new CliCredentialsStackSynthesizerProps {\n    BucketPrefix = \"bucketPrefix\",\n    DockerTagPrefix = \"dockerTagPrefix\",\n    FileAssetsBucketName = \"fileAssetsBucketName\",\n    ImageAssetsRepositoryName = \"imageAssetsRepositoryName\",\n    Qualifier = \"qualifier\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCliCredentialsStackSynthesizer cliCredentialsStackSynthesizer = CliCredentialsStackSynthesizer.Builder.create()\n        .bucketPrefix(\"bucketPrefix\")\n        .dockerTagPrefix(\"dockerTagPrefix\")\n        .fileAssetsBucketName(\"fileAssetsBucketName\")\n        .imageAssetsRepositoryName(\"imageAssetsRepositoryName\")\n        .qualifier(\"qualifier\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncliCredentialsStackSynthesizer := cdk.NewCliCredentialsStackSynthesizer(&cliCredentialsStackSynthesizerProps{\n\tbucketPrefix: jsii.String(\"bucketPrefix\"),\n\tdockerTagPrefix: jsii.String(\"dockerTagPrefix\"),\n\tfileAssetsBucketName: jsii.String(\"fileAssetsBucketName\"),\n\timageAssetsRepositoryName: jsii.String(\"imageAssetsRepositoryName\"),\n\tqualifier: jsii.String(\"qualifier\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cliCredentialsStackSynthesizer = new cdk.CliCredentialsStackSynthesizer(/* all optional props */ {\n  bucketPrefix: 'bucketPrefix',\n  dockerTagPrefix: 'dockerTagPrefix',\n  fileAssetsBucketName: 'fileAssetsBucketName',\n  imageAssetsRepositoryName: 'imageAssetsRepositoryName',\n  qualifier: 'qualifier',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CliCredentialsStackSynthesizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CliCredentialsStackSynthesizer",
        "@aws-cdk/core.CliCredentialsStackSynthesizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cliCredentialsStackSynthesizer = new cdk.CliCredentialsStackSynthesizer(/* all optional props */ {\n  bucketPrefix: 'bucketPrefix',\n  dockerTagPrefix: 'dockerTagPrefix',\n  fileAssetsBucketName: 'fileAssetsBucketName',\n  imageAssetsRepositoryName: 'imageAssetsRepositoryName',\n  qualifier: 'qualifier',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "40141a360c1c2e0cd34af138925b2c393c06cf8edd1e22e3434684f5e91d315c"
    },
    "29019222386eb0e91f96608c18aee0ebb132cea429a44b8b43b3a9278f3707c1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncli_credentials_stack_synthesizer_props = cdk.CliCredentialsStackSynthesizerProps(\n    bucket_prefix=\"bucketPrefix\",\n    docker_tag_prefix=\"dockerTagPrefix\",\n    file_assets_bucket_name=\"fileAssetsBucketName\",\n    image_assets_repository_name=\"imageAssetsRepositoryName\",\n    qualifier=\"qualifier\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCliCredentialsStackSynthesizerProps cliCredentialsStackSynthesizerProps = new CliCredentialsStackSynthesizerProps {\n    BucketPrefix = \"bucketPrefix\",\n    DockerTagPrefix = \"dockerTagPrefix\",\n    FileAssetsBucketName = \"fileAssetsBucketName\",\n    ImageAssetsRepositoryName = \"imageAssetsRepositoryName\",\n    Qualifier = \"qualifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCliCredentialsStackSynthesizerProps cliCredentialsStackSynthesizerProps = CliCredentialsStackSynthesizerProps.builder()\n        .bucketPrefix(\"bucketPrefix\")\n        .dockerTagPrefix(\"dockerTagPrefix\")\n        .fileAssetsBucketName(\"fileAssetsBucketName\")\n        .imageAssetsRepositoryName(\"imageAssetsRepositoryName\")\n        .qualifier(\"qualifier\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncliCredentialsStackSynthesizerProps := &cliCredentialsStackSynthesizerProps{\n\tbucketPrefix: jsii.String(\"bucketPrefix\"),\n\tdockerTagPrefix: jsii.String(\"dockerTagPrefix\"),\n\tfileAssetsBucketName: jsii.String(\"fileAssetsBucketName\"),\n\timageAssetsRepositoryName: jsii.String(\"imageAssetsRepositoryName\"),\n\tqualifier: jsii.String(\"qualifier\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst cliCredentialsStackSynthesizerProps: cdk.CliCredentialsStackSynthesizerProps = {\n  bucketPrefix: 'bucketPrefix',\n  dockerTagPrefix: 'dockerTagPrefix',\n  fileAssetsBucketName: 'fileAssetsBucketName',\n  imageAssetsRepositoryName: 'imageAssetsRepositoryName',\n  qualifier: 'qualifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CliCredentialsStackSynthesizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CliCredentialsStackSynthesizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cliCredentialsStackSynthesizerProps: cdk.CliCredentialsStackSynthesizerProps = {\n  bucketPrefix: 'bucketPrefix',\n  dockerTagPrefix: 'dockerTagPrefix',\n  fileAssetsBucketName: 'fileAssetsBucketName',\n  imageAssetsRepositoryName: 'imageAssetsRepositoryName',\n  qualifier: 'qualifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "17265501ad4f6c6784d7f9c15decc53b4c6db1ef97d02b198f47d355ae1ee9e8"
    },
    "95d159ca458aa3ec849523175fb85b2b6b54fe8a5c990a29f2f92c8e4589bca1": {
      "translations": {
        "python": {
          "source": "# Declare the dependable object\nb_and_c = ConcreteDependable()\nb_and_c.add(construct_b)\nb_and_c.add(construct_c)\n\n# Take the dependency\nconstruct_a.node.add_dependency(b_and_c)",
          "version": "2"
        },
        "csharp": {
          "source": "// Declare the dependable object\nConcreteDependable bAndC = new ConcreteDependable();\nbAndC.Add(constructB);\nbAndC.Add(constructC);\n\n// Take the dependency\nconstructA.Node.AddDependency(bAndC);",
          "version": "1"
        },
        "java": {
          "source": "// Declare the dependable object\nConcreteDependable bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);",
          "version": "1"
        },
        "go": {
          "source": "// Declare the dependable object\nbAndC := NewConcreteDependable()\nbAndC.add(constructB)\nbAndC.add(constructC)\n\n// Take the dependency\nconstructA.node.addDependency(bAndC)",
          "version": "1"
        },
        "$": {
          "source": "// Declare the dependable object\nconst bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ConcreteDependable"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ConcreteDependable",
        "@aws-cdk/core.ConcreteDependable#add",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IConstruct",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Declare the dependable object\nconst bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 12,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "60d52b6e9453e9d2f97f3bd2b82d67fb90fcf8574c15d8c796edc3756c818647"
    },
    "9b71d8204ba02094f52bb9e4986314e30321ce44ee708f2a302c972341d8d3ab": {
      "translations": {
        "python": {
          "source": "entry = \"/path/to/function\"\nimage = DockerImage.from_build(entry)\n\nlambda_.PythonFunction(self, \"function\",\n    entry=entry,\n    runtime=Runtime.PYTHON_3_8,\n    bundling=lambda.BundlingOptions(\n        build_args={\"PIP_INDEX_URL\": \"https://your.index.url/simple/\", \"PIP_EXTRA_INDEX_URL\": \"https://your.extra-index.url/simple/\"}\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string entry = \"/path/to/function\";\nDockerImage image = DockerImage.FromBuild(entry);\n\nnew PythonFunction(this, \"function\", new PythonFunctionProps {\n    Entry = entry,\n    Runtime = Runtime.PYTHON_3_8,\n    Bundling = new BundlingOptions {\n        BuildArgs = new Dictionary<string, string> { { \"PIP_INDEX_URL\", \"https://your.index.url/simple/\" }, { \"PIP_EXTRA_INDEX_URL\", \"https://your.extra-index.url/simple/\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "String entry = \"/path/to/function\";\nDockerImage image = DockerImage.fromBuild(entry);\n\nPythonFunction.Builder.create(this, \"function\")\n        .entry(entry)\n        .runtime(Runtime.PYTHON_3_8)\n        .bundling(BundlingOptions.builder()\n                .buildArgs(Map.of(\"PIP_INDEX_URL\", \"https://your.index.url/simple/\", \"PIP_EXTRA_INDEX_URL\", \"https://your.extra-index.url/simple/\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "entry := \"/path/to/function\"\nimage := dockerImage.fromBuild(entry)\n\nlambda.NewPythonFunction(this, jsii.String(\"function\"), &pythonFunctionProps{\n\tentry: jsii.String(entry),\n\truntime: runtime_PYTHON_3_8(),\n\tbundling: &bundlingOptions{\n\t\tbuildArgs: map[string]*string{\n\t\t\t\"PIP_INDEX_URL\": jsii.String(\"https://your.index.url/simple/\"),\n\t\t\t\"PIP_EXTRA_INDEX_URL\": jsii.String(\"https://your.extra-index.url/simple/\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const entry = '/path/to/function';\nconst image = DockerImage.fromBuild(entry);\n\nnew lambda.PythonFunction(this, 'function', {\n  entry,\n  runtime: Runtime.PYTHON_3_8,\n  bundling: {\n    buildArgs: { PIP_INDEX_URL: \"https://your.index.url/simple/\", PIP_EXTRA_INDEX_URL: \"https://your.extra-index.url/simple/\" },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Construct"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda-python.BundlingOptions",
        "@aws-cdk/aws-lambda-python.PythonFunction",
        "@aws-cdk/aws-lambda-python.PythonFunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_8",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport { Runtime } from '@aws-cdk/aws-lambda';\nimport * as lambda from '@aws-cdk/aws-lambda-python';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst entry = '/path/to/function';\nconst image = DockerImage.fromBuild(entry);\n\nnew lambda.PythonFunction(this, 'function', {\n  entry,\n  runtime: Runtime.PYTHON_3_8,\n  bundling: {\n    buildArgs: { PIP_INDEX_URL: \"https://your.index.url/simple/\", PIP_EXTRA_INDEX_URL: \"https://your.extra-index.url/simple/\" },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1
      },
      "fqnsFingerprint": "cc6723a59e2ba16edef574c997351f2aad1155d0c306ea337693de703dfb31c1"
    },
    "85b014bb254bf5d6e274cc39c5457ad709ce4aae121b4997f6edce52bf7b1c10": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# construct: cdk.Construct\n\nconstruct_node = cdk.ConstructNode(construct, construct, \"id\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nConstruct construct;\nConstructNode constructNode = new ConstructNode(construct, construct, \"id\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nConstruct construct;\n\nConstructNode constructNode = new ConstructNode(construct, construct, \"id\");",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar construct construct\nconstructNode := cdk.NewConstructNode(construct, construct, jsii.String(\"id\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const construct: cdk.Construct;\nconst constructNode = new cdk.ConstructNode(construct, construct, 'id');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ConstructNode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ConstructNode",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const construct: cdk.Construct;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst constructNode = new cdk.ConstructNode(construct, construct, 'id');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "7ccde942b78af17382fb2613acca823b76cd2c15dc530aa5f68efb6bff0393a9"
    },
    "ee8d22e1acec8f9a49b854fc5b5e3cefc43ca9422194e8bc1a151c35a6afa18f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ncopy_options = cdk.CopyOptions(\n    exclude=[\"exclude\"],\n    follow=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nCopyOptions copyOptions = new CopyOptions {\n    Exclude = new [] { \"exclude\" },\n    Follow = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nCopyOptions copyOptions = CopyOptions.builder()\n        .exclude(List.of(\"exclude\"))\n        .follow(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncopyOptions := &copyOptions{\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\tfollow: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst copyOptions: cdk.CopyOptions = {\n  exclude: ['exclude'],\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CopyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CopyOptions",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst copyOptions: cdk.CopyOptions = {\n  exclude: ['exclude'],\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "55e6ad13203dfee1090e3ba3fa3d6964cefd4971ac459762134cf5cfbe07cc9f"
    },
    "2bf55bf67f19eadd2e449b5f2c77b1bf1be96b271562d4b593271c8ebeab3c0c": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "serviceToken := customResourceProvider.getOrCreate(this, jsii.String(\"Custom::MyCustomResourceType\"), &customResourceProviderProps{\n\tcodeDirectory: fmt.Sprintf(\"%v/my-handler\", __dirname),\n\truntime: customResourceProviderRuntime_NODEJS_12_X,\n\tdescription: jsii.String(\"Lambda function created by the custom resource provider\"),\n})\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tresourceType: jsii.String(\"Custom::MyCustomResourceType\"),\n\tserviceToken: serviceToken,\n})",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b4abce7a92c27a259602e0c8a8c3aaae58c664dac659ebe7888561e1506ea01b"
    },
    "c65e88c7e325ca7540d7965c86290eca1d9e903e90fac4dc4d5ed11b03598e95": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "serviceToken := customResourceProvider.getOrCreate(this, jsii.String(\"Custom::MyCustomResourceType\"), &customResourceProviderProps{\n\tcodeDirectory: fmt.Sprintf(\"%v/my-handler\", __dirname),\n\truntime: customResourceProviderRuntime_NODEJS_12_X,\n\tdescription: jsii.String(\"Lambda function created by the custom resource provider\"),\n})\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tresourceType: jsii.String(\"Custom::MyCustomResourceType\"),\n\tserviceToken: serviceToken,\n})",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b4abce7a92c27a259602e0c8a8c3aaae58c664dac659ebe7888561e1506ea01b"
    },
    "0855523367d38e9afafb80db1a1c0d894d6ce1dc049423737e09adb8e6fbd14f": {
      "translations": {
        "python": {
          "source": "# use the provider framework from aws-cdk/custom-resources:\nprovider = customresources.Provider(self, \"ResourceProvider\",\n    on_event_handler=on_event_handler,\n    is_complete_handler=is_complete_handler\n)\n\nCustomResource(self, \"MyResource\",\n    service_token=provider.service_token\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// use the provider framework from aws-cdk/custom-resources:\nProvider provider = new Provider(this, \"ResourceProvider\", new ProviderProps {\n    OnEventHandler = onEventHandler,\n    IsCompleteHandler = isCompleteHandler\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = provider.ServiceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "// use the provider framework from aws-cdk/custom-resources:\nProvider provider = Provider.Builder.create(this, \"ResourceProvider\")\n        .onEventHandler(onEventHandler)\n        .isCompleteHandler(isCompleteHandler)\n        .build();\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(provider.getServiceToken())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// use the provider framework from aws-cdk/custom-resources:\nprovider := customresources.NewProvider(this, jsii.String(\"ResourceProvider\"), &providerProps{\n\tonEventHandler: onEventHandler,\n\tisCompleteHandler: isCompleteHandler,\n})\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tserviceToken: provider.serviceToken,\n})",
          "version": "1"
        },
        "$": {
          "source": "// use the provider framework from aws-cdk/custom-resources:\nconst provider = new customresources.Provider(this, 'ResourceProvider', {\n   onEventHandler,\n   isCompleteHandler, // optional\n});\n\nnew CustomResource(this, 'MyResource', {\n   serviceToken: provider.serviceToken,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProps",
          "memberName": "serviceToken"
        },
        "field": {
          "field": "markdown",
          "line": 11
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/custom-resources.Provider",
        "@aws-cdk/custom-resources.Provider#serviceToken",
        "@aws-cdk/custom-resources.ProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// use the provider framework from aws-cdk/custom-resources:\nconst provider = new customresources.Provider(this, 'ResourceProvider', {\n   onEventHandler,\n   isCompleteHandler, // optional\n});\n\nnew CustomResource(this, 'MyResource', {\n   serviceToken: provider.serviceToken,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "282": 2
      },
      "fqnsFingerprint": "5a3442c42d3586145cea1310b071b4f7eb82705e2cb4b03d03fb64aeb32687ff"
    },
    "1927d220dff00bb95bc1ea2785c092e0dde23ea85e9ee8ea97e2c08461c177b3": {
      "translations": {
        "python": {
          "source": "# invoke an AWS Lambda function when a lifecycle event occurs:\nCustomResource(self, \"MyResource\",\n    service_token=my_function.function_arn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// invoke an AWS Lambda function when a lifecycle event occurs:\n// invoke an AWS Lambda function when a lifecycle event occurs:\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = myFunction.FunctionArn\n});",
          "version": "1"
        },
        "java": {
          "source": "// invoke an AWS Lambda function when a lifecycle event occurs:\n// invoke an AWS Lambda function when a lifecycle event occurs:\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(myFunction.getFunctionArn())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// invoke an AWS Lambda function when a lifecycle event occurs:\n// invoke an AWS Lambda function when a lifecycle event occurs:\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tserviceToken: myFunction.functionArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "// invoke an AWS Lambda function when a lifecycle event occurs:\nnew CustomResource(this, 'MyResource', {\n   serviceToken: myFunction.functionArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProps",
          "memberName": "serviceToken"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction#functionArn",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// invoke an AWS Lambda function when a lifecycle event occurs:\nnew CustomResource(this, 'MyResource', {\n   serviceToken: myFunction.functionArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "09955ef9ed79a5dbaa40a4023e669986284c9d572e72fe1b9ca000baab701e10"
    },
    "6a859a8e127f4af9cacf207b2c3c6d57ea68834eec0ca5cbb04fd9182ddc8013": {
      "translations": {
        "python": {
          "source": "# publish lifecycle events to an SNS topic:\nCustomResource(self, \"MyResource\",\n    service_token=my_topic.topic_arn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// publish lifecycle events to an SNS topic:\n// publish lifecycle events to an SNS topic:\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = myTopic.TopicArn\n});",
          "version": "1"
        },
        "java": {
          "source": "// publish lifecycle events to an SNS topic:\n// publish lifecycle events to an SNS topic:\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(myTopic.getTopicArn())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// publish lifecycle events to an SNS topic:\n// publish lifecycle events to an SNS topic:\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tserviceToken: myTopic.topicArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "// publish lifecycle events to an SNS topic:\nnew CustomResource(this, 'MyResource', {\n   serviceToken: myTopic.topicArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProps",
          "memberName": "serviceToken"
        },
        "field": {
          "field": "markdown",
          "line": 34
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic#topicArn",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// publish lifecycle events to an SNS topic:\nnew CustomResource(this, 'MyResource', {\n   serviceToken: myTopic.topicArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "aadf92d20aba2193ea947d2a87a86ad1fc8e4fd07ac8545f001e2eee997155dd"
    },
    "f70050e59a2a49fb5ac6390981da21b0b5b0814f1851988d769f752a2d56ae51": {
      "translations": {
        "python": {
          "source": "provider = CustomResourceProvider.get_or_create_provider(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X\n)\n\nrole_arn = provider.role_arn",
          "version": "2"
        },
        "csharp": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.GetOrCreateProvider(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X\n});\n\nstring roleArn = provider.RoleArn;",
          "version": "1"
        },
        "java": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.getOrCreateProvider(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .build());\n\nString roleArn = provider.getRoleArn();",
          "version": "1"
        },
        "go": {
          "source": "provider := customResourceProvider.getOrCreateProvider(this, jsii.String(\"Custom::MyCustomResourceType\"), &customResourceProviderProps{\n\tcodeDirectory: fmt.Sprintf(\"%v/my-handler\", __dirname),\n\truntime: customResourceProviderRuntime_NODEJS_12_X,\n})\n\nroleArn := provider.roleArn",
          "version": "1"
        },
        "$": {
          "source": "const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n});\n\nconst roleArn = provider.roleArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResourceProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResourceProvider",
        "@aws-cdk/core.CustomResourceProvider#getOrCreateProvider",
        "@aws-cdk/core.CustomResourceProvider#roleArn",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n});\n\nconst roleArn = provider.roleArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "15": 1,
        "17": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "211": 1,
        "221": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "d54aa08015b05a40aa3d61d24b2261357cf3bdd916f98325cc7d7fde1054daaf"
    },
    "ca43214c03e78cde8a28fc746b3ab5e35f27ce7f22109589295c4540647d2488": {
      "translations": {
        "python": {
          "source": "# my_provider: CustomResourceProvider\n\n\nCustomResource(self, \"MyCustomResource\",\n    service_token=my_provider.service_token,\n    properties={\n        \"my_property_one\": \"one\",\n        \"my_property_two\": \"two\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CustomResourceProvider myProvider;\n\n\nnew CustomResource(this, \"MyCustomResource\", new CustomResourceProps {\n    ServiceToken = myProvider.ServiceToken,\n    Properties = new Dictionary<string, object> {\n        { \"myPropertyOne\", \"one\" },\n        { \"myPropertyTwo\", \"two\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CustomResourceProvider myProvider;\n\n\nCustomResource.Builder.create(this, \"MyCustomResource\")\n        .serviceToken(myProvider.getServiceToken())\n        .properties(Map.of(\n                \"myPropertyOne\", \"one\",\n                \"myPropertyTwo\", \"two\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myProvider customResourceProvider\n\n\nNewCustomResource(this, jsii.String(\"MyCustomResource\"), &customResourceProps{\n\tserviceToken: myProvider.serviceToken,\n\tproperties: map[string]interface{}{\n\t\t\"myPropertyOne\": jsii.String(\"one\"),\n\t\t\"myPropertyTwo\": jsii.String(\"two\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myProvider: CustomResourceProvider;\n\nnew CustomResource(this, 'MyCustomResource', {\n  serviceToken: myProvider.serviceToken,\n  properties: {\n    myPropertyOne: 'one',\n    myPropertyTwo: 'two',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProvider",
          "memberName": "serviceToken"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#serviceToken",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myProvider: CustomResourceProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew CustomResource(this, 'MyCustomResource', {\n  serviceToken: myProvider.serviceToken,\n  properties: {\n    myPropertyOne: 'one',\n    myPropertyTwo: 'two',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "104": 1,
        "130": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e66e459f5ac3f0779a30ef0f7d30d4ce808060ef51bed097dedf71f4ecba227a"
    },
    "542540be3e6612911d63bd3dcf4438e8e6bb9b29b19b12a018501be370af6744": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "serviceToken := customResourceProvider.getOrCreate(this, jsii.String(\"Custom::MyCustomResourceType\"), &customResourceProviderProps{\n\tcodeDirectory: fmt.Sprintf(\"%v/my-handler\", __dirname),\n\truntime: customResourceProviderRuntime_NODEJS_12_X,\n\tdescription: jsii.String(\"Lambda function created by the custom resource provider\"),\n})\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tresourceType: jsii.String(\"Custom::MyCustomResourceType\"),\n\tserviceToken: serviceToken,\n})",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResourceProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b4abce7a92c27a259602e0c8a8c3aaae58c664dac659ebe7888561e1506ea01b"
    },
    "53ae76e6421f7890cf1b91455cfad40e58236d5bc9888a399cb42929d83cd7a2": {
      "translations": {
        "python": {
          "source": "provider = CustomResourceProvider.get_or_create_provider(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    policy_statements=[{\n        \"Effect\": \"Allow\",\n        \"Action\": \"s3:PutObject*\",\n        \"Resource\": \"*\"\n    }\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.GetOrCreateProvider(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    PolicyStatements = new [] { new Dictionary<string, string> {\n        { \"Effect\", \"Allow\" },\n        { \"Action\", \"s3:PutObject*\" },\n        { \"Resource\", \"*\" }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.getOrCreateProvider(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .policyStatements(List.of(Map.of(\n                \"Effect\", \"Allow\",\n                \"Action\", \"s3:PutObject*\",\n                \"Resource\", \"*\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "provider := customResourceProvider.getOrCreateProvider(this, jsii.String(\"Custom::MyCustomResourceType\"), &customResourceProviderProps{\n\tcodeDirectory: fmt.Sprintf(\"%v/my-handler\", __dirname),\n\truntime: customResourceProviderRuntime_NODEJS_12_X,\n\tpolicyStatements: []interface{}{\n\t\tmap[string]*string{\n\t\t\t\"Effect\": jsii.String(\"Allow\"),\n\t\t\t\"Action\": jsii.String(\"s3:PutObject*\"),\n\t\t\t\"Resource\": jsii.String(\"*\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  policyStatements: [\n    {\n      Effect: 'Allow',\n      Action: 's3:PutObject*',\n      Resource: '*',\n    }\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProviderProps",
          "memberName": "policyStatements"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResourceProvider",
        "@aws-cdk/core.CustomResourceProvider#getOrCreateProvider",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  policyStatements: [\n    {\n      Effect: 'Allow',\n      Action: 's3:PutObject*',\n      Resource: '*',\n    }\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "de435b2bb66aa1f30a03520978cb4da0c08ef9b8433eb0ce5a8ff02c7fbee936"
    },
    "c97b7fb7573114cb9852840ab0ed42ad9ea7cbd7cb01e6e7be1e42dfd4fe8473": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "serviceToken := customResourceProvider.getOrCreate(this, jsii.String(\"Custom::MyCustomResourceType\"), &customResourceProviderProps{\n\tcodeDirectory: fmt.Sprintf(\"%v/my-handler\", __dirname),\n\truntime: customResourceProviderRuntime_NODEJS_12_X,\n\tdescription: jsii.String(\"Lambda function created by the custom resource provider\"),\n})\n\nNewCustomResource(this, jsii.String(\"MyResource\"), &customResourceProps{\n\tresourceType: jsii.String(\"Custom::MyCustomResourceType\"),\n\tserviceToken: serviceToken,\n})",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResourceProviderRuntime"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b4abce7a92c27a259602e0c8a8c3aaae58c664dac659ebe7888561e1506ea01b"
    },
    "f3076b3d71871ddfb06f895ab2d044a95948912f426bb7cd6dba3c2750d3ccd0": {
      "translations": {
        "python": {
          "source": "MyStack(app, \"MyStack\",\n    synthesizer=DefaultStackSynthesizer(\n        file_assets_bucket_name=\"my-orgs-asset-bucket\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new MyStack(app, \"MyStack\", new StackProps {\n    Synthesizer = new DefaultStackSynthesizer(new DefaultStackSynthesizerProps {\n        FileAssetsBucketName = \"my-orgs-asset-bucket\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "MyStack.Builder.create(app, \"MyStack\")\n        .synthesizer(DefaultStackSynthesizer.Builder.create()\n                .fileAssetsBucketName(\"my-orgs-asset-bucket\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewMyStack(app, jsii.String(\"MyStack\"), &stackProps{\n\tsynthesizer: NewDefaultStackSynthesizer(&defaultStackSynthesizerProps{\n\t\tfileAssetsBucketName: jsii.String(\"my-orgs-asset-bucket\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new MyStack(app, 'MyStack', {\n  synthesizer: new DefaultStackSynthesizer({\n    fileAssetsBucketName: 'my-orgs-asset-bucket',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DefaultStackSynthesizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DefaultStackSynthesizer",
        "@aws-cdk/core.DefaultStackSynthesizerProps",
        "@aws-cdk/core.IStackSynthesizer",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew MyStack(app, 'MyStack', {\n  synthesizer: new DefaultStackSynthesizer({\n    fileAssetsBucketName: 'my-orgs-asset-bucket',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "193": 2,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "e75c7fba6c3fd228f26a2821f7cebb4999130b2035615022636a2071605ca8b8"
    },
    "6974851ab57bb52076f26292d39b8da261d34911968e9c1c13edd8a08c0405b7": {
      "translations": {
        "python": {
          "source": "MyStack(app, \"MyStack\",\n    synthesizer=DefaultStackSynthesizer(\n        file_assets_bucket_name=\"my-orgs-asset-bucket\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new MyStack(app, \"MyStack\", new StackProps {\n    Synthesizer = new DefaultStackSynthesizer(new DefaultStackSynthesizerProps {\n        FileAssetsBucketName = \"my-orgs-asset-bucket\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "MyStack.Builder.create(app, \"MyStack\")\n        .synthesizer(DefaultStackSynthesizer.Builder.create()\n                .fileAssetsBucketName(\"my-orgs-asset-bucket\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "NewMyStack(app, jsii.String(\"MyStack\"), &stackProps{\n\tsynthesizer: NewDefaultStackSynthesizer(&defaultStackSynthesizerProps{\n\t\tfileAssetsBucketName: jsii.String(\"my-orgs-asset-bucket\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new MyStack(app, 'MyStack', {\n  synthesizer: new DefaultStackSynthesizer({\n    fileAssetsBucketName: 'my-orgs-asset-bucket',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DefaultStackSynthesizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DefaultStackSynthesizer",
        "@aws-cdk/core.DefaultStackSynthesizerProps",
        "@aws-cdk/core.IStackSynthesizer",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew MyStack(app, 'MyStack', {\n  synthesizer: new DefaultStackSynthesizer({\n    fileAssetsBucketName: 'my-orgs-asset-bucket',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "193": 2,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "e75c7fba6c3fd228f26a2821f7cebb4999130b2035615022636a2071605ca8b8"
    },
    "7df480bc0502d5a6ba543e033cc25e27b4b73fd99ef6fe82e247e43f53db5f6d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# fragment_concatenator: cdk.IFragmentConcatenator\n\ndefault_token_resolver = cdk.DefaultTokenResolver(fragment_concatenator)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nIFragmentConcatenator fragmentConcatenator;\nDefaultTokenResolver defaultTokenResolver = new DefaultTokenResolver(fragmentConcatenator);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nIFragmentConcatenator fragmentConcatenator;\n\nDefaultTokenResolver defaultTokenResolver = new DefaultTokenResolver(fragmentConcatenator);",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar fragmentConcatenator iFragmentConcatenator\ndefaultTokenResolver := cdk.NewDefaultTokenResolver(fragmentConcatenator)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const fragmentConcatenator: cdk.IFragmentConcatenator;\nconst defaultTokenResolver = new cdk.DefaultTokenResolver(fragmentConcatenator);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DefaultTokenResolver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DefaultTokenResolver",
        "@aws-cdk/core.IFragmentConcatenator"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const fragmentConcatenator: cdk.IFragmentConcatenator;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst defaultTokenResolver = new cdk.DefaultTokenResolver(fragmentConcatenator);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "5095f437548ae76da0d8361c1afe78b8cf70aaad304ee64dd9323901314ed582"
    },
    "dbdeb7be4aafc4dd0eec6cd0eb988d1dbc50446e001163d811fdc177c022df71": {
      "translations": {
        "python": {
          "source": "# Usage\nroots = DependableTrait.get(construct).dependency_roots\n\n# Definition\nclass TraitImplementation(DependableTrait):\n    def __init__(self):\n        self.dependency_roots = [construct_a, construct_b, construct_c]\nDependableTrait.implement(construct, TraitImplementation())",
          "version": "2"
        },
        "csharp": {
          "source": "// Usage\nIConstruct[] roots = DependableTrait.Get(construct).DependencyRoots;\n\n// Definition\nclass TraitImplementation : DependableTrait\n{\n    public IConstruct[] DependencyRoots { get; }\n    public TraitImplementation()\n    {\n        DependencyRoots = new [] { constructA, constructB, constructC };\n    }\n}\nDependableTrait.Implement(construct, new TraitImplementation());",
          "version": "1"
        },
        "java": {
          "source": "// Usage\nIConstruct[] roots = DependableTrait.get(construct).getDependencyRoots();\n\n// Definition\npublic class TraitImplementation implements DependableTrait {\n    public final IConstruct[] dependencyRoots;\n    public TraitImplementation() {\n        this.dependencyRoots = List.of(constructA, constructB, constructC);\n    }\n}\nDependableTrait.implement(construct, new TraitImplementation());",
          "version": "1"
        },
        "go": {
          "source": "// Usage\nroots := dependableTrait.get(construct).dependencyRoots\n\n// Definition\ntype traitImplementation struct {\n\tdependencyRoots []iConstruct\n}\nfunc newTraitImplementation() *traitImplementation {\n\tthis := &traitImplementation{}\n\tthis.dependencyRoots = []iConstruct{\n\t\tconstructA,\n\t\tconstructB,\n\t\tconstructC,\n\t}\n\treturn this\n}\ndependableTrait.implement(construct, NewTraitImplementation())",
          "version": "1"
        },
        "$": {
          "source": "// Usage\nconst roots = DependableTrait.get(construct).dependencyRoots;\n\n// Definition\nclass TraitImplementation implements DependableTrait {\n  public readonly dependencyRoots: IConstruct[];\n  constructor() {\n    this.dependencyRoots = [constructA, constructB, constructC];\n  }\n}\nDependableTrait.implement(construct, new TraitImplementation());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DependableTrait"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DependableTrait",
        "@aws-cdk/core.DependableTrait#dependencyRoots",
        "@aws-cdk/core.DependableTrait#get",
        "@aws-cdk/core.DependableTrait#implement",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Usage\nconst roots = DependableTrait.get(construct).dependencyRoots;\n\n// Definition\nclass TraitImplementation implements DependableTrait {\n  public readonly dependencyRoots: IConstruct[];\n  constructor() {\n    this.dependencyRoots = [constructA, constructB, constructC];\n  }\n}\nDependableTrait.implement(construct, new TraitImplementation());\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "62": 1,
        "75": 17,
        "104": 1,
        "119": 1,
        "138": 1,
        "159": 1,
        "162": 1,
        "169": 1,
        "174": 1,
        "192": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "209": 1,
        "216": 1,
        "223": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "245": 1,
        "279": 1
      },
      "fqnsFingerprint": "5ca1fd44a8ec49d2fa250053e90b53c206be2702432d82e1f61780205abef4a2"
    },
    "84973e0a6aa8ea844beef90a8fe0f0eaf303d81464d8307490c36dc20c07ae43": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# construct: cdk.Construct\n\ndependency = cdk.Dependency(\n    source=construct,\n    target=construct\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nConstruct construct;\nDependency dependency = new Dependency {\n    Source = construct,\n    Target = construct\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nConstruct construct;\n\nDependency dependency = Dependency.builder()\n        .source(construct)\n        .target(construct)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar construct construct\ndependency := &dependency{\n\tsource: construct,\n\ttarget: construct,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const construct: cdk.Construct;\nconst dependency: cdk.Dependency = {\n  source: construct,\n  target: construct,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Dependency"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Dependency",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const construct: cdk.Construct;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dependency: cdk.Dependency = {\n  source: construct,\n  target: construct,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c6140fbd91b1fdcfa966e9a1d437357e23188b6a6d639f2cf2492d84458fdc25"
    },
    "9318aff28769a00bbbb023ccf07d2e531989080e055bd9e4d9d1a765693a8c72": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_asset(\"/path/to/handler\",\n        bundling=BundlingOptions(\n            image=DockerImage.from_build(\"/path/to/dir/with/DockerFile\",\n                build_args={\n                    \"ARG1\": \"value1\"\n                }\n            ),\n            command=[\"my\", \"cool\", \"command\"]\n        )\n    ),\n    runtime=lambda_.Runtime.PYTHON_3_9,\n    handler=\"index.handler\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromAsset(\"/path/to/handler\", new AssetOptions {\n        Bundling = new BundlingOptions {\n            Image = DockerImage.FromBuild(\"/path/to/dir/with/DockerFile\", new DockerBuildOptions {\n                BuildArgs = new Dictionary<string, string> {\n                    { \"ARG1\", \"value1\" }\n                }\n            }),\n            Command = new [] { \"my\", \"cool\", \"command\" }\n        }\n    }),\n    Runtime = Runtime.PYTHON_3_9,\n    Handler = \"index.handler\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"Function\")\n        .code(Code.fromAsset(\"/path/to/handler\", AssetOptions.builder()\n                .bundling(BundlingOptions.builder()\n                        .image(DockerImage.fromBuild(\"/path/to/dir/with/DockerFile\", DockerBuildOptions.builder()\n                                .buildArgs(Map.of(\n                                        \"ARG1\", \"value1\"))\n                                .build()))\n                        .command(List.of(\"my\", \"cool\", \"command\"))\n                        .build())\n                .build()))\n        .runtime(Runtime.PYTHON_3_9)\n        .handler(\"index.handler\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromAsset(jsii.String(\"/path/to/handler\"), &assetOptions{\n\t\tbundling: &bundlingOptions{\n\t\t\timage: dockerImage.fromBuild(jsii.String(\"/path/to/dir/with/DockerFile\"), &dockerBuildOptions{\n\t\t\t\tbuildArgs: map[string]*string{\n\t\t\t\t\t\"ARG1\": jsii.String(\"value1\"),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"my\"),\n\t\t\t\tjsii.String(\"cool\"),\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t},\n\t}),\n\truntime: lambda.runtime_PYTHON_3_9(),\n\thandler: jsii.String(\"index.handler\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerBuildOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_9",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerBuildOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 18,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 8
      },
      "fqnsFingerprint": "2e8bf55bfb22dbaa85e863362fa6c0183a91f8b516106dbe17cd992c9020d630"
    },
    "d03276ba3f635006bf55f96be9d151cefd1530b3718bd76acbe054c7edc45d98": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ndocker_ignore_strategy = cdk.DockerIgnoreStrategy(\"absoluteRootPath\", [\"patterns\"])",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nDockerIgnoreStrategy dockerIgnoreStrategy = new DockerIgnoreStrategy(\"absoluteRootPath\", new [] { \"patterns\" });",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDockerIgnoreStrategy dockerIgnoreStrategy = new DockerIgnoreStrategy(\"absoluteRootPath\", List.of(\"patterns\"));",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ndockerIgnoreStrategy := cdk.NewDockerIgnoreStrategy(jsii.String(\"absoluteRootPath\"), []*string{\n\tjsii.String(\"patterns\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst dockerIgnoreStrategy = new cdk.DockerIgnoreStrategy('absoluteRootPath', ['patterns']);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerIgnoreStrategy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DockerIgnoreStrategy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerIgnoreStrategy = new cdk.DockerIgnoreStrategy('absoluteRootPath', ['patterns']);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "192": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "a4369a873c5989fba5d08b8f47100e7b86fff300dcd6710778f2c1793aa7a6c5"
    },
    "ff487b8af1fff545d5c154d6b8d8f99be4489a5580548c621d9b7f93792e1206": {
      "translations": {
        "python": {
          "source": "entry = \"/path/to/function\"\nimage = DockerImage.from_build(entry)\n\nlambda_.PythonFunction(self, \"function\",\n    entry=entry,\n    runtime=Runtime.PYTHON_3_8,\n    bundling=lambda.BundlingOptions(\n        build_args={\"PIP_INDEX_URL\": \"https://your.index.url/simple/\", \"PIP_EXTRA_INDEX_URL\": \"https://your.extra-index.url/simple/\"}\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "string entry = \"/path/to/function\";\nDockerImage image = DockerImage.FromBuild(entry);\n\nnew PythonFunction(this, \"function\", new PythonFunctionProps {\n    Entry = entry,\n    Runtime = Runtime.PYTHON_3_8,\n    Bundling = new BundlingOptions {\n        BuildArgs = new Dictionary<string, string> { { \"PIP_INDEX_URL\", \"https://your.index.url/simple/\" }, { \"PIP_EXTRA_INDEX_URL\", \"https://your.extra-index.url/simple/\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "String entry = \"/path/to/function\";\nDockerImage image = DockerImage.fromBuild(entry);\n\nPythonFunction.Builder.create(this, \"function\")\n        .entry(entry)\n        .runtime(Runtime.PYTHON_3_8)\n        .bundling(BundlingOptions.builder()\n                .buildArgs(Map.of(\"PIP_INDEX_URL\", \"https://your.index.url/simple/\", \"PIP_EXTRA_INDEX_URL\", \"https://your.extra-index.url/simple/\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "entry := \"/path/to/function\"\nimage := dockerImage.fromBuild(entry)\n\nlambda.NewPythonFunction(this, jsii.String(\"function\"), &pythonFunctionProps{\n\tentry: jsii.String(entry),\n\truntime: runtime_PYTHON_3_8(),\n\tbundling: &bundlingOptions{\n\t\tbuildArgs: map[string]*string{\n\t\t\t\"PIP_INDEX_URL\": jsii.String(\"https://your.index.url/simple/\"),\n\t\t\t\"PIP_EXTRA_INDEX_URL\": jsii.String(\"https://your.extra-index.url/simple/\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const entry = '/path/to/function';\nconst image = DockerImage.fromBuild(entry);\n\nnew lambda.PythonFunction(this, 'function', {\n  entry,\n  runtime: Runtime.PYTHON_3_8,\n  bundling: {\n    buildArgs: { PIP_INDEX_URL: \"https://your.index.url/simple/\", PIP_EXTRA_INDEX_URL: \"https://your.extra-index.url/simple/\" },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda-python.BundlingOptions",
        "@aws-cdk/aws-lambda-python.PythonFunction",
        "@aws-cdk/aws-lambda-python.PythonFunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_8",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport { Runtime } from '@aws-cdk/aws-lambda';\nimport * as lambda from '@aws-cdk/aws-lambda-python';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst entry = '/path/to/function';\nconst image = DockerImage.fromBuild(entry);\n\nnew lambda.PythonFunction(this, 'function', {\n  entry,\n  runtime: Runtime.PYTHON_3_8,\n  bundling: {\n    buildArgs: { PIP_INDEX_URL: \"https://your.index.url/simple/\", PIP_EXTRA_INDEX_URL: \"https://your.extra-index.url/simple/\" },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1
      },
      "fqnsFingerprint": "cc6723a59e2ba16edef574c997351f2aad1155d0c306ea337693de703dfb31c1"
    },
    "696850ac6c16c44d3a702e42d7ab8f83c76febe55d970cbaf68bed35b223c3b0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ndocker_image_asset_location = cdk.DockerImageAssetLocation(\n    image_uri=\"imageUri\",\n    repository_name=\"repositoryName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nDockerImageAssetLocation dockerImageAssetLocation = new DockerImageAssetLocation {\n    ImageUri = \"imageUri\",\n    RepositoryName = \"repositoryName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDockerImageAssetLocation dockerImageAssetLocation = DockerImageAssetLocation.builder()\n        .imageUri(\"imageUri\")\n        .repositoryName(\"repositoryName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ndockerImageAssetLocation := &dockerImageAssetLocation{\n\timageUri: jsii.String(\"imageUri\"),\n\trepositoryName: jsii.String(\"repositoryName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst dockerImageAssetLocation: cdk.DockerImageAssetLocation = {\n  imageUri: 'imageUri',\n  repositoryName: 'repositoryName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerImageAssetLocation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DockerImageAssetLocation"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerImageAssetLocation: cdk.DockerImageAssetLocation = {\n  imageUri: 'imageUri',\n  repositoryName: 'repositoryName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e0412a3ce238a34fc34c4b4f79605460022410d64ed8ec211ee478b957f7214e"
    },
    "d6782d54d69888711672c469db68711f3d19761c2c2e9bd67a294b3d13ee437e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ndocker_image_asset_source = cdk.DockerImageAssetSource(\n    source_hash=\"sourceHash\",\n\n    # the properties below are optional\n    directory_name=\"directoryName\",\n    docker_build_args={\n        \"docker_build_args_key\": \"dockerBuildArgs\"\n    },\n    docker_build_target=\"dockerBuildTarget\",\n    docker_file=\"dockerFile\",\n    executable=[\"executable\"],\n    network_mode=\"networkMode\",\n    repository_name=\"repositoryName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nDockerImageAssetSource dockerImageAssetSource = new DockerImageAssetSource {\n    SourceHash = \"sourceHash\",\n\n    // the properties below are optional\n    DirectoryName = \"directoryName\",\n    DockerBuildArgs = new Dictionary<string, string> {\n        { \"dockerBuildArgsKey\", \"dockerBuildArgs\" }\n    },\n    DockerBuildTarget = \"dockerBuildTarget\",\n    DockerFile = \"dockerFile\",\n    Executable = new [] { \"executable\" },\n    NetworkMode = \"networkMode\",\n    RepositoryName = \"repositoryName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDockerImageAssetSource dockerImageAssetSource = DockerImageAssetSource.builder()\n        .sourceHash(\"sourceHash\")\n\n        // the properties below are optional\n        .directoryName(\"directoryName\")\n        .dockerBuildArgs(Map.of(\n                \"dockerBuildArgsKey\", \"dockerBuildArgs\"))\n        .dockerBuildTarget(\"dockerBuildTarget\")\n        .dockerFile(\"dockerFile\")\n        .executable(List.of(\"executable\"))\n        .networkMode(\"networkMode\")\n        .repositoryName(\"repositoryName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ndockerImageAssetSource := &dockerImageAssetSource{\n\tsourceHash: jsii.String(\"sourceHash\"),\n\n\t// the properties below are optional\n\tdirectoryName: jsii.String(\"directoryName\"),\n\tdockerBuildArgs: map[string]*string{\n\t\t\"dockerBuildArgsKey\": jsii.String(\"dockerBuildArgs\"),\n\t},\n\tdockerBuildTarget: jsii.String(\"dockerBuildTarget\"),\n\tdockerFile: jsii.String(\"dockerFile\"),\n\texecutable: []*string{\n\t\tjsii.String(\"executable\"),\n\t},\n\tnetworkMode: jsii.String(\"networkMode\"),\n\trepositoryName: jsii.String(\"repositoryName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst dockerImageAssetSource: cdk.DockerImageAssetSource = {\n  sourceHash: 'sourceHash',\n\n  // the properties below are optional\n  directoryName: 'directoryName',\n  dockerBuildArgs: {\n    dockerBuildArgsKey: 'dockerBuildArgs',\n  },\n  dockerBuildTarget: 'dockerBuildTarget',\n  dockerFile: 'dockerFile',\n  executable: ['executable'],\n  networkMode: 'networkMode',\n  repositoryName: 'repositoryName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerImageAssetSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DockerImageAssetSource"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerImageAssetSource: cdk.DockerImageAssetSource = {\n  sourceHash: 'sourceHash',\n\n  // the properties below are optional\n  directoryName: 'directoryName',\n  dockerBuildArgs: {\n    dockerBuildArgsKey: 'dockerBuildArgs',\n  },\n  dockerBuildTarget: 'dockerBuildTarget',\n  dockerFile: 'dockerFile',\n  executable: ['executable'],\n  networkMode: 'networkMode',\n  repositoryName: 'repositoryName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 13,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "99c4032caef786abb14fbf19a6d24f2149613897890dca9d64cd04280c2a628f"
    },
    "2223ef60358ed7377d50bd758c35028729af5ea2d395412c27fa38098f6e11f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ndocker_run_options = cdk.DockerRunOptions(\n    command=[\"command\"],\n    entrypoint=[\"entrypoint\"],\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    security_opt=\"securityOpt\",\n    user=\"user\",\n    volumes=[cdk.DockerVolume(\n        container_path=\"containerPath\",\n        host_path=\"hostPath\",\n\n        # the properties below are optional\n        consistency=cdk.DockerVolumeConsistency.CONSISTENT\n    )],\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nDockerRunOptions dockerRunOptions = new DockerRunOptions {\n    Command = new [] { \"command\" },\n    Entrypoint = new [] { \"entrypoint\" },\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    SecurityOpt = \"securityOpt\",\n    User = \"user\",\n    Volumes = new [] { new DockerVolume {\n        ContainerPath = \"containerPath\",\n        HostPath = \"hostPath\",\n\n        // the properties below are optional\n        Consistency = DockerVolumeConsistency.CONSISTENT\n    } },\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDockerRunOptions dockerRunOptions = DockerRunOptions.builder()\n        .command(List.of(\"command\"))\n        .entrypoint(List.of(\"entrypoint\"))\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .securityOpt(\"securityOpt\")\n        .user(\"user\")\n        .volumes(List.of(DockerVolume.builder()\n                .containerPath(\"containerPath\")\n                .hostPath(\"hostPath\")\n\n                // the properties below are optional\n                .consistency(DockerVolumeConsistency.CONSISTENT)\n                .build()))\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ndockerRunOptions := &dockerRunOptions{\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tentrypoint: []*string{\n\t\tjsii.String(\"entrypoint\"),\n\t},\n\tenvironment: map[string]*string{\n\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t},\n\tsecurityOpt: jsii.String(\"securityOpt\"),\n\tuser: jsii.String(\"user\"),\n\tvolumes: []dockerVolume{\n\t\t&dockerVolume{\n\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\thostPath: jsii.String(\"hostPath\"),\n\n\t\t\t// the properties below are optional\n\t\t\tconsistency: cdk.dockerVolumeConsistency_CONSISTENT,\n\t\t},\n\t},\n\tworkingDirectory: jsii.String(\"workingDirectory\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst dockerRunOptions: cdk.DockerRunOptions = {\n  command: ['command'],\n  entrypoint: ['entrypoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  securityOpt: 'securityOpt',\n  user: 'user',\n  volumes: [{\n    containerPath: 'containerPath',\n    hostPath: 'hostPath',\n\n    // the properties below are optional\n    consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n  }],\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerRunOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DockerRunOptions",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerRunOptions: cdk.DockerRunOptions = {\n  command: ['command'],\n  entrypoint: ['entrypoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  securityOpt: 'securityOpt',\n  user: 'user',\n  volumes: [{\n    containerPath: 'containerPath',\n    hostPath: 'hostPath',\n\n    // the properties below are optional\n    consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n  }],\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 18,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 3,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "03dc8e8be86bbdda04afd175858335a530f564c7255e43bde3c4a93072bb467c"
    },
    "0bb298934d338aa53d2e2773f33c85c11ea41f2e09277724696a83041e2addc2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ndocker_volume = cdk.DockerVolume(\n    container_path=\"containerPath\",\n    host_path=\"hostPath\",\n\n    # the properties below are optional\n    consistency=cdk.DockerVolumeConsistency.CONSISTENT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nDockerVolume dockerVolume = new DockerVolume {\n    ContainerPath = \"containerPath\",\n    HostPath = \"hostPath\",\n\n    // the properties below are optional\n    Consistency = DockerVolumeConsistency.CONSISTENT\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nDockerVolume dockerVolume = DockerVolume.builder()\n        .containerPath(\"containerPath\")\n        .hostPath(\"hostPath\")\n\n        // the properties below are optional\n        .consistency(DockerVolumeConsistency.CONSISTENT)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ndockerVolume := &dockerVolume{\n\tcontainerPath: jsii.String(\"containerPath\"),\n\thostPath: jsii.String(\"hostPath\"),\n\n\t// the properties below are optional\n\tconsistency: cdk.dockerVolumeConsistency_CONSISTENT,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst dockerVolume: cdk.DockerVolume = {\n  containerPath: 'containerPath',\n  hostPath: 'hostPath',\n\n  // the properties below are optional\n  consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerVolume"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DockerVolume",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerVolume: cdk.DockerVolume = {\n  containerPath: 'containerPath',\n  hostPath: 'hostPath',\n\n  // the properties below are optional\n  consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "668b5c8ee42e10febd3c8f5d83ede18188f1fbb4ab6ac2d3dae045bde27c2e95"
    },
    "956955c1b3d0eb46677062dddecc93ae0cad94522a25572c0defbf1c6f13b54c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_12_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = handler.toString()\")),\n})\n\nrule := events.NewRule(this, jsii.String(\"rule\"), &ruleProps{\n\teventPattern: &eventPattern{\n\t\tsource: []*string{\n\t\t\tjsii.String(\"aws.ec2\"),\n\t\t},\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule.addTarget(targets.NewLambdaFunction(fn, &lambdaFunctionProps{\n\tdeadLetterQueue: queue,\n\t // Optional: add a dead letter queue\n\tmaxEventAge: cdk.duration.hours(jsii.Number(2)),\n\t // Optional: set the maxEventAge retry policy\n\tretryAttempts: jsii.Number(2),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Duration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "610e51f39d782338a255d81dd2223de7c11ffa2050507fe086b8ef7d356709ea"
    },
    "403a26000e809196006354051b7d3257ca37c4b16f5c50f09cd760006b07eace": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nencoding_options = cdk.EncodingOptions(\n    display_hint=\"displayHint\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nEncodingOptions encodingOptions = new EncodingOptions {\n    DisplayHint = \"displayHint\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nEncodingOptions encodingOptions = EncodingOptions.builder()\n        .displayHint(\"displayHint\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nencodingOptions := &encodingOptions{\n\tdisplayHint: jsii.String(\"displayHint\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst encodingOptions: cdk.EncodingOptions = {\n  displayHint: 'displayHint',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.EncodingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.EncodingOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst encodingOptions: cdk.EncodingOptions = {\n  displayHint: 'displayHint',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ed554376b4c1ef3ca90be9946dad9f492b940e87e5a10aa9e287f1e3bdbba0bb"
    },
    "9a69650e4049481b8731f33ae3e5f20969820485deaec08f06efe57d4e9e93c7": {
      "translations": {
        "python": {
          "source": "# Passing a replication bucket created in a different stack.\napp = App()\nreplication_stack = Stack(app, \"ReplicationStack\",\n    env=Environment(\n        region=\"us-west-1\"\n    )\n)\nkey = kms.Key(replication_stack, \"ReplicationKey\")\nreplication_bucket = s3.Bucket(replication_stack, \"ReplicationBucket\",\n    # like was said above - replication buckets need a set physical name\n    bucket_name=PhysicalName.GENERATE_IF_NEEDED,\n    encryption_key=key\n)\n\n# later...\ncodepipeline.Pipeline(replication_stack, \"Pipeline\",\n    cross_region_replication_buckets={\n        \"us-west-1\": replication_bucket\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Passing a replication bucket created in a different stack.\nApp app = new App();\nStack replicationStack = new Stack(app, \"ReplicationStack\", new StackProps {\n    Env = new Environment {\n        Region = \"us-west-1\"\n    }\n});\nKey key = new Key(replicationStack, \"ReplicationKey\");\nBucket replicationBucket = new Bucket(replicationStack, \"ReplicationBucket\", new BucketProps {\n    // like was said above - replication buckets need a set physical name\n    BucketName = PhysicalName.GENERATE_IF_NEEDED,\n    EncryptionKey = key\n});\n\n// later...\n// later...\nnew Pipeline(replicationStack, \"Pipeline\", new PipelineProps {\n    CrossRegionReplicationBuckets = new Dictionary<string, IBucket> {\n        { \"us-west-1\", replicationBucket }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Passing a replication bucket created in a different stack.\nApp app = new App();\nStack replicationStack = Stack.Builder.create(app, \"ReplicationStack\")\n        .env(Environment.builder()\n                .region(\"us-west-1\")\n                .build())\n        .build();\nKey key = new Key(replicationStack, \"ReplicationKey\");\nBucket replicationBucket = Bucket.Builder.create(replicationStack, \"ReplicationBucket\")\n        // like was said above - replication buckets need a set physical name\n        .bucketName(PhysicalName.GENERATE_IF_NEEDED)\n        .encryptionKey(key)\n        .build();\n\n// later...\n// later...\nPipeline.Builder.create(replicationStack, \"Pipeline\")\n        .crossRegionReplicationBuckets(Map.of(\n                \"us-west-1\", replicationBucket))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Passing a replication bucket created in a different stack.\napp := NewApp()\nreplicationStack := NewStack(app, jsii.String(\"ReplicationStack\"), &stackProps{\n\tenv: &environment{\n\t\tregion: jsii.String(\"us-west-1\"),\n\t},\n})\nkey := kms.NewKey(replicationStack, jsii.String(\"ReplicationKey\"))\nreplicationBucket := s3.NewBucket(replicationStack, jsii.String(\"ReplicationBucket\"), &bucketProps{\n\t// like was said above - replication buckets need a set physical name\n\tbucketName: physicalName_GENERATE_IF_NEEDED(),\n\tencryptionKey: key,\n})\n\n// later...\n// later...\ncodepipeline.NewPipeline(replicationStack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tcrossRegionReplicationBuckets: map[string]iBucket{\n\t\t\"us-west-1\": replicationBucket,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Passing a replication bucket created in a different stack.\nconst app = new App();\nconst replicationStack = new Stack(app, 'ReplicationStack', {\n  env: {\n    region: 'us-west-1',\n  },\n});\nconst key = new kms.Key(replicationStack, 'ReplicationKey');\nconst replicationBucket = new s3.Bucket(replicationStack, 'ReplicationBucket', {\n  // like was said above - replication buckets need a set physical name\n  bucketName: PhysicalName.GENERATE_IF_NEEDED,\n  encryptionKey: key, // does not work!\n});\n\n// later...\nnew codepipeline.Pipeline(replicationStack, 'Pipeline', {\n  crossRegionReplicationBuckets: {\n    'us-west-1': replicationBucket,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Environment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.PhysicalName#GENERATE_IF_NEEDED",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Passing a replication bucket created in a different stack.\nconst app = new App();\nconst replicationStack = new Stack(app, 'ReplicationStack', {\n  env: {\n    region: 'us-west-1',\n  },\n});\nconst key = new kms.Key(replicationStack, 'ReplicationKey');\nconst replicationBucket = new s3.Bucket(replicationStack, 'ReplicationBucket', {\n  // like was said above - replication buckets need a set physical name\n  bucketName: PhysicalName.GENERATE_IF_NEEDED,\n  encryptionKey: key, // does not work!\n});\n\n// later...\nnew codepipeline.Pipeline(replicationStack, 'Pipeline', {\n  crossRegionReplicationBuckets: {\n    'us-west-1': replicationBucket,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "193": 5,
        "194": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 6
      },
      "fqnsFingerprint": "0078056040973bf74dcf041f4c28f39cb311e0d5e1a7de0c5dea140631b03931"
    },
    "58d1a7254fb405508268ac812092e2437ab33b3511e303504d668f1557a81df6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nexpiration = cdk.Expiration.after(cdk.Duration.minutes(30))",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nExpiration expiration = Expiration.After(Duration.Minutes(30));",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nExpiration expiration = Expiration.after(Duration.minutes(30));",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nexpiration := cdk.expiration.after(cdk.duration.minutes(jsii.Number(30)))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst expiration = cdk.Expiration.after(cdk.Duration.minutes(30));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Expiration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Expiration",
        "@aws-cdk/core.Expiration#after"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst expiration = cdk.Expiration.after(cdk.Duration.minutes(30));\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 8,
        "194": 4,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "d831b20a0b3010f1d77ff85032432d1fc991a853696850dd623ea03a2b140766"
    },
    "b250331cdc65a5b1e09c0b181c27130e23fb2db042b3fb373751640ebe5cff5d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nexport_value_options = cdk.ExportValueOptions(\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nExportValueOptions exportValueOptions = new ExportValueOptions {\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nExportValueOptions exportValueOptions = ExportValueOptions.builder()\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nexportValueOptions := &exportValueOptions{\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst exportValueOptions: cdk.ExportValueOptions = {\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ExportValueOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ExportValueOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst exportValueOptions: cdk.ExportValueOptions = {\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c1f5acd94fab7169b72c15411b924a814f488a33c12939256ff9701487f63336"
    },
    "4d30cdfbb2b82c3a46becc9431e278f5a8391e5fe5985c048de887832177d140": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nfeature_flags = cdk.FeatureFlags.of(self)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nFeatureFlags featureFlags = FeatureFlags.Of(this);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nFeatureFlags featureFlags = FeatureFlags.of(this);",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nfeatureFlags := cdk.featureFlags.of(this)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst featureFlags = cdk.FeatureFlags.of(this);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.FeatureFlags"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.FeatureFlags",
        "@aws-cdk/core.FeatureFlags#of",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst featureFlags = cdk.FeatureFlags.of(this);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e162bee20a1933022184ff404d0256fd4518fc712d4a2305f24e1d47921dac2b"
    },
    "e525d290c09e668cfd43fe65a0aa4d5588f8d2f9d484aa19a472107fb6eb7005": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nfile_asset_location = cdk.FileAssetLocation(\n    bucket_name=\"bucketName\",\n    http_url=\"httpUrl\",\n    object_key=\"objectKey\",\n    s3_object_url=\"s3ObjectUrl\",\n\n    # the properties below are optional\n    kms_key_arn=\"kmsKeyArn\",\n    s3_object_url_with_placeholders=\"s3ObjectUrlWithPlaceholders\",\n    s3_url=\"s3Url\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nFileAssetLocation fileAssetLocation = new FileAssetLocation {\n    BucketName = \"bucketName\",\n    HttpUrl = \"httpUrl\",\n    ObjectKey = \"objectKey\",\n    S3ObjectUrl = \"s3ObjectUrl\",\n\n    // the properties below are optional\n    KmsKeyArn = \"kmsKeyArn\",\n    S3ObjectUrlWithPlaceholders = \"s3ObjectUrlWithPlaceholders\",\n    S3Url = \"s3Url\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nFileAssetLocation fileAssetLocation = FileAssetLocation.builder()\n        .bucketName(\"bucketName\")\n        .httpUrl(\"httpUrl\")\n        .objectKey(\"objectKey\")\n        .s3ObjectUrl(\"s3ObjectUrl\")\n\n        // the properties below are optional\n        .kmsKeyArn(\"kmsKeyArn\")\n        .s3ObjectUrlWithPlaceholders(\"s3ObjectUrlWithPlaceholders\")\n        .s3Url(\"s3Url\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nfileAssetLocation := &fileAssetLocation{\n\tbucketName: jsii.String(\"bucketName\"),\n\thttpUrl: jsii.String(\"httpUrl\"),\n\tobjectKey: jsii.String(\"objectKey\"),\n\ts3ObjectUrl: jsii.String(\"s3ObjectUrl\"),\n\n\t// the properties below are optional\n\tkmsKeyArn: jsii.String(\"kmsKeyArn\"),\n\ts3ObjectUrlWithPlaceholders: jsii.String(\"s3ObjectUrlWithPlaceholders\"),\n\ts3Url: jsii.String(\"s3Url\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst fileAssetLocation: cdk.FileAssetLocation = {\n  bucketName: 'bucketName',\n  httpUrl: 'httpUrl',\n  objectKey: 'objectKey',\n  s3ObjectUrl: 's3ObjectUrl',\n\n  // the properties below are optional\n  kmsKeyArn: 'kmsKeyArn',\n  s3ObjectUrlWithPlaceholders: 's3ObjectUrlWithPlaceholders',\n  s3Url: 's3Url',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.FileAssetLocation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.FileAssetLocation"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileAssetLocation: cdk.FileAssetLocation = {\n  bucketName: 'bucketName',\n  httpUrl: 'httpUrl',\n  objectKey: 'objectKey',\n  s3ObjectUrl: 's3ObjectUrl',\n\n  // the properties below are optional\n  kmsKeyArn: 'kmsKeyArn',\n  s3ObjectUrlWithPlaceholders: 's3ObjectUrlWithPlaceholders',\n  s3Url: 's3Url',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 11,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "efd14d378fb5c822f67bd2fb81803378cf76c251ac1797b5853592e0d1c383ae"
    },
    "6e00d78525b1a9e0ae84c00bf7b389b8a5a248aab9b932c4d7dfebb281d653d0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nfile_asset_source = cdk.FileAssetSource(\n    source_hash=\"sourceHash\",\n\n    # the properties below are optional\n    executable=[\"executable\"],\n    file_name=\"fileName\",\n    packaging=cdk.FileAssetPackaging.ZIP_DIRECTORY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nFileAssetSource fileAssetSource = new FileAssetSource {\n    SourceHash = \"sourceHash\",\n\n    // the properties below are optional\n    Executable = new [] { \"executable\" },\n    FileName = \"fileName\",\n    Packaging = FileAssetPackaging.ZIP_DIRECTORY\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nFileAssetSource fileAssetSource = FileAssetSource.builder()\n        .sourceHash(\"sourceHash\")\n\n        // the properties below are optional\n        .executable(List.of(\"executable\"))\n        .fileName(\"fileName\")\n        .packaging(FileAssetPackaging.ZIP_DIRECTORY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nfileAssetSource := &fileAssetSource{\n\tsourceHash: jsii.String(\"sourceHash\"),\n\n\t// the properties below are optional\n\texecutable: []*string{\n\t\tjsii.String(\"executable\"),\n\t},\n\tfileName: jsii.String(\"fileName\"),\n\tpackaging: cdk.fileAssetPackaging_ZIP_DIRECTORY,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst fileAssetSource: cdk.FileAssetSource = {\n  sourceHash: 'sourceHash',\n\n  // the properties below are optional\n  executable: ['executable'],\n  fileName: 'fileName',\n  packaging: cdk.FileAssetPackaging.ZIP_DIRECTORY,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.FileAssetSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.FileAssetPackaging",
        "@aws-cdk/core.FileAssetPackaging#ZIP_DIRECTORY",
        "@aws-cdk/core.FileAssetSource"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileAssetSource: cdk.FileAssetSource = {\n  sourceHash: 'sourceHash',\n\n  // the properties below are optional\n  executable: ['executable'],\n  fileName: 'fileName',\n  packaging: cdk.FileAssetPackaging.ZIP_DIRECTORY,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "52c708ca19714ab82fdc6e50d16ef535dc1b3dbeaaa5f6f8ae66ce09eaf31d4b"
    },
    "aaa4fbb837ff6def46b694e72130fd7fea58e5246b6c68073f08cc417c653faa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nfile_copy_options = cdk.FileCopyOptions(\n    exclude=[\"exclude\"],\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nFileCopyOptions fileCopyOptions = new FileCopyOptions {\n    Exclude = new [] { \"exclude\" },\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nFileCopyOptions fileCopyOptions = FileCopyOptions.builder()\n        .exclude(List.of(\"exclude\"))\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nfileCopyOptions := &fileCopyOptions{\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\tfollowSymlinks: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst fileCopyOptions: cdk.FileCopyOptions = {\n  exclude: ['exclude'],\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.FileCopyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.FileCopyOptions",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileCopyOptions: cdk.FileCopyOptions = {\n  exclude: ['exclude'],\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5e67b96ee18105ac76af30f58bc9141acadadf3156327d55da2a6f63239e7d02"
    },
    "569021421ff241bb1dabb9ee15a575b745867e9ae5f03320e5a594cd95e4fc7e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nfile_fingerprint_options = cdk.FileFingerprintOptions(\n    exclude=[\"exclude\"],\n    extra_hash=\"extraHash\",\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nFileFingerprintOptions fileFingerprintOptions = new FileFingerprintOptions {\n    Exclude = new [] { \"exclude\" },\n    ExtraHash = \"extraHash\",\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nFileFingerprintOptions fileFingerprintOptions = FileFingerprintOptions.builder()\n        .exclude(List.of(\"exclude\"))\n        .extraHash(\"extraHash\")\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nfileFingerprintOptions := &fileFingerprintOptions{\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\textraHash: jsii.String(\"extraHash\"),\n\tfollowSymlinks: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst fileFingerprintOptions: cdk.FileFingerprintOptions = {\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.FileFingerprintOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.FileFingerprintOptions",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileFingerprintOptions: cdk.FileFingerprintOptions = {\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "55be1147ebd9980f866096ab738934f9ed0d83df28ec68a50d058f2cab261ec7"
    },
    "61c497d40394b3456d3992507155b4cbc2678964d6590ffef4c5d3fa5db755e8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nfile_system = cdk.FileSystem()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nFileSystem fileSystem = new FileSystem();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nFileSystem fileSystem = new FileSystem();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nfileSystem := cdk.NewFileSystem()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst fileSystem = new cdk.FileSystem();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.FileSystem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.FileSystem"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileSystem = new cdk.FileSystem();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "9922e8032937b1a1538d4fadcf1a0ee2af911695bbaf6f0ee89ea7c33560dce9"
    },
    "9f972e480aec39cab07b0cea9b8d5e36c193aa25399796a929de17077c3bff56": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nfingerprint_options = cdk.FingerprintOptions(\n    exclude=[\"exclude\"],\n    extra_hash=\"extraHash\",\n    follow=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nFingerprintOptions fingerprintOptions = new FingerprintOptions {\n    Exclude = new [] { \"exclude\" },\n    ExtraHash = \"extraHash\",\n    Follow = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nFingerprintOptions fingerprintOptions = FingerprintOptions.builder()\n        .exclude(List.of(\"exclude\"))\n        .extraHash(\"extraHash\")\n        .follow(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nfingerprintOptions := &fingerprintOptions{\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\textraHash: jsii.String(\"extraHash\"),\n\tfollow: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst fingerprintOptions: cdk.FingerprintOptions = {\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.FingerprintOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.FingerprintOptions",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fingerprintOptions: cdk.FingerprintOptions = {\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e36590f518b9f51ec0a48b6309ed9394dd40e7970ac87da116dfc5b676e70093"
    },
    "1af4dfe5482e44824f61f700fbd15301142ca61ca639d825a555d1cc9056294c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n# portfolio: servicecatalog.Portfolio\n# product: servicecatalog.CloudFormationProduct\n\n\nportfolio.constrain_cloud_formation_parameters(product,\n    rule=servicecatalog.TemplateRule(\n        rule_name=\"testInstanceType\",\n        condition=cdk.Fn.condition_equals(cdk.Fn.ref(\"Environment\"), \"test\"),\n        assertions=[servicecatalog.TemplateRuleAssertion(\n            assert=cdk.Fn.condition_contains([\"t2.micro\", \"t2.small\"], cdk.Fn.ref(\"InstanceType\")),\n            description=\"For test environment, the instance type should be small\"\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\nPortfolio portfolio;\nCloudFormationProduct product;\n\n\nportfolio.ConstrainCloudFormationParameters(product, new CloudFormationRuleConstraintOptions {\n    Rule = new TemplateRule {\n        RuleName = \"testInstanceType\",\n        Condition = Fn.ConditionEquals(Fn.Ref(\"Environment\"), \"test\"),\n        Assertions = new [] { new TemplateRuleAssertion {\n            Assert = Fn.ConditionContains(new [] { \"t2.micro\", \"t2.small\" }, Fn.Ref(\"InstanceType\")),\n            Description = \"For test environment, the instance type should be small\"\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\nPortfolio portfolio;\nCloudFormationProduct product;\n\n\nportfolio.constrainCloudFormationParameters(product, CloudFormationRuleConstraintOptions.builder()\n        .rule(TemplateRule.builder()\n                .ruleName(\"testInstanceType\")\n                .condition(Fn.conditionEquals(Fn.ref(\"Environment\"), \"test\"))\n                .assertions(List.of(TemplateRuleAssertion.builder()\n                        .assert(Fn.conditionContains(List.of(\"t2.micro\", \"t2.small\"), Fn.ref(\"InstanceType\")))\n                        .description(\"For test environment, the instance type should be small\")\n                        .build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar portfolio portfolio\nvar product cloudFormationProduct\n\nportfolio.constrainCloudFormationParameters(product, &cloudFormationRuleConstraintOptions{\n\trule: &templateRule{\n\t\truleName: jsii.String(\"testInstanceType\"),\n\t\tcondition: cdk.fn.conditionEquals(cdk.*fn.ref(jsii.String(\"Environment\")), jsii.String(\"test\")),\n\t\tassertions: []templateRuleAssertion{\n\t\t\t&templateRuleAssertion{\n\t\t\t\tassert: cdk.*fn.conditionContains([]*string{\n\t\t\t\t\tjsii.String(\"t2.micro\"),\n\t\t\t\t\tjsii.String(\"t2.small\"),\n\t\t\t\t}, cdk.*fn.ref(jsii.String(\"InstanceType\"))),\n\t\t\t\tdescription: jsii.String(\"For test environment, the instance type should be small\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\ndeclare const portfolio: servicecatalog.Portfolio;\ndeclare const product: servicecatalog.CloudFormationProduct;\n\nportfolio.constrainCloudFormationParameters(product, {\n  rule: {\n    ruleName: 'testInstanceType',\n    condition: cdk.Fn.conditionEquals(cdk.Fn.ref('Environment'), 'test'),\n    assertions: [{\n      assert: cdk.Fn.conditionContains(['t2.micro', 't2.small'], cdk.Fn.ref('InstanceType')),\n      description: 'For test environment, the instance type should be small',\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Fn"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicecatalog.CloudFormationRuleConstraintOptions",
        "@aws-cdk/aws-servicecatalog.IProduct",
        "@aws-cdk/aws-servicecatalog.TemplateRule",
        "@aws-cdk/core.Fn",
        "@aws-cdk/core.Fn#conditionContains",
        "@aws-cdk/core.Fn#conditionEquals",
        "@aws-cdk/core.Fn#ref",
        "@aws-cdk/core.ICfnRuleConditionExpression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const portfolio: servicecatalog.Portfolio;\ndeclare const product: servicecatalog.CloudFormationProduct;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as servicecatalog from '@aws-cdk/aws-servicecatalog';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nportfolio.constrainCloudFormationParameters(product, {\n  rule: {\n    ruleName: 'testInstanceType',\n    condition: cdk.Fn.conditionEquals(cdk.Fn.ref('Environment'), 'test'),\n    assertions: [{\n      assert: cdk.Fn.conditionContains(['t2.micro', 't2.small'], cdk.Fn.ref('InstanceType')),\n      description: 'For test environment, the instance type should be small',\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 5,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "20b538f8ac240d4822e76fe20613d8ad9d299a8d2d3bad957e391ffec39bca31"
    },
    "80cdddfd458aca84d451878d1275ddf51f8022e89b6171f0fce95e64626467f1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# props: Any\n\nget_context_key_options = cdk.GetContextKeyOptions(\n    provider=\"provider\",\n\n    # the properties below are optional\n    include_environment=False,\n    props={\n        \"props_key\": props\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar props;\nGetContextKeyOptions getContextKeyOptions = new GetContextKeyOptions {\n    Provider = \"provider\",\n\n    // the properties below are optional\n    IncludeEnvironment = false,\n    Props = new Dictionary<string, object> {\n        { \"propsKey\", props }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject props;\n\nGetContextKeyOptions getContextKeyOptions = GetContextKeyOptions.builder()\n        .provider(\"provider\")\n\n        // the properties below are optional\n        .includeEnvironment(false)\n        .props(Map.of(\n                \"propsKey\", props))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar props interface{}\ngetContextKeyOptions := &getContextKeyOptions{\n\tprovider: jsii.String(\"provider\"),\n\n\t// the properties below are optional\n\tincludeEnvironment: jsii.Boolean(false),\n\tprops: map[string]interface{}{\n\t\t\"propsKey\": props,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const props: any;\nconst getContextKeyOptions: cdk.GetContextKeyOptions = {\n  provider: 'provider',\n\n  // the properties below are optional\n  includeEnvironment: false,\n  props: {\n    propsKey: props,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.GetContextKeyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.GetContextKeyOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const props: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst getContextKeyOptions: cdk.GetContextKeyOptions = {\n  provider: 'provider',\n\n  // the properties below are optional\n  includeEnvironment: false,\n  props: {\n    propsKey: props,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "91": 1,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "411a25cdddd5f16522096018754849463d4b43b67f8bdb444864551e35ad981d"
    },
    "14ba76dbfe25010b3fbc3e0c8809fec80d513661333bc92f40f51df360f2c1dd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# props: Any\n\nget_context_key_result = cdk.GetContextKeyResult(\n    key=\"key\",\n    props={\n        \"props_key\": props\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar props;\nGetContextKeyResult getContextKeyResult = new GetContextKeyResult {\n    Key = \"key\",\n    Props = new Dictionary<string, object> {\n        { \"propsKey\", props }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject props;\n\nGetContextKeyResult getContextKeyResult = GetContextKeyResult.builder()\n        .key(\"key\")\n        .props(Map.of(\n                \"propsKey\", props))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar props interface{}\ngetContextKeyResult := &getContextKeyResult{\n\tkey: jsii.String(\"key\"),\n\tprops: map[string]interface{}{\n\t\t\"propsKey\": props,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const props: any;\nconst getContextKeyResult: cdk.GetContextKeyResult = {\n  key: 'key',\n  props: {\n    propsKey: props,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.GetContextKeyResult"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.GetContextKeyResult"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const props: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst getContextKeyResult: cdk.GetContextKeyResult = {\n  key: 'key',\n  props: {\n    propsKey: props,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6d374dee19d56cffba8079ba0661a38c9e1ed2be7b691280fea7f01e2ccdca5d"
    },
    "003f20b25ee4415e4ab5f328d7e65b78a7bff72fe6644b7ebd5480ca95f20dcf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# dummy_value: Any\n# props: Any\n\nget_context_value_options = cdk.GetContextValueOptions(\n    dummy_value=dummy_value,\n    provider=\"provider\",\n\n    # the properties below are optional\n    include_environment=False,\n    props={\n        \"props_key\": props\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar dummyValue;\nvar props;\nGetContextValueOptions getContextValueOptions = new GetContextValueOptions {\n    DummyValue = dummyValue,\n    Provider = \"provider\",\n\n    // the properties below are optional\n    IncludeEnvironment = false,\n    Props = new Dictionary<string, object> {\n        { \"propsKey\", props }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject dummyValue;\nObject props;\n\nGetContextValueOptions getContextValueOptions = GetContextValueOptions.builder()\n        .dummyValue(dummyValue)\n        .provider(\"provider\")\n\n        // the properties below are optional\n        .includeEnvironment(false)\n        .props(Map.of(\n                \"propsKey\", props))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dummyValue interface{}\nvar props interface{}\ngetContextValueOptions := &getContextValueOptions{\n\tdummyValue: dummyValue,\n\tprovider: jsii.String(\"provider\"),\n\n\t// the properties below are optional\n\tincludeEnvironment: jsii.Boolean(false),\n\tprops: map[string]interface{}{\n\t\t\"propsKey\": props,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dummyValue: any;\ndeclare const props: any;\nconst getContextValueOptions: cdk.GetContextValueOptions = {\n  dummyValue: dummyValue,\n  provider: 'provider',\n\n  // the properties below are optional\n  includeEnvironment: false,\n  props: {\n    propsKey: props,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.GetContextValueOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.GetContextValueOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dummyValue: any;\ndeclare const props: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst getContextValueOptions: cdk.GetContextValueOptions = {\n  dummyValue: dummyValue,\n  provider: 'provider',\n\n  // the properties below are optional\n  includeEnvironment: false,\n  props: {\n    propsKey: props,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "91": 1,
        "125": 2,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b2798a92851b7821c6b2f437da8882f2c0b22d49a970fe1c9bc511a0c67ab597"
    },
    "4ed3fdda41afd6e67eaef0232be7171ebaeb36a24c888796610165ca2e4ecf9a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# value: Any\n\nget_context_value_result = cdk.GetContextValueResult(\n    value=value\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar value;\nGetContextValueResult getContextValueResult = new GetContextValueResult {\n    Value = value\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject value;\n\nGetContextValueResult getContextValueResult = GetContextValueResult.builder()\n        .value(value)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar value interface{}\ngetContextValueResult := &getContextValueResult{\n\tvalue: value,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const value: any;\nconst getContextValueResult: cdk.GetContextValueResult = {\n  value: value,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.GetContextValueResult"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.GetContextValueResult"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const value: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst getContextValueResult: cdk.GetContextValueResult = {\n  value: value,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "5928862fe87658f0b815b2d230966e8c15abfe2d97c5d0d9ace692287f5a5575"
    },
    "b12c1fe9e04b08d0dd9a9d16b6d467e0af858f3522fa25ead735581c3b504c02": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ngit_ignore_strategy = cdk.GitIgnoreStrategy(\"absoluteRootPath\", [\"patterns\"])",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nGitIgnoreStrategy gitIgnoreStrategy = new GitIgnoreStrategy(\"absoluteRootPath\", new [] { \"patterns\" });",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nGitIgnoreStrategy gitIgnoreStrategy = new GitIgnoreStrategy(\"absoluteRootPath\", List.of(\"patterns\"));",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ngitIgnoreStrategy := cdk.NewGitIgnoreStrategy(jsii.String(\"absoluteRootPath\"), []*string{\n\tjsii.String(\"patterns\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst gitIgnoreStrategy = new cdk.GitIgnoreStrategy('absoluteRootPath', ['patterns']);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.GitIgnoreStrategy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.GitIgnoreStrategy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gitIgnoreStrategy = new cdk.GitIgnoreStrategy('absoluteRootPath', ['patterns']);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "192": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "ca1f2a29c0312f89247b2adbc3441b23a51f932bb1b5b1747b4aa9fd03d923b3"
    },
    "0caec88ac2a6ecfd7c0352a4140009f2aeb32879e81beed473e998f9bfadab03": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nglob_ignore_strategy = cdk.GlobIgnoreStrategy(\"absoluteRootPath\", [\"patterns\"])",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nGlobIgnoreStrategy globIgnoreStrategy = new GlobIgnoreStrategy(\"absoluteRootPath\", new [] { \"patterns\" });",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nGlobIgnoreStrategy globIgnoreStrategy = new GlobIgnoreStrategy(\"absoluteRootPath\", List.of(\"patterns\"));",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nglobIgnoreStrategy := cdk.NewGlobIgnoreStrategy(jsii.String(\"absoluteRootPath\"), []*string{\n\tjsii.String(\"patterns\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst globIgnoreStrategy = new cdk.GlobIgnoreStrategy('absoluteRootPath', ['patterns']);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.GlobIgnoreStrategy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.GlobIgnoreStrategy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst globIgnoreStrategy = new cdk.GlobIgnoreStrategy('absoluteRootPath', ['patterns']);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "192": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "4e6288667608375482b23d85a1d87cbc3eca85ee09062715e47fe89d055dcc8d"
    },
    "dce1e949469a6822566640da7fa1dce4c41100f83826e81dcd6e977e15c21183": {
      "translations": {
        "python": {
          "source": "sqs.Queue(self, \"MyQueue\",\n    queue_name=Fn.condition_if(\"Condition\", \"Hello\", \"World\").to_string()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Queue(this, \"MyQueue\", new QueueProps {\n    QueueName = Fn.ConditionIf(\"Condition\", \"Hello\", \"World\").ToString()\n});",
          "version": "1"
        },
        "java": {
          "source": "Queue.Builder.create(this, \"MyQueue\")\n        .queueName(Fn.conditionIf(\"Condition\", \"Hello\", \"World\").toString())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "sqs.NewQueue(this, jsii.String(\"MyQueue\"), &queueProps{\n\tqueueName: fn.conditionIf(jsii.String(\"Condition\"), jsii.String(\"Hello\"), jsii.String(\"World\")).toString(),\n})",
          "version": "1"
        },
        "$": {
          "source": "new sqs.Queue(this, 'MyQueue', {\n   queueName: Fn.conditionIf('Condition', 'Hello', 'World').toString()\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ICfnConditionExpression"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-sqs.QueueProps",
        "@aws-cdk/core.Fn#conditionIf",
        "@aws-cdk/core.IResolvable#toString",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew sqs.Queue(this, 'MyQueue', {\n   queueName: Fn.conditionIf('Condition', 'Hello', 'World').toString()\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "d2fa44ccdcfd9725383aa50d6c077975b77463aa745477806b7a436ccce07a31"
    },
    "14a342ffc4801b9de05d369f1cbe7af63b6c424df58d14acba760c25f12ad1a3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nignore_strategy = cdk.IgnoreStrategy.from_copy_options(cdk.CopyOptions(\n    exclude=[\"exclude\"],\n    follow=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB\n), \"absoluteRootPath\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nIgnoreStrategy ignoreStrategy = IgnoreStrategy.FromCopyOptions(new CopyOptions {\n    Exclude = new [] { \"exclude\" },\n    Follow = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB\n}, \"absoluteRootPath\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nIgnoreStrategy ignoreStrategy = IgnoreStrategy.fromCopyOptions(CopyOptions.builder()\n        .exclude(List.of(\"exclude\"))\n        .follow(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .build(), \"absoluteRootPath\");",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nignoreStrategy := cdk.ignoreStrategy.fromCopyOptions(&copyOptions{\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\tfollow: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n}, jsii.String(\"absoluteRootPath\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst ignoreStrategy = cdk.IgnoreStrategy.fromCopyOptions({\n  exclude: ['exclude'],\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n}, 'absoluteRootPath');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.IgnoreStrategy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CopyOptions",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.IgnoreStrategy",
        "@aws-cdk/core.IgnoreStrategy#fromCopyOptions",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ignoreStrategy = cdk.IgnoreStrategy.fromCopyOptions({\n  exclude: ['exclude'],\n  follow: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n}, 'absoluteRootPath');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3a406c6d7534e99596e75a02b1c4929a72164ea63c51877a5bc70f0ae6cee8a6"
    },
    "6d9d3fa0e36f81da6cd4154830ca43f75123ae1375d0ca7fb132313a79dd80d1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# value: Any\n\nintrinsic = cdk.Intrinsic(value,\n    stack_trace=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nvar value;\nIntrinsic intrinsic = new Intrinsic(value, new IntrinsicProps {\n    StackTrace = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nObject value;\n\nIntrinsic intrinsic = Intrinsic.Builder.create(value)\n        .stackTrace(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar value interface{}\nintrinsic := cdk.NewIntrinsic(value, &intrinsicProps{\n\tstackTrace: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const value: any;\nconst intrinsic = new cdk.Intrinsic(value, /* all optional props */ {\n  stackTrace: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Intrinsic"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Intrinsic",
        "@aws-cdk/core.IntrinsicProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const value: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst intrinsic = new cdk.Intrinsic(value, /* all optional props */ {\n  stackTrace: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "91": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b5252c8906e1b34de9770beecec4523dacd1d1bf2874511899d07898c5fb93b6"
    },
    "0cc1ac40c777dce41e8f0abadb6c7a7b20f4b349736dd79454746ea9f11fb9ce": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nintrinsic_props = cdk.IntrinsicProps(\n    stack_trace=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nIntrinsicProps intrinsicProps = new IntrinsicProps {\n    StackTrace = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nIntrinsicProps intrinsicProps = IntrinsicProps.builder()\n        .stackTrace(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nintrinsicProps := &intrinsicProps{\n\tstackTrace: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst intrinsicProps: cdk.IntrinsicProps = {\n  stackTrace: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.IntrinsicProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.IntrinsicProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst intrinsicProps: cdk.IntrinsicProps = {\n  stackTrace: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4d9e40d6e882184e9e26410a822eebcb7e1541aa0516605f7778f68c836d905c"
    },
    "dbc1eea91091332c84db428738981da80bb9232ced4c7a15ba0602e36f50ee54": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nlazy_any_value_options = cdk.LazyAnyValueOptions(\n    display_hint=\"displayHint\",\n    omit_empty_array=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nLazyAnyValueOptions lazyAnyValueOptions = new LazyAnyValueOptions {\n    DisplayHint = \"displayHint\",\n    OmitEmptyArray = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nLazyAnyValueOptions lazyAnyValueOptions = LazyAnyValueOptions.builder()\n        .displayHint(\"displayHint\")\n        .omitEmptyArray(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nlazyAnyValueOptions := &lazyAnyValueOptions{\n\tdisplayHint: jsii.String(\"displayHint\"),\n\tomitEmptyArray: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst lazyAnyValueOptions: cdk.LazyAnyValueOptions = {\n  displayHint: 'displayHint',\n  omitEmptyArray: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.LazyAnyValueOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.LazyAnyValueOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lazyAnyValueOptions: cdk.LazyAnyValueOptions = {\n  displayHint: 'displayHint',\n  omitEmptyArray: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "76ce230466ab2b6d4f3aa39636ab6747c9d3339ee170a38abd1563a5c0b6ff60"
    },
    "709f5822278fd16595591eb1ecce11aaec753a20c264960ca72804f293d833b0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nlazy_list_value_options = cdk.LazyListValueOptions(\n    display_hint=\"displayHint\",\n    omit_empty=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nLazyListValueOptions lazyListValueOptions = new LazyListValueOptions {\n    DisplayHint = \"displayHint\",\n    OmitEmpty = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nLazyListValueOptions lazyListValueOptions = LazyListValueOptions.builder()\n        .displayHint(\"displayHint\")\n        .omitEmpty(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nlazyListValueOptions := &lazyListValueOptions{\n\tdisplayHint: jsii.String(\"displayHint\"),\n\tomitEmpty: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst lazyListValueOptions: cdk.LazyListValueOptions = {\n  displayHint: 'displayHint',\n  omitEmpty: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.LazyListValueOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.LazyListValueOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lazyListValueOptions: cdk.LazyListValueOptions = {\n  displayHint: 'displayHint',\n  omitEmpty: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "54c05d08a538100f63d1d1fc4a4ec09134dea90e07722af961b9ed6aad87dbb6"
    },
    "53769d970423c1674ab1fe5deef41c08cf48663b46ceaacc7192a7817b6c8958": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nlazy_string_value_options = cdk.LazyStringValueOptions(\n    display_hint=\"displayHint\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nLazyStringValueOptions lazyStringValueOptions = new LazyStringValueOptions {\n    DisplayHint = \"displayHint\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nLazyStringValueOptions lazyStringValueOptions = LazyStringValueOptions.builder()\n        .displayHint(\"displayHint\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nlazyStringValueOptions := &lazyStringValueOptions{\n\tdisplayHint: jsii.String(\"displayHint\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst lazyStringValueOptions: cdk.LazyStringValueOptions = {\n  displayHint: 'displayHint',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.LazyStringValueOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.LazyStringValueOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lazyStringValueOptions: cdk.LazyStringValueOptions = {\n  displayHint: 'displayHint',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d9a346bc4193f0fc20b56867f338b85c5529acda8ca601ec2439d7582fbe3b02"
    },
    "a5168c43d4b577fbf4b9057bf92da6b1edc40210bdc78313541ee61ebc22210a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nlegacy_stack_synthesizer = cdk.LegacyStackSynthesizer()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nLegacyStackSynthesizer legacyStackSynthesizer = new LegacyStackSynthesizer();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nLegacyStackSynthesizer legacyStackSynthesizer = new LegacyStackSynthesizer();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nlegacyStackSynthesizer := cdk.NewLegacyStackSynthesizer()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst legacyStackSynthesizer = new cdk.LegacyStackSynthesizer();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.LegacyStackSynthesizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.LegacyStackSynthesizer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst legacyStackSynthesizer = new cdk.LegacyStackSynthesizer();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "a45360e86590cca0ad62883b6fef89bac8e41cb087d5b22ef6e3ff5b9185c8d6"
    },
    "39afe8263a6687b6e8e8d1dca2f82f29749e517ffe1bff5494509341c553591f": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        RestApi restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        Deployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkcore \"github.com/aws-samples/dummy/awscdkcore\"type App awscdkcore.App\ntype CfnOutput awscdkcore.CfnOutput\ntype NestedStack awscdkcore.NestedStack\ntype NestedStackProps awscdkcore.NestedStackProps\ntype Stack awscdkcore.Stackimport constructs \"github.com/aws/constructs-go/constructs\"type Construct constructs.Constructimport lib \"github.com/aws-samples/dummy/lib\"type Deployment lib.Deployment\ntype Method lib.Method\ntype MockIntegration lib.MockIntegration\ntype PassthroughBehavior lib.PassthroughBehavior\ntype RestApi lib.RestApi\ntype Stage lib.Stage\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\ntype rootStack struct {\n\tstack\n}\n\nfunc newRootStack(scope construct) *rootStack {\n\tthis := &rootStack{}\n\tnewStack_Override(this, scope, jsii.String(\"integ-restapi-import-RootStack\"))\n\n\trestApi := NewRestApi(this, jsii.String(\"RestApi\"), &restApiProps{\n\t\tdeploy: jsii.Boolean(false),\n\t})\n\trestApi.root.addMethod(jsii.String(\"ANY\"))\n\n\tpetsStack := NewPetsStack(this, &resourceNestedStackProps{\n\t\trestApiId: restApi.restApiId,\n\t\trootResourceId: restApi.restApiRootResourceId,\n\t})\n\tbooksStack := NewBooksStack(this, &resourceNestedStackProps{\n\t\trestApiId: restApi.restApiId,\n\t\trootResourceId: restApi.restApiRootResourceId,\n\t})\n\tNewDeployStack(this, &deployStackProps{\n\t\trestApiId: restApi.restApiId,\n\t\tmethods: petsStack.methods.concat(booksStack.methods),\n\t})\n\n\tNewCfnOutput(this, jsii.String(\"PetsURL\"), &cfnOutputProps{\n\t\tvalue: fmt.Sprintf(\"https://%v.execute-api.%v.amazonaws.com/prod/pets\", restApi.restApiId, this.region),\n\t})\n\n\tNewCfnOutput(this, jsii.String(\"BooksURL\"), &cfnOutputProps{\n\t\tvalue: fmt.Sprintf(\"https://%v.execute-api.%v.amazonaws.com/prod/books\", restApi.restApiId, this.region),\n\t})\n\treturn this\n}\n\ntype resourceNestedStackProps struct {\n\tnestedStackProps\n\trestApiId *string\n\trootResourceId *string\n}\n\ntype petsStack struct {\n\tnestedStack\n\tmethods []method\n}\n\nfunc newPetsStack(scope construct, props resourceNestedStackProps) *petsStack {\n\tthis := &petsStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-PetsStack\"), props)\n\n\tapi := restApi.fromRestApiAttributes(this, jsii.String(\"RestApi\"), &restApiAttributes{\n\t\trestApiId: props.restApiId,\n\t\trootResourceId: props.rootResourceId,\n\t})\n\n\tmethod := api.root.addResource(jsii.String(\"pets\")).addMethod(jsii.String(\"GET\"), NewMockIntegration(&integrationOptions{\n\t\tintegrationResponses: []integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t\tpassthroughBehavior: passthroughBehavior_NEVER,\n\t\trequestTemplates: map[string]*string{\n\t\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t\t},\n\t}), &methodOptions{\n\t\tmethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t})\n\n\tthis.methods.push(method)\n\treturn this\n}\n\ntype booksStack struct {\n\tnestedStack\n\tmethods []*method\n}\n\nfunc newBooksStack(scope construct, props resourceNestedStackProps) *booksStack {\n\tthis := &booksStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-BooksStack\"), props)\n\n\tapi := restApi.fromRestApiAttributes(this, jsii.String(\"RestApi\"), &restApiAttributes{\n\t\trestApiId: props.restApiId,\n\t\trootResourceId: props.rootResourceId,\n\t})\n\n\tmethod := api.root.addResource(jsii.String(\"books\")).addMethod(jsii.String(\"GET\"), NewMockIntegration(&integrationOptions{\n\t\tintegrationResponses: []*integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t\tpassthroughBehavior: *passthroughBehavior_NEVER,\n\t\trequestTemplates: map[string]*string{\n\t\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t\t},\n\t}), &methodOptions{\n\t\tmethodResponses: []*methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t})\n\n\tthis.methods.push(method)\n\treturn this\n}\n\ntype deployStackProps struct {\n\tnestedStackProps\n\trestApiId *string\n\tmethods []*method\n}\n\ntype deployStack struct {\n\tnestedStack\n}\n\nfunc newDeployStack(scope construct, props deployStackProps) *deployStack {\n\tthis := &deployStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-DeployStack\"), props)\n\n\tdeployment := NewDeployment(this, jsii.String(\"Deployment\"), &deploymentProps{\n\t\tapi: *restApi.fromRestApiId(this, jsii.String(\"RestApi\"), props.restApiId),\n\t})\n\tif *props.methods {\n\t\tfor _, method := range *props.methods {\n\t\t\tdeployment.node.addDependency(method)\n\t\t}\n\t}\n\tNewStage(this, jsii.String(\"Stage\"), &stageProps{\n\t\tdeployment: deployment,\n\t})\n\treturn this\n}\n\nNewRootStack(NewApp())",
          "version": "1"
        },
        "$": {
          "source": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.NestedStack"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.IRestApi#root",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/core.NestedStack",
        "@aws-cdk/core.NestedStackProps",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
      "syntaxKindCounter": {
        "10": 28,
        "15": 2,
        "16": 2,
        "17": 2,
        "57": 1,
        "75": 168,
        "91": 1,
        "102": 4,
        "104": 15,
        "119": 2,
        "138": 6,
        "143": 3,
        "156": 7,
        "158": 4,
        "159": 2,
        "162": 4,
        "169": 10,
        "174": 3,
        "192": 6,
        "193": 20,
        "194": 38,
        "196": 16,
        "197": 12,
        "211": 2,
        "216": 6,
        "221": 4,
        "223": 6,
        "225": 8,
        "226": 13,
        "227": 1,
        "232": 1,
        "242": 9,
        "243": 9,
        "245": 4,
        "246": 2,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 12,
        "279": 6,
        "281": 28,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e1a8f67204b2a3588325d25aae314710a3128344aac341ed63a96d10c48944df"
    },
    "589259d50b09f3c2d57e0834429320c0ca60b170189a8febe4b381d85a52ff3d": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        RestApi restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        Deployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkcore \"github.com/aws-samples/dummy/awscdkcore\"type App awscdkcore.App\ntype CfnOutput awscdkcore.CfnOutput\ntype NestedStack awscdkcore.NestedStack\ntype NestedStackProps awscdkcore.NestedStackProps\ntype Stack awscdkcore.Stackimport constructs \"github.com/aws/constructs-go/constructs\"type Construct constructs.Constructimport lib \"github.com/aws-samples/dummy/lib\"type Deployment lib.Deployment\ntype Method lib.Method\ntype MockIntegration lib.MockIntegration\ntype PassthroughBehavior lib.PassthroughBehavior\ntype RestApi lib.RestApi\ntype Stage lib.Stage\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\ntype rootStack struct {\n\tstack\n}\n\nfunc newRootStack(scope construct) *rootStack {\n\tthis := &rootStack{}\n\tnewStack_Override(this, scope, jsii.String(\"integ-restapi-import-RootStack\"))\n\n\trestApi := NewRestApi(this, jsii.String(\"RestApi\"), &restApiProps{\n\t\tdeploy: jsii.Boolean(false),\n\t})\n\trestApi.root.addMethod(jsii.String(\"ANY\"))\n\n\tpetsStack := NewPetsStack(this, &resourceNestedStackProps{\n\t\trestApiId: restApi.restApiId,\n\t\trootResourceId: restApi.restApiRootResourceId,\n\t})\n\tbooksStack := NewBooksStack(this, &resourceNestedStackProps{\n\t\trestApiId: restApi.restApiId,\n\t\trootResourceId: restApi.restApiRootResourceId,\n\t})\n\tNewDeployStack(this, &deployStackProps{\n\t\trestApiId: restApi.restApiId,\n\t\tmethods: petsStack.methods.concat(booksStack.methods),\n\t})\n\n\tNewCfnOutput(this, jsii.String(\"PetsURL\"), &cfnOutputProps{\n\t\tvalue: fmt.Sprintf(\"https://%v.execute-api.%v.amazonaws.com/prod/pets\", restApi.restApiId, this.region),\n\t})\n\n\tNewCfnOutput(this, jsii.String(\"BooksURL\"), &cfnOutputProps{\n\t\tvalue: fmt.Sprintf(\"https://%v.execute-api.%v.amazonaws.com/prod/books\", restApi.restApiId, this.region),\n\t})\n\treturn this\n}\n\ntype resourceNestedStackProps struct {\n\tnestedStackProps\n\trestApiId *string\n\trootResourceId *string\n}\n\ntype petsStack struct {\n\tnestedStack\n\tmethods []method\n}\n\nfunc newPetsStack(scope construct, props resourceNestedStackProps) *petsStack {\n\tthis := &petsStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-PetsStack\"), props)\n\n\tapi := restApi.fromRestApiAttributes(this, jsii.String(\"RestApi\"), &restApiAttributes{\n\t\trestApiId: props.restApiId,\n\t\trootResourceId: props.rootResourceId,\n\t})\n\n\tmethod := api.root.addResource(jsii.String(\"pets\")).addMethod(jsii.String(\"GET\"), NewMockIntegration(&integrationOptions{\n\t\tintegrationResponses: []integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t\tpassthroughBehavior: passthroughBehavior_NEVER,\n\t\trequestTemplates: map[string]*string{\n\t\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t\t},\n\t}), &methodOptions{\n\t\tmethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t})\n\n\tthis.methods.push(method)\n\treturn this\n}\n\ntype booksStack struct {\n\tnestedStack\n\tmethods []*method\n}\n\nfunc newBooksStack(scope construct, props resourceNestedStackProps) *booksStack {\n\tthis := &booksStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-BooksStack\"), props)\n\n\tapi := restApi.fromRestApiAttributes(this, jsii.String(\"RestApi\"), &restApiAttributes{\n\t\trestApiId: props.restApiId,\n\t\trootResourceId: props.rootResourceId,\n\t})\n\n\tmethod := api.root.addResource(jsii.String(\"books\")).addMethod(jsii.String(\"GET\"), NewMockIntegration(&integrationOptions{\n\t\tintegrationResponses: []*integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t\tpassthroughBehavior: *passthroughBehavior_NEVER,\n\t\trequestTemplates: map[string]*string{\n\t\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t\t},\n\t}), &methodOptions{\n\t\tmethodResponses: []*methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tstatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t})\n\n\tthis.methods.push(method)\n\treturn this\n}\n\ntype deployStackProps struct {\n\tnestedStackProps\n\trestApiId *string\n\tmethods []*method\n}\n\ntype deployStack struct {\n\tnestedStack\n}\n\nfunc newDeployStack(scope construct, props deployStackProps) *deployStack {\n\tthis := &deployStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-DeployStack\"), props)\n\n\tdeployment := NewDeployment(this, jsii.String(\"Deployment\"), &deploymentProps{\n\t\tapi: *restApi.fromRestApiId(this, jsii.String(\"RestApi\"), props.restApiId),\n\t})\n\tif *props.methods {\n\t\tfor _, method := range *props.methods {\n\t\t\tdeployment.node.addDependency(method)\n\t\t}\n\t}\n\tNewStage(this, jsii.String(\"Stage\"), &stageProps{\n\t\tdeployment: deployment,\n\t})\n\treturn this\n}\n\nNewRootStack(NewApp())",
          "version": "1"
        },
        "$": {
          "source": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.NestedStackProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.IRestApi#root",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/core.NestedStack",
        "@aws-cdk/core.NestedStackProps",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
      "syntaxKindCounter": {
        "10": 28,
        "15": 2,
        "16": 2,
        "17": 2,
        "57": 1,
        "75": 168,
        "91": 1,
        "102": 4,
        "104": 15,
        "119": 2,
        "138": 6,
        "143": 3,
        "156": 7,
        "158": 4,
        "159": 2,
        "162": 4,
        "169": 10,
        "174": 3,
        "192": 6,
        "193": 20,
        "194": 38,
        "196": 16,
        "197": 12,
        "211": 2,
        "216": 6,
        "221": 4,
        "223": 6,
        "225": 8,
        "226": 13,
        "227": 1,
        "232": 1,
        "242": 9,
        "243": 9,
        "245": 4,
        "246": 2,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 12,
        "279": 6,
        "281": 28,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e1a8f67204b2a3588325d25aae314710a3128344aac341ed63a96d10c48944df"
    },
    "0bd311261db8396dd717dc6f662d311808d9e5519cc45b2f39cea7c9c83f0c08": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# stack_synthesizer: cdk.StackSynthesizer\n\nnested_stack_synthesizer = cdk.NestedStackSynthesizer(stack_synthesizer)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nStackSynthesizer stackSynthesizer;\nNestedStackSynthesizer nestedStackSynthesizer = new NestedStackSynthesizer(stackSynthesizer);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nStackSynthesizer stackSynthesizer;\n\nNestedStackSynthesizer nestedStackSynthesizer = new NestedStackSynthesizer(stackSynthesizer);",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar stackSynthesizer stackSynthesizer\nnestedStackSynthesizer := cdk.NewNestedStackSynthesizer(stackSynthesizer)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const stackSynthesizer: cdk.StackSynthesizer;\nconst nestedStackSynthesizer = new cdk.NestedStackSynthesizer(stackSynthesizer);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.NestedStackSynthesizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.IStackSynthesizer",
        "@aws-cdk/core.NestedStackSynthesizer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const stackSynthesizer: cdk.StackSynthesizer;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst nestedStackSynthesizer = new cdk.NestedStackSynthesizer(stackSynthesizer);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "aaa903691bc1c748637b2de9fb12fc364a27bedd7dfb7369dc263341a5fede99"
    },
    "e4132c00341fc293d613acbada1251bd6ba39b7cd969297aae97da2daa411200": {
      "translations": {
        "python": {
          "source": "# bucket: s3.Bucket\n\n\ncfn_bucket = bucket.node.find_child(\"Resource\")\ncfn_bucket.apply_removal_policy(RemovalPolicy.DESTROY)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nCfnResource cfnBucket = (CfnResource)bucket.Node.FindChild(\"Resource\");\ncfnBucket.ApplyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nCfnResource cfnBucket = (CfnResource)bucket.node.findChild(\"Resource\");\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "1"
        },
        "go": {
          "source": "var bucket bucket\n\n\ncfnBucket := bucket.node.findChild(jsii.String(\"Resource\")).(cfnResource)\ncfnBucket.applyRemovalPolicy(removalPolicy_DESTROY)",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst cfnBucket = bucket.node.findChild('Resource') as CfnResource;\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.RemovalPolicy"
        },
        "field": {
          "field": "markdown",
          "line": 18
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResource#applyRemovalPolicy",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#findChild",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cfnBucket = bucket.node.findChild('Resource') as CfnResource;\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 2,
        "194": 4,
        "196": 2,
        "217": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1ec132c6b64f74711f940858d10579c4c89fd31bb5d59e9d734bf4e9646357ab"
    },
    "dd2091951db75764dadf67eb0191d8d8e9e169e184bc3bd6b0b8690be35e1f93": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_opensearchservice as opensearch\n\n# api: appsync.GraphqlApi\n\n\nuser = iam.User(self, \"User\")\ndomain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_2,\n    removal_policy=RemovalPolicy.DESTROY,\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(master_user_arn=user.user_arn),\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(enabled=True),\n    node_to_node_encryption=True,\n    enforce_https=True\n)\nds = api.add_open_search_data_source(\"ds\", domain)\n\nds.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getTests\",\n    request_mapping_template=appsync.MappingTemplate.from_string(JSON.stringify({\n        \"version\": \"2017-02-28\",\n        \"operation\": \"GET\",\n        \"path\": \"/id/post/_search\",\n        \"params\": {\n            \"headers\": {},\n            \"query_string\": {},\n            \"body\": {\"from\": 0, \"size\": 50}\n        }\n    })),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"[\n            #foreach($entry in $context.result.hits.hits)\n            #if( $velocityCount > 1 ) , #end\n            $utils.toJson($entry.get(\"_source\"))\n            #end\n          ]\"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.OpenSearchService;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_2,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    FineGrainedAccessControl = new AdvancedSecurityOptions { MasterUserArn = user.UserArn },\n    EncryptionAtRest = new EncryptionAtRestOptions { Enabled = true },\n    NodeToNodeEncryption = true,\n    EnforceHttps = true\n});\nOpenSearchDataSource ds = api.AddOpenSearchDataSource(\"ds\", domain);\n\nds.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getTests\",\n    RequestMappingTemplate = MappingTemplate.FromString(JSON.Stringify(new Dictionary<string, object> {\n        { \"version\", \"2017-02-28\" },\n        { \"operation\", \"GET\" },\n        { \"path\", \"/id/post/_search\" },\n        { \"params\", new Struct {\n            Headers = new Struct { },\n            QueryString = new Struct { },\n            Body = new Struct { From = 0, Size = 50 }\n        } }\n    })),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"[\n        #foreach($entry in $context.result.hits.hits)\n        #if( $velocityCount > 1 ) , #end\n        $utils.toJson($entry.get(\"\"_source\"\"))\n        #end\n      ]\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.opensearchservice.*;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_2)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder().masterUserArn(user.getUserArn()).build())\n        .encryptionAtRest(EncryptionAtRestOptions.builder().enabled(true).build())\n        .nodeToNodeEncryption(true)\n        .enforceHttps(true)\n        .build();\nOpenSearchDataSource ds = api.addOpenSearchDataSource(\"ds\", domain);\n\nds.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getTests\")\n        .requestMappingTemplate(MappingTemplate.fromString(JSON.stringify(Map.of(\n                \"version\", \"2017-02-28\",\n                \"operation\", \"GET\",\n                \"path\", \"/id/post/_search\",\n                \"params\", Map.of(\n                        \"headers\", Map.of(),\n                        \"queryString\", Map.of(),\n                        \"body\", Map.of(\"from\", 0, \"size\", 50))))))\n        .responseMappingTemplate(MappingTemplate.fromString(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import opensearch \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nvar api graphqlApi\n\nuser := iam.NewUser(this, jsii.String(\"User\"))\ndomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_2(),\n\tremovalPolicy: removalPolicy_DESTROY,\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserArn: user.userArn,\n\t},\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tenforceHttps: jsii.Boolean(true),\n})\nds := api.addOpenSearchDataSource(jsii.String(\"ds\"), domain)\n\nds.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getTests\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jSON.stringify(map[string]interface{}{\n\t\t\"version\": jsii.String(\"2017-02-28\"),\n\t\t\"operation\": jsii.String(\"GET\"),\n\t\t\"path\": jsii.String(\"/id/post/_search\"),\n\t\t\"params\": map[string]map[string]interface{}{\n\t\t\t\"headers\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"queryString\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"body\": map[string]*f64{\n\t\t\t\t\"from\": jsii.Number(0),\n\t\t\t\t\"size\": jsii.Number(50),\n\t\t\t},\n\t\t},\n\t})),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as opensearch from '@aws-cdk/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.RemovalPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addOpenSearchDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync.OpenSearchDataSource",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#userArn",
        "@aws-cdk/aws-opensearchservice.AdvancedSecurityOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_2",
        "@aws-cdk/aws-opensearchservice.IDomain",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "75": 52,
        "104": 2,
        "106": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 9,
        "194": 13,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "f3326accc49eaa3c60bab47881b5d6484c67dced8c536688ae914824564612b4"
    },
    "89418dd11046a0e0123e503898bdb8275e40be7100e4f7862120549071a010cd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nremoval_policy_options = cdk.RemovalPolicyOptions(\n    apply_to_update_replace_policy=False,\n    default=cdk.RemovalPolicy.DESTROY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nRemovalPolicyOptions removalPolicyOptions = new RemovalPolicyOptions {\n    ApplyToUpdateReplacePolicy = false,\n    Default = RemovalPolicy.DESTROY\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nRemovalPolicyOptions removalPolicyOptions = RemovalPolicyOptions.builder()\n        .applyToUpdateReplacePolicy(false)\n        .default(RemovalPolicy.DESTROY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nremovalPolicyOptions := &removalPolicyOptions{\n\tapplyToUpdateReplacePolicy: jsii.Boolean(false),\n\tdefault: cdk.removalPolicy_DESTROY,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst removalPolicyOptions: cdk.RemovalPolicyOptions = {\n  applyToUpdateReplacePolicy: false,\n  default: cdk.RemovalPolicy.DESTROY,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.RemovalPolicyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "@aws-cdk/core.RemovalPolicyOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst removalPolicyOptions: cdk.RemovalPolicyOptions = {\n  applyToUpdateReplacePolicy: false,\n  default: cdk.RemovalPolicy.DESTROY,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c9361032051796e9b0378b0c96b9e4dc538d5d81dca68b543ff7cdfb6bc00e6b"
    },
    "8dae8d5fe7c0abc113918ae15a42166d0bdca1e35ba69700c45eb9f39b470db3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nremove_tag = cdk.RemoveTag(\"key\",\n    apply_to_launched_instances=False,\n    exclude_resource_types=[\"excludeResourceTypes\"],\n    include_resource_types=[\"includeResourceTypes\"],\n    priority=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nRemoveTag removeTag = new RemoveTag(\"key\", new TagProps {\n    ApplyToLaunchedInstances = false,\n    ExcludeResourceTypes = new [] { \"excludeResourceTypes\" },\n    IncludeResourceTypes = new [] { \"includeResourceTypes\" },\n    Priority = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nRemoveTag removeTag = RemoveTag.Builder.create(\"key\")\n        .applyToLaunchedInstances(false)\n        .excludeResourceTypes(List.of(\"excludeResourceTypes\"))\n        .includeResourceTypes(List.of(\"includeResourceTypes\"))\n        .priority(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nremoveTag := cdk.NewRemoveTag(jsii.String(\"key\"), &tagProps{\n\tapplyToLaunchedInstances: jsii.Boolean(false),\n\texcludeResourceTypes: []*string{\n\t\tjsii.String(\"excludeResourceTypes\"),\n\t},\n\tincludeResourceTypes: []*string{\n\t\tjsii.String(\"includeResourceTypes\"),\n\t},\n\tpriority: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst removeTag = new cdk.RemoveTag('key', /* all optional props */ {\n  applyToLaunchedInstances: false,\n  excludeResourceTypes: ['excludeResourceTypes'],\n  includeResourceTypes: ['includeResourceTypes'],\n  priority: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.RemoveTag"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.RemoveTag",
        "@aws-cdk/core.TagProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst removeTag = new cdk.RemoveTag('key', /* all optional props */ {\n  applyToLaunchedInstances: false,\n  excludeResourceTypes: ['excludeResourceTypes'],\n  includeResourceTypes: ['includeResourceTypes'],\n  priority: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 8,
        "91": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "71c46b37ff4bed965a7dd98d2da00ef4f5ec383e142cf84d398acbfa8cef1d51"
    },
    "feb5b5ad6382590cc8b1428606385fd18c82a09703c3c281993231932b1debd8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nresolve_change_context_options = cdk.ResolveChangeContextOptions(\n    allow_intrinsic_keys=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nResolveChangeContextOptions resolveChangeContextOptions = new ResolveChangeContextOptions {\n    AllowIntrinsicKeys = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nResolveChangeContextOptions resolveChangeContextOptions = ResolveChangeContextOptions.builder()\n        .allowIntrinsicKeys(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nresolveChangeContextOptions := &resolveChangeContextOptions{\n\tallowIntrinsicKeys: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst resolveChangeContextOptions: cdk.ResolveChangeContextOptions = {\n  allowIntrinsicKeys: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ResolveChangeContextOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ResolveChangeContextOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resolveChangeContextOptions: cdk.ResolveChangeContextOptions = {\n  allowIntrinsicKeys: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e1a631ce2650c1c4a146cef1d994c1c2dc6e6727de308b63418e1e0d14e49623"
    },
    "4a0f3af3d2944d55acf15993ace3a38608fa527eca7b4885d6505c215cbf7dbc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\nimport constructs as constructs\n\n# construct: constructs.Construct\n# token_resolver: cdk.ITokenResolver\n\nresolve_options = cdk.ResolveOptions(\n    resolver=token_resolver,\n    scope=construct,\n\n    # the properties below are optional\n    preparing=False,\n    remove_empty=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nusing Constructs;\n\nConstruct construct;\nITokenResolver tokenResolver;\nResolveOptions resolveOptions = new ResolveOptions {\n    Resolver = tokenResolver,\n    Scope = construct,\n\n    // the properties below are optional\n    Preparing = false,\n    RemoveEmpty = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\nimport software.constructs.*;\n\nConstruct construct;\nITokenResolver tokenResolver;\n\nResolveOptions resolveOptions = ResolveOptions.builder()\n        .resolver(tokenResolver)\n        .scope(construct)\n\n        // the properties below are optional\n        .preparing(false)\n        .removeEmpty(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"import constructs \"github.com/aws/constructs-go/constructs\"\n\nvar construct construct\nvar tokenResolver iTokenResolver\nresolveOptions := &resolveOptions{\n\tresolver: tokenResolver,\n\tscope: construct,\n\n\t// the properties below are optional\n\tpreparing: jsii.Boolean(false),\n\tremoveEmpty: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const tokenResolver: cdk.ITokenResolver;\nconst resolveOptions: cdk.ResolveOptions = {\n  resolver: tokenResolver,\n  scope: construct,\n\n  // the properties below are optional\n  preparing: false,\n  removeEmpty: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ResolveOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ITokenResolver",
        "@aws-cdk/core.ResolveOptions",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const tokenResolver: cdk.ITokenResolver;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resolveOptions: cdk.ResolveOptions = {\n  resolver: tokenResolver,\n  scope: construct,\n\n  // the properties below are optional\n  preparing: false,\n  removeEmpty: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "91": 2,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0f590eb61672e9d4f12883dc6f5d27637ae3987a6197fb95d646581d523705cb"
    },
    "a29205759290cb1d2f674192b7e70b5275eacc2e83e1b62f9aba8ca0c7f9ecb5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\n\ntype myConstruct struct {\n\tresource\n\ttags\n}\n\nfunc newMyConstruct(scope construct, id *string) *myConstruct {\n\tthis := &myConstruct{}\n\tcdk.NewResource_Override(this, scope, id)\n\n\tcdk.NewCfnResource(this, jsii.String(\"Resource\"), &cfnResourceProps{\n\t\ttype: jsii.String(\"Whatever::The::Type\"),\n\t\tproperties: map[string]interface{}{\n\t\t\t// ...\n\t\t\t\"Tags\": this.tags.renderedTags,\n\t\t},\n\t})\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Resource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "98fc9bd0f49fabd4caf18ad709eae110c8e2975d2df375d1d67fed047643a45c"
    },
    "03d28caa021ec22acca1b4af73dc2655c2b0d58d67ac60f1cdab9e33799821da": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nresource_environment = cdk.ResourceEnvironment(\n    account=\"account\",\n    region=\"region\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nResourceEnvironment resourceEnvironment = new ResourceEnvironment {\n    Account = \"account\",\n    Region = \"region\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nResourceEnvironment resourceEnvironment = ResourceEnvironment.builder()\n        .account(\"account\")\n        .region(\"region\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nresourceEnvironment := &resourceEnvironment{\n\taccount: jsii.String(\"account\"),\n\tregion: jsii.String(\"region\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst resourceEnvironment: cdk.ResourceEnvironment = {\n  account: 'account',\n  region: 'region',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ResourceEnvironment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ResourceEnvironment"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceEnvironment: cdk.ResourceEnvironment = {\n  account: 'account',\n  region: 'region',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1aa29740462c88bf3ce27037fdbc9c99d0b6cf3a3357616540412e8141175792"
    },
    "8bbe9df71f9c9c6d08f6b583b709fc3deb4cf4604193278b6e67f4c95ee20b94": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nresource_props = cdk.ResourceProps(\n    account=\"account\",\n    environment_from_arn=\"environmentFromArn\",\n    physical_name=\"physicalName\",\n    region=\"region\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nResourceProps resourceProps = new ResourceProps {\n    Account = \"account\",\n    EnvironmentFromArn = \"environmentFromArn\",\n    PhysicalName = \"physicalName\",\n    Region = \"region\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nResourceProps resourceProps = ResourceProps.builder()\n        .account(\"account\")\n        .environmentFromArn(\"environmentFromArn\")\n        .physicalName(\"physicalName\")\n        .region(\"region\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nresourceProps := &resourceProps{\n\taccount: jsii.String(\"account\"),\n\tenvironmentFromArn: jsii.String(\"environmentFromArn\"),\n\tphysicalName: jsii.String(\"physicalName\"),\n\tregion: jsii.String(\"region\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst resourceProps: cdk.ResourceProps = {\n  account: 'account',\n  environmentFromArn: 'environmentFromArn',\n  physicalName: 'physicalName',\n  region: 'region',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ResourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceProps: cdk.ResourceProps = {\n  account: 'account',\n  environmentFromArn: 'environmentFromArn',\n  physicalName: 'physicalName',\n  region: 'region',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0cf9ddaa0979d0dd4ca7e5dd1178aac6cac2f624ae02452534eec53900b5a7c5"
    },
    "e7d4f75d3611e10415ad23f8302f5756551c72114bb4c749015146344364aa61": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nreverse_options = cdk.ReverseOptions(\n    fail_concat=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nReverseOptions reverseOptions = new ReverseOptions {\n    FailConcat = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nReverseOptions reverseOptions = ReverseOptions.builder()\n        .failConcat(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nreverseOptions := &reverseOptions{\n\tfailConcat: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst reverseOptions: cdk.ReverseOptions = {\n  failConcat: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ReverseOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ReverseOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst reverseOptions: cdk.ReverseOptions = {\n  failConcat: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9f02804c10eca74dd20377cc67351ea2bc55ac9418fa3223a455790b575d1c98"
    },
    "1b5c80044ddcffd43c2e8bf2c8fa8187035ea9cbca0bcd4f31c48225dea76562": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nscoped_aws = cdk.ScopedAws(self)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nScopedAws scopedAws = new ScopedAws(this);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nScopedAws scopedAws = new ScopedAws(this);",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nscopedAws := cdk.NewScopedAws(this)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst scopedAws = new cdk.ScopedAws(this);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ScopedAws"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ScopedAws"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scopedAws = new cdk.ScopedAws(this);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "1c6479305a60e4f7fcae08d48bc0116bb11948223b59529c64aa574f5ebe2ce2"
    },
    "9daf5f99b8a5016acf279f8576d3f6d717812b3d50a9ab020218adc650eb5c7d": {
      "translations": {
        "python": {
          "source": "# Read the secret from Secrets Manager\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.GitHubSourceAction(\n    action_name=\"GitHub_Source\",\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    oauth_token=SecretValue.secrets_manager(\"my-github-token\"),\n    output=source_output,\n    branch=\"develop\"\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[source_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Read the secret from Secrets Manager\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nGitHubSourceAction sourceAction = new GitHubSourceAction(new GitHubSourceActionProps {\n    ActionName = \"GitHub_Source\",\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    OauthToken = SecretValue.SecretsManager(\"my-github-token\"),\n    Output = sourceOutput,\n    Branch = \"develop\"\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { sourceAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Read the secret from Secrets Manager\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nGitHubSourceAction sourceAction = GitHubSourceAction.Builder.create()\n        .actionName(\"GitHub_Source\")\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n        .output(sourceOutput)\n        .branch(\"develop\")\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(sourceAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Read the secret from Secrets Manager\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewGitHubSourceAction(&gitHubSourceActionProps{\n\tactionName: jsii.String(\"GitHub_Source\"),\n\towner: jsii.String(\"awslabs\"),\n\trepo: jsii.String(\"aws-cdk\"),\n\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\toutput: sourceOutput,\n\tbranch: jsii.String(\"develop\"),\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Source\"),\n\tactions: []iAction{\n\t\tsourceAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Read the secret from Secrets Manager\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'GitHub_Source',\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  output: sourceOutput,\n  branch: 'develop', // default: 'master'\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SecretValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceAction",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Read the secret from Secrets Manager\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'GitHub_Source',\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  output: sourceOutput,\n  branch: 'develop', // default: 'master'\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8
      },
      "fqnsFingerprint": "c492bcbe143d7fb020eb2b6ad114d70cbe226191c25f916f5e598dbb246c69a1"
    },
    "7b7b7edc1442ede2296b55965f8ad840ca62dd7e626ced2e8ff221160fbf7514": {
      "translations": {
        "python": {
          "source": "codebuild.BitBucketSourceCredentials(self, \"CodeBuildBitBucketCreds\",\n    username=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"username\"),\n    password=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"password\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new BitBucketSourceCredentials(this, \"CodeBuildBitBucketCreds\", new BitBucketSourceCredentialsProps {\n    Username = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"username\" }),\n    Password = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"password\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "BitBucketSourceCredentials.Builder.create(this, \"CodeBuildBitBucketCreds\")\n        .username(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"username\").build()))\n        .password(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"password\").build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "codebuild.NewBitBucketSourceCredentials(this, jsii.String(\"CodeBuildBitBucketCreds\"), &bitBucketSourceCredentialsProps{\n\tusername: secretValue.secretsManager(jsii.String(\"my-bitbucket-creds\"), &secretsManagerSecretOptions{\n\t\tjsonField: jsii.String(\"username\"),\n\t}),\n\tpassword: *secretValue.secretsManager(jsii.String(\"my-bitbucket-creds\"), &secretsManagerSecretOptions{\n\t\tjsonField: jsii.String(\"password\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SecretsManagerSecretOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentials",
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "2450fe7a9faa17eb46a34c03c0f38e9fa76f7bbe93e5fac49a4db1f6b7f5805b"
    },
    "85fb1780f3263eb37a32b36d300cb246c0d749251d82b89f66b9d2afba49884a": {
      "translations": {
        "python": {
          "source": "# bucket: s3.Bucket\n# Provide a Lambda function that will transform records before delivery, with custom\n# buffering and retry configuration\nlambda_function = lambda_.Function(self, \"Processor\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"process-records\"))\n)\nlambda_processor = firehose.LambdaFunctionProcessor(lambda_function,\n    buffer_interval=Duration.minutes(5),\n    buffer_size=Size.mebibytes(5),\n    retries=5\n)\ns3_destination = destinations.S3Bucket(bucket,\n    processor=lambda_processor\n)\nfirehose.DeliveryStream(self, \"Delivery Stream\",\n    destinations=[s3_destination]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket;\n// Provide a Lambda function that will transform records before delivery, with custom\n// buffering and retry configuration\nFunction lambdaFunction = new Function(this, \"Processor\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"process-records\"))\n});\nLambdaFunctionProcessor lambdaProcessor = new LambdaFunctionProcessor(lambdaFunction, new DataProcessorProps {\n    BufferInterval = Duration.Minutes(5),\n    BufferSize = Size.Mebibytes(5),\n    Retries = 5\n});\nS3Bucket s3Destination = new S3Bucket(bucket, new S3BucketProps {\n    Processor = lambdaProcessor\n});\nnew DeliveryStream(this, \"Delivery Stream\", new DeliveryStreamProps {\n    Destinations = new [] { s3Destination }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n// Provide a Lambda function that will transform records before delivery, with custom\n// buffering and retry configuration\nFunction lambdaFunction = Function.Builder.create(this, \"Processor\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"process-records\")))\n        .build();\nLambdaFunctionProcessor lambdaProcessor = LambdaFunctionProcessor.Builder.create(lambdaFunction)\n        .bufferInterval(Duration.minutes(5))\n        .bufferSize(Size.mebibytes(5))\n        .retries(5)\n        .build();\nS3Bucket s3Destination = S3Bucket.Builder.create(bucket)\n        .processor(lambdaProcessor)\n        .build();\nDeliveryStream.Builder.create(this, \"Delivery Stream\")\n        .destinations(List.of(s3Destination))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var bucket bucket// Provide a Lambda function that will transform records before delivery, with custom\n// buffering and retry configuration\nlambdaFunction := lambda.NewFunction(this, jsii.String(\"Processor\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_12_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromAsset(path.join(__dirname, jsii.String(\"process-records\"))),\n})\nlambdaProcessor := firehose.NewLambdaFunctionProcessor(lambdaFunction, &dataProcessorProps{\n\tbufferInterval: duration.minutes(jsii.Number(5)),\n\tbufferSize: size.mebibytes(jsii.Number(5)),\n\tretries: jsii.Number(5),\n})\ns3Destination := destinations.NewS3Bucket(bucket, &s3BucketProps{\n\tprocessor: lambdaProcessor,\n})\nfirehose.NewDeliveryStream(this, jsii.String(\"Delivery Stream\"), &deliveryStreamProps{\n\tdestinations: []iDestination{\n\t\ts3Destination,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Provide a Lambda function that will transform records before delivery, with custom\n// buffering and retry configuration\nconst lambdaFunction = new lambda.Function(this, 'Processor', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'process-records')),\n});\nconst lambdaProcessor = new firehose.LambdaFunctionProcessor(lambdaFunction, {\n  bufferInterval: Duration.minutes(5),\n  bufferSize: Size.mebibytes(5),\n  retries: 5,\n});\ndeclare const bucket: s3.Bucket;\nconst s3Destination = new destinations.S3Bucket(bucket, {\n  processor: lambdaProcessor,\n});\nnew firehose.DeliveryStream(this, 'Delivery Stream', {\n  destinations: [s3Destination],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Size"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesisfirehose-destinations.S3Bucket",
        "@aws-cdk/aws-kinesisfirehose-destinations.S3BucketProps",
        "@aws-cdk/aws-kinesisfirehose.DataProcessorProps",
        "@aws-cdk/aws-kinesisfirehose.DeliveryStream",
        "@aws-cdk/aws-kinesisfirehose.DeliveryStreamProps",
        "@aws-cdk/aws-kinesisfirehose.IDataProcessor",
        "@aws-cdk/aws-kinesisfirehose.LambdaFunctionProcessor",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#mebibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Size, Stack } from '@aws-cdk/core';\nimport * as firehose from '@aws-cdk/aws-kinesisfirehose';\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as destinations from '@aws-cdk/aws-kinesisfirehose-destinations';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Provide a Lambda function that will transform records before delivery, with custom\n// buffering and retry configuration\nconst lambdaFunction = new lambda.Function(this, 'Processor', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'process-records')),\n});\nconst lambdaProcessor = new firehose.LambdaFunctionProcessor(lambdaFunction, {\n  bufferInterval: Duration.minutes(5),\n  bufferSize: Size.mebibytes(5),\n  retries: 5,\n});\nconst s3Destination = new destinations.S3Bucket(bucket, {\n  processor: lambdaProcessor,\n});\nnew firehose.DeliveryStream(this, 'Delivery Stream', {\n  destinations: [s3Destination],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 39,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "3e6570f75db543fe10d24a1821da3ca7d1e20eec712f8f1a0b8a69c71481b3da"
    },
    "502e82dc9cc75f7cbd4636a91bbe32e5f74e9bd44c5fac58321464cf27b0eae3": {
      "translations": {
        "python": {
          "source": "Size.mebibytes(2).to_kibibytes() # yields 2048\nSize.kibibytes(2050).to_mebibytes(rounding=SizeRoundingBehavior.FLOOR)",
          "version": "2"
        },
        "csharp": {
          "source": "Size.Mebibytes(2).ToKibibytes(); // yields 2048\nSize.Kibibytes(2050).ToMebibytes(new SizeConversionOptions { Rounding = SizeRoundingBehavior.FLOOR });",
          "version": "1"
        },
        "java": {
          "source": "Size.mebibytes(2).toKibibytes(); // yields 2048\nSize.kibibytes(2050).toMebibytes(SizeConversionOptions.builder().rounding(SizeRoundingBehavior.FLOOR).build());",
          "version": "1"
        },
        "go": {
          "source": "size.mebibytes(jsii.Number(2)).toKibibytes() // yields 2048\nsize.kibibytes(jsii.Number(2050)).toMebibytes(&sizeConversionOptions{\n\trounding: sizeRoundingBehavior_FLOOR,\n})",
          "version": "1"
        },
        "$": {
          "source": "Size.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })  // yields 2",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SizeConversionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Size#kibibytes",
        "@aws-cdk/core.Size#mebibytes",
        "@aws-cdk/core.Size#toKibibytes",
        "@aws-cdk/core.Size#toMebibytes",
        "@aws-cdk/core.SizeConversionOptions",
        "@aws-cdk/core.SizeRoundingBehavior",
        "@aws-cdk/core.SizeRoundingBehavior#FLOOR"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nSize.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 9,
        "193": 1,
        "194": 5,
        "196": 4,
        "226": 2,
        "281": 1
      },
      "fqnsFingerprint": "52730944b088bfd2f3305386e138513bac525fffc6e200f9965ffb94c9fe50ec"
    },
    "c3fb617ddec83bb8967f289657cfab558918922b5086238c97f8e973ca24e04e": {
      "translations": {
        "python": {
          "source": "Size.mebibytes(2).to_kibibytes() # yields 2048\nSize.kibibytes(2050).to_mebibytes(rounding=SizeRoundingBehavior.FLOOR)",
          "version": "2"
        },
        "csharp": {
          "source": "Size.Mebibytes(2).ToKibibytes(); // yields 2048\nSize.Kibibytes(2050).ToMebibytes(new SizeConversionOptions { Rounding = SizeRoundingBehavior.FLOOR });",
          "version": "1"
        },
        "java": {
          "source": "Size.mebibytes(2).toKibibytes(); // yields 2048\nSize.kibibytes(2050).toMebibytes(SizeConversionOptions.builder().rounding(SizeRoundingBehavior.FLOOR).build());",
          "version": "1"
        },
        "go": {
          "source": "size.mebibytes(jsii.Number(2)).toKibibytes() // yields 2048\nsize.kibibytes(jsii.Number(2050)).toMebibytes(&sizeConversionOptions{\n\trounding: sizeRoundingBehavior_FLOOR,\n})",
          "version": "1"
        },
        "$": {
          "source": "Size.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })  // yields 2",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SizeRoundingBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Size#kibibytes",
        "@aws-cdk/core.Size#mebibytes",
        "@aws-cdk/core.Size#toKibibytes",
        "@aws-cdk/core.Size#toMebibytes",
        "@aws-cdk/core.SizeConversionOptions",
        "@aws-cdk/core.SizeRoundingBehavior",
        "@aws-cdk/core.SizeRoundingBehavior#FLOOR"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nSize.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 9,
        "193": 1,
        "194": 5,
        "196": 4,
        "226": 2,
        "281": 1
      },
      "fqnsFingerprint": "52730944b088bfd2f3305386e138513bac525fffc6e200f9965ffb94c9fe50ec"
    },
    "04131828f58367bb1451f26763512a95def6bd0a1ce0726549a466d7c319277d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"import servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTPS,\n\t\tresourcePath: jsii.String(\"/healthcheck\"),\n\t\tfailureThreshold: jsii.Number(2),\n\t},\n})\n\nservice.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n\tport: jsii.Number(443),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Stack"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "28600c84e3474c2a9246491f6336d37f286f51f9df9c5dd323acf176a2ecaf0d"
    },
    "0c4f6bdd9f442fe72c1b7e4d09512c5cc3ede92f1585a19d35669a4ce6e7ea88": {
      "translations": {
        "python": {
          "source": "# stack: Stack\n\n\nstack.add_transform(\"AWS::Serverless-2016-10-31\")",
          "version": "2"
        },
        "csharp": {
          "source": "Stack stack;\n\n\nstack.AddTransform(\"AWS::Serverless-2016-10-31\");",
          "version": "1"
        },
        "java": {
          "source": "Stack stack;\n\n\nstack.addTransform(\"AWS::Serverless-2016-10-31\");",
          "version": "1"
        },
        "go": {
          "source": "var stack stack\n\n\nstack.addTransform(jsii.String(\"AWS::Serverless-2016-10-31\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const stack: Stack;\n\nstack.addTransform('AWS::Serverless-2016-10-31')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.Stack",
          "memberName": "addTransform"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack#addTransform"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nstack.addTransform('AWS::Serverless-2016-10-31')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "130": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "0ce9cfd4f87e6a047f4f40ba0b13ef34282fab04277d5313e39ceac680cceb9a"
    },
    "f94c8fa5d42d4203db08553db3b7b8d07dfa6b18a04eccc1c2967e7825f93058": {
      "translations": {
        "python": {
          "source": "# After resolving, looks like\n\"arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123\"",
          "version": "2"
        },
        "csharp": {
          "source": "// After resolving, looks like\n\"arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123\";",
          "version": "1"
        },
        "java": {
          "source": "// After resolving, looks like\n\"arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123\";",
          "version": "1"
        },
        "go": {
          "source": "// After resolving, looks like\n\"arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123\"",
          "version": "1"
        },
        "$": {
          "source": "// After resolving, looks like\n'arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.Stack",
          "memberName": "stackId"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// After resolving, looks like\n'arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "1078e369fafb7eed3a573e162d2b9abf80438c6edb656d3d84964b2393bec4e0": {
      "translations": {
        "python": {
          "source": "class StackUnderTest(Stack):\n    def __init__(self, scope, id, *, architecture=None, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, architecture=architecture, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        lambda_.Function(self, \"Handler\",\n            runtime=lambda_.Runtime.NODEJS_12_X,\n            handler=\"index.handler\",\n            code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n            architecture=architecture\n        )\n\n# Beginning of the test suite\napp = App()\n\nstack = Stack(app, \"stack\")\nIntegTestCase(stack, \"DifferentArchitectures\",\n    stacks=[\n        StackUnderTest(app, \"Stack1\",\n            architecture=lambda_.Architecture.ARM_64\n        ),\n        StackUnderTest(app, \"Stack2\",\n            architecture=lambda_.Architecture.X86_64\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "class StackUnderTestProps : StackProps\n{\n    public Architecture? Architecture { get; set; }\n}\n\nclass StackUnderTest : Stack\n{\n    public StackUnderTest(Construct scope, string id, StackUnderTestProps props) : base(scope, id, props)\n    {\n\n        new Function(this, \"Handler\", new FunctionProps {\n            Runtime = Runtime.NODEJS_12_X,\n            Handler = \"index.handler\",\n            Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n            Architecture = props.Architecture\n        });\n    }\n}\n\n// Beginning of the test suite\nApp app = new App();\n\nStack stack = new Stack(app, \"stack\");\nnew IntegTestCase(stack, \"DifferentArchitectures\", new IntegTestCaseProps {\n    Stacks = new [] {\n        new StackUnderTest(app, \"Stack1\", new StackUnderTestProps {\n            Architecture = Architecture.ARM_64\n        }),\n        new StackUnderTest(app, \"Stack2\", new StackUnderTestProps {\n            Architecture = Architecture.X86_64\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "public class StackUnderTestProps extends StackProps {\n    private Architecture architecture;\n    public Architecture getArchitecture() {\n        return this.architecture;\n    }\n    public StackUnderTestProps architecture(Architecture architecture) {\n        this.architecture = architecture;\n        return this;\n    }\n}\n\npublic class StackUnderTest extends Stack {\n    public StackUnderTest(Construct scope, String id, StackUnderTestProps props) {\n        super(scope, id, props);\n\n        Function.Builder.create(this, \"Handler\")\n                .runtime(Runtime.NODEJS_12_X)\n                .handler(\"index.handler\")\n                .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n                .architecture(props.getArchitecture())\n                .build();\n    }\n}\n\n// Beginning of the test suite\nApp app = new App();\n\nStack stack = new Stack(app, \"stack\");\nIntegTestCase.Builder.create(stack, \"DifferentArchitectures\")\n        .stacks(List.of(\n            new StackUnderTest(app, \"Stack1\", new StackUnderTestProps()\n                    .architecture(Architecture.ARM_64)\n                    ),\n            new StackUnderTest(app, \"Stack2\", new StackUnderTestProps()\n                    .architecture(Architecture.X86_64)\n                    )))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "type stackUnderTestProps struct {\n\tstackProps\n\tarchitecture architecture\n}\n\ntype stackUnderTest struct {\n\tstack\n}\n\nfunc newStackUnderTest(scope construct, id *string, props stackUnderTestProps) *stackUnderTest {\n\tthis := &stackUnderTest{}\n\tnewStack_Override(this, scope, id, props)\n\n\tlambda.NewFunction(this, jsii.String(\"Handler\"), &functionProps{\n\t\truntime: lambda.runtime_NODEJS_12_X(),\n\t\thandler: jsii.String(\"index.handler\"),\n\t\tcode: lambda.code.fromAsset(path.join(__dirname, jsii.String(\"lambda-handler\"))),\n\t\tarchitecture: props.architecture,\n\t})\n\treturn this\n}\n\n// Beginning of the test suite\napp := NewApp()\n\nstack := NewStack(app, jsii.String(\"stack\"))\nNewIntegTestCase(stack, jsii.String(\"DifferentArchitectures\"), &integTestCaseProps{\n\tstacks: []*stack{\n\t\tNewStackUnderTest(app, jsii.String(\"Stack1\"), &stackUnderTestProps{\n\t\t\tarchitecture: lambda.*architecture_ARM_64(),\n\t\t}),\n\t\tNewStackUnderTest(app, jsii.String(\"Stack2\"), &stackUnderTestProps{\n\t\t\tarchitecture: lambda.*architecture_X86_64(),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "interface StackUnderTestProps extends StackProps {\n  architecture?: lambda.Architecture;\n}\n\nclass StackUnderTest extends Stack {\n  constructor(scope: Construct, id: string, props: StackUnderTestProps) {\n    super(scope, id, props);\n\n    new lambda.Function(this, 'Handler', {\n      runtime: lambda.Runtime.NODEJS_12_X,\n      handler: 'index.handler',\n      code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n      architecture: props.architecture,\n    });\n  }\n}\n\n// Beginning of the test suite\nconst app = new App();\n\nconst stack = new Stack(app, 'stack');\nnew IntegTestCase(stack, 'DifferentArchitectures', {\n  stacks: [\n    new StackUnderTest(app, 'Stack1', {\n      architecture: lambda.Architecture.ARM_64,\n    }),\n    new StackUnderTest(app, 'Stack2', {\n      architecture: lambda.Architecture.X86_64,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.StackProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "@aws-cdk/integ-tests.IntegTestCase",
        "@aws-cdk/integ-tests.IntegTestCaseProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as lambda from '@aws-cdk/aws-lambda';\nimport { IntegTestCase } from '@aws-cdk/integ-tests';\nimport {\n  App,\n  Construct,\n  Stack,\n  StackProps,\n} from '@aws-cdk/core';\nimport * as path from 'path';\nimport { RequireApproval } from '@aws-cdk/cloud-assembly-schema';\n\n// Code snippet begins after !show marker below\n/// !show\ninterface StackUnderTestProps extends StackProps {\n  architecture?: lambda.Architecture;\n}\n\nclass StackUnderTest extends Stack {\n  constructor(scope: Construct, id: string, props: StackUnderTestProps) {\n    super(scope, id, props);\n\n    new lambda.Function(this, 'Handler', {\n      runtime: lambda.Runtime.NODEJS_12_X,\n      handler: 'index.handler',\n      code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n      architecture: props.architecture,\n    });\n  }\n}\n\n// Beginning of the test suite\nconst app = new App();\n\nconst stack = new Stack(app, 'stack');\nnew IntegTestCase(stack, 'DifferentArchitectures', {\n  stacks: [\n    new StackUnderTest(app, 'Stack1', {\n      architecture: lambda.Architecture.ARM_64,\n    }),\n    new StackUnderTest(app, 'Stack2', {\n      architecture: lambda.Architecture.X86_64,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n",
      "syntaxKindCounter": {
        "10": 7,
        "57": 1,
        "75": 52,
        "102": 1,
        "104": 1,
        "143": 1,
        "153": 1,
        "156": 3,
        "158": 1,
        "162": 1,
        "169": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 6,
        "216": 2,
        "223": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "245": 1,
        "246": 1,
        "279": 2,
        "281": 7
      },
      "fqnsFingerprint": "20fe3cc618f7ed3d22980e01d50ae7258c73729af58a913659865b6d5e24cff7"
    },
    "63a21408918dc3dc453eb3e7e87d481a2376ff9c89579318f0a7d3c671b10b36": {
      "translations": {
        "python": {
          "source": "# Use a concrete account and region to deploy this stack to:\n# `.account` and `.region` will simply return these values.\nStack(app, \"Stack1\",\n    env=Environment(\n        account=\"123456789012\",\n        region=\"us-east-1\"\n    )\n)\n\n# Use the CLI's current credentials to determine the target environment:\n# `.account` and `.region` will reflect the account+region the CLI\n# is configured to use (based on the user CLI credentials)\nStack(app, \"Stack2\",\n    env=Environment(\n        account=process.env.CDK_DEFAULT_ACCOUNT,\n        region=process.env.CDK_DEFAULT_REGION\n    )\n)\n\n# Define multiple stacks stage associated with an environment\nmy_stage = Stage(app, \"MyStage\",\n    env=Environment(\n        account=\"123456789012\",\n        region=\"us-east-1\"\n    )\n)\n\n# both of these stacks will use the stage's account/region:\n# `.account` and `.region` will resolve to the concrete values as above\nMyStack(my_stage, \"Stack1\")\nYourStack(my_stage, \"Stack2\")\n\n# Define an environment-agnostic stack:\n# `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n# which will only resolve to actual values by CloudFormation during deployment.\nMyStack(app, \"Stack1\")",
          "version": "2"
        },
        "csharp": {
          "source": "// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\n// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nnew Stack(app, \"Stack1\", new StackProps {\n    Env = new Environment {\n        Account = \"123456789012\",\n        Region = \"us-east-1\"\n    }\n});\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nnew Stack(app, \"Stack2\", new StackProps {\n    Env = new Environment {\n        Account = process.Env.CDK_DEFAULT_ACCOUNT,\n        Region = process.Env.CDK_DEFAULT_REGION\n    }\n});\n\n// Define multiple stacks stage associated with an environment\nStage myStage = new Stage(app, \"MyStage\", new StageProps {\n    Env = new Environment {\n        Account = \"123456789012\",\n        Region = \"us-east-1\"\n    }\n});\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nnew MyStack(myStage, \"Stack1\");\nnew YourStack(myStage, \"Stack2\");\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nnew MyStack(app, \"Stack1\");",
          "version": "1"
        },
        "java": {
          "source": "// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\n// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nStack.Builder.create(app, \"Stack1\")\n        .env(Environment.builder()\n                .account(\"123456789012\")\n                .region(\"us-east-1\")\n                .build())\n        .build();\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nStack.Builder.create(app, \"Stack2\")\n        .env(Environment.builder()\n                .account(process.getEnv().getCDK_DEFAULT_ACCOUNT())\n                .region(process.getEnv().getCDK_DEFAULT_REGION())\n                .build())\n        .build();\n\n// Define multiple stacks stage associated with an environment\nStage myStage = Stage.Builder.create(app, \"MyStage\")\n        .env(Environment.builder()\n                .account(\"123456789012\")\n                .region(\"us-east-1\")\n                .build())\n        .build();\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nnew MyStack(myStage, \"Stack1\");\nnew YourStack(myStage, \"Stack2\");\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nnew MyStack(app, \"Stack1\");",
          "version": "1"
        },
        "go": {
          "source": "// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\n// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nNewStack(app, jsii.String(\"Stack1\"), &stackProps{\n\tenv: &environment{\n\t\taccount: jsii.String(\"123456789012\"),\n\t\tregion: jsii.String(\"us-east-1\"),\n\t},\n})\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nNewStack(app, jsii.String(\"Stack2\"), &stackProps{\n\tenv: &environment{\n\t\taccount: process.env.cDK_DEFAULT_ACCOUNT,\n\t\tregion: process.env.cDK_DEFAULT_REGION,\n\t},\n})\n\n// Define multiple stacks stage associated with an environment\nmyStage := NewStage(app, jsii.String(\"MyStage\"), &stageProps{\n\tenv: &environment{\n\t\taccount: jsii.String(\"123456789012\"),\n\t\tregion: jsii.String(\"us-east-1\"),\n\t},\n})\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nNewMyStack(myStage, jsii.String(\"Stack1\"))\nNewYourStack(myStage, jsii.String(\"Stack2\"))\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nNewMyStack(app, jsii.String(\"Stack1\"))",
          "version": "1"
        },
        "$": {
          "source": "// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nnew Stack(app, 'Stack1', {\n  env: {\n    account: '123456789012',\n    region: 'us-east-1'\n  },\n});\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nnew Stack(app, 'Stack2', {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_DEFAULT_REGION\n  },\n});\n\n// Define multiple stacks stage associated with an environment\nconst myStage = new Stage(app, 'MyStage', {\n  env: {\n    account: '123456789012',\n    region: 'us-east-1'\n  }\n});\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nnew MyStack(myStage, 'Stack1');\nnew YourStack(myStage, 'Stack2');\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nnew MyStack(app, 'Stack1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.StackProps",
          "memberName": "env"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nnew Stack(app, 'Stack1', {\n  env: {\n    account: '123456789012',\n    region: 'us-east-1'\n  },\n});\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nnew Stack(app, 'Stack2', {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_DEFAULT_REGION\n  },\n});\n\n// Define multiple stacks stage associated with an environment\nconst myStage = new Stage(app, 'MyStage', {\n  env: {\n    account: '123456789012',\n    region: 'us-east-1'\n  }\n});\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nnew MyStack(myStage, 'Stack1');\nnew YourStack(myStage, 'Stack2');\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nnew MyStack(app, 'Stack1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 28,
        "193": 6,
        "194": 4,
        "197": 6,
        "225": 1,
        "226": 5,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "959e647b59c9072be2bc0417310a45f966bfee5a414ed2487401990efd4e580e"
    },
    "be05006243a00b7902440cc0367b2a1c81b243c7c9fb160abcb50ff3f875d489": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\nclass MyOutputStage(Stage):\n\n    def __init__(self, scope, id, *, env=None, outdir=None):\n        super().__init__(scope, id, env=env, outdir=outdir)\n        self.load_balancer_address = CfnOutput(self, \"Output\", value=\"value\")\n\nlb_app = MyOutputStage(self, \"MyApp\")\npipeline.add_stage(lb_app,\n    post=[\n        pipelines.ShellStep(\"HitEndpoint\",\n            env_from_cfn_outputs={\n                # Make the load balancer address available as $URL inside the commands\n                \"URL\": lb_app.load_balancer_address\n            },\n            commands=[\"curl -Ssf $URL\"]\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\nclass MyOutputStage : Stage\n{\n    public CfnOutput LoadBalancerAddress { get; }\n\n    public MyOutputStage(Construct scope, string id, StageProps? props=null) : base(scope, id, props)\n    {\n        LoadBalancerAddress = new CfnOutput(this, \"Output\", new CfnOutputProps { Value = \"value\" });\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.AddStage(lbApp, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"HitEndpoint\", new ShellStepProps {\n            EnvFromCfnOutputs = new Dictionary<string, CfnOutput> {\n                // Make the load balancer address available as $URL inside the commands\n                { \"URL\", lbApp.LoadBalancerAddress }\n            },\n            Commands = new [] { \"curl -Ssf $URL\" }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\npublic class MyOutputStage extends Stage {\n    public final CfnOutput loadBalancerAddress;\n\n    public MyOutputStage(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyOutputStage(Construct scope, String id, StageProps props) {\n        super(scope, id, props);\n        this.loadBalancerAddress = CfnOutput.Builder.create(this, \"Output\").value(\"value\").build();\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.addStage(lbApp, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"HitEndpoint\")\n                    .envFromCfnOutputs(Map.of(\n                            // Make the load balancer address available as $URL inside the commands\n                            \"URL\", lbApp.getLoadBalancerAddress()))\n                    .commands(List.of(\"curl -Ssf $URL\"))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline codePipelinetype myOutputStage struct {\n\tstage\n\tloadBalancerAddress cfnOutput\n}\n\nfunc newMyOutputStage(scope construct, id *string, props stageProps) *myOutputStage {\n\tthis := &myOutputStage{}\n\tnewStage_Override(this, scope, id, props)\n\tthis.loadBalancerAddress = NewCfnOutput(this, jsii.String(\"Output\"), &cfnOutputProps{\n\t\tvalue: jsii.String(\"value\"),\n\t})\n\treturn this\n}\n\nlbApp := NewMyOutputStage(this, jsii.String(\"MyApp\"))\npipeline.addStage(lbApp, &addStageOpts{\n\tpost: []step{\n\t\tpipelines.NewShellStep(jsii.String(\"HitEndpoint\"), &shellStepProps{\n\t\t\tenvFromCfnOutputs: map[string]*cfnOutput{\n\t\t\t\t// Make the load balancer address available as $URL inside the commands\n\t\t\t\t\"URL\": lbApp.loadBalancerAddress,\n\t\t\t},\n\t\t\tcommands: []*string{\n\t\t\t\tjsii.String(\"curl -Ssf $URL\"),\n\t\t\t},\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "class MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\ndeclare const pipeline: pipelines.CodePipeline;\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Stage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "57": 1,
        "62": 1,
        "75": 31,
        "102": 1,
        "104": 3,
        "119": 1,
        "130": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 3,
        "159": 1,
        "162": 1,
        "169": 4,
        "192": 2,
        "193": 4,
        "194": 4,
        "196": 2,
        "197": 3,
        "209": 1,
        "216": 1,
        "223": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "245": 1,
        "279": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a8627e92ae5d7f97bfd1070c9c7b4a471944d46583b5e721fe784a586dd9ecf3"
    },
    "14a3c44e75e88a4d89eeb51e0b73318aa756f7772b3050b40a49d5a27cb09f14": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\nclass MyOutputStage(Stage):\n\n    def __init__(self, scope, id, *, env=None, outdir=None):\n        super().__init__(scope, id, env=env, outdir=outdir)\n        self.load_balancer_address = CfnOutput(self, \"Output\", value=\"value\")\n\nlb_app = MyOutputStage(self, \"MyApp\")\npipeline.add_stage(lb_app,\n    post=[\n        pipelines.ShellStep(\"HitEndpoint\",\n            env_from_cfn_outputs={\n                # Make the load balancer address available as $URL inside the commands\n                \"URL\": lb_app.load_balancer_address\n            },\n            commands=[\"curl -Ssf $URL\"]\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\nclass MyOutputStage : Stage\n{\n    public CfnOutput LoadBalancerAddress { get; }\n\n    public MyOutputStage(Construct scope, string id, StageProps? props=null) : base(scope, id, props)\n    {\n        LoadBalancerAddress = new CfnOutput(this, \"Output\", new CfnOutputProps { Value = \"value\" });\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.AddStage(lbApp, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"HitEndpoint\", new ShellStepProps {\n            EnvFromCfnOutputs = new Dictionary<string, CfnOutput> {\n                // Make the load balancer address available as $URL inside the commands\n                { \"URL\", lbApp.LoadBalancerAddress }\n            },\n            Commands = new [] { \"curl -Ssf $URL\" }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\npublic class MyOutputStage extends Stage {\n    public final CfnOutput loadBalancerAddress;\n\n    public MyOutputStage(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyOutputStage(Construct scope, String id, StageProps props) {\n        super(scope, id, props);\n        this.loadBalancerAddress = CfnOutput.Builder.create(this, \"Output\").value(\"value\").build();\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.addStage(lbApp, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"HitEndpoint\")\n                    .envFromCfnOutputs(Map.of(\n                            // Make the load balancer address available as $URL inside the commands\n                            \"URL\", lbApp.getLoadBalancerAddress()))\n                    .commands(List.of(\"curl -Ssf $URL\"))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline codePipelinetype myOutputStage struct {\n\tstage\n\tloadBalancerAddress cfnOutput\n}\n\nfunc newMyOutputStage(scope construct, id *string, props stageProps) *myOutputStage {\n\tthis := &myOutputStage{}\n\tnewStage_Override(this, scope, id, props)\n\tthis.loadBalancerAddress = NewCfnOutput(this, jsii.String(\"Output\"), &cfnOutputProps{\n\t\tvalue: jsii.String(\"value\"),\n\t})\n\treturn this\n}\n\nlbApp := NewMyOutputStage(this, jsii.String(\"MyApp\"))\npipeline.addStage(lbApp, &addStageOpts{\n\tpost: []step{\n\t\tpipelines.NewShellStep(jsii.String(\"HitEndpoint\"), &shellStepProps{\n\t\t\tenvFromCfnOutputs: map[string]*cfnOutput{\n\t\t\t\t// Make the load balancer address available as $URL inside the commands\n\t\t\t\t\"URL\": lbApp.loadBalancerAddress,\n\t\t\t},\n\t\t\tcommands: []*string{\n\t\t\t\tjsii.String(\"curl -Ssf $URL\"),\n\t\t\t},\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "class MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\ndeclare const pipeline: pipelines.CodePipeline;\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.StageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "57": 1,
        "62": 1,
        "75": 31,
        "102": 1,
        "104": 3,
        "119": 1,
        "130": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 3,
        "159": 1,
        "162": 1,
        "169": 4,
        "192": 2,
        "193": 4,
        "194": 4,
        "196": 2,
        "197": 3,
        "209": 1,
        "216": 1,
        "223": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "245": 1,
        "279": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a8627e92ae5d7f97bfd1070c9c7b4a471944d46583b5e721fe784a586dd9ecf3"
    },
    "69adbb9ee1d79dddb3a5c58adb96665e73ae3eef243e110e793cb2f9f94460a7": {
      "translations": {
        "python": {
          "source": "# Use a concrete account and region to deploy this Stage to\nStage(app, \"Stage1\",\n    env=Environment(account=\"123456789012\", region=\"us-east-1\")\n)\n\n# Use the CLI's current credentials to determine the target environment\nStage(app, \"Stage2\",\n    env=Environment(account=process.env.CDK_DEFAULT_ACCOUNT, region=process.env.CDK_DEFAULT_REGION)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Use a concrete account and region to deploy this Stage to\n// Use a concrete account and region to deploy this Stage to\nnew Stage(app, \"Stage1\", new StageProps {\n    Env = new Environment { Account = \"123456789012\", Region = \"us-east-1\" }\n});\n\n// Use the CLI's current credentials to determine the target environment\n// Use the CLI's current credentials to determine the target environment\nnew Stage(app, \"Stage2\", new StageProps {\n    Env = new Environment { Account = process.Env.CDK_DEFAULT_ACCOUNT, Region = process.Env.CDK_DEFAULT_REGION }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Use a concrete account and region to deploy this Stage to\n// Use a concrete account and region to deploy this Stage to\nStage.Builder.create(app, \"Stage1\")\n        .env(Environment.builder().account(\"123456789012\").region(\"us-east-1\").build())\n        .build();\n\n// Use the CLI's current credentials to determine the target environment\n// Use the CLI's current credentials to determine the target environment\nStage.Builder.create(app, \"Stage2\")\n        .env(Environment.builder().account(process.getEnv().getCDK_DEFAULT_ACCOUNT()).region(process.getEnv().getCDK_DEFAULT_REGION()).build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Use a concrete account and region to deploy this Stage to\n// Use a concrete account and region to deploy this Stage to\nNewStage(app, jsii.String(\"Stage1\"), &stageProps{\n\tenv: &environment{\n\t\taccount: jsii.String(\"123456789012\"),\n\t\tregion: jsii.String(\"us-east-1\"),\n\t},\n})\n\n// Use the CLI's current credentials to determine the target environment\n// Use the CLI's current credentials to determine the target environment\nNewStage(app, jsii.String(\"Stage2\"), &stageProps{\n\tenv: &environment{\n\t\taccount: process.env.cDK_DEFAULT_ACCOUNT,\n\t\tregion: process.env.cDK_DEFAULT_REGION,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Use a concrete account and region to deploy this Stage to\nnew Stage(app, 'Stage1', {\n  env: { account: '123456789012', region: 'us-east-1' },\n});\n\n// Use the CLI's current credentials to determine the target environment\nnew Stage(app, 'Stage2', {\n  env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.StageProps",
          "memberName": "env"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Use a concrete account and region to deploy this Stage to\nnew Stage(app, 'Stage1', {\n  env: { account: '123456789012', region: 'us-east-1' },\n});\n\n// Use the CLI's current credentials to determine the target environment\nnew Stage(app, 'Stage2', {\n  env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "193": 4,
        "194": 4,
        "197": 2,
        "226": 2,
        "281": 6
      },
      "fqnsFingerprint": "a57ab53ee64b066e1c6a4eab72949f4fb394b066ea1cc48faceadf8596572b38"
    },
    "a4064cc622b140f2cc949c44bc5d6a9c3b8b6f19a44825ef8b7d77458e623620": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nstage_synthesis_options = cdk.StageSynthesisOptions(\n    force=False,\n    skip_validation=False,\n    validate_on_synthesis=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nStageSynthesisOptions stageSynthesisOptions = new StageSynthesisOptions {\n    Force = false,\n    SkipValidation = false,\n    ValidateOnSynthesis = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nStageSynthesisOptions stageSynthesisOptions = StageSynthesisOptions.builder()\n        .force(false)\n        .skipValidation(false)\n        .validateOnSynthesis(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nstageSynthesisOptions := &stageSynthesisOptions{\n\tforce: jsii.Boolean(false),\n\tskipValidation: jsii.Boolean(false),\n\tvalidateOnSynthesis: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst stageSynthesisOptions: cdk.StageSynthesisOptions = {\n  force: false,\n  skipValidation: false,\n  validateOnSynthesis: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.StageSynthesisOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.StageSynthesisOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageSynthesisOptions: cdk.StageSynthesisOptions = {\n  force: false,\n  skipValidation: false,\n  validateOnSynthesis: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "91": 3,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6ee0d7316e39d0aae5a8400b3a49f9fc250e7d1b94c7aaf998a7fa9ac5331c48"
    },
    "c8f041ec640c91becdb9d862140c7dabb9de01298bde95dcb29f9b08ef08e5fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nstring_concat = cdk.StringConcat()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nStringConcat stringConcat = new StringConcat();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nStringConcat stringConcat = new StringConcat();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nstringConcat := cdk.NewStringConcat()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst stringConcat = new cdk.StringConcat();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.StringConcat"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.StringConcat"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stringConcat = new cdk.StringConcat();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "df4feedf3d5a1932ac40155f89334b33ee65614d8fd79a46db96487506ade17b"
    },
    "e903d67562dffdf3ba5a421d5b270dad2703946e15a0a898851921ba5368e201": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nsynthesis_options = cdk.SynthesisOptions(\n    outdir=\"outdir\",\n    runtime_info=RuntimeInfo(\n        libraries={\n            \"libraries_key\": \"libraries\"\n        }\n    ),\n    skip_validation=False,\n    validate_on_synthesis=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nSynthesisOptions synthesisOptions = new SynthesisOptions {\n    Outdir = \"outdir\",\n    RuntimeInfo = new RuntimeInfo {\n        Libraries = new Dictionary<string, string> {\n            { \"librariesKey\", \"libraries\" }\n        }\n    },\n    SkipValidation = false,\n    ValidateOnSynthesis = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nSynthesisOptions synthesisOptions = SynthesisOptions.builder()\n        .outdir(\"outdir\")\n        .runtimeInfo(RuntimeInfo.builder()\n                .libraries(Map.of(\n                        \"librariesKey\", \"libraries\"))\n                .build())\n        .skipValidation(false)\n        .validateOnSynthesis(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nsynthesisOptions := &synthesisOptions{\n\toutdir: jsii.String(\"outdir\"),\n\truntimeInfo: &runtimeInfo{\n\t\tlibraries: map[string]*string{\n\t\t\t\"librariesKey\": jsii.String(\"libraries\"),\n\t\t},\n\t},\n\tskipValidation: jsii.Boolean(false),\n\tvalidateOnSynthesis: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst synthesisOptions: cdk.SynthesisOptions = {\n  outdir: 'outdir',\n  runtimeInfo: {\n    libraries: {\n      librariesKey: 'libraries',\n    },\n  },\n  skipValidation: false,\n  validateOnSynthesis: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SynthesisOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.SynthesisOptions",
        "@aws-cdk/cx-api.RuntimeInfo"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst synthesisOptions: cdk.SynthesisOptions = {\n  outdir: 'outdir',\n  runtimeInfo: {\n    libraries: {\n      librariesKey: 'libraries',\n    },\n  },\n  skipValidation: false,\n  validateOnSynthesis: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "42fb3e416acba237362d77ee4c7685ff913d0063f2dc22424687c141febe8dda"
    },
    "914d81ef947b1f2d20e2d92478c9f7885d8bd8a92508088cf7bcdd681c158fd7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\nsynthesize_stack_artifact_options = cdk.SynthesizeStackArtifactOptions(\n    additional_dependencies=[\"additionalDependencies\"],\n    assume_role_arn=\"assumeRoleArn\",\n    assume_role_external_id=\"assumeRoleExternalId\",\n    bootstrap_stack_version_ssm_parameter=\"bootstrapStackVersionSsmParameter\",\n    cloud_formation_execution_role_arn=\"cloudFormationExecutionRoleArn\",\n    lookup_role=BootstrapRole(\n        arn=\"arn\",\n\n        # the properties below are optional\n        assume_role_external_id=\"assumeRoleExternalId\",\n        bootstrap_stack_version_ssm_parameter=\"bootstrapStackVersionSsmParameter\",\n        requires_bootstrap_stack_version=123\n    ),\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    requires_bootstrap_stack_version=123,\n    stack_template_asset_object_url=\"stackTemplateAssetObjectUrl\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nSynthesizeStackArtifactOptions synthesizeStackArtifactOptions = new SynthesizeStackArtifactOptions {\n    AdditionalDependencies = new [] { \"additionalDependencies\" },\n    AssumeRoleArn = \"assumeRoleArn\",\n    AssumeRoleExternalId = \"assumeRoleExternalId\",\n    BootstrapStackVersionSsmParameter = \"bootstrapStackVersionSsmParameter\",\n    CloudFormationExecutionRoleArn = \"cloudFormationExecutionRoleArn\",\n    LookupRole = new BootstrapRole {\n        Arn = \"arn\",\n\n        // the properties below are optional\n        AssumeRoleExternalId = \"assumeRoleExternalId\",\n        BootstrapStackVersionSsmParameter = \"bootstrapStackVersionSsmParameter\",\n        RequiresBootstrapStackVersion = 123\n    },\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    RequiresBootstrapStackVersion = 123,\n    StackTemplateAssetObjectUrl = \"stackTemplateAssetObjectUrl\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nSynthesizeStackArtifactOptions synthesizeStackArtifactOptions = SynthesizeStackArtifactOptions.builder()\n        .additionalDependencies(List.of(\"additionalDependencies\"))\n        .assumeRoleArn(\"assumeRoleArn\")\n        .assumeRoleExternalId(\"assumeRoleExternalId\")\n        .bootstrapStackVersionSsmParameter(\"bootstrapStackVersionSsmParameter\")\n        .cloudFormationExecutionRoleArn(\"cloudFormationExecutionRoleArn\")\n        .lookupRole(BootstrapRole.builder()\n                .arn(\"arn\")\n\n                // the properties below are optional\n                .assumeRoleExternalId(\"assumeRoleExternalId\")\n                .bootstrapStackVersionSsmParameter(\"bootstrapStackVersionSsmParameter\")\n                .requiresBootstrapStackVersion(123)\n                .build())\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .requiresBootstrapStackVersion(123)\n        .stackTemplateAssetObjectUrl(\"stackTemplateAssetObjectUrl\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nsynthesizeStackArtifactOptions := &synthesizeStackArtifactOptions{\n\tadditionalDependencies: []*string{\n\t\tjsii.String(\"additionalDependencies\"),\n\t},\n\tassumeRoleArn: jsii.String(\"assumeRoleArn\"),\n\tassumeRoleExternalId: jsii.String(\"assumeRoleExternalId\"),\n\tbootstrapStackVersionSsmParameter: jsii.String(\"bootstrapStackVersionSsmParameter\"),\n\tcloudFormationExecutionRoleArn: jsii.String(\"cloudFormationExecutionRoleArn\"),\n\tlookupRole: &bootstrapRole{\n\t\tarn: jsii.String(\"arn\"),\n\n\t\t// the properties below are optional\n\t\tassumeRoleExternalId: jsii.String(\"assumeRoleExternalId\"),\n\t\tbootstrapStackVersionSsmParameter: jsii.String(\"bootstrapStackVersionSsmParameter\"),\n\t\trequiresBootstrapStackVersion: jsii.Number(123),\n\t},\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\trequiresBootstrapStackVersion: jsii.Number(123),\n\tstackTemplateAssetObjectUrl: jsii.String(\"stackTemplateAssetObjectUrl\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst synthesizeStackArtifactOptions: cdk.SynthesizeStackArtifactOptions = {\n  additionalDependencies: ['additionalDependencies'],\n  assumeRoleArn: 'assumeRoleArn',\n  assumeRoleExternalId: 'assumeRoleExternalId',\n  bootstrapStackVersionSsmParameter: 'bootstrapStackVersionSsmParameter',\n  cloudFormationExecutionRoleArn: 'cloudFormationExecutionRoleArn',\n  lookupRole: {\n    arn: 'arn',\n\n    // the properties below are optional\n    assumeRoleExternalId: 'assumeRoleExternalId',\n    bootstrapStackVersionSsmParameter: 'bootstrapStackVersionSsmParameter',\n    requiresBootstrapStackVersion: 123,\n  },\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  requiresBootstrapStackVersion: 123,\n  stackTemplateAssetObjectUrl: 'stackTemplateAssetObjectUrl',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SynthesizeStackArtifactOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/cloud-assembly-schema.BootstrapRole",
        "@aws-cdk/core.SynthesizeStackArtifactOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst synthesizeStackArtifactOptions: cdk.SynthesizeStackArtifactOptions = {\n  additionalDependencies: ['additionalDependencies'],\n  assumeRoleArn: 'assumeRoleArn',\n  assumeRoleExternalId: 'assumeRoleExternalId',\n  bootstrapStackVersionSsmParameter: 'bootstrapStackVersionSsmParameter',\n  cloudFormationExecutionRoleArn: 'cloudFormationExecutionRoleArn',\n  lookupRole: {\n    arn: 'arn',\n\n    // the properties below are optional\n    assumeRoleExternalId: 'assumeRoleExternalId',\n    bootstrapStackVersionSsmParameter: 'bootstrapStackVersionSsmParameter',\n    requiresBootstrapStackVersion: 123,\n  },\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  requiresBootstrapStackVersion: 123,\n  stackTemplateAssetObjectUrl: 'stackTemplateAssetObjectUrl',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 18,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "8ef764497b36614195fc80c12d7f1b695b4c84794d48dff900ccc6a7c8837fc0"
    },
    "e56ea5a27ceffbd595d3908311d2411b022653d71f9d79b2fd44c7359e77ece1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ntag = cdk.Tag(\"key\", \"value\",\n    apply_to_launched_instances=False,\n    exclude_resource_types=[\"excludeResourceTypes\"],\n    include_resource_types=[\"includeResourceTypes\"],\n    priority=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nTag tag = new Tag(\"key\", \"value\", new TagProps {\n    ApplyToLaunchedInstances = false,\n    ExcludeResourceTypes = new [] { \"excludeResourceTypes\" },\n    IncludeResourceTypes = new [] { \"includeResourceTypes\" },\n    Priority = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nTag tag = Tag.Builder.create(\"key\", \"value\")\n        .applyToLaunchedInstances(false)\n        .excludeResourceTypes(List.of(\"excludeResourceTypes\"))\n        .includeResourceTypes(List.of(\"includeResourceTypes\"))\n        .priority(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ntag := cdk.NewTag(jsii.String(\"key\"), jsii.String(\"value\"), &tagProps{\n\tapplyToLaunchedInstances: jsii.Boolean(false),\n\texcludeResourceTypes: []*string{\n\t\tjsii.String(\"excludeResourceTypes\"),\n\t},\n\tincludeResourceTypes: []*string{\n\t\tjsii.String(\"includeResourceTypes\"),\n\t},\n\tpriority: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst tag = new cdk.Tag('key', 'value', /* all optional props */ {\n  applyToLaunchedInstances: false,\n  excludeResourceTypes: ['excludeResourceTypes'],\n  includeResourceTypes: ['includeResourceTypes'],\n  priority: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Tag"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Tag",
        "@aws-cdk/core.TagProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tag = new cdk.Tag('key', 'value', /* all optional props */ {\n  applyToLaunchedInstances: false,\n  excludeResourceTypes: ['excludeResourceTypes'],\n  includeResourceTypes: ['includeResourceTypes'],\n  priority: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 8,
        "91": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "93c10011eb935feb8a56fe491f437b4601a30d1e6c99718cd3852ea4d5112e95"
    },
    "88f862b6234b20d2634012d113dd72dd45927e432577e96aff00b243b0173ecf": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\n\ntype myConstruct struct {\n\tresource\n\ttags\n}\n\nfunc newMyConstruct(scope construct, id *string) *myConstruct {\n\tthis := &myConstruct{}\n\tcdk.NewResource_Override(this, scope, id)\n\n\tcdk.NewCfnResource(this, jsii.String(\"Resource\"), &cfnResourceProps{\n\t\ttype: jsii.String(\"Whatever::The::Type\"),\n\t\tproperties: map[string]interface{}{\n\t\t\t// ...\n\t\t\t\"Tags\": this.tags.renderedTags,\n\t\t},\n\t})\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TagManager"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "98fc9bd0f49fabd4caf18ad709eae110c8e2975d2df375d1d67fed047643a45c"
    },
    "320ffd5592b83376c3612574a51077e653188a7225f5ddea177a55d552df6493": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ntag_manager_options = cdk.TagManagerOptions(\n    tag_property_name=\"tagPropertyName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nTagManagerOptions tagManagerOptions = new TagManagerOptions {\n    TagPropertyName = \"tagPropertyName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nTagManagerOptions tagManagerOptions = TagManagerOptions.builder()\n        .tagPropertyName(\"tagPropertyName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ntagManagerOptions := &tagManagerOptions{\n\ttagPropertyName: jsii.String(\"tagPropertyName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst tagManagerOptions: cdk.TagManagerOptions = {\n  tagPropertyName: 'tagPropertyName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TagManagerOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.TagManagerOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagManagerOptions: cdk.TagManagerOptions = {\n  tagPropertyName: 'tagPropertyName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "bd584021a7690266eae84d1f34878af6f27000b07b59c9aace028c4b7d801864"
    },
    "8bb50c419c262a39d43a91d94378803077ebbadcecf2c792e440c9bfcda92cb4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ntag_props = cdk.TagProps(\n    apply_to_launched_instances=False,\n    exclude_resource_types=[\"excludeResourceTypes\"],\n    include_resource_types=[\"includeResourceTypes\"],\n    priority=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nTagProps tagProps = new TagProps {\n    ApplyToLaunchedInstances = false,\n    ExcludeResourceTypes = new [] { \"excludeResourceTypes\" },\n    IncludeResourceTypes = new [] { \"includeResourceTypes\" },\n    Priority = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nTagProps tagProps = TagProps.builder()\n        .applyToLaunchedInstances(false)\n        .excludeResourceTypes(List.of(\"excludeResourceTypes\"))\n        .includeResourceTypes(List.of(\"includeResourceTypes\"))\n        .priority(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ntagProps := &tagProps{\n\tapplyToLaunchedInstances: jsii.Boolean(false),\n\texcludeResourceTypes: []*string{\n\t\tjsii.String(\"excludeResourceTypes\"),\n\t},\n\tincludeResourceTypes: []*string{\n\t\tjsii.String(\"includeResourceTypes\"),\n\t},\n\tpriority: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst tagProps: cdk.TagProps = {\n  applyToLaunchedInstances: false,\n  excludeResourceTypes: ['excludeResourceTypes'],\n  includeResourceTypes: ['includeResourceTypes'],\n  priority: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TagProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.TagProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagProps: cdk.TagProps = {\n  applyToLaunchedInstances: false,\n  excludeResourceTypes: ['excludeResourceTypes'],\n  includeResourceTypes: ['includeResourceTypes'],\n  priority: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c5508bb5fbea5d3dcfb1caad43cd88c2e1f91a0fcb4167786b4260bdb9da3c2b"
    },
    "20c7b7dc589639f035f857055b9e97c5b015356f043c7680c9a6def4fac0d75c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\n\ntype myConstruct struct {\n\tresource\n\ttags\n}\n\nfunc newMyConstruct(scope construct, id *string) *myConstruct {\n\tthis := &myConstruct{}\n\tcdk.NewResource_Override(this, scope, id)\n\n\tcdk.NewCfnResource(this, jsii.String(\"Resource\"), &cfnResourceProps{\n\t\ttype: jsii.String(\"Whatever::The::Type\"),\n\t\tproperties: map[string]interface{}{\n\t\t\t// ...\n\t\t\t\"Tags\": this.tags.renderedTags,\n\t\t},\n\t})\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TagType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DefaultStackSynthesizer,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "98fc9bd0f49fabd4caf18ad709eae110c8e2975d2df375d1d67fed047643a45c"
    },
    "baa523ac412000e7bdbc86c153a4980635a4aacd64692d5d55ac9c6745391b32": {
      "translations": {
        "python": {
          "source": "# mesh: appmesh.Mesh\n# service: cloudmap.Service\n\n\nnode = appmesh.VirtualNode(self, \"node\",\n    mesh=mesh,\n    service_discovery=appmesh.ServiceDiscovery.cloud_map(service),\n    listeners=[appmesh.VirtualNodeListener.http(\n        port=8080,\n        health_check=appmesh.HealthCheck.http(\n            healthy_threshold=3,\n            interval=cdk.Duration.seconds(5),\n            path=\"/ping\",\n            timeout=cdk.Duration.seconds(2),\n            unhealthy_threshold=2\n        ),\n        timeout=appmesh.HttpTimeout(\n            idle=cdk.Duration.seconds(5)\n        )\n    )],\n    backend_defaults=appmesh.BackendDefaults(\n        tls_client_policy=appmesh.TlsClientPolicy(\n            validation=appmesh.TlsValidation(\n                trust=appmesh.TlsValidationTrust.file(\"/keys/local_cert_chain.pem\")\n            )\n        )\n    ),\n    access_log=appmesh.AccessLog.from_file_path(\"/dev/stdout\")\n)\n\ncdk.Tags.of(node).add(\"Environment\", \"Dev\")",
          "version": "2"
        },
        "csharp": {
          "source": "Mesh mesh;\nService service;\n\n\nVirtualNode node = new VirtualNode(this, \"node\", new VirtualNodeProps {\n    Mesh = mesh,\n    ServiceDiscovery = ServiceDiscovery.CloudMap(service),\n    Listeners = new [] { VirtualNodeListener.Http(new HttpVirtualNodeListenerOptions {\n        Port = 8080,\n        HealthCheck = HealthCheck.Http(new HttpHealthCheckOptions {\n            HealthyThreshold = 3,\n            Interval = Duration.Seconds(5),\n            Path = \"/ping\",\n            Timeout = Duration.Seconds(2),\n            UnhealthyThreshold = 2\n        }),\n        Timeout = new HttpTimeout {\n            Idle = Duration.Seconds(5)\n        }\n    }) },\n    BackendDefaults = new BackendDefaults {\n        TlsClientPolicy = new TlsClientPolicy {\n            Validation = new TlsValidation {\n                Trust = TlsValidationTrust.File(\"/keys/local_cert_chain.pem\")\n            }\n        }\n    },\n    AccessLog = AccessLog.FromFilePath(\"/dev/stdout\")\n});\n\nTags.Of(node).Add(\"Environment\", \"Dev\");",
          "version": "1"
        },
        "java": {
          "source": "Mesh mesh;\nService service;\n\n\nVirtualNode node = VirtualNode.Builder.create(this, \"node\")\n        .mesh(mesh)\n        .serviceDiscovery(ServiceDiscovery.cloudMap(service))\n        .listeners(List.of(VirtualNodeListener.http(HttpVirtualNodeListenerOptions.builder()\n                .port(8080)\n                .healthCheck(HealthCheck.http(HttpHealthCheckOptions.builder()\n                        .healthyThreshold(3)\n                        .interval(Duration.seconds(5))\n                        .path(\"/ping\")\n                        .timeout(Duration.seconds(2))\n                        .unhealthyThreshold(2)\n                        .build()))\n                .timeout(HttpTimeout.builder()\n                        .idle(Duration.seconds(5))\n                        .build())\n                .build())))\n        .backendDefaults(BackendDefaults.builder()\n                .tlsClientPolicy(TlsClientPolicy.builder()\n                        .validation(TlsValidation.builder()\n                                .trust(TlsValidationTrust.file(\"/keys/local_cert_chain.pem\"))\n                                .build())\n                        .build())\n                .build())\n        .accessLog(AccessLog.fromFilePath(\"/dev/stdout\"))\n        .build();\n\nTags.of(node).add(\"Environment\", \"Dev\");",
          "version": "1"
        },
        "go": {
          "source": "var mesh mesh\nvar service service\n\nnode := appmesh.NewVirtualNode(this, jsii.String(\"node\"), &virtualNodeProps{\n\tmesh: mesh,\n\tserviceDiscovery: appmesh.serviceDiscovery.cloudMap(service),\n\tlisteners: []virtualNodeListener{\n\t\tappmesh.*virtualNodeListener.http(&httpVirtualNodeListenerOptions{\n\t\t\tport: jsii.Number(8080),\n\t\t\thealthCheck: appmesh.healthCheck.http(&httpHealthCheckOptions{\n\t\t\t\thealthyThreshold: jsii.Number(3),\n\t\t\t\tinterval: cdk.duration.seconds(jsii.Number(5)),\n\t\t\t\tpath: jsii.String(\"/ping\"),\n\t\t\t\ttimeout: cdk.*duration.seconds(jsii.Number(2)),\n\t\t\t\tunhealthyThreshold: jsii.Number(2),\n\t\t\t}),\n\t\t\ttimeout: &httpTimeout{\n\t\t\t\tidle: cdk.*duration.seconds(jsii.Number(5)),\n\t\t\t},\n\t\t}),\n\t},\n\tbackendDefaults: &backendDefaults{\n\t\ttlsClientPolicy: &tlsClientPolicy{\n\t\t\tvalidation: &tlsValidation{\n\t\t\t\ttrust: appmesh.tlsValidationTrust.file(jsii.String(\"/keys/local_cert_chain.pem\")),\n\t\t\t},\n\t\t},\n\t},\n\taccessLog: appmesh.accessLog.fromFilePath(jsii.String(\"/dev/stdout\")),\n})\n\ncdk.tags.of(node).add(jsii.String(\"Environment\"), jsii.String(\"Dev\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const mesh: appmesh.Mesh;\ndeclare const service: cloudmap.Service;\n\nconst node = new appmesh.VirtualNode(this, 'node', {\n  mesh,\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    port: 8080,\n    healthCheck: appmesh.HealthCheck.http({\n      healthyThreshold: 3,\n      interval: cdk.Duration.seconds(5),\n      path: '/ping',\n      timeout: cdk.Duration.seconds(2),\n      unhealthyThreshold: 2,\n    }),\n    timeout: {\n      idle: cdk.Duration.seconds(5),\n    },\n  })],\n  backendDefaults: {\n    tlsClientPolicy: {\n      validation: {\n        trust: appmesh.TlsValidationTrust.file('/keys/local_cert_chain.pem'),\n      },\n    },\n  },\n  accessLog: appmesh.AccessLog.fromFilePath('/dev/stdout'),\n});\n\ncdk.Tags.of(node).add('Environment', 'Dev');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Tags"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appmesh.AccessLog",
        "@aws-cdk/aws-appmesh.AccessLog#fromFilePath",
        "@aws-cdk/aws-appmesh.BackendDefaults",
        "@aws-cdk/aws-appmesh.HealthCheck",
        "@aws-cdk/aws-appmesh.HealthCheck#http",
        "@aws-cdk/aws-appmesh.HttpHealthCheckOptions",
        "@aws-cdk/aws-appmesh.HttpTimeout",
        "@aws-cdk/aws-appmesh.HttpVirtualNodeListenerOptions",
        "@aws-cdk/aws-appmesh.IMesh",
        "@aws-cdk/aws-appmesh.ServiceDiscovery",
        "@aws-cdk/aws-appmesh.ServiceDiscovery#cloudMap",
        "@aws-cdk/aws-appmesh.TlsClientPolicy",
        "@aws-cdk/aws-appmesh.TlsValidation",
        "@aws-cdk/aws-appmesh.TlsValidationTrust",
        "@aws-cdk/aws-appmesh.TlsValidationTrust#file",
        "@aws-cdk/aws-appmesh.VirtualNode",
        "@aws-cdk/aws-appmesh.VirtualNodeListener",
        "@aws-cdk/aws-appmesh.VirtualNodeListener#http",
        "@aws-cdk/aws-appmesh.VirtualNodeProps",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.IConstruct",
        "@aws-cdk/core.Tags",
        "@aws-cdk/core.Tags#add",
        "@aws-cdk/core.Tags#of",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mesh: appmesh.Mesh;\ndeclare const service: cloudmap.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport acmpca = require('@aws-cdk/aws-acmpca');\nimport appmesh = require('@aws-cdk/aws-appmesh');\nimport certificatemanager = require('@aws-cdk/aws-certificatemanager');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst node = new appmesh.VirtualNode(this, 'node', {\n  mesh,\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    port: 8080,\n    healthCheck: appmesh.HealthCheck.http({\n      healthyThreshold: 3,\n      interval: cdk.Duration.seconds(5),\n      path: '/ping',\n      timeout: cdk.Duration.seconds(2),\n      unhealthyThreshold: 2,\n    }),\n    timeout: {\n      idle: cdk.Duration.seconds(5),\n    },\n  })],\n  backendDefaults: {\n    tlsClientPolicy: {\n      validation: {\n        trust: appmesh.TlsValidationTrust.file('/keys/local_cert_chain.pem'),\n      },\n    },\n  },\n  accessLog: appmesh.AccessLog.fromFilePath('/dev/stdout'),\n});\n\ncdk.Tags.of(node).add('Environment', 'Dev');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 6,
        "75": 56,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 7,
        "194": 20,
        "196": 10,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "08f5699c1aa58186db4703d4212e3b723844e7a3939afbdc883a788e9beb5972"
    },
    "79d75028f24c9a18d95e0b303dc22324104d3d876121881e1a08b2acac007963": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ntime_conversion_options = cdk.TimeConversionOptions(\n    integral=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nTimeConversionOptions timeConversionOptions = new TimeConversionOptions {\n    Integral = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nTimeConversionOptions timeConversionOptions = TimeConversionOptions.builder()\n        .integral(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ntimeConversionOptions := &timeConversionOptions{\n\tintegral: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst timeConversionOptions: cdk.TimeConversionOptions = {\n  integral: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TimeConversionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.TimeConversionOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst timeConversionOptions: cdk.TimeConversionOptions = {\n  integral: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f4f59c0a5a11a93a79c9f8d733beb2abc83bc98f27514fe884e8eda51393c78f"
    },
    "5973585c3f8eb2f8465eb227353b9e325a240a3852f7fa6d08180190377a6534": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ntoken_comparison = cdk.TokenComparison.BOTH_UNRESOLVED",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nTokenComparison tokenComparison = TokenComparison.BOTH_UNRESOLVED;",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nTokenComparison tokenComparison = TokenComparison.BOTH_UNRESOLVED;",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ntokenComparison := cdk.tokenComparison_BOTH_UNRESOLVED()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst tokenComparison = cdk.TokenComparison.BOTH_UNRESOLVED;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TokenComparison"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.TokenComparison",
        "@aws-cdk/core.TokenComparison#BOTH_UNRESOLVED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tokenComparison = cdk.TokenComparison.BOTH_UNRESOLVED;\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "0fde158b8d15cdd5bfab6d343cdf5d75424f5ee10609344b774314b7efcabdf5"
    },
    "a69fa4e74ba7d33a4782cd415aec93916c4b200e6811fa1d44a6a605bf555e6d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ntokenized_string_fragments = cdk.TokenizedStringFragments()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nTokenizedStringFragments tokenizedStringFragments = new TokenizedStringFragments();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nTokenizedStringFragments tokenizedStringFragments = new TokenizedStringFragments();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ntokenizedStringFragments := cdk.NewTokenizedStringFragments()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst tokenizedStringFragments = new cdk.TokenizedStringFragments();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TokenizedStringFragments"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.TokenizedStringFragments"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tokenizedStringFragments = new cdk.TokenizedStringFragments();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "6f119031711aceef9ab48851080b8112bc62005316ebc45decc3554acf42d9e4"
    },
    "2d100d63bca4ca751cd6e041b47a69baaddb11af09531d26d90d406a0bb51731": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\ntree_inspector = cdk.TreeInspector()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nTreeInspector treeInspector = new TreeInspector();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nTreeInspector treeInspector = new TreeInspector();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ntreeInspector := cdk.NewTreeInspector()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nconst treeInspector = new cdk.TreeInspector();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TreeInspector"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.TreeInspector"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst treeInspector = new cdk.TreeInspector();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "f7d68f19af8c8859fee13389d1234880d927a127801f9304f0b6c0f0864d5335"
    },
    "ec1107f1db8e9ef9fcf4759b78dc40c31d9d78dbd056025c83e0921469c2d477": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# construct: cdk.Construct\n\nvalidation_error = cdk.ValidationError(\n    message=\"message\",\n    source=construct\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nConstruct construct;\nValidationError validationError = new ValidationError {\n    Message = \"message\",\n    Source = construct\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nConstruct construct;\n\nValidationError validationError = ValidationError.builder()\n        .message(\"message\")\n        .source(construct)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar construct construct\nvalidationError := &validationError{\n\tmessage: jsii.String(\"message\"),\n\tsource: construct,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const construct: cdk.Construct;\nconst validationError: cdk.ValidationError = {\n  message: 'message',\n  source: construct,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ValidationError"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ValidationError"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const construct: cdk.Construct;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst validationError: cdk.ValidationError = {\n  message: 'message',\n  source: construct,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3bdb21caa3c1bcea21b22ef25eb60a74947fb6fc66a97caa042279e9d18be429"
    },
    "fa25defae6212701c8eaa67f25fd7c82f029e17105e1247d1ec1b69819f295a8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# validation_results: cdk.ValidationResults\n\nvalidation_result = cdk.ValidationResult(\"errorMessage\", validation_results)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nValidationResults validationResults;\nValidationResult validationResult = new ValidationResult(\"errorMessage\", validationResults);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nValidationResults validationResults;\n\nValidationResult validationResult = new ValidationResult(\"errorMessage\", validationResults);",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar validationResults validationResults\nvalidationResult := cdk.NewValidationResult(jsii.String(\"errorMessage\"), validationResults)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const validationResults: cdk.ValidationResults;\nconst validationResult = new cdk.ValidationResult(/* all optional props */ 'errorMessage', /* all optional props */ validationResults);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ValidationResult"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ValidationResult",
        "@aws-cdk/core.ValidationResults"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const validationResults: cdk.ValidationResults;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst validationResult = new cdk.ValidationResult(/* all optional props */ 'errorMessage', /* all optional props */ validationResults);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "c527a1d21b1c614e7d91eb81671f85b14d80dd20d3f9e3ae0845c8f492719617"
    },
    "55ac2f4bc9cb8df859b996ab7da960b1ea10fdd4ea3474cf7a270eb5ed8cc3c1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\n\n# validation_result: cdk.ValidationResult\n\nvalidation_results = cdk.ValidationResults([validation_result])",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\n\nValidationResult validationResult;\nValidationResults validationResults = new ValidationResults(new [] { validationResult });",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\n\nValidationResult validationResult;\n\nValidationResults validationResults = new ValidationResults(List.of(validationResult));",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar validationResult validationResult\nvalidationResults := cdk.NewValidationResults([]validationResult{\n\tvalidationResult,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const validationResult: cdk.ValidationResult;\nconst validationResults = new cdk.ValidationResults(/* all optional props */ [validationResult]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ValidationResults"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ValidationResults"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const validationResult: cdk.ValidationResult;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst validationResults = new cdk.ValidationResults(/* all optional props */ [validationResult]);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "6858ee24051bc83d87dda2373ae288da088200e8cb3e9bccac00be2194f6c1e2"
    }
  }
}
