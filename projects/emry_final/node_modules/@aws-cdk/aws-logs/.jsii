{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-cloudwatch": "1.153.1",
    "@aws-cdk/aws-iam": "1.153.1",
    "@aws-cdk/aws-kms": "1.153.1",
    "@aws-cdk/aws-s3-assets": "1.153.1",
    "@aws-cdk/core": "1.153.1",
    "@aws-cdk/cx-api": "1.153.1",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::Logs",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.57.0 (build f614666)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "logs"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-logs",
  "readme": {
    "markdown": "# Amazon CloudWatch Logs Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis library supplies constructs for working with CloudWatch Logs.\n\n## Log Groups/Streams\n\nThe basic unit of CloudWatch is a *Log Group*. Every log group typically has the\nsame kind of data logged to it, in the same format. If there are multiple\napplications or services logging into the Log Group, each of them creates a new\n*Log Stream*.\n\nEvery log operation creates a \"log event\", which can consist of a simple string\nor a single-line JSON object. JSON objects have the advantage that they afford\nmore filtering abilities (see below).\n\nThe only configurable attribute for log streams is the retention period, which\nconfigures after how much time the events in the log stream expire and are\ndeleted.\n\nThe default retention period if not supplied is 2 years, but it can be set to\none of the values in the `RetentionDays` enum to configure a different\nretention period (including infinite retention).\n\n```ts lit=test/example.retention.lit.ts\n// Configure log group for short retention\nconst logGroup = new LogGroup(stack, 'LogGroup', {\n  retention: RetentionDays.ONE_WEEK,\n});\n// Configure log group for infinite retention\nconst logGroup = new LogGroup(stack, 'LogGroup', {\n  retention: Infinity,\n});\n```\n\n## LogRetention\n\nThe `LogRetention` construct is a way to control the retention period of log groups that are created outside of the CDK. The construct is usually\nused on log groups that are auto created by AWS services, such as [AWS\nlambda](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-cloudwatchlogs.html).\n\nThis is implemented using a [CloudFormation custom\nresource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html)\nwhich pre-creates the log group if it doesn't exist, and sets the specified log retention period (never expire, by default).\n\nBy default, the log group will be created in the same region as the stack. The `logGroupRegion` property can be used to configure\nlog groups in other regions. This is typically useful when controlling retention for log groups auto-created by global services that\npublish their log group to a specific region, such as AWS Chatbot creating a log group in `us-east-1`.\n\n## Resource Policy\n\nCloudWatch Resource Policies allow other AWS services or IAM Principals to put log events into the log groups.\nA resource policy is automatically created when `addToResourcePolicy` is called on the LogGroup for the first time:\n\n```ts\nconst logGroup = new logs.LogGroup(this, 'LogGroup');\nlogGroup.addToResourcePolicy(new iam.PolicyStatement({\n    actions: ['logs:CreateLogStream', 'logs:PutLogEvents'],\n    principals: [new iam.ServicePrincipal('es.amazonaws.com')],\n    resources: [logGroup.logGroupArn],\n}));\n```\n\nOr more conveniently, write permissions to the log group can be granted as follows which gives same result as in the above example.\n\n```ts\nconst logGroup = new logs.LogGroup(this, 'LogGroup');\nlogGroup.grantWrite(new iam.ServicePrincipal('es.amazonaws.com'));\n```\n\nBe aware that any ARNs or tokenized values passed to the resource policy will be converted into AWS Account IDs.\nThis is because CloudWatch Logs Resource Policies do not accept ARNs as principals, but they do accept\nAccount ID strings. Non-ARN principals, like Service principals or Any princpals, are accepted by CloudWatch.\n\n## Encrypting Log Groups\n\nBy default, log group data is always encrypted in CloudWatch Logs. You have the\noption to encrypt log group data using a AWS KMS customer master key (CMK) should\nyou not wish to use the default AWS encryption. Keep in mind that if you decide to\nencrypt a log group, any service or IAM identity that needs to read the encrypted\nlog streams in the future will require the same CMK to decrypt the data.\n\nHere's a simple example of creating an encrypted Log Group using a KMS CMK.\n\n```ts\nimport * as kms from '@aws-cdk/aws-kms';\n\nnew logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: new kms.Key(this, 'Key'),\n});\n```\n\nSee the AWS documentation for more detailed information about [encrypting CloudWatch\nLogs](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html).\n\n## Subscriptions and Destinations\n\nLog events matching a particular filter can be sent to either a Lambda function\nor a Kinesis stream.\n\nIf the Kinesis stream lives in a different account, a `CrossAccountDestination`\nobject needs to be added in the destination account which will act as a proxy\nfor the remote Kinesis stream. This object is automatically created for you\nif you use the CDK Kinesis library.\n\nCreate a `SubscriptionFilter`, initialize it with an appropriate `Pattern` (see\nbelow) and supply the intended destination:\n\n```ts\nimport * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});\n```\n\n## Metric Filters\n\nCloudWatch Logs can extract and emit metrics based on a textual log stream.\nDepending on your needs, this may be a more convenient way of generating metrics\nfor you application than making calls to CloudWatch Metrics yourself.\n\nA `MetricFilter` either emits a fixed number every time it sees a log event\nmatching a particular pattern (see below), or extracts a number from the log\nevent and uses that as the metric value.\n\nExample:\n\n```ts lit=test/integ.metricfilter.lit.ts\nnew MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});\n```\n\nRemember that if you want to use a value from the log event as the metric value,\nyou must mention it in your pattern somewhere.\n\nA very simple MetricFilter can be created by using the `logGroup.extractMetric()`\nhelper function:\n\n```ts\ndeclare const logGroup: logs.LogGroup;\nlogGroup.extractMetric('$.jsonField', 'Namespace', 'MetricName');\n```\n\nWill extract the value of `jsonField` wherever it occurs in JSON-structed\nlog records in the LogGroup, and emit them to CloudWatch Metrics under\nthe name `Namespace/MetricName`.\n\n### Exposing Metric on a Metric Filter\n\nYou can expose a metric on a metric filter by calling the `MetricFilter.metric()` API.\nThis has a default of `statistic = 'avg'` if the statistic is not set in the `props`.\n\n```ts\ndeclare const logGroup: logs.LogGroup;\nconst mf = new logs.MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: logs.FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});\n\n//expose a metric from the metric filter\nconst metric = mf.metric();\n\n//you can use the metric to create a new alarm\nnew cloudwatch.Alarm(this, 'alarm from metric filter', {\n  metric,\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n```\n\n## Patterns\n\nPatterns describe which log events match a subscription or metric filter. There\nare three types of patterns:\n\n* Text patterns\n* JSON patterns\n* Space-delimited table patterns\n\nAll patterns are constructed by using static functions on the `FilterPattern`\nclass.\n\nIn addition to the patterns above, the following special patterns exist:\n\n* `FilterPattern.allEvents()`: matches all log events.\n* `FilterPattern.literal(string)`: if you already know what pattern expression to\n  use, this function takes a string and will use that as the log pattern. For\n  more information, see the [Filter and Pattern\n  Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).\n\n### Text Patterns\n\nText patterns match if the literal strings appear in the text form of the log\nline.\n\n* `FilterPattern.allTerms(term, term, ...)`: matches if all of the given terms\n  (substrings) appear in the log event.\n* `FilterPattern.anyTerm(term, term, ...)`: matches if all of the given terms\n  (substrings) appear in the log event.\n* `FilterPattern.anyTermGroup([term, term, ...], [term, term, ...], ...)`: matches if\n  all of the terms in any of the groups (specified as arrays) matches. This is\n  an OR match.\n\nExamples:\n\n```ts\n// Search for lines that contain both \"ERROR\" and \"MainThread\"\nconst pattern1 = logs.FilterPattern.allTerms('ERROR', 'MainThread');\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nconst pattern2 = logs.FilterPattern.anyTermGroup(\n  ['ERROR', 'MainThread'],\n  ['WARN', 'Deadlock'],\n);\n```\n\n## JSON Patterns\n\nJSON patterns apply if the log event is the JSON representation of an object\n(without any other characters, so it cannot include a prefix such as timestamp\nor log level). JSON patterns can make comparisons on the values inside the\nfields.\n\n* **Strings**: the comparison operators allowed for strings are `=` and `!=`.\n  String values can start or end with a `*` wildcard.\n* **Numbers**: the comparison operators allowed for numbers are `=`, `!=`,\n  `<`, `<=`, `>`, `>=`.\n\nFields in the JSON structure are identified by identifier the complete object as `$`\nand then descending into it, such as `$.field` or `$.list[0].field`.\n\n* `FilterPattern.stringValue(field, comparison, string)`: matches if the given\n  field compares as indicated with the given string value.\n* `FilterPattern.numberValue(field, comparison, number)`: matches if the given\n  field compares as indicated with the given numerical value.\n* `FilterPattern.isNull(field)`: matches if the given field exists and has the\n  value `null`.\n* `FilterPattern.notExists(field)`: matches if the given field is not in the JSON\n  structure.\n* `FilterPattern.exists(field)`: matches if the given field is in the JSON\n  structure.\n* `FilterPattern.booleanValue(field, boolean)`: matches if the given field\n  is exactly the given boolean value.\n* `FilterPattern.all(jsonPattern, jsonPattern, ...)`: matches if all of the\n  given JSON patterns match. This makes an AND combination of the given\n  patterns.\n* `FilterPattern.any(jsonPattern, jsonPattern, ...)`: matches if any of the\n  given JSON patterns match. This makes an OR combination of the given\n  patterns.\n\nExample:\n\n```ts\n// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nconst pattern = logs.FilterPattern.all(\n  logs.FilterPattern.stringValue('$.component', '=', 'HttpServer'),\n  logs.FilterPattern.any(\n    logs.FilterPattern.booleanValue('$.error', true),\n    logs.FilterPattern.numberValue('$.latency', '>', 1000),\n  ),\n);\n```\n\n## Space-delimited table patterns\n\nIf the log events are rows of a space-delimited table, this pattern can be used\nto identify the columns in that structure and add conditions on any of them. The\ncanonical example where you would apply this type of pattern is Apache server\nlogs.\n\nText that is surrounded by `\"...\"` quotes or `[...]` square brackets will\nbe treated as one column.\n\n* `FilterPattern.spaceDelimited(column, column, ...)`: construct a\n  `SpaceDelimitedTextPattern` object with the indicated columns. The columns\n  map one-by-one the columns found in the log event. The string `\"...\"` may\n  be used to specify an arbitrary number of unnamed columns anywhere in the\n  name list (but may only be specified once).\n\nAfter constructing a `SpaceDelimitedTextPattern`, you can use the following\ntwo members to add restrictions:\n\n* `pattern.whereString(field, comparison, string)`: add a string condition.\n  The rules are the same as for JSON patterns.\n* `pattern.whereNumber(field, comparison, number)`: add a numerical condition.\n  The rules are the same as for JSON patterns.\n\nMultiple restrictions can be added on the same column; they must all apply.\n\nExample:\n\n```ts\n// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nconst pattern = logs.FilterPattern.spaceDelimited('time', 'component', '...', 'result_code', 'latency')\n  .whereString('component', '=', 'HttpServer')\n  .whereNumber('result_code', '!=', 200);\n```\n\n## Logs Insights Query Definition\n\nCreates a query definition for CloudWatch Logs Insights.\n\nExample:\n\n```ts\nnew logs.QueryDefinition(this, 'QueryDefinition', {\n  queryDefinitionName: 'MyQuery',\n  queryString: new logs.QueryString({\n    fields: ['@timestamp', '@message'],\n    sort: '@timestamp desc',\n    limit: 20,\n  }),\n});\n```\n\n## Notes\n\nBe aware that Log Group ARNs will always have the string `:*` appended to\nthem, to match the behavior of [the CloudFormation `AWS::Logs::LogGroup`\nresource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#aws-resource-logs-loggroup-return-values).\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-logs",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.Logs",
      "packageId": "Amazon.CDK.AWS.Logs"
    },
    "java": {
      "maven": {
        "artifactId": "logs",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.logs"
    },
    "js": {
      "npm": "@aws-cdk/aws-logs"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-logs",
      "module": "aws_cdk.aws_logs"
    }
  },
  "types": {
    "@aws-cdk/aws-logs.CfnDestination": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Logs::Destination",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The AWS::Logs::Destination resource specifies a CloudWatch Logs destination. A destination encapsulates a physical resource (such as an Amazon Kinesis data stream) and enables you to subscribe that resource to a stream of log events.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Logs::Destination`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnDestination = new logs.CfnDestination(this, 'MyCfnDestination', {\n  destinationName: 'destinationName',\n  destinationPolicy: 'destinationPolicy',\n  roleArn: 'roleArn',\n  targetArn: 'targetArn',\n});"
      },
      "fqn": "@aws-cdk/aws-logs.CfnDestination",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Logs::Destination`."
        },
        "locationInModule": {
          "filename": "lib/logs.generated.ts",
          "line": 184
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.CfnDestinationProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 118
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 204
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 218
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDestination",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 122
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The ARN of the CloudWatch Logs destination, such as `arn:aws:logs:us-west-1:123456789012:destination:MyDestination` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 147
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 209
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html#cfn-logs-destination-destinationname"
            },
            "stability": "external",
            "summary": "The name of the destination."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 154
          },
          "name": "destinationName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html#cfn-logs-destination-destinationpolicy"
            },
            "stability": "external",
            "summary": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 161
          },
          "name": "destinationPolicy",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html#cfn-logs-destination-rolearn"
            },
            "stability": "external",
            "summary": "The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 168
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html#cfn-logs-destination-targetarn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the physical target where the log events are delivered (for example, a Kinesis stream)."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 175
          },
          "name": "targetArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnDestination"
    },
    "@aws-cdk/aws-logs.CfnDestinationProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDestination`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnDestinationProps: logs.CfnDestinationProps = {\n  destinationName: 'destinationName',\n  destinationPolicy: 'destinationPolicy',\n  roleArn: 'roleArn',\n  targetArn: 'targetArn',\n};"
      },
      "fqn": "@aws-cdk/aws-logs.CfnDestinationProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 19
      },
      "name": "CfnDestinationProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html#cfn-logs-destination-destinationname"
            },
            "stability": "external",
            "summary": "The name of the destination."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 26
          },
          "name": "destinationName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html#cfn-logs-destination-destinationpolicy"
            },
            "stability": "external",
            "summary": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 33
          },
          "name": "destinationPolicy",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html#cfn-logs-destination-rolearn"
            },
            "stability": "external",
            "summary": "The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 40
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html#cfn-logs-destination-targetarn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the physical target where the log events are delivered (for example, a Kinesis stream)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 47
          },
          "name": "targetArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnDestinationProps"
    },
    "@aws-cdk/aws-logs.CfnLogGroup": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Logs::LogGroup",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::Logs::LogGroup` resource specifies a log group. A log group defines common properties for log streams, such as their retention and access control rules. Each log stream must belong to one log group.\n\nYou can create up to 1,000,000 log groups per Region per account. You must use the following guidelines when naming a log group:\n\n- Log group names must be unique within a Region for an AWS account.\n- Log group names can be between 1 and 512 characters long.\n- Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), '/' (forward slash), and '.' (period).",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Logs::LogGroup`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnLogGroup = new logs.CfnLogGroup(this, 'MyCfnLogGroup', /* all optional props */ {\n  kmsKeyId: 'kmsKeyId',\n  logGroupName: 'logGroupName',\n  retentionInDays: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-logs.CfnLogGroup",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Logs::LogGroup`."
        },
        "locationInModule": {
          "filename": "lib/logs.generated.ts",
          "line": 418
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-logs.CfnLogGroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 342
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 439
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 453
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnLogGroup",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 346
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The ARN of the log group, such as `arn:aws:logs:us-west-1:123456789012:log-group:/mystack-testgroup-12ABC1AB12A1:*`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 371
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 444
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-tags"
            },
            "remarks": "For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .",
            "stability": "external",
            "summary": "An array of key-value pairs to apply to the log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 409
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-kmskeyid"
            },
            "remarks": "To associate an AWS KMS key with the log group, specify the ARN of that KMS key here. If you do so, ingested data is encrypted using this key. This association is stored as long as the data encrypted with the KMS key is still within CloudWatch Logs . This enables CloudWatch Logs to decrypt this data whenever it is requested.\n\nIf you attempt to associate a KMS key with the log group but the KMS key doesn't exist or is deactivated, you will receive an `InvalidParameterException` error.\n\nLog group data is always encrypted in CloudWatch Logs . If you omit this key, the encryption does not use AWS KMS . For more information, see [Encrypt log data in CloudWatch Logs using AWS Key Management Service](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the AWS KMS key to use when encrypting log data."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 384
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-loggroupname"
            },
            "remarks": "If you don't specify a name, AWS CloudFormation generates a unique ID for the log group.",
            "stability": "external",
            "summary": "The name of the log group."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 391
          },
          "name": "logGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-retentionindays"
            },
            "remarks": "Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.\n\nTo set a log group to never have log events expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html) .",
            "stability": "external",
            "summary": "The number of days to retain the log events in the specified log group."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 400
          },
          "name": "retentionInDays",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnLogGroup"
    },
    "@aws-cdk/aws-logs.CfnLogGroupProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnLogGroup`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnLogGroupProps: logs.CfnLogGroupProps = {\n  kmsKeyId: 'kmsKeyId',\n  logGroupName: 'logGroupName',\n  retentionInDays: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-logs.CfnLogGroupProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 231
      },
      "name": "CfnLogGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-kmskeyid"
            },
            "remarks": "To associate an AWS KMS key with the log group, specify the ARN of that KMS key here. If you do so, ingested data is encrypted using this key. This association is stored as long as the data encrypted with the KMS key is still within CloudWatch Logs . This enables CloudWatch Logs to decrypt this data whenever it is requested.\n\nIf you attempt to associate a KMS key with the log group but the KMS key doesn't exist or is deactivated, you will receive an `InvalidParameterException` error.\n\nLog group data is always encrypted in CloudWatch Logs . If you omit this key, the encryption does not use AWS KMS . For more information, see [Encrypt log data in CloudWatch Logs using AWS Key Management Service](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the AWS KMS key to use when encrypting log data."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 244
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-loggroupname"
            },
            "remarks": "If you don't specify a name, AWS CloudFormation generates a unique ID for the log group.",
            "stability": "external",
            "summary": "The name of the log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 251
          },
          "name": "logGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-retentionindays"
            },
            "remarks": "Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.\n\nTo set a log group to never have log events expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html) .",
            "stability": "external",
            "summary": "The number of days to retain the log events in the specified log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 260
          },
          "name": "retentionInDays",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-tags"
            },
            "remarks": "For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .",
            "stability": "external",
            "summary": "An array of key-value pairs to apply to the log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 269
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnLogGroupProps"
    },
    "@aws-cdk/aws-logs.CfnLogStream": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Logs::LogStream",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-logstream.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::Logs::LogStream` resource specifies an Amazon CloudWatch Logs log stream in a specific log group. A log stream represents the sequence of events coming from an application instance or resource that you are monitoring.\n\nThere is no limit on the number of log streams that you can create for a log group.\n\nYou must use the following guidelines when naming a log stream:\n\n- Log stream names must be unique within the log group.\n- Log stream names can be between 1 and 512 characters long.\n- The ':' (colon) and '*' (asterisk) characters are not allowed.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Logs::LogStream`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnLogStream = new logs.CfnLogStream(this, 'MyCfnLogStream', {\n  logGroupName: 'logGroupName',\n\n  // the properties below are optional\n  logStreamName: 'logStreamName',\n});"
      },
      "fqn": "@aws-cdk/aws-logs.CfnLogStream",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Logs::LogStream`."
        },
        "locationInModule": {
          "filename": "lib/logs.generated.ts",
          "line": 596
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.CfnLogStreamProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 550
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 610
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 622
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnLogStream",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 554
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 615
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-logstream.html#cfn-logs-logstream-loggroupname"
            },
            "stability": "external",
            "summary": "The name of the log group where the log stream is created."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 580
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-logstream.html#cfn-logs-logstream-logstreamname"
            },
            "remarks": "The name must be unique within the log group.",
            "stability": "external",
            "summary": "The name of the log stream."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 587
          },
          "name": "logStreamName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnLogStream"
    },
    "@aws-cdk/aws-logs.CfnLogStreamProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-logstream.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnLogStream`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnLogStreamProps: logs.CfnLogStreamProps = {\n  logGroupName: 'logGroupName',\n\n  // the properties below are optional\n  logStreamName: 'logStreamName',\n};"
      },
      "fqn": "@aws-cdk/aws-logs.CfnLogStreamProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 466
      },
      "name": "CfnLogStreamProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-logstream.html#cfn-logs-logstream-loggroupname"
            },
            "stability": "external",
            "summary": "The name of the log group where the log stream is created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 473
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-logstream.html#cfn-logs-logstream-logstreamname"
            },
            "remarks": "The name must be unique within the log group.",
            "stability": "external",
            "summary": "The name of the log stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 480
          },
          "name": "logStreamName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnLogStreamProps"
    },
    "@aws-cdk/aws-logs.CfnMetricFilter": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Logs::MetricFilter",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::Logs::MetricFilter` resource specifies a metric filter that describes how CloudWatch Logs extracts information from logs and transforms it into Amazon CloudWatch metrics. If you have multiple metric filters that are associated with a log group, all the filters are applied to the log streams in that group.\n\nThe maximum number of metric filters that can be associated with a log group is 100.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Logs::MetricFilter`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnMetricFilter = new logs.CfnMetricFilter(this, 'MyCfnMetricFilter', {\n  filterPattern: 'filterPattern',\n  logGroupName: 'logGroupName',\n  metricTransformations: [{\n    metricName: 'metricName',\n    metricNamespace: 'metricNamespace',\n    metricValue: 'metricValue',\n\n    // the properties below are optional\n    defaultValue: 123,\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-logs.CfnMetricFilter",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Logs::MetricFilter`."
        },
        "locationInModule": {
          "filename": "lib/logs.generated.ts",
          "line": 778
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.CfnMetricFilterProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 725
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 795
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 808
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnMetricFilter",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 729
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 800
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html#cfn-cwl-metricfilter-filterpattern"
            },
            "remarks": "For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html) .",
            "stability": "external",
            "summary": "A filter pattern for extracting metric data out of ingested log events."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 755
          },
          "name": "filterPattern",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html#cfn-cwl-metricfilter-loggroupname"
            },
            "stability": "external",
            "summary": "The name of an existing log group that you want to associate with this metric filter."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 762
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html#cfn-cwl-metricfilter-metrictransformations"
            },
            "stability": "external",
            "summary": "The metric transformations."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 769
          },
          "name": "metricTransformations",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-logs.CfnMetricFilter.MetricTransformationProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnMetricFilter"
    },
    "@aws-cdk/aws-logs.CfnMetricFilter.MetricTransformationProperty": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-logs-metricfilter-metrictransformation.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "`MetricTransformation` is a property of the `AWS::Logs::MetricFilter` resource that describes how to transform log streams into a CloudWatch metric.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst metricTransformationProperty: logs.CfnMetricFilter.MetricTransformationProperty = {\n  metricName: 'metricName',\n  metricNamespace: 'metricNamespace',\n  metricValue: 'metricValue',\n\n  // the properties below are optional\n  defaultValue: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-logs.CfnMetricFilter.MetricTransformationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 822
      },
      "name": "MetricTransformationProperty",
      "namespace": "CfnMetricFilter",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-logs-metricfilter-metrictransformation.html#cfn-cwl-metricfilter-metrictransformation-metricname"
            },
            "stability": "external",
            "summary": "The name of the CloudWatch metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 834
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-logs-metricfilter-metrictransformation.html#cfn-cwl-metricfilter-metrictransformation-metricnamespace"
            },
            "remarks": "Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace) .",
            "stability": "external",
            "summary": "A custom namespace to contain your metric in CloudWatch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 840
          },
          "name": "metricNamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-logs-metricfilter-metrictransformation.html#cfn-cwl-metricfilter-metrictransformation-metricvalue"
            },
            "remarks": "For example, if you're counting the occurrences of a particular term like `Error` , specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $ followed by the name of the field that you specified in the filter pattern, such as `$.size` .",
            "stability": "external",
            "summary": "The value that is published to the CloudWatch metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 846
          },
          "name": "metricValue",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-logs-metricfilter-metrictransformation.html#cfn-cwl-metricfilter-metrictransformation-defaultvalue"
            },
            "remarks": "This value can be null.",
            "stability": "external",
            "summary": "(Optional) The value to emit when a filter pattern does not match a log event."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 828
          },
          "name": "defaultValue",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnMetricFilter.MetricTransformationProperty"
    },
    "@aws-cdk/aws-logs.CfnMetricFilterProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnMetricFilter`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnMetricFilterProps: logs.CfnMetricFilterProps = {\n  filterPattern: 'filterPattern',\n  logGroupName: 'logGroupName',\n  metricTransformations: [{\n    metricName: 'metricName',\n    metricNamespace: 'metricNamespace',\n    metricValue: 'metricValue',\n\n    // the properties below are optional\n    defaultValue: 123,\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-logs.CfnMetricFilterProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 635
      },
      "name": "CfnMetricFilterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html#cfn-cwl-metricfilter-filterpattern"
            },
            "remarks": "For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html) .",
            "stability": "external",
            "summary": "A filter pattern for extracting metric data out of ingested log events."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 642
          },
          "name": "filterPattern",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html#cfn-cwl-metricfilter-loggroupname"
            },
            "stability": "external",
            "summary": "The name of an existing log group that you want to associate with this metric filter."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 649
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html#cfn-cwl-metricfilter-metrictransformations"
            },
            "stability": "external",
            "summary": "The metric transformations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 656
          },
          "name": "metricTransformations",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-logs.CfnMetricFilter.MetricTransformationProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnMetricFilterProps"
    },
    "@aws-cdk/aws-logs.CfnQueryDefinition": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Logs::QueryDefinition",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-querydefinition.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Creates a query definition for CloudWatch Logs Insights. For more information, see [Analyzing Log Data with CloudWatch Logs Insights](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AnalyzingLogData.html) .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Logs::QueryDefinition`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnQueryDefinition = new logs.CfnQueryDefinition(this, 'MyCfnQueryDefinition', {\n  name: 'name',\n  queryString: 'queryString',\n\n  // the properties below are optional\n  logGroupNames: ['logGroupNames'],\n});"
      },
      "fqn": "@aws-cdk/aws-logs.CfnQueryDefinition",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Logs::QueryDefinition`."
        },
        "locationInModule": {
          "filename": "lib/logs.generated.ts",
          "line": 1064
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.CfnQueryDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 1005
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1081
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1094
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnQueryDefinition",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1009
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "QueryDefinitionId"
            },
            "stability": "external",
            "summary": "The ID of the query definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1034
          },
          "name": "attrQueryDefinitionId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1086
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-querydefinition.html#cfn-logs-querydefinition-name"
            },
            "stability": "external",
            "summary": "A name for the query definition."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1041
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-querydefinition.html#cfn-logs-querydefinition-querystring"
            },
            "remarks": "For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html) .",
            "stability": "external",
            "summary": "The query string to use for this query definition."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1048
          },
          "name": "queryString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-querydefinition.html#cfn-logs-querydefinition-loggroupnames"
            },
            "stability": "external",
            "summary": "Use this parameter if you want the query to query only certain log groups."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1055
          },
          "name": "logGroupNames",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnQueryDefinition"
    },
    "@aws-cdk/aws-logs.CfnQueryDefinitionProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-querydefinition.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnQueryDefinition`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnQueryDefinitionProps: logs.CfnQueryDefinitionProps = {\n  name: 'name',\n  queryString: 'queryString',\n\n  // the properties below are optional\n  logGroupNames: ['logGroupNames'],\n};"
      },
      "fqn": "@aws-cdk/aws-logs.CfnQueryDefinitionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 918
      },
      "name": "CfnQueryDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-querydefinition.html#cfn-logs-querydefinition-name"
            },
            "stability": "external",
            "summary": "A name for the query definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 925
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-querydefinition.html#cfn-logs-querydefinition-querystring"
            },
            "remarks": "For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html) .",
            "stability": "external",
            "summary": "The query string to use for this query definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 932
          },
          "name": "queryString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-querydefinition.html#cfn-logs-querydefinition-loggroupnames"
            },
            "stability": "external",
            "summary": "Use this parameter if you want the query to query only certain log groups."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 939
          },
          "name": "logGroupNames",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnQueryDefinitionProps"
    },
    "@aws-cdk/aws-logs.CfnResourcePolicy": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Logs::ResourcePolicy",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Creates or updates a resource policy that allows other AWS services to put log events to this account. An account can have up to 10 resource policies per AWS Region.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Logs::ResourcePolicy`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnResourcePolicy = new logs.CfnResourcePolicy(this, 'MyCfnResourcePolicy', {\n  policyDocument: 'policyDocument',\n  policyName: 'policyName',\n});"
      },
      "fqn": "@aws-cdk/aws-logs.CfnResourcePolicy",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Logs::ResourcePolicy`."
        },
        "locationInModule": {
          "filename": "lib/logs.generated.ts",
          "line": 1230
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.CfnResourcePolicyProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 1184
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1245
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1257
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnResourcePolicy",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1188
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1250
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policydocument"
            },
            "remarks": "It must be formatted in JSON, and you must use backslashes to escape characters that need to be escaped in JSON strings, such as double quote marks.",
            "stability": "external",
            "summary": "The details of the policy."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1214
          },
          "name": "policyDocument",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policyname"
            },
            "stability": "external",
            "summary": "The name of the resource policy."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1221
          },
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnResourcePolicy"
    },
    "@aws-cdk/aws-logs.CfnResourcePolicyProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnResourcePolicy`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnResourcePolicyProps: logs.CfnResourcePolicyProps = {\n  policyDocument: 'policyDocument',\n  policyName: 'policyName',\n};"
      },
      "fqn": "@aws-cdk/aws-logs.CfnResourcePolicyProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 1107
      },
      "name": "CfnResourcePolicyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policydocument"
            },
            "remarks": "It must be formatted in JSON, and you must use backslashes to escape characters that need to be escaped in JSON strings, such as double quote marks.",
            "stability": "external",
            "summary": "The details of the policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1114
          },
          "name": "policyDocument",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policyname"
            },
            "stability": "external",
            "summary": "The name of the resource policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1121
          },
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnResourcePolicyProps"
    },
    "@aws-cdk/aws-logs.CfnSubscriptionFilter": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Logs::SubscriptionFilter",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::Logs::SubscriptionFilter` resource specifies a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination. Currently, the supported destinations are:\n\n- An Amazon Kinesis data stream belonging to the same account as the subscription filter, for same-account delivery.\n- A logical destination that belongs to a different account, for cross-account delivery.\n- An Amazon Kinesis Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.\n- An AWS Lambda function that belongs to the same account as the subscription filter, for same-account delivery.\n\nThere can as many as two subscription filters associated with a log group.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Logs::SubscriptionFilter`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnSubscriptionFilter = new logs.CfnSubscriptionFilter(this, 'MyCfnSubscriptionFilter', {\n  destinationArn: 'destinationArn',\n  filterPattern: 'filterPattern',\n  logGroupName: 'logGroupName',\n\n  // the properties below are optional\n  roleArn: 'roleArn',\n});"
      },
      "fqn": "@aws-cdk/aws-logs.CfnSubscriptionFilter",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Logs::SubscriptionFilter`."
        },
        "locationInModule": {
          "filename": "lib/logs.generated.ts",
          "line": 1435
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.CfnSubscriptionFilterProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 1375
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1453
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1467
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnSubscriptionFilter",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1379
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1458
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html#cfn-cwl-subscriptionfilter-destinationarn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the destination."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1405
          },
          "name": "destinationArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html#cfn-cwl-subscriptionfilter-filterpattern"
            },
            "remarks": "For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html) .",
            "stability": "external",
            "summary": "The filtering expressions that restrict what gets delivered to the destination AWS resource."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1412
          },
          "name": "filterPattern",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html#cfn-cwl-subscriptionfilter-loggroupname"
            },
            "remarks": "All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.",
            "stability": "external",
            "summary": "The log group to associate with the subscription filter."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1419
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html#cfn-cwl-subscriptionfilter-rolearn"
            },
            "remarks": "You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.",
            "stability": "external",
            "summary": "The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream."
          },
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1426
          },
          "name": "roleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnSubscriptionFilter"
    },
    "@aws-cdk/aws-logs.CfnSubscriptionFilterProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnSubscriptionFilter`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst cfnSubscriptionFilterProps: logs.CfnSubscriptionFilterProps = {\n  destinationArn: 'destinationArn',\n  filterPattern: 'filterPattern',\n  logGroupName: 'logGroupName',\n\n  // the properties below are optional\n  roleArn: 'roleArn',\n};"
      },
      "fqn": "@aws-cdk/aws-logs.CfnSubscriptionFilterProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/logs.generated.ts",
        "line": 1270
      },
      "name": "CfnSubscriptionFilterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html#cfn-cwl-subscriptionfilter-destinationarn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the destination."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1277
          },
          "name": "destinationArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html#cfn-cwl-subscriptionfilter-filterpattern"
            },
            "remarks": "For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html) .",
            "stability": "external",
            "summary": "The filtering expressions that restrict what gets delivered to the destination AWS resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1284
          },
          "name": "filterPattern",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html#cfn-cwl-subscriptionfilter-loggroupname"
            },
            "remarks": "All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.",
            "stability": "external",
            "summary": "The log group to associate with the subscription filter."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1291
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html#cfn-cwl-subscriptionfilter-rolearn"
            },
            "remarks": "You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.",
            "stability": "external",
            "summary": "The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/logs.generated.ts",
            "line": 1298
          },
          "name": "roleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/logs.generated:CfnSubscriptionFilterProps"
    },
    "@aws-cdk/aws-logs.ColumnRestriction": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst columnRestriction: logs.ColumnRestriction = {\n  comparison: 'comparison',\n\n  // the properties below are optional\n  numberValue: 123,\n  stringValue: 'stringValue',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.ColumnRestriction",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/pattern.ts",
        "line": 369
      },
      "name": "ColumnRestriction",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Comparison operator to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 373
          },
          "name": "comparison",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Exactly one of 'stringValue' and 'numberValue' must be set.",
            "stability": "stable",
            "summary": "Number value to compare to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 387
          },
          "name": "numberValue",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Exactly one of 'stringValue' and 'numberValue' must be set.",
            "stability": "stable",
            "summary": "String value to compare to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 380
          },
          "name": "stringValue",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/pattern:ColumnRestriction"
    },
    "@aws-cdk/aws-logs.CrossAccountDestination": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Logs::Destination",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "CrossAccountDestinations are used to subscribe a Kinesis stream in a\ndifferent account to a CloudWatch Subscription.\n\nConsumers will hardly ever need to use this class. Instead, directly\nsubscribe a Kinesis stream using the integration class in the\n`@aws-cdk/aws-logs-destinations` package; if necessary, a\n`CrossAccountDestination` will be created automatically.",
        "stability": "stable",
        "summary": "A new CloudWatch Logs Destination for use in cross-account scenarios.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const role: iam.Role;\nconst crossAccountDestination = new logs.CrossAccountDestination(this, 'MyCrossAccountDestination', {\n  role: role,\n  targetArn: 'targetArn',\n\n  // the properties below are optional\n  destinationName: 'destinationName',\n});"
      },
      "fqn": "@aws-cdk/aws-logs.CrossAccountDestination",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/cross-account-destination.ts",
          "line": 76
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.CrossAccountDestinationProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-logs.ILogSubscriptionDestination"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cross-account-destination.ts",
        "line": 53
      },
      "methods": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/cross-account-destination.ts",
            "line": 100
          },
          "name": "addToPolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If necessary, the destination can use the properties of the SubscriptionFilter\nobject itself to configure its permissions to allow the subscription to write\nto it.\n\nThe destination may reconfigure its own permissions in response to this\nfunction call.",
            "stability": "stable",
            "summary": "Return the properties required to send subscription events to this destination."
          },
          "locationInModule": {
            "filename": "lib/cross-account-destination.ts",
            "line": 104
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-logs.ILogSubscriptionDestination",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_sourceLogGroup",
              "type": {
                "fqn": "@aws-cdk/aws-logs.ILogGroup"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.LogSubscriptionDestinationConfig"
            }
          }
        }
      ],
      "name": "CrossAccountDestination",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of this CrossAccountDestination object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cross-account-destination.ts",
            "line": 69
          },
          "name": "destinationArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of this CrossAccountDestination object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cross-account-destination.ts",
            "line": 63
          },
          "name": "destinationName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Policy object of this CrossAccountDestination object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cross-account-destination.ts",
            "line": 57
          },
          "name": "policyDocument",
          "type": {
            "fqn": "@aws-cdk/aws-iam.PolicyDocument"
          }
        }
      ],
      "symbolId": "lib/cross-account-destination:CrossAccountDestination"
    },
    "@aws-cdk/aws-logs.CrossAccountDestinationProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a CrossAccountDestination.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const role: iam.Role;\nconst crossAccountDestinationProps: logs.CrossAccountDestinationProps = {\n  role: role,\n  targetArn: 'targetArn',\n\n  // the properties below are optional\n  destinationName: 'destinationName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.CrossAccountDestinationProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cross-account-destination.ts",
        "line": 19
      },
      "name": "CrossAccountDestinationProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The role must be assumable by 'logs.{REGION}.amazonaws.com'.",
            "stability": "stable",
            "summary": "The role to assume that grants permissions to write to 'target'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cross-account-destination.ts",
            "line": 32
          },
          "name": "role",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The log destination target's ARN."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cross-account-destination.ts",
            "line": 37
          },
          "name": "targetArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Automatically generated",
            "stability": "stable",
            "summary": "The name of the log destination."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cross-account-destination.ts",
            "line": 25
          },
          "name": "destinationName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cross-account-destination:CrossAccountDestinationProps"
    },
    "@aws-cdk/aws-logs.FilterPattern": {
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "// Search for lines that contain both \"ERROR\" and \"MainThread\"\nconst pattern1 = logs.FilterPattern.allTerms('ERROR', 'MainThread');\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nconst pattern2 = logs.FilterPattern.anyTermGroup(\n  ['ERROR', 'MainThread'],\n  ['WARN', 'Deadlock'],\n);",
        "stability": "stable",
        "summary": "A collection of static methods to generate appropriate ILogPatterns."
      },
      "fqn": "@aws-cdk/aws-logs.FilterPattern",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/pattern.ts",
        "line": 26
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "A JSON log pattern that matches if all given JSON log patterns match."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 162
          },
          "name": "all",
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "fqn": "@aws-cdk/aws-logs.JsonPattern"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.JsonPattern"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A log pattern that matches all events."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 43
          },
          "name": "allEvents",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.IFilterPattern"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A log pattern that matches if all the strings given appear in the event."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 52
          },
          "name": "allTerms",
          "parameters": [
            {
              "docs": {
                "remarks": "All terms must match.",
                "summary": "The words to search for."
              },
              "name": "terms",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.IFilterPattern"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A JSON log pattern that matches if any of the given JSON log patterns match."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 171
          },
          "name": "any",
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "fqn": "@aws-cdk/aws-logs.JsonPattern"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.JsonPattern"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A log pattern that matches if any of the strings given appear in the event."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 61
          },
          "name": "anyTerm",
          "parameters": [
            {
              "docs": {
                "remarks": "Any terms must match.",
                "summary": "The words to search for."
              },
              "name": "terms",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.IFilterPattern"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "remarks": "A term group matches an event if all the terms in it appear in the event string.",
            "stability": "stable",
            "summary": "A log pattern that matches if any of the given term groups matches the event."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 72
          },
          "name": "anyTermGroup",
          "parameters": [
            {
              "docs": {
                "remarks": "Any one of the clauses must match.",
                "summary": "A list of term groups to search for."
              },
              "name": "termGroups",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.IFilterPattern"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A JSON log pattern that matches if the field exists and equals the boolean value."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 155
          },
          "name": "booleanValue",
          "parameters": [
            {
              "docs": {
                "remarks": "Example: \"$.myField\"",
                "summary": "Field inside JSON."
              },
              "name": "jsonField",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The value to match."
              },
              "name": "value",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.JsonPattern"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This is a readable convenience wrapper over 'field = *'",
            "stability": "stable",
            "summary": "A JSON log patter that matches if the field exists."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 145
          },
          "name": "exists",
          "parameters": [
            {
              "docs": {
                "remarks": "Example: \"$.myField\"",
                "summary": "Field inside JSON."
              },
              "name": "jsonField",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.JsonPattern"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A JSON log pattern that matches if the field exists and has the special value 'null'."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 125
          },
          "name": "isNull",
          "parameters": [
            {
              "docs": {
                "remarks": "Example: \"$.myField\"",
                "summary": "Field inside JSON."
              },
              "name": "jsonField",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.JsonPattern"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "See https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html\nfor information on writing log patterns.",
            "stability": "stable",
            "summary": "Use the given string as log pattern."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 36
          },
          "name": "literal",
          "parameters": [
            {
              "docs": {
                "summary": "The pattern string to use."
              },
              "name": "logPatternString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.IFilterPattern"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A JSON log pattern that matches if the field does not exist."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 134
          },
          "name": "notExists",
          "parameters": [
            {
              "docs": {
                "remarks": "Example: \"$.myField\"",
                "summary": "Field inside JSON."
              },
              "name": "jsonField",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.JsonPattern"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This pattern only matches if the event is a JSON event, and the indicated field inside\ncompares with the value in the indicated way.\n\nUse '$' to indicate the root of the JSON structure. The comparison operator can only\ncompare equality or inequality. The '*' wildcard may appear in the value may at the\nstart or at the end.\n\nFor more information, see:\n\nhttps://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html",
            "stability": "stable",
            "summary": "A JSON log pattern that compares numerical values."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 116
          },
          "name": "numberValue",
          "parameters": [
            {
              "docs": {
                "remarks": "Example: \"$.myField\"",
                "summary": "Field inside JSON."
              },
              "name": "jsonField",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "One of =, !=, <, <=, >, >=.",
                "summary": "Comparison to carry out."
              },
              "name": "comparison",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The numerical value to compare to."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.JsonPattern"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The log event is divided into space-delimited columns (optionally\nenclosed by \"\" or [] to capture spaces into column values), and names\nare given to each column.\n\n'...' may be specified once to match any number of columns.\n\nAfterwards, conditions may be added to individual columns.",
            "stability": "stable",
            "summary": "A space delimited log pattern matcher."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 190
          },
          "name": "spaceDelimited",
          "parameters": [
            {
              "docs": {
                "summary": "The columns in the space-delimited log stream."
              },
              "name": "columns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.SpaceDelimitedTextPattern"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "remarks": "This pattern only matches if the event is a JSON event, and the indicated field inside\ncompares with the string value.\n\nUse '$' to indicate the root of the JSON structure. The comparison operator can only\ncompare equality or inequality. The '*' wildcard may appear in the value may at the\nstart or at the end.\n\nFor more information, see:\n\nhttps://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html",
            "stability": "stable",
            "summary": "A JSON log pattern that compares string values."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 94
          },
          "name": "stringValue",
          "parameters": [
            {
              "docs": {
                "remarks": "Example: \"$.myField\"",
                "summary": "Field inside JSON."
              },
              "name": "jsonField",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "Either = or !=.",
                "summary": "Comparison to carry out."
              },
              "name": "comparison",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "May use '*' as wildcard at start or end of string.",
                "summary": "The string value to compare to."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.JsonPattern"
            }
          },
          "static": true
        }
      ],
      "name": "FilterPattern",
      "symbolId": "lib/pattern:FilterPattern"
    },
    "@aws-cdk/aws-logs.IFilterPattern": {
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "stability": "stable",
        "summary": "Interface for objects that can render themselves to log patterns."
      },
      "fqn": "@aws-cdk/aws-logs.IFilterPattern",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/pattern.ts",
        "line": 6
      },
      "name": "IFilterPattern",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 7
          },
          "name": "logPatternString",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/pattern:IFilterPattern"
    },
    "@aws-cdk/aws-logs.ILogGroup": {
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-logs.ILogGroup",
      "interfaces": [
        "@aws-cdk/aws-iam.IResourceWithPolicy"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-group.ts",
        "line": 13
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Create a new Metric Filter on this Log Group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 49
          },
          "name": "addMetricFilter",
          "parameters": [
            {
              "docs": {
                "summary": "Unique identifier for the construct in its parent."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Properties for creating the MetricFilter."
              },
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-logs.MetricFilterOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.MetricFilter"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Create a new Log Stream for this Log Group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 33
          },
          "name": "addStream",
          "parameters": [
            {
              "docs": {
                "summary": "Unique identifier for the construct in its parent."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Properties for creating the LogStream."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-logs.StreamOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.LogStream"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Create a new Subscription Filter on this Log Group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 41
          },
          "name": "addSubscriptionFilter",
          "parameters": [
            {
              "docs": {
                "summary": "Unique identifier for the construct in its parent."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Properties for creating the SubscriptionFilter."
              },
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-logs.SubscriptionFilterOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.SubscriptionFilter"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Creates a MetricFilter on this LogGroup that will extract the value\nof the indicated JSON field in all records where it occurs.\n\nThe metric will be available in CloudWatch Metrics under the\nindicated namespace and name.",
            "returns": "A Metric object representing the extracted metric",
            "stability": "stable",
            "summary": "Extract a metric from structured log events in the LogGroup."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 65
          },
          "name": "extractMetric",
          "parameters": [
            {
              "docs": {
                "summary": "JSON field to extract (example: '$.myfield')."
              },
              "name": "jsonField",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Namespace to emit the metric under."
              },
              "name": "metricNamespace",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Name to emit the metric under."
              },
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Give the indicated permissions on this log group and all streams."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 75
          },
          "name": "grant",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Give permissions to write to create and write to streams in this log group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 70
          },
          "name": "grantWrite",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Public method to get the physical name of this log group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 80
          },
          "name": "logGroupPhysicalName",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ILogGroup",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of this log group, with ':*' appended."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 19
          },
          "name": "logGroupArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of this log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 25
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-group:ILogGroup"
    },
    "@aws-cdk/aws-logs.ILogStream": {
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-logs.ILogStream",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-stream.ts",
        "line": 6
      },
      "name": "ILogStream",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of this log stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-stream.ts",
            "line": 11
          },
          "name": "logStreamName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-stream:ILogStream"
    },
    "@aws-cdk/aws-logs.ILogSubscriptionDestination": {
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "stability": "stable",
        "summary": "Interface for classes that can be the destination of a log Subscription."
      },
      "fqn": "@aws-cdk/aws-logs.ILogSubscriptionDestination",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/subscription-filter.ts",
        "line": 14
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If necessary, the destination can use the properties of the SubscriptionFilter\nobject itself to configure its permissions to allow the subscription to write\nto it.\n\nThe destination may reconfigure its own permissions in response to this\nfunction call.",
            "stability": "stable",
            "summary": "Return the properties required to send subscription events to this destination."
          },
          "locationInModule": {
            "filename": "lib/subscription-filter.ts",
            "line": 25
          },
          "name": "bind",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "sourceLogGroup",
              "type": {
                "fqn": "@aws-cdk/aws-logs.ILogGroup"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.LogSubscriptionDestinationConfig"
            }
          }
        }
      ],
      "name": "ILogSubscriptionDestination",
      "symbolId": "lib/subscription-filter:ILogSubscriptionDestination"
    },
    "@aws-cdk/aws-logs.JsonPattern": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nconst pattern = logs.FilterPattern.all(\n  logs.FilterPattern.stringValue('$.component', '=', 'HttpServer'),\n  logs.FilterPattern.any(\n    logs.FilterPattern.booleanValue('$.error', true),\n    logs.FilterPattern.numberValue('$.latency', '>', 1000),\n  ),\n);",
        "stability": "stable",
        "summary": "Base class for patterns that only match JSON log events."
      },
      "fqn": "@aws-cdk/aws-logs.JsonPattern",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/pattern.ts",
          "line": 16
        },
        "parameters": [
          {
            "name": "jsonPatternString",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-logs.IFilterPattern"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/pattern.ts",
        "line": 13
      },
      "name": "JsonPattern",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 16
          },
          "name": "jsonPatternString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 18
          },
          "name": "logPatternString",
          "overrides": "@aws-cdk/aws-logs.IFilterPattern",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/pattern:JsonPattern"
    },
    "@aws-cdk/aws-logs.LogGroup": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'Log Group');\nconst logBucket = new s3.Bucket(this, 'S3 Bucket')\n\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logGroup: logGroup,\n    logBucket: logBucket,\n  },\n});",
        "stability": "stable",
        "summary": "Define a CloudWatch Log Group."
      },
      "fqn": "@aws-cdk/aws-logs.LogGroup",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/log-group.ts",
          "line": 416
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-logs.LogGroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-logs.ILogGroup"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-group.ts",
        "line": 370
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing LogGroup given its ARN."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 374
          },
          "name": "fromLogGroupArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "logGroupArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.ILogGroup"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing LogGroup given its name."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 390
          },
          "name": "fromLogGroupName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "logGroupName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.ILogGroup"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a new Metric Filter on this Log Group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 132
          },
          "name": "addMetricFilter",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "parameters": [
            {
              "docs": {
                "summary": "Unique identifier for the construct in its parent."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Properties for creating the MetricFilter."
              },
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-logs.MetricFilterOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.MetricFilter"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a new Log Stream for this Log Group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 106
          },
          "name": "addStream",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "parameters": [
            {
              "docs": {
                "summary": "Unique identifier for the construct in its parent."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Properties for creating the LogStream."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-logs.StreamOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.LogStream"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a new Subscription Filter on this Log Group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 119
          },
          "name": "addSubscriptionFilter",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "parameters": [
            {
              "docs": {
                "summary": "Unique identifier for the construct in its parent."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Properties for creating the SubscriptionFilter."
              },
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-logs.SubscriptionFilterOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.SubscriptionFilter"
            }
          }
        },
        {
          "docs": {
            "remarks": "A resource policy will be automatically created upon the first call to `addToResourcePolicy`.\n\nAny ARN Principals inside of the statement will be converted into AWS Account ID strings\nbecause CloudWatch Logs Resource Policies do not accept ARN principals.",
            "stability": "stable",
            "summary": "Adds a statement to the resource policy associated with this log group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 203
          },
          "name": "addToResourcePolicy",
          "overrides": "@aws-cdk/aws-iam.IResourceWithPolicy",
          "parameters": [
            {
              "docs": {
                "summary": "The policy statement to add."
              },
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.AddToResourcePolicyResult"
            }
          }
        },
        {
          "docs": {
            "remarks": "Creates a MetricFilter on this LogGroup that will extract the value\nof the indicated JSON field in all records where it occurs.\n\nThe metric will be available in CloudWatch Metrics under the\nindicated namespace and name.",
            "returns": "A Metric object representing the extracted metric",
            "stability": "stable",
            "summary": "Extract a metric from structured log events in the LogGroup."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 153
          },
          "name": "extractMetric",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "parameters": [
            {
              "docs": {
                "summary": "JSON field to extract (example: '$.myfield')."
              },
              "name": "jsonField",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Namespace to emit the metric under."
              },
              "name": "metricNamespace",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Name to emit the metric under."
              },
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Give the indicated permissions on this log group and all streams."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 175
          },
          "name": "grant",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Give permissions to create and write to streams in this log group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 168
          },
          "name": "grantWrite",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "docs": {
            "returns": "Physical name of log group",
            "stability": "stable",
            "summary": "Public method to get the physical name of this log group."
          },
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 190
          },
          "name": "logGroupPhysicalName",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "LogGroup",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The ARN of this log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 409
          },
          "name": "logGroupArn",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of this log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 414
          },
          "name": "logGroupName",
          "overrides": "@aws-cdk/aws-logs.ILogGroup",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-group:LogGroup"
    },
    "@aws-cdk/aws-logs.LogGroupProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
        "stability": "stable",
        "summary": "Properties for a LogGroup."
      },
      "fqn": "@aws-cdk/aws-logs.LogGroupProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-group.ts",
        "line": 330
      },
      "name": "LogGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- log group is encrypted with the default master key",
            "stability": "stable",
            "summary": "The KMS Key to encrypt the log group with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 336
          },
          "name": "encryptionKey",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-kms.IKey"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Automatically generated",
            "stability": "stable",
            "summary": "Name of the log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 343
          },
          "name": "logGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RemovalPolicy.Retain",
            "remarks": "Normally you want to retain the log group so you can diagnose issues\nfrom logs even after a deployment that no longer includes the log group.\nIn that case, use the normal date-based retention policy to age out your\nlogs.",
            "stability": "stable",
            "summary": "Determine the removal policy of this log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 364
          },
          "name": "removalPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.RemovalPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RetentionDays.TWO_YEARS",
            "remarks": "To retain all logs, set this value to RetentionDays.INFINITE.",
            "stability": "stable",
            "summary": "How long, in days, the log contents will be retained."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 352
          },
          "name": "retention",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-logs.RetentionDays"
          }
        }
      ],
      "symbolId": "lib/log-group:LogGroupProps"
    },
    "@aws-cdk/aws-logs.LogRetention": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "The log group is created if it doesn't already exist. The policy\nis removed when `retentionDays` is `undefined` or equal to `Infinity`.\nLog group can be created in the region that is different from stack region by\nspecifying `logGroupRegion`",
        "stability": "stable",
        "summary": "Creates a custom resource to control the retention policy of a CloudWatch Logs log group.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\nconst logRetention = new logs.LogRetention(this, 'MyLogRetention', {\n  logGroupName: 'logGroupName',\n  retention: logs.RetentionDays.ONE_DAY,\n\n  // the properties below are optional\n  logGroupRegion: 'logGroupRegion',\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  role: role,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.LogRetention",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/log-retention.ts",
          "line": 83
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.LogRetentionProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-retention.ts",
        "line": 76
      },
      "name": "LogRetention",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The ARN of the LogGroup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-retention.ts",
            "line": 81
          },
          "name": "logGroupArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-retention:LogRetention"
    },
    "@aws-cdk/aws-logs.LogRetentionProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Construction properties for a LogRetention.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\nconst logRetentionProps: logs.LogRetentionProps = {\n  logGroupName: 'logGroupName',\n  retention: logs.RetentionDays.ONE_DAY,\n\n  // the properties below are optional\n  logGroupRegion: 'logGroupRegion',\n  logRetentionRetryOptions: {\n    base: cdk.Duration.minutes(30),\n    maxRetries: 123,\n  },\n  role: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.LogRetentionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-retention.ts",
        "line": 19
      },
      "name": "LogRetentionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The log group name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-retention.ts",
            "line": 23
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The number of days log events are kept in CloudWatch Logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-retention.ts",
            "line": 34
          },
          "name": "retention",
          "type": {
            "fqn": "@aws-cdk/aws-logs.RetentionDays"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- same region as the stack",
            "stability": "stable",
            "summary": "The region where the log group should be created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-retention.ts",
            "line": 29
          },
          "name": "logGroupRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AWS SDK default retry options",
            "stability": "stable",
            "summary": "Retry options for all AWS API calls."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-retention.ts",
            "line": 48
          },
          "name": "logRetentionRetryOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-logs.LogRetentionRetryOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new role is created",
            "stability": "stable",
            "summary": "The IAM role for the Lambda function associated with the custom resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-retention.ts",
            "line": 41
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/log-retention:LogRetentionProps"
    },
    "@aws-cdk/aws-logs.LogRetentionRetryOptions": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Retry options for all AWS API calls.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nconst logRetentionRetryOptions: logs.LogRetentionRetryOptions = {\n  base: cdk.Duration.minutes(30),\n  maxRetries: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.LogRetentionRetryOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-retention.ts",
        "line": 54
      },
      "name": "LogRetentionRetryOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "Duration.millis(100) (AWS SDK default)",
            "stability": "stable",
            "summary": "The base duration to use in the exponential backoff for operation retries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-retention.ts",
            "line": 66
          },
          "name": "base",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "3 (AWS SDK default)",
            "stability": "stable",
            "summary": "The maximum amount of retries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-retention.ts",
            "line": 60
          },
          "name": "maxRetries",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/log-retention:LogRetentionRetryOptions"
    },
    "@aws-cdk/aws-logs.LogStream": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "Define a Log Stream in a Log Group.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const logGroup: logs.LogGroup;\nconst logStream = new logs.LogStream(this, 'MyLogStream', {\n  logGroup: logGroup,\n\n  // the properties below are optional\n  logStreamName: 'logStreamName',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.LogStream",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/log-stream.ts",
          "line": 67
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.LogStreamProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-logs.ILogStream"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-stream.ts",
        "line": 50
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing LogGroup."
          },
          "locationInModule": {
            "filename": "lib/log-stream.ts",
            "line": 54
          },
          "name": "fromLogStreamName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "logStreamName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.ILogStream"
            }
          },
          "static": true
        }
      ],
      "name": "LogStream",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of this log stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-stream.ts",
            "line": 65
          },
          "name": "logStreamName",
          "overrides": "@aws-cdk/aws-logs.ILogStream",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-stream:LogStream"
    },
    "@aws-cdk/aws-logs.LogStreamProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a LogStream.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const logGroup: logs.LogGroup;\nconst logStreamProps: logs.LogStreamProps = {\n  logGroup: logGroup,\n\n  // the properties below are optional\n  logStreamName: 'logStreamName',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.LogStreamProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-stream.ts",
        "line": 17
      },
      "name": "LogStreamProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The log group to create a log stream for."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-stream.ts",
            "line": 21
          },
          "name": "logGroup",
          "type": {
            "fqn": "@aws-cdk/aws-logs.ILogGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Automatically generated",
            "remarks": "The name must be unique within the log group.",
            "stability": "stable",
            "summary": "The name of the log stream to create."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-stream.ts",
            "line": 30
          },
          "name": "logStreamName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RemovalPolicy.Retain",
            "remarks": "Normally you want to retain the log stream so you can diagnose issues from\nlogs even after a deployment that no longer includes the log stream.\n\nThe date-based retention policy of your log group will age out the logs\nafter a certain time.",
            "stability": "stable",
            "summary": "Determine what happens when the log stream resource is removed from the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-stream.ts",
            "line": 44
          },
          "name": "removalPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.RemovalPolicy"
          }
        }
      ],
      "symbolId": "lib/log-stream:LogStreamProps"
    },
    "@aws-cdk/aws-logs.LogSubscriptionDestinationConfig": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties returned by a Subscription destination.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const role: iam.Role;\nconst logSubscriptionDestinationConfig: logs.LogSubscriptionDestinationConfig = {\n  arn: 'arn',\n\n  // the properties below are optional\n  role: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.LogSubscriptionDestinationConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/subscription-filter.ts",
        "line": 31
      },
      "name": "LogSubscriptionDestinationConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The ARN of the subscription's destination."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subscription-filter.ts",
            "line": 35
          },
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No role assumed",
            "stability": "stable",
            "summary": "The role to assume to write log events to the destination."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subscription-filter.ts",
            "line": 42
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/subscription-filter:LogSubscriptionDestinationConfig"
    },
    "@aws-cdk/aws-logs.MetricFilter": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.metricfilter.lit.ts infused"
        },
        "example": "new MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});",
        "stability": "stable",
        "summary": "A filter that extracts information from CloudWatch Logs and emits to CloudWatch Metrics."
      },
      "fqn": "@aws-cdk/aws-logs.MetricFilter",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/metric-filter.ts",
          "line": 25
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.MetricFilterProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/metric-filter.ts",
        "line": 20
      },
      "methods": [
        {
          "docs": {
            "default": "avg over 5 minutes",
            "stability": "stable",
            "summary": "Return the given named metric for this Metric Filter."
          },
          "locationInModule": {
            "filename": "lib/metric-filter.ts",
            "line": 56
          },
          "name": "metric",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        }
      ],
      "name": "MetricFilter",
      "symbolId": "lib/metric-filter:MetricFilter"
    },
    "@aws-cdk/aws-logs.MetricFilterOptions": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a MetricFilter created from a LogGroup.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const filterPattern: logs.IFilterPattern;\nconst metricFilterOptions: logs.MetricFilterOptions = {\n  filterPattern: filterPattern,\n  metricName: 'metricName',\n  metricNamespace: 'metricNamespace',\n\n  // the properties below are optional\n  defaultValue: 123,\n  metricValue: 'metricValue',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.MetricFilterOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-group.ts",
        "line": 481
      },
      "name": "MetricFilterOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Pattern to search for log events."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 485
          },
          "name": "filterPattern",
          "type": {
            "fqn": "@aws-cdk/aws-logs.IFilterPattern"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the metric to emit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 495
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The namespace of the metric to emit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 490
          },
          "name": "metricNamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No metric emitted.",
            "stability": "stable",
            "summary": "The value to emit if the pattern does not match a particular event."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 519
          },
          "name": "defaultValue",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"1\"",
            "remarks": "Can either be a literal number (typically \"1\"), or the name of a field in the structure\nto take the value from the matched event. If you are using a field value, the field\nvalue must have been matched using the pattern.\n\nIf you want to specify a field from a matched JSON structure, use '$.fieldName',\nand make sure the field is in the pattern (if only as '$.fieldName = *').\n\nIf you want to specify a field from a matched space-delimited structure,\nuse '$fieldName'.",
            "stability": "stable",
            "summary": "The value to emit for the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 512
          },
          "name": "metricValue",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-group:MetricFilterOptions"
    },
    "@aws-cdk/aws-logs.MetricFilterProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.metricfilter.lit.ts infused"
        },
        "example": "new MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});",
        "stability": "stable",
        "summary": "Properties for a MetricFilter."
      },
      "fqn": "@aws-cdk/aws-logs.MetricFilterProps",
      "interfaces": [
        "@aws-cdk/aws-logs.MetricFilterOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-filter.ts",
        "line": 10
      },
      "name": "MetricFilterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The log group to create the filter on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-filter.ts",
            "line": 14
          },
          "name": "logGroup",
          "type": {
            "fqn": "@aws-cdk/aws-logs.ILogGroup"
          }
        }
      ],
      "symbolId": "lib/metric-filter:MetricFilterProps"
    },
    "@aws-cdk/aws-logs.QueryDefinition": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new logs.QueryDefinition(this, 'QueryDefinition', {\n  queryDefinitionName: 'MyQuery',\n  queryString: new logs.QueryString({\n    fields: ['@timestamp', '@message'],\n    sort: '@timestamp desc',\n    limit: 20,\n  }),\n});",
        "stability": "stable",
        "summary": "Define a query definition for CloudWatch Logs Insights."
      },
      "fqn": "@aws-cdk/aws-logs.QueryDefinition",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/query-definition.ts",
          "line": 152
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.QueryDefinitionProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/query-definition.ts",
        "line": 144
      },
      "name": "QueryDefinition",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ID of the query definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 150
          },
          "name": "queryDefinitionId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/query-definition:QueryDefinition"
    },
    "@aws-cdk/aws-logs.QueryDefinitionProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new logs.QueryDefinition(this, 'QueryDefinition', {\n  queryDefinitionName: 'MyQuery',\n  queryString: new logs.QueryString({\n    fields: ['@timestamp', '@message'],\n    sort: '@timestamp desc',\n    limit: 20,\n  }),\n});",
        "stability": "stable",
        "summary": "Properties for a QueryDefinition."
      },
      "fqn": "@aws-cdk/aws-logs.QueryDefinitionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/query-definition.ts",
        "line": 122
      },
      "name": "QueryDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the query definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 126
          },
          "name": "queryDefinitionName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The query string to use for this query definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 131
          },
          "name": "queryString",
          "type": {
            "fqn": "@aws-cdk/aws-logs.QueryString"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no specified log groups",
            "stability": "stable",
            "summary": "Specify certain log groups for the query definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 138
          },
          "name": "logGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-logs.ILogGroup"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/query-definition:QueryDefinitionProps"
    },
    "@aws-cdk/aws-logs.QueryString": {
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new logs.QueryDefinition(this, 'QueryDefinition', {\n  queryDefinitionName: 'MyQuery',\n  queryString: new logs.QueryString({\n    fields: ['@timestamp', '@message'],\n    sort: '@timestamp desc',\n    limit: 20,\n  }),\n});",
        "stability": "stable",
        "summary": "Define a QueryString."
      },
      "fqn": "@aws-cdk/aws-logs.QueryString",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/query-definition.ts",
          "line": 83
        },
        "parameters": [
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-logs.QueryStringProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/query-definition.ts",
        "line": 74
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "String representation of this QueryString."
          },
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 96
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "QueryString",
      "symbolId": "lib/query-definition:QueryString"
    },
    "@aws-cdk/aws-logs.QueryStringProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new logs.QueryDefinition(this, 'QueryDefinition', {\n  queryDefinitionName: 'MyQuery',\n  queryString: new logs.QueryString({\n    fields: ['@timestamp', '@message'],\n    sort: '@timestamp desc',\n    limit: 20,\n  }),\n});",
        "stability": "stable",
        "summary": "Properties for a QueryString."
      },
      "fqn": "@aws-cdk/aws-logs.QueryStringProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/query-definition.ts",
        "line": 10
      },
      "name": "QueryStringProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no display in QueryString",
            "stability": "stable",
            "summary": "Specifies which fields to display in the query results."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 58
          },
          "name": "display",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no fields in QueryString",
            "stability": "stable",
            "summary": "Retrieves the specified fields from log events for display."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 16
          },
          "name": "fields",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no filter in QueryString",
            "stability": "stable",
            "summary": "Filters the results of a query that's based on one or more conditions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 30
          },
          "name": "filter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no limit in QueryString",
            "stability": "stable",
            "summary": "Specifies the number of log events returned by the query."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 51
          },
          "name": "limit",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no parse in QueryString",
            "stability": "stable",
            "summary": "Extracts data from a log field and creates one or more ephemeral fields that you can process further in the query."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 23
          },
          "name": "parse",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no sort in QueryString",
            "stability": "stable",
            "summary": "Sorts the retrieved log events."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 44
          },
          "name": "sort",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no stats in QueryString",
            "stability": "stable",
            "summary": "Uses log field values to calculate aggregate statistics."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/query-definition.ts",
            "line": 37
          },
          "name": "stats",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/query-definition:QueryStringProps"
    },
    "@aws-cdk/aws-logs.ResourcePolicy": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "remarks": "Policies define the operations that are allowed on this resource.\n\nYou almost never need to define this construct directly.\n\nAll AWS resources that support resource policies have a method called\n`addToResourcePolicy()`, which will automatically create a new resource\npolicy if one doesn't exist yet, otherwise it will add to the existing\npolicy.\n\nPrefer to use `addToResourcePolicy()` instead.",
        "stability": "stable",
        "summary": "Resource Policy for CloudWatch Log Groups.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const policyStatement: iam.PolicyStatement;\nconst resourcePolicy = new logs.ResourcePolicy(this, 'MyResourcePolicy', /* all optional props */ {\n  policyStatements: [policyStatement],\n  resourcePolicyName: 'resourcePolicyName',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.ResourcePolicy",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/policy.ts",
          "line": 44
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-logs.ResourcePolicyProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/policy.ts",
        "line": 38
      },
      "name": "ResourcePolicy",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The IAM policy document for this resource policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/policy.ts",
            "line": 42
          },
          "name": "document",
          "type": {
            "fqn": "@aws-cdk/aws-iam.PolicyDocument"
          }
        }
      ],
      "symbolId": "lib/policy:ResourcePolicy"
    },
    "@aws-cdk/aws-logs.ResourcePolicyProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties to define Cloudwatch log group resource policy.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const policyStatement: iam.PolicyStatement;\nconst resourcePolicyProps: logs.ResourcePolicyProps = {\n  policyStatements: [policyStatement],\n  resourcePolicyName: 'resourcePolicyName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.ResourcePolicyProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/policy.ts",
        "line": 9
      },
      "name": "ResourcePolicyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No statements",
            "stability": "stable",
            "summary": "Initial statements to add to the resource policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/policy.ts",
            "line": 21
          },
          "name": "policyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Uses a unique id based on the construct path",
            "stability": "stable",
            "summary": "Name of the log group resource policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/policy.ts",
            "line": 14
          },
          "name": "resourcePolicyName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/policy:ResourcePolicyProps"
    },
    "@aws-cdk/aws-logs.RetentionDays": {
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as logs from '@aws-cdk/aws-logs';\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n\n// Exporting logs from a cluster\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({\n    version: rds.AuroraEngineVersion.VER_1_17_9, // different version class for each engine type\n  }),\n  instanceProps: {\n    vpc,\n  },\n  cloudwatchLogsExports: ['error', 'general', 'slowquery', 'audit'], // Export all available MySQL-based logs\n  cloudwatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudwatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n  // ...\n});\n\n// Exporting logs from an instance\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({\n    version: rds.PostgresEngineVersion.VER_12_3,\n  }),\n  vpc,\n  cloudwatchLogsExports: ['postgresql'], // Export the PostgreSQL logs\n  // ...\n});",
        "stability": "stable",
        "summary": "How long, in days, the log contents will be retained."
      },
      "fqn": "@aws-cdk/aws-logs.RetentionDays",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/log-group.ts",
        "line": 235
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "1 day."
          },
          "name": "ONE_DAY"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "3 days."
          },
          "name": "THREE_DAYS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "5 days."
          },
          "name": "FIVE_DAYS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "1 week."
          },
          "name": "ONE_WEEK"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "2 weeks."
          },
          "name": "TWO_WEEKS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "1 month."
          },
          "name": "ONE_MONTH"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "2 months."
          },
          "name": "TWO_MONTHS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "3 months."
          },
          "name": "THREE_MONTHS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "4 months."
          },
          "name": "FOUR_MONTHS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "5 months."
          },
          "name": "FIVE_MONTHS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "6 months."
          },
          "name": "SIX_MONTHS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "1 year."
          },
          "name": "ONE_YEAR"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "13 months."
          },
          "name": "THIRTEEN_MONTHS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "18 months."
          },
          "name": "EIGHTEEN_MONTHS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "2 years."
          },
          "name": "TWO_YEARS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "5 years."
          },
          "name": "FIVE_YEARS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "10 years."
          },
          "name": "TEN_YEARS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Retain logs forever."
          },
          "name": "INFINITE"
        }
      ],
      "name": "RetentionDays",
      "symbolId": "lib/log-group:RetentionDays"
    },
    "@aws-cdk/aws-logs.SpaceDelimitedTextPattern": {
      "assembly": "@aws-cdk/aws-logs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nconst pattern = logs.FilterPattern.spaceDelimited('time', 'component', '...', 'result_code', 'latency')\n  .whereString('component', '=', 'HttpServer')\n  .whereNumber('result_code', '!=', 200);",
        "stability": "stable",
        "summary": "Space delimited text pattern."
      },
      "fqn": "@aws-cdk/aws-logs.SpaceDelimitedTextPattern",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/pattern.ts",
          "line": 299
        },
        "parameters": [
          {
            "name": "columns",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          {
            "name": "restrictions",
            "type": {
              "collection": {
                "elementtype": {
                  "collection": {
                    "elementtype": {
                      "fqn": "@aws-cdk/aws-logs.ColumnRestriction"
                    },
                    "kind": "array"
                  }
                },
                "kind": "map"
              }
            }
          }
        ],
        "protected": true
      },
      "interfaces": [
        "@aws-cdk/aws-logs.IFilterPattern"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/pattern.ts",
        "line": 271
      },
      "methods": [
        {
          "docs": {
            "remarks": "Since this class must be public, we can't rely on the user only creating it through\nthe `LogPattern.spaceDelimited()` factory function. We must therefore validate the\nargument in the constructor. Since we're returning a copy on every mutation, and we\ndon't want to re-validate the same things on every construction, we provide a limited\nset of mutator functions and only validate the new data every time.",
            "stability": "stable",
            "summary": "Construct a new instance of a space delimited text pattern."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 281
          },
          "name": "construct",
          "parameters": [
            {
              "name": "columns",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.SpaceDelimitedTextPattern"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Restrict where the pattern applies."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 325
          },
          "name": "whereNumber",
          "parameters": [
            {
              "name": "columnName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "comparison",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.SpaceDelimitedTextPattern"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Restrict where the pattern applies."
          },
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 306
          },
          "name": "whereString",
          "parameters": [
            {
              "name": "columnName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "comparison",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-logs.SpaceDelimitedTextPattern"
            }
          }
        }
      ],
      "name": "SpaceDelimitedTextPattern",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pattern.ts",
            "line": 341
          },
          "name": "logPatternString",
          "overrides": "@aws-cdk/aws-logs.IFilterPattern",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/pattern:SpaceDelimitedTextPattern"
    },
    "@aws-cdk/aws-logs.StreamOptions": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a new LogStream created from a LogGroup.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\nconst streamOptions: logs.StreamOptions = {\n  logStreamName: 'logStreamName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.StreamOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-group.ts",
        "line": 450
      },
      "name": "StreamOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "Automatically generated",
            "remarks": "The name must be unique within the log group.",
            "stability": "stable",
            "summary": "The name of the log stream to create."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 458
          },
          "name": "logStreamName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-group:StreamOptions"
    },
    "@aws-cdk/aws-logs.SubscriptionFilter": {
      "assembly": "@aws-cdk/aws-logs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});",
        "stability": "stable",
        "summary": "A new Subscription on a CloudWatch log group."
      },
      "fqn": "@aws-cdk/aws-logs.SubscriptionFilter",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/subscription-filter.ts",
          "line": 59
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-logs.SubscriptionFilterProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/subscription-filter.ts",
        "line": 58
      },
      "name": "SubscriptionFilter",
      "symbolId": "lib/subscription-filter:SubscriptionFilter"
    },
    "@aws-cdk/aws-logs.SubscriptionFilterOptions": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a new SubscriptionFilter created from a LogGroup.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const filterPattern: logs.IFilterPattern;\ndeclare const logSubscriptionDestination: logs.ILogSubscriptionDestination;\nconst subscriptionFilterOptions: logs.SubscriptionFilterOptions = {\n  destination: logSubscriptionDestination,\n  filterPattern: filterPattern,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-logs.SubscriptionFilterOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-group.ts",
        "line": 464
      },
      "name": "SubscriptionFilterOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "For example, a Kinesis stream or a Lambda function.",
            "stability": "stable",
            "summary": "The destination to send the filtered events to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 470
          },
          "name": "destination",
          "type": {
            "fqn": "@aws-cdk/aws-logs.ILogSubscriptionDestination"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Log events matching this pattern will be sent to the destination."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-group.ts",
            "line": 475
          },
          "name": "filterPattern",
          "type": {
            "fqn": "@aws-cdk/aws-logs.IFilterPattern"
          }
        }
      ],
      "symbolId": "lib/log-group:SubscriptionFilterOptions"
    },
    "@aws-cdk/aws-logs.SubscriptionFilterProps": {
      "assembly": "@aws-cdk/aws-logs",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});",
        "stability": "stable",
        "summary": "Properties for a SubscriptionFilter."
      },
      "fqn": "@aws-cdk/aws-logs.SubscriptionFilterProps",
      "interfaces": [
        "@aws-cdk/aws-logs.SubscriptionFilterOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/subscription-filter.ts",
        "line": 48
      },
      "name": "SubscriptionFilterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The log group to create the subscription on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subscription-filter.ts",
            "line": 52
          },
          "name": "logGroup",
          "type": {
            "fqn": "@aws-cdk/aws-logs.ILogGroup"
          }
        }
      ],
      "symbolId": "lib/subscription-filter:SubscriptionFilterProps"
    }
  },
  "version": "1.153.1",
  "fingerprint": "**********"
}
