{
  "version": "2",
  "toolVersion": "1.57.0",
  "snippets": {
    "d2cbba24520713fd091c18a6e75df154392478228f0217f116b4fad5ecde7294": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"SampleAsset\",\n    path=path.join(__dirname, \"sample-asset-directory\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"SampleAsset\", new AssetProps {\n    Path = Join(__dirname, \"sample-asset-directory\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"SampleAsset\")\n        .path(join(__dirname, \"sample-asset-directory\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "asset := assets.NewAsset(this, jsii.String(\"SampleAsset\"), &assetProps{\n\tpath: path.join(__dirname, jsii.String(\"sample-asset-directory\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const asset = new assets.Asset(this, 'SampleAsset', {\n  path: path.join(__dirname, 'sample-asset-directory'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-assets"
        },
        "field": {
          "field": "markdown",
          "line": 24
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as assets from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    const asset = new assets.Asset(this, 'SampleAsset', {\n      path: path.join(__dirname, 'sample-asset-directory'),\n    });\n    /// !hide\n\n    const user = new iam.User(this, 'MyUser');\n    asset.grantRead(user);\n  }\n}\n\nconst app = new cdk.App();\nnew TestStack(app, 'aws-cdk-asset-test');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "6ac1a52076330a4976051221694d36729b82d63edfa9be07a2c802b6e32bf50f"
    },
    "62175971b16b66ae2691857037578b8a0c9550f4a34d7eac3ea8835d71e6a4a5": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"SampleAsset\",\n    path=path.join(__dirname, \"file-asset.txt\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"SampleAsset\", new AssetProps {\n    Path = Join(__dirname, \"file-asset.txt\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"SampleAsset\")\n        .path(join(__dirname, \"file-asset.txt\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "asset := assets.NewAsset(this, jsii.String(\"SampleAsset\"), &assetProps{\n\tpath: path.join(__dirname, jsii.String(\"file-asset.txt\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const asset = new assets.Asset(this, 'SampleAsset', {\n  path: path.join(__dirname, 'file-asset.txt'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-assets"
        },
        "field": {
          "field": "markdown",
          "line": 33
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as assets from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    const asset = new assets.Asset(this, 'SampleAsset', {\n      path: path.join(__dirname, 'file-asset.txt'),\n    });\n    /// !hide\n\n    const user = new iam.User(this, 'MyUser');\n    asset.grantRead(user);\n  }\n}\n\nconst app = new cdk.App();\nnew TestStack(app, 'aws-cdk-asset-file-test');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "6ac1a52076330a4976051221694d36729b82d63edfa9be07a2c802b6e32bf50f"
    },
    "565eec6db67dd8bea9663b384480987f3950b9bd8811774eb08b061a9a39c8ee": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"SampleAsset\",\n    path=path.join(__dirname, \"sample-asset-directory\")\n)\n\ncdk.CfnOutput(self, \"S3BucketName\", value=asset.s3_bucket_name)\ncdk.CfnOutput(self, \"S3ObjectKey\", value=asset.s3_object_key)\ncdk.CfnOutput(self, \"S3HttpURL\", value=asset.http_url)\ncdk.CfnOutput(self, \"S3ObjectURL\", value=asset.s3_object_url)",
          "version": "2"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"SampleAsset\", new AssetProps {\n    Path = Join(__dirname, \"sample-asset-directory\")\n});\n\nnew CfnOutput(this, \"S3BucketName\", new CfnOutputProps { Value = asset.S3BucketName });\nnew CfnOutput(this, \"S3ObjectKey\", new CfnOutputProps { Value = asset.S3ObjectKey });\nnew CfnOutput(this, \"S3HttpURL\", new CfnOutputProps { Value = asset.HttpUrl });\nnew CfnOutput(this, \"S3ObjectURL\", new CfnOutputProps { Value = asset.S3ObjectUrl });",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"SampleAsset\")\n        .path(join(__dirname, \"sample-asset-directory\"))\n        .build();\n\nCfnOutput.Builder.create(this, \"S3BucketName\").value(asset.getS3BucketName()).build();\nCfnOutput.Builder.create(this, \"S3ObjectKey\").value(asset.getS3ObjectKey()).build();\nCfnOutput.Builder.create(this, \"S3HttpURL\").value(asset.getHttpUrl()).build();\nCfnOutput.Builder.create(this, \"S3ObjectURL\").value(asset.getS3ObjectUrl()).build();",
          "version": "1"
        },
        "go": {
          "source": "asset := assets.NewAsset(this, jsii.String(\"SampleAsset\"), &assetProps{\n\tpath: path.join(__dirname, jsii.String(\"sample-asset-directory\")),\n})\n\ncdk.NewCfnOutput(this, jsii.String(\"S3BucketName\"), &cfnOutputProps{\n\tvalue: asset.s3BucketName,\n})\ncdk.NewCfnOutput(this, jsii.String(\"S3ObjectKey\"), &cfnOutputProps{\n\tvalue: asset.s3ObjectKey,\n})\ncdk.NewCfnOutput(this, jsii.String(\"S3HttpURL\"), &cfnOutputProps{\n\tvalue: asset.httpUrl,\n})\ncdk.NewCfnOutput(this, jsii.String(\"S3ObjectURL\"), &cfnOutputProps{\n\tvalue: asset.s3ObjectUrl,\n})",
          "version": "1"
        },
        "$": {
          "source": "    const asset = new assets.Asset(this, 'SampleAsset', {\n      path: path.join(__dirname, 'sample-asset-directory'),\n    });\n\n    new cdk.CfnOutput(this, 'S3BucketName', { value: asset.s3BucketName });\n    new cdk.CfnOutput(this, 'S3ObjectKey', { value: asset.s3ObjectKey });\n    new cdk.CfnOutput(this, 'S3HttpURL', { value: asset.httpUrl });\n    new cdk.CfnOutput(this, 'S3ObjectURL', { value: asset.s3ObjectUrl });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-assets"
        },
        "field": {
          "field": "markdown",
          "line": 50
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.Asset#httpUrl",
        "@aws-cdk/aws-s3-assets.Asset#s3BucketName",
        "@aws-cdk/aws-s3-assets.Asset#s3ObjectKey",
        "@aws-cdk/aws-s3-assets.Asset#s3ObjectUrl",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as assets from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    const asset = new assets.Asset(this, 'SampleAsset', {\n      path: path.join(__dirname, 'sample-asset-directory'),\n    });\n\n    new cdk.CfnOutput(this, 'S3BucketName', { value: asset.s3BucketName });\n    new cdk.CfnOutput(this, 'S3ObjectKey', { value: asset.s3ObjectKey });\n    new cdk.CfnOutput(this, 'S3HttpURL', { value: asset.httpUrl });\n    new cdk.CfnOutput(this, 'S3ObjectURL', { value: asset.s3ObjectUrl });\n    /// !hide\n\n    // we need at least one resource\n    asset.grantRead(new iam.User(this, 'MyUser'));\n  }\n}\n\nconst app = new cdk.App();\nnew TestStack(app, 'aws-cdk-asset-refs');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 27,
        "104": 5,
        "193": 5,
        "194": 10,
        "196": 1,
        "197": 5,
        "225": 1,
        "226": 4,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "d844e161b0ce1809f38a786f90099ee911e12e22fc9779d9bf47e16642b0a0c2"
    },
    "5505b1f15c117460edb3ed949edb2b2d98ac90dcc3f9839eb3e41f75738ef30c": {
      "translations": {
        "python": {
          "source": "group = iam.Group(self, \"MyUserGroup\")\nasset.grant_read(group)",
          "version": "2"
        },
        "csharp": {
          "source": "Group group = new Group(this, \"MyUserGroup\");\nasset.GrantRead(group);",
          "version": "1"
        },
        "java": {
          "source": "Group group = new Group(this, \"MyUserGroup\");\nasset.grantRead(group);",
          "version": "1"
        },
        "go": {
          "source": "group := iam.NewGroup(this, jsii.String(\"MyUserGroup\"))\nasset.grantRead(group)",
          "version": "1"
        },
        "$": {
          "source": "const group = new iam.Group(this, 'MyUserGroup');\nasset.grantRead(group);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-assets"
        },
        "field": {
          "field": "markdown",
          "line": 68
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3-assets.Asset#grantRead",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as assets from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const asset = new assets.Asset(this, 'MyFile', {\n      path: path.join(__dirname, 'file-asset.txt'),\n    });\n\n    /// !show\n    const group = new iam.Group(this, 'MyUserGroup');\n    asset.grantRead(group);\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\nnew TestStack(app, 'aws-cdk-asset-refs');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "8a8fc4c343f65f64eb3bec2c19127978c6a9b58ec6aa76e65665fde3d57ca9c9"
    },
    "5c874df6b5687d9e6883ae065c554bebdb4f491452a0bef77e4576be01a8b353": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"BundledAsset\",\n    path=path.join(__dirname, \"markdown-asset\"),  # /asset-input and working directory in the container\n    bundling=BundlingOptions(\n        image=DockerImage.from_build(path.join(__dirname, \"alpine-markdown\")),  # Build an image\n        command=[\"sh\", \"-c\", \"\"\"\n                        markdown index.md > /asset-output/index.html\n                      \"\"\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"BundledAsset\", new AssetProps {\n    Path = Join(__dirname, \"markdown-asset\"),  // /asset-input and working directory in the container\n    Bundling = new BundlingOptions {\n        Image = DockerImage.FromBuild(Join(__dirname, \"alpine-markdown\")),  // Build an image\n        Command = new [] { \"sh\", \"-c\", @\"\n                        markdown index.md > /asset-output/index.html\n                      \" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"BundledAsset\")\n        .path(join(__dirname, \"markdown-asset\")) // /asset-input and working directory in the container\n        .bundling(BundlingOptions.builder()\n                .image(DockerImage.fromBuild(join(__dirname, \"alpine-markdown\"))) // Build an image\n                .command(List.of(\"sh\", \"-c\", \"\\n            markdown index.md > /asset-output/index.html\\n          \"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "asset := assets.NewAsset(this, jsii.String(\"BundledAsset\"), &assetProps{\n\tpath: path.join(__dirname, jsii.String(\"markdown-asset\")),\n\t // /asset-input and working directory in the container\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage.fromBuild(path.join(__dirname, jsii.String(\"alpine-markdown\"))),\n\t\t // Build an image\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"sh\"),\n\t\t\tjsii.String(\"-c\"),\n\t\t\tjsii.String(\"\\n            markdown index.md > /asset-output/index.html\\n          \"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const asset = new assets.Asset(this, 'BundledAsset', {\n  path: path.join(__dirname, 'markdown-asset'), // /asset-input and working directory in the container\n  bundling: {\n    image: DockerImage.fromBuild(path.join(__dirname, 'alpine-markdown')), // Build an image\n    command: [\n      'sh', '-c', `\n        markdown index.md > /asset-output/index.html\n      `,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-assets"
        },
        "field": {
          "field": "markdown",
          "line": 103
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { App, DockerImage, Stack, StackProps } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as assets from '../lib';\n\nclass TestStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    const asset = new assets.Asset(this, 'BundledAsset', {\n      path: path.join(__dirname, 'markdown-asset'), // /asset-input and working directory in the container\n      bundling: {\n        image: DockerImage.fromBuild(path.join(__dirname, 'alpine-markdown')), // Build an image\n        command: [\n          'sh', '-c', `\n            markdown index.md > /asset-output/index.html\n          `,\n        ],\n      },\n    });\n    /// !hide\n\n    const user = new iam.User(this, 'MyUser');\n    asset.grantRead(user);\n  }\n}\n\nconst app = new App();\nnew TestStack(app, 'cdk-integ-assets-bundling');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "14": 1,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "5a886b070c769d03999a19b6b9261d7b95035fd7b316c8e9fb97071632370540"
    },
    "d4136397e26d68ae5869083e1747b021cd11669b23eb060d9d06ceb4d8f084c2": {
      "translations": {
        "python": {
          "source": "@jsii.implements(ILocalBundling)\nclass MyBundle:\n    def try_bundle(self, output_dir, *, image, entrypoint=None, command=None, volumes=None, environment=None, workingDirectory=None, user=None, local=None, outputType=None, securityOpt=None):\n        can_run_locally = True # replace with actual logic\n        if can_run_locally:\n            # perform local bundling here\n            return True\n        return False\n\nassets.Asset(self, \"BundledAsset\",\n    path=\"/path/to/asset\",\n    bundling=BundlingOptions(\n        local=MyBundle(),\n        # Docker bundling fallback\n        image=DockerImage.from_registry(\"alpine\"),\n        entrypoint=[\"/bin/sh\", \"-c\"],\n        command=[\"bundle\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "class MyBundle : ILocalBundling\n{\n    public boolean TryBundle(string outputDir, BundlingOptions options)\n    {\n        boolean canRunLocally = true; // replace with actual logic\n        if (canRunLocally)\n        {\n            // perform local bundling here\n            return true;\n        }\n        return false;\n    }\n}\n\nnew Asset(this, \"BundledAsset\", new AssetProps {\n    Path = \"/path/to/asset\",\n    Bundling = new BundlingOptions {\n        Local = new MyBundle(),\n        // Docker bundling fallback\n        Image = DockerImage.FromRegistry(\"alpine\"),\n        Entrypoint = new [] { \"/bin/sh\", \"-c\" },\n        Command = new [] { \"bundle\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "public class MyBundle implements ILocalBundling {\n    public boolean tryBundle(String outputDir, BundlingOptions options) {\n        boolean canRunLocally = true; // replace with actual logic\n        if (canRunLocally) {\n            // perform local bundling here\n            return true;\n        }\n        return false;\n    }\n}\n\nAsset.Builder.create(this, \"BundledAsset\")\n        .path(\"/path/to/asset\")\n        .bundling(BundlingOptions.builder()\n                .local(new MyBundle())\n                // Docker bundling fallback\n                .image(DockerImage.fromRegistry(\"alpine\"))\n                .entrypoint(List.of(\"/bin/sh\", \"-c\"))\n                .command(List.of(\"bundle\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "type myBundle struct {\n}\n\nfunc (this *myBundle) tryBundle(outputDir *string, options bundlingOptions) *bool {\n\tcanRunLocally := true // replace with actual logic\n\tif canRunLocally {\n\t\t// perform local bundling here\n\t\treturn jsii.Boolean(true)\n\t}\n\treturn jsii.Boolean(false)\n}\n\nassets.NewAsset(this, jsii.String(\"BundledAsset\"), &assetProps{\n\tpath: jsii.String(\"/path/to/asset\"),\n\tbundling: &bundlingOptions{\n\t\tlocal: NewMyBundle(),\n\t\t// Docker bundling fallback\n\t\timage: dockerImage.fromRegistry(jsii.String(\"alpine\")),\n\t\tentrypoint: []*string{\n\t\t\tjsii.String(\"/bin/sh\"),\n\t\t\tjsii.String(\"-c\"),\n\t\t},\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"bundle\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "class MyBundle implements ILocalBundling {\n  public tryBundle(outputDir: string, options: BundlingOptions) {\n    const canRunLocally = true // replace with actual logic\n    if (canRunLocally) {\n      // perform local bundling here\n      return true;\n    }\n    return false;\n  }\n}\n\nnew assets.Asset(this, 'BundledAsset', {\n  path: '/path/to/asset',\n  bundling: {\n    local: new MyBundle(),\n    // Docker bundling fallback\n    image: DockerImage.fromRegistry('alpine'),\n    entrypoint: ['/bin/sh', '-c'],\n    command: ['bundle'],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-assets"
        },
        "field": {
          "field": "markdown",
          "line": 129
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromRegistry",
        "@aws-cdk/core.ILocalBundling",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { BundlingOptions, BundlingOutput, DockerImage, ILocalBundling, Stack } from '@aws-cdk/core';\nimport * as assets from '@aws-cdk/aws-s3-assets';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nclass MyBundle implements ILocalBundling {\n  public tryBundle(outputDir: string, options: BundlingOptions) {\n    const canRunLocally = true // replace with actual logic\n    if (canRunLocally) {\n      // perform local bundling here\n      return true;\n    }\n    return false;\n  }\n}\n\nnew assets.Asset(this, 'BundledAsset', {\n  path: '/path/to/asset',\n  bundling: {\n    local: new MyBundle(),\n    // Docker bundling fallback\n    image: DockerImage.fromRegistry('alpine'),\n    entrypoint: ['/bin/sh', '-c'],\n    command: ['bundle'],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 19,
        "91": 1,
        "104": 1,
        "106": 2,
        "119": 1,
        "143": 1,
        "156": 2,
        "161": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 2,
        "216": 1,
        "223": 2,
        "225": 1,
        "226": 1,
        "227": 1,
        "235": 2,
        "242": 1,
        "243": 1,
        "245": 1,
        "279": 1,
        "281": 6
      },
      "fqnsFingerprint": "dcdb196b19ae46f63f5b9b2e28422620f5a7a98652382210a877b6f540d2d2a0"
    },
    "726150afdcf61d8635e104478e182736cb5e1716cc6af32e72890223278f916b": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"BundledAsset\",\n    path=\"/path/to/asset\",\n    bundling=BundlingOptions(\n        image=DockerImage.from_registry(\"alpine\"),\n        command=[\"command-that-produces-an-archive.sh\"],\n        output_type=BundlingOutput.NOT_ARCHIVED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"BundledAsset\", new AssetProps {\n    Path = \"/path/to/asset\",\n    Bundling = new BundlingOptions {\n        Image = DockerImage.FromRegistry(\"alpine\"),\n        Command = new [] { \"command-that-produces-an-archive.sh\" },\n        OutputType = BundlingOutput.NOT_ARCHIVED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"BundledAsset\")\n        .path(\"/path/to/asset\")\n        .bundling(BundlingOptions.builder()\n                .image(DockerImage.fromRegistry(\"alpine\"))\n                .command(List.of(\"command-that-produces-an-archive.sh\"))\n                .outputType(BundlingOutput.NOT_ARCHIVED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "asset := assets.NewAsset(this, jsii.String(\"BundledAsset\"), &assetProps{\n\tpath: jsii.String(\"/path/to/asset\"),\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage.fromRegistry(jsii.String(\"alpine\")),\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command-that-produces-an-archive.sh\"),\n\t\t},\n\t\toutputType: bundlingOutput_NOT_ARCHIVED,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const asset = new assets.Asset(this, 'BundledAsset', {\n  path: '/path/to/asset',\n  bundling: {\n    image: DockerImage.fromRegistry('alpine'),\n    command: ['command-that-produces-an-archive.sh'],\n    outputType: BundlingOutput.NOT_ARCHIVED, // Bundling output will be zipped even though it produces a single archive file.\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-assets"
        },
        "field": {
          "field": "markdown",
          "line": 163
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#NOT_ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromRegistry",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { BundlingOptions, BundlingOutput, DockerImage, ILocalBundling, Stack } from '@aws-cdk/core';\nimport * as assets from '@aws-cdk/aws-s3-assets';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst asset = new assets.Asset(this, 'BundledAsset', {\n  path: '/path/to/asset',\n  bundling: {\n    image: DockerImage.fromRegistry('alpine'),\n    command: ['command-that-produces-an-archive.sh'],\n    outputType: BundlingOutput.NOT_ARCHIVED, // Bundling output will be zipped even though it produces a single archive file.\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "1902c94ca9ceadaf38bb5e36d8e372fc434344149fcb7fef96ed44b0bc37994b"
    },
    "fb6d11f9047b3dc6d7036093ba13b65f03d2266705234df3b52637fd068590b0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3_assets as s3_assets\n\n# cluster: eks.Cluster\n\nchart_asset = s3_assets.Asset(self, \"ChartAsset\",\n    path=\"/path/to/asset\"\n)\n\ncluster.add_helm_chart(\"test-chart\",\n    chart_asset=chart_asset\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nCluster cluster;\n\nAsset chartAsset = new Asset(this, \"ChartAsset\", new AssetProps {\n    Path = \"/path/to/asset\"\n});\n\ncluster.AddHelmChart(\"test-chart\", new HelmChartOptions {\n    ChartAsset = chartAsset\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.*;\n\nCluster cluster;\n\nAsset chartAsset = Asset.Builder.create(this, \"ChartAsset\")\n        .path(\"/path/to/asset\")\n        .build();\n\ncluster.addHelmChart(\"test-chart\", HelmChartOptions.builder()\n        .chartAsset(chartAsset)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import s3Assets \"github.com/aws-samples/dummy/awscdkawss3assets\"\n\nvar cluster cluster\nchartAsset := s3Assets.NewAsset(this, jsii.String(\"ChartAsset\"), &assetProps{\n\tpath: jsii.String(\"/path/to/asset\"),\n})\n\ncluster.addHelmChart(jsii.String(\"test-chart\"), &helmChartOptions{\n\tchartAsset: chartAsset,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as s3Assets from '@aws-cdk/aws-s3-assets';\n\ndeclare const cluster: eks.Cluster;\nconst chartAsset = new s3Assets.Asset(this, 'ChartAsset', {\n  path: '/path/to/asset'\n});\n\ncluster.addHelmChart('test-chart', {\n  chartAsset: chartAsset,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3-assets.Asset"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.HelmChartOptions",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3Assets from '@aws-cdk/aws-s3-assets';\n\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst chartAsset = new s3Assets.Asset(this, 'ChartAsset', {\n  path: '/path/to/asset'\n});\n\ncluster.addHelmChart('test-chart', {\n  chartAsset: chartAsset,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b64cca071f3bac0138a2e4e3081edd29505882f8a656c2b2ffe8cf9297775315"
    },
    "ce51c53c9db6eda480f31347749e30f5a49957c097cea9e1d3f41d90fbcf6232": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"my-python-handler\"),\n        bundling=BundlingOptions(\n            image=lambda_.Runtime.PYTHON_3_9.bundling_image,\n            command=[\"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\"\n            ]\n        )\n    ),\n    runtime=lambda_.Runtime.PYTHON_3_9,\n    handler=\"index.handler\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromAsset(Join(__dirname, \"my-python-handler\"), new AssetOptions {\n        Bundling = new BundlingOptions {\n            Image = Runtime.PYTHON_3_9.BundlingImage,\n            Command = new [] { \"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\" }\n        }\n    }),\n    Runtime = Runtime.PYTHON_3_9,\n    Handler = \"index.handler\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"Function\")\n        .code(Code.fromAsset(join(__dirname, \"my-python-handler\"), AssetOptions.builder()\n                .bundling(BundlingOptions.builder()\n                        .image(Runtime.PYTHON_3_9.getBundlingImage())\n                        .command(List.of(\"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\"))\n                        .build())\n                .build()))\n        .runtime(Runtime.PYTHON_3_9)\n        .handler(\"index.handler\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromAsset(path.join(__dirname, jsii.String(\"my-python-handler\")), &assetOptions{\n\t\tbundling: &bundlingOptions{\n\t\t\timage: lambda.runtime_PYTHON_3_9().bundlingImage,\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"bash\"),\n\t\t\t\tjsii.String(\"-c\"),\n\t\t\t\tjsii.String(\"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\"),\n\t\t\t},\n\t\t},\n\t}),\n\truntime: lambda.*runtime_PYTHON_3_9(),\n\thandler: jsii.String(\"index.handler\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'my-python-handler'), {\n    bundling: {\n      image: lambda.Runtime.PYTHON_3_9.bundlingImage,\n      command: [\n        'bash', '-c',\n        'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output'\n      ],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3-assets.AssetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_9",
        "@aws-cdk/aws-lambda.Runtime#bundlingImage",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerImage",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'my-python-handler'), {\n    bundling: {\n      image: lambda.Runtime.PYTHON_3_9.bundlingImage,\n      command: [\n        'bash', '-c',\n        'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output'\n      ],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 21,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "f19fc06ea6d400ff5e9a39435a2d9a2e51f5ec8adc72a3955b8e615f52207f69"
    },
    "8b4e379894f9efc7e7a6e4da4e4aa8628378cc975e16255143314914b7c5dd15": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"BundledAsset\",\n    path=path.join(__dirname, \"markdown-asset\"),  # /asset-input and working directory in the container\n    bundling=BundlingOptions(\n        image=DockerImage.from_build(path.join(__dirname, \"alpine-markdown\")),  # Build an image\n        command=[\"sh\", \"-c\", \"\"\"\n                        markdown index.md > /asset-output/index.html\n                      \"\"\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"BundledAsset\", new AssetProps {\n    Path = Join(__dirname, \"markdown-asset\"),  // /asset-input and working directory in the container\n    Bundling = new BundlingOptions {\n        Image = DockerImage.FromBuild(Join(__dirname, \"alpine-markdown\")),  // Build an image\n        Command = new [] { \"sh\", \"-c\", @\"\n                        markdown index.md > /asset-output/index.html\n                      \" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"BundledAsset\")\n        .path(join(__dirname, \"markdown-asset\")) // /asset-input and working directory in the container\n        .bundling(BundlingOptions.builder()\n                .image(DockerImage.fromBuild(join(__dirname, \"alpine-markdown\"))) // Build an image\n                .command(List.of(\"sh\", \"-c\", \"\\n            markdown index.md > /asset-output/index.html\\n          \"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "asset := assets.NewAsset(this, jsii.String(\"BundledAsset\"), &assetProps{\n\tpath: path.join(__dirname, jsii.String(\"markdown-asset\")),\n\t // /asset-input and working directory in the container\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage.fromBuild(path.join(__dirname, jsii.String(\"alpine-markdown\"))),\n\t\t // Build an image\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"sh\"),\n\t\t\tjsii.String(\"-c\"),\n\t\t\tjsii.String(\"\\n            markdown index.md > /asset-output/index.html\\n          \"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const asset = new assets.Asset(this, 'BundledAsset', {\n  path: path.join(__dirname, 'markdown-asset'), // /asset-input and working directory in the container\n  bundling: {\n    image: DockerImage.fromBuild(path.join(__dirname, 'alpine-markdown')), // Build an image\n    command: [\n      'sh', '-c', `\n        markdown index.md > /asset-output/index.html\n      `,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3-assets.AssetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { App, DockerImage, Stack, StackProps } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as assets from '../lib';\n\nclass TestStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    const asset = new assets.Asset(this, 'BundledAsset', {\n      path: path.join(__dirname, 'markdown-asset'), // /asset-input and working directory in the container\n      bundling: {\n        image: DockerImage.fromBuild(path.join(__dirname, 'alpine-markdown')), // Build an image\n        command: [\n          'sh', '-c', `\n            markdown index.md > /asset-output/index.html\n          `,\n        ],\n      },\n    });\n    /// !hide\n\n    const user = new iam.User(this, 'MyUser');\n    asset.grantRead(user);\n  }\n}\n\nconst app = new App();\nnew TestStack(app, 'cdk-integ-assets-bundling');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "14": 1,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "5a886b070c769d03999a19b6b9261d7b95035fd7b316c8e9fb97071632370540"
    }
  }
}
