{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-iam": "1.153.1",
    "@aws-cdk/core": "1.153.1",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::CloudWatch",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.57.0 (build f614666)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "cloudwatch"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-cloudwatch",
  "readme": {
    "markdown": "# Amazon CloudWatch Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\n## Metric objects\n\nMetric objects represent a metric that is emitted by AWS services or your own\napplication, such as `CPUUsage`, `FailureCount` or `Bandwidth`.\n\nMetric objects can be constructed directly or are exposed by resources as\nattributes. Resources that expose metrics will have functions that look\nlike `metricXxx()` which will return a Metric object, initialized with defaults\nthat make sense.\n\nFor example, `lambda.Function` objects have the `fn.metricErrors()` method, which\nrepresents the amount of errors reported by that Lambda function:\n\n```ts\ndeclare const fn: lambda.Function;\n\nconst errors = fn.metricErrors();\n```\n\n`Metric` objects can be account and region aware. You can specify `account` and `region` as properties of the metric, or use the `metric.attachTo(Construct)` method. `metric.attachTo()` will automatically copy the `region` and `account` fields of the `Construct`, which can come from anywhere in the Construct tree.\n\nYou can also instantiate `Metric` objects to reference any\n[published metric](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)\nthat's not exposed using a convenience method on the CDK construct.\nFor example:\n\n```ts\nconst hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});\n```\n\n### Instantiating a new Metric object\n\nIf you want to reference a metric that is not yet exposed by an existing construct,\nyou can instantiate a `Metric` object to represent it. For example:\n\n```ts\nconst metric = new cloudwatch.Metric({\n  namespace: 'MyNamespace',\n  metricName: 'MyMetric',\n  dimensionsMap: {\n    ProcessingStep: 'Download'\n  }\n});\n```\n\n### Metric Math\n\nMath expressions are supported by instantiating the `MathExpression` class.\nFor example, a math expression that sums two other metrics looks like this:\n\n```ts\ndeclare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});\n```\n\nYou can use `MathExpression` objects like any other metric, including using\nthem in other math expressions:\n\n```ts\ndeclare const fn: lambda.Function;\ndeclare const allProblems: cloudwatch.MathExpression;\n\nconst problemPercentage = new cloudwatch.MathExpression({\n  expression: \"(problems / invocations) * 100\",\n  usingMetrics: {\n    problems: allProblems,\n    invocations: fn.metricInvocations()\n  }\n});\n```\n\n### Search Expressions\n\nMath expressions also support search expressions. For example, the following\nsearch expression returns all CPUUtilization metrics that it finds, with the\ngraph showing the Average statistic with an aggregation period of 5 minutes:\n\n```ts\nconst cpuUtilization = new cloudwatch.MathExpression({\n  expression: \"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\",\n\n  // Specifying '' as the label suppresses the default behavior\n  // of using the expression as metric label. This is especially appropriate\n  // when using expressions that return multiple time series (like SEARCH()\n  // or METRICS()), to show the labels of the retrieved metrics only.\n  label: '',\n});\n```\n\nCross-account and cross-region search expressions are also supported. Use\nthe `searchAccount` and `searchRegion` properties to specify the account\nand/or region to evaluate the search expression against.\n\n### Aggregation\n\nTo graph or alarm on metrics you must aggregate them first, using a function\nlike `Average` or a percentile function like `P99`. By default, most Metric objects\nreturned by CDK libraries will be configured as `Average` over `300 seconds` (5 minutes).\nThe exception is if the metric represents a count of discrete events, such as\nfailures. In that case, the Metric object will be configured as `Sum` over `300\nseconds`, i.e. it represents the number of times that event occurred over the\ntime period.\n\nIf you want to change the default aggregation of the Metric object (for example,\nthe function or the period), you can do so by passing additional parameters\nto the metric function call:\n\n```ts\ndeclare const fn: lambda.Function;\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});\n```\n\nThis function also allows changing the metric label or color (which will be\nuseful when embedding them in graphs, see below).\n\n> Rates versus Sums\n>\n> The reason for using `Sum` to count discrete events is that *some* events are\n> emitted as either `0` or `1` (for example `Errors` for a Lambda) and some are\n> only emitted as `1` (for example `NumberOfMessagesPublished` for an SNS\n> topic).\n>\n> In case `0`-metrics are emitted, it makes sense to take the `Average` of this\n> metric: the result will be the fraction of errors over all executions.\n>\n> If `0`-metrics are not emitted, the `Average` will always be equal to `1`,\n> and not be very useful.\n>\n> In order to simplify the mental model of `Metric` objects, we default to\n> aggregating using `Sum`, which will be the same for both metrics types. If you\n> happen to know the Metric you want to alarm on makes sense as a rate\n> (`Average`) you can always choose to change the statistic.\n\n### Labels\n\nMetric labels are displayed in the legend of graphs that include the metrics.\n\nYou can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)\nto show summary information about the displayed time series\nin the legend. For example, if you use:\n\n```ts\ndeclare const fn: lambda.Function;\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'sum',\n  period: Duration.hours(1),\n\n  // Show the maximum hourly error count in the legend\n  label: '[max: ${MAX}] Lambda failure rate',\n});\n```\n\nAs the metric label, the maximum value in the visible range will\nbe shown next to the time series name in the graph's legend.\n\nIf the metric is a math expression producing more than one time series, the\nmaximum will be individually calculated and shown for each time series produce\nby the math expression.\n\n## Alarms\n\nAlarms can be created on metrics in one of two ways. Either create an `Alarm`\nobject, passing the `Metric` object to set the alarm on:\n\n```ts\ndeclare const fn: lambda.Function;\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: fn.metricErrors(),\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n```\n\nAlternatively, you can call `metric.createAlarm()`:\n\n```ts\ndeclare const fn: lambda.Function;\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n```\n\nThe most important properties to set while creating an Alarms are:\n\n- `threshold`: the value to compare the metric against.\n- `comparisonOperator`: the comparison operation to use, defaults to `metric >= threshold`.\n- `evaluationPeriods`: how many consecutive periods the metric has to be\n  breaching the the threshold for the alarm to trigger.\n\nTo create a cross-account alarm, make sure you have enabled [cross-account functionality](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html) in CloudWatch. Then, set the `account` property in the `Metric` object either manually or via the `metric.attachTo()` method.\n\n### Alarm Actions\n\nTo add actions to an alarm, use the integration classes from the\n`@aws-cdk/aws-cloudwatch-actions` package. For example, to post a message to\nan SNS topic when an alarm breaches, do the following:\n\n```ts\nimport * as cw_actions from '@aws-cdk/aws-cloudwatch-actions';\ndeclare const alarm: cloudwatch.Alarm;\n\nconst topic = new sns.Topic(this, 'Topic');\nalarm.addAlarmAction(new cw_actions.SnsAction(topic));\n```\n\n#### Notification formats\n\nAlarms can be created in one of two \"formats\":\n\n- With \"top-level parameters\" (these are the classic style of CloudWatch Alarms).\n- With a list of metrics specifications (these are the modern style of CloudWatch Alarms).\n\nFor backwards compatibility, CDK will try to create classic, top-level CloudWatch alarms\nas much as possible, unless you are using features that cannot be expressed in that format.\nFeatures that require the new-style alarm format are:\n\n- Metric math\n- Cross-account metrics\n- Labels\n\nThe difference between these two does not impact the functionality of the alarm\nin any way, *except* that the format of the notifications the Alarm generates is\ndifferent between them. This affects both the notifications sent out over SNS,\nas well as the EventBridge events generated by this Alarm. If you are writing\ncode to consume these notifications, be sure to handle both formats.\n\n### Composite Alarms\n\n[Composite Alarms](https://aws.amazon.com/about-aws/whats-new/2020/03/amazon-cloudwatch-now-allows-you-to-combine-multiple-alarms/)\ncan be created from existing Alarm resources.\n\n```ts\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n```\n\n### A note on units\n\nIn CloudWatch, Metrics datums are emitted with units, such as `seconds` or\n`bytes`. When `Metric` objects are given a `unit` attribute, it will be used to\n*filter* the stream of metric datums for datums emitted using the same `unit`\nattribute.\n\nIn particular, the `unit` field is *not* used to rescale datums or alarm threshold\nvalues (for example, it cannot be used to specify an alarm threshold in\n*Megabytes* if the metric stream is being emitted as *bytes*).\n\nYou almost certainly don't want to specify the `unit` property when creating\n`Metric` objects (which will retrieve all datums regardless of their unit),\nunless you have very specific requirements. Note that in any case, CloudWatch\nonly supports filtering by `unit` for Alarms, not in Dashboard graphs.\n\nPlease see the following GitHub issue for a discussion on real unit\ncalculations in CDK: https://github.com/aws/aws-cdk/issues/5595\n\n## Dashboards\n\nDashboards are set of Widgets stored server-side which can be accessed quickly\nfrom the AWS console. Available widgets are graphs of a metric over time, the\ncurrent value of a metric, or a static piece of Markdown which explains what the\ngraphs mean.\n\nThe following widgets are available:\n\n- `GraphWidget` -- shows any number of metrics on both the left and right\n  vertical axes.\n- `AlarmWidget` -- shows the graph and alarm line for a single alarm.\n- `SingleValueWidget` -- shows the current value of a set of metrics.\n- `TextWidget` -- shows some static Markdown.\n- `AlarmStatusWidget` -- shows the status of your alarms in a grid view.\n\n### Graph widget\n\nA graph widget can display any number of metrics on either the `left` or\n`right` vertical axis:\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN,\n  })]\n}));\n```\n\nUsing the methods `addLeftMetric()` and `addRightMetric()` you can add metrics to a graph widget later on.\n\nGraph widgets can also display annotations attached to the left or the right y-axis.\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  leftAnnotations: [\n    { value: 1800, label: Duration.minutes(30).toHumanString(), color: cloudwatch.Color.RED, },\n    { value: 3600, label: '1 hour', color: '#2ca02c', }\n  ],\n}));\n```\n\nThe graph legend can be adjusted from the default position at bottom of the widget.\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n```\n\nThe graph can publish live data within the last minute that has not been fully aggregated.\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  liveData: true,\n}));\n```\n\nThe graph view can be changed from default 'timeSeries' to 'bar' or 'pie'.\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));\n```\n\n### Alarm widget\n\nAn alarm widget shows the graph and the alarm line of a single alarm:\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));\n```\n\n### Single value widget\n\nA single-value widget shows the latest value of a set of metrics (as opposed\nto a graph of the value over time):\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));\n```\n\nShow as many digits as can fit, before rounding.\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [ /* ... */ ],\n\n  fullPrecision: true,\n}));\n```\n\n### Text widget\n\nA text widget shows an arbitrary piece of MarkDown. Use this to add explanations\nto your dashboard:\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));\n```\n\n### Alarm Status widget\n\nAn alarm status widget displays instantly the status of any type of alarms and gives the\nability to aggregate one or more alarms together in a small surface.\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);\n```\n\nAn alarm status widget only showing firing alarms, sorted by state and timestamp:\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));\n```\n\n### Query results widget\n\nA `LogQueryWidget` shows the results of a query from Logs Insights:\n\n```ts\ndeclare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n```\n\n### Dashboard Layout\n\nThe widgets on a dashboard are visually laid out in a grid that is 24 columns\nwide. Normally you specify X and Y coordinates for the widgets on a Dashboard,\nbut because this is inconvenient to do manually, the library contains a simple\nlayout system to help you lay out your dashboards the way you want them to.\n\nWidgets have a `width` and `height` property, and they will be automatically\nlaid out either horizontally or vertically stacked to fill out the available\nspace.\n\nWidgets are added to a Dashboard by calling `add(widget1, widget2, ...)`.\nWidgets given in the same call will be laid out horizontally. Widgets given\nin different calls will be laid out vertically. To make more complex layouts,\nyou can use the following widgets to pack widgets together in different ways:\n\n- `Column`: stack two or more widgets vertically.\n- `Row`: lay out two or more widgets horizontally.\n- `Spacer`: take up empty space\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-cloudwatch",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.CloudWatch",
      "packageId": "Amazon.CDK.AWS.CloudWatch"
    },
    "java": {
      "maven": {
        "artifactId": "cloudwatch",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.cloudwatch"
    },
    "js": {
      "npm": "@aws-cdk/aws-cloudwatch"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-cloudwatch",
      "module": "aws_cdk.aws_cloudwatch"
    }
  },
  "types": {
    "@aws-cdk/aws-cloudwatch.Alarm": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/aws-cloudwatch.AlarmBase",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const alias: lambda.Alias;\nconst alarm = new cloudwatch.Alarm(this, 'Errors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: alias.metricErrors(),\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  alarms: [\n    // pass some alarms when constructing the deployment group\n    alarm,\n  ],\n});\n\n// or add alarms to an existing group\ndeclare const blueGreenAlias: lambda.Alias;\ndeploymentGroup.addAlarm(new cloudwatch.Alarm(this, 'BlueGreenErrors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: blueGreenAlias.metricErrors(),\n}));",
        "stability": "stable",
        "summary": "An alarm on a CloudWatch metric."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Alarm",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/alarm.ts",
          "line": 146
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.AlarmProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/alarm.ts",
        "line": 105
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing CloudWatch alarm provided an ARN."
          },
          "locationInModule": {
            "filename": "lib/alarm.ts",
            "line": 114
          },
          "name": "fromAlarmArn",
          "parameters": [
            {
              "docs": {
                "summary": "The parent creating construct (usually `this`)."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "The construct's name."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Alarm ARN (i.e. arn:aws:cloudwatch:<region>:<account-id>:alarm:Foo)."
              },
              "name": "alarmArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarm"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Typically the ARN of an SNS topic or ARN of an AutoScaling policy.",
            "stability": "stable",
            "summary": "Trigger this action if the alarm fires."
          },
          "locationInModule": {
            "filename": "lib/alarm.ts",
            "line": 237
          },
          "name": "addAlarmAction",
          "overrides": "@aws-cdk/aws-cloudwatch.AlarmBase",
          "parameters": [
            {
              "name": "actions",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarmAction"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "This is useful if you want to represent an Alarm in a non-AlarmWidget.\nAn `AlarmWidget` can directly show an alarm, but it can only show a\nsingle alarm and no other metrics. Instead, you can convert the alarm to\na HorizontalAnnotation and add it as an annotation to another graph.\n\nThis might be useful if:\n\n- You want to show multiple alarms inside a single graph, for example if\n   you have both a \"small margin/long period\" alarm as well as a\n   \"large margin/short period\" alarm.\n\n- You want to show an Alarm line in a graph with multiple metrics in it.",
            "stability": "stable",
            "summary": "Turn this alarm into a horizontal annotation."
          },
          "locationInModule": {
            "filename": "lib/alarm.ts",
            "line": 228
          },
          "name": "toAnnotation",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.HorizontalAnnotation"
            }
          }
        }
      ],
      "name": "Alarm",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "ARN of this alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm.ts",
            "line": 127
          },
          "name": "alarmArn",
          "overrides": "@aws-cdk/aws-cloudwatch.AlarmBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "Name of this alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm.ts",
            "line": 134
          },
          "name": "alarmName",
          "overrides": "@aws-cdk/aws-cloudwatch.AlarmBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The metric object this alarm was based on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm.ts",
            "line": 139
          },
          "name": "metric",
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
          }
        }
      ],
      "symbolId": "lib/alarm:Alarm"
    },
    "@aws-cdk/aws-cloudwatch.AlarmActionConfig": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for an alarm action.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst alarmActionConfig: cloudwatch.AlarmActionConfig = {\n  alarmActionArn: 'alarmActionArn',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmActionConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alarm-action.ts",
        "line": 24
      },
      "name": "AlarmActionConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Return the ARN that should be used for a CloudWatch Alarm action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-action.ts",
            "line": 28
          },
          "name": "alarmActionArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/alarm-action:AlarmActionConfig"
    },
    "@aws-cdk/aws-cloudwatch.AlarmBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "The base class for Alarm and CompositeAlarm resources."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmBase",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/resource.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/core.ResourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.IAlarm"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/alarm-base.ts",
        "line": 38
      },
      "methods": [
        {
          "docs": {
            "remarks": "Typically the ARN of an SNS topic or ARN of an AutoScaling policy.",
            "stability": "stable",
            "summary": "Trigger this action if the alarm fires."
          },
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 62
          },
          "name": "addAlarmAction",
          "parameters": [
            {
              "name": "actions",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarmAction"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Typically the ARN of an SNS topic or ARN of an AutoScaling policy.",
            "stability": "stable",
            "summary": "Trigger this action if there is insufficient data to evaluate the alarm."
          },
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 75
          },
          "name": "addInsufficientDataAction",
          "parameters": [
            {
              "name": "actions",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarmAction"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Typically the ARN of an SNS topic or ARN of an AutoScaling policy.",
            "stability": "stable",
            "summary": "Trigger this action if the alarm returns from breaching state into ok state."
          },
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 88
          },
          "name": "addOkAction",
          "parameters": [
            {
              "name": "actions",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarmAction"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "AlarmRule indicating ALARM state for Alarm."
          },
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 53
          },
          "name": "renderAlarmRule",
          "overrides": "@aws-cdk/aws-cloudwatch.IAlarmRule",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "AlarmBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "Alarm ARN (i.e. arn:aws:cloudwatch:<region>:<account-id>:alarm:Foo)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 43
          },
          "name": "alarmArn",
          "overrides": "@aws-cdk/aws-cloudwatch.IAlarm",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 44
          },
          "name": "alarmName",
          "overrides": "@aws-cdk/aws-cloudwatch.IAlarm",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 46
          },
          "name": "alarmActionArns",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 47
          },
          "name": "insufficientDataActionArns",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 48
          },
          "name": "okActionArns",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/alarm-base:AlarmBase"
    },
    "@aws-cdk/aws-cloudwatch.AlarmProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const alias: lambda.Alias;\nconst alarm = new cloudwatch.Alarm(this, 'Errors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: alias.metricErrors(),\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  alarms: [\n    // pass some alarms when constructing the deployment group\n    alarm,\n  ],\n});\n\n// or add alarms to an existing group\ndeclare const blueGreenAlias: lambda.Alias;\ndeploymentGroup.addAlarm(new cloudwatch.Alarm(this, 'BlueGreenErrors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: blueGreenAlias.metricErrors(),\n}));",
        "stability": "stable",
        "summary": "Properties for Alarms."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmProps",
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.CreateAlarmOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alarm.ts",
        "line": 17
      },
      "name": "AlarmProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Metric objects can be obtained from most resources, or you can construct\ncustom Metric objects by instantiating one.",
            "stability": "stable",
            "summary": "The metric to add the alarm on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm.ts",
            "line": 24
          },
          "name": "metric",
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
          }
        }
      ],
      "symbolId": "lib/alarm:AlarmProps"
    },
    "@aws-cdk/aws-cloudwatch.AlarmRule": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
        "stability": "stable",
        "summary": "Class with static functions to build AlarmRule for Composite Alarms."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmRule",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/alarm-rule.ts",
        "line": 39
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "function to join all provided AlarmRules with AND operator."
          },
          "locationInModule": {
            "filename": "lib/alarm-rule.ts",
            "line": 46
          },
          "name": "allOf",
          "parameters": [
            {
              "docs": {
                "summary": "IAlarmRules to be joined with AND operator."
              },
              "name": "operands",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "function to join all provided AlarmRules with OR operator."
          },
          "locationInModule": {
            "filename": "lib/alarm-rule.ts",
            "line": 55
          },
          "name": "anyOf",
          "parameters": [
            {
              "docs": {
                "summary": "IAlarmRules to be joined with OR operator."
              },
              "name": "operands",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "function to build Rule Expression for given IAlarm and AlarmState."
          },
          "locationInModule": {
            "filename": "lib/alarm-rule.ts",
            "line": 91
          },
          "name": "fromAlarm",
          "parameters": [
            {
              "docs": {
                "summary": "IAlarm to be used in Rule Expression."
              },
              "name": "alarm",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarm"
              }
            },
            {
              "docs": {
                "summary": "AlarmState to be used in Rule Expression."
              },
              "name": "alarmState",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.AlarmState"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "function to build TRUE/FALSE intent for Rule Expression."
          },
          "locationInModule": {
            "filename": "lib/alarm-rule.ts",
            "line": 77
          },
          "name": "fromBoolean",
          "parameters": [
            {
              "docs": {
                "summary": "boolean value to be used in rule expression."
              },
              "name": "value",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "function to build Rule Expression for given Alarm Rule string."
          },
          "locationInModule": {
            "filename": "lib/alarm-rule.ts",
            "line": 104
          },
          "name": "fromString",
          "parameters": [
            {
              "docs": {
                "summary": "string to be used in Rule Expression."
              },
              "name": "alarmRule",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "function to wrap provided AlarmRule in NOT operator."
          },
          "locationInModule": {
            "filename": "lib/alarm-rule.ts",
            "line": 64
          },
          "name": "not",
          "parameters": [
            {
              "docs": {
                "summary": "IAlarmRule to be wrapped in NOT operator."
              },
              "name": "operand",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
            }
          },
          "static": true
        }
      ],
      "name": "AlarmRule",
      "symbolId": "lib/alarm-rule:AlarmRule"
    },
    "@aws-cdk/aws-cloudwatch.AlarmState": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));",
        "stability": "stable",
        "summary": "Enumeration indicates state of Alarm used in building Alarm Rule."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmState",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/alarm-rule.ts",
        "line": 6
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "State indicates resource is in ALARM."
          },
          "name": "ALARM"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "State indicates resource is not in ALARM."
          },
          "name": "OK"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "State indicates there is not enough data to determine is resource is in ALARM."
          },
          "name": "INSUFFICIENT_DATA"
        }
      ],
      "name": "AlarmState",
      "symbolId": "lib/alarm-rule:AlarmState"
    },
    "@aws-cdk/aws-cloudwatch.AlarmStatusWidget": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);",
        "stability": "stable",
        "summary": "A dashboard widget that displays alarms in a grid view."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/alarm-status-widget.ts",
          "line": 83
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/alarm-status-widget.ts",
        "line": 80
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Place the widget at a given position."
          },
          "locationInModule": {
            "filename": "lib/alarm-status-widget.ts",
            "line": 88
          },
          "name": "position",
          "overrides": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/alarm-status-widget.ts",
            "line": 93
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "AlarmStatusWidget",
      "symbolId": "lib/alarm-status-widget:AlarmStatusWidget"
    },
    "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);",
        "stability": "stable",
        "summary": "Properties for an Alarm Status Widget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alarm-status-widget.ts",
        "line": 34
      },
      "name": "AlarmStatusWidgetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "CloudWatch Alarms to show in widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-status-widget.ts",
            "line": 38
          },
          "name": "alarms",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarm"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "3",
            "stability": "stable",
            "summary": "Height of the widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-status-widget.ts",
            "line": 56
          },
          "name": "height",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- alphabetical order",
            "stability": "stable",
            "summary": "Specifies how to sort the alarms in the widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-status-widget.ts",
            "line": 63
          },
          "name": "sortBy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-  all the alarms specified in alarms are displayed.",
            "remarks": "You can specify one or more alarm states in the value for this field.\nThe alarm states that you can specify are ALARM, INSUFFICIENT_DATA, and OK.\n\nIf you omit this field or specify an empty array, all the alarms specifed in alarms are displayed.",
            "stability": "stable",
            "summary": "Use this field to filter the list of alarms displayed in the widget to only those alarms currently in the specified states."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-status-widget.ts",
            "line": 74
          },
          "name": "states",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.AlarmState"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'Alarm Status'",
            "stability": "stable",
            "summary": "The title of the widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-status-widget.ts",
            "line": 44
          },
          "name": "title",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "6",
            "stability": "stable",
            "summary": "Width of the widget, in a grid of 24 units wide."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-status-widget.ts",
            "line": 50
          },
          "name": "width",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/alarm-status-widget:AlarmStatusWidgetProps"
    },
    "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));",
        "stability": "stable",
        "summary": "The sort possibilities for AlarmStatusWidgets."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/alarm-status-widget.ts",
        "line": 9
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Choose DEFAULT to sort them in alphabetical order by alarm name."
          },
          "name": "DEFAULT"
        },
        {
          "docs": {
            "remarks": "Within each group, the alarms are sorted by when they last changed state, with more recent state changes listed first.",
            "stability": "stable",
            "summary": "Choose STATE_UPDATED_TIMESTAMP to sort them first by alarm state, with alarms in ALARM state first, INSUFFICIENT_DATA alarms next, and OK alarms last."
          },
          "name": "STATE_UPDATED_TIMESTAMP"
        },
        {
          "docs": {
            "remarks": "The alarm that changed state most recently is listed first.",
            "stability": "stable",
            "summary": "Choose TIMESTAMP to sort them by the time when the alarms most recently changed state, no matter the current alarm state."
          },
          "name": "TIMESTAMP"
        }
      ],
      "name": "AlarmStatusWidgetSortBy",
      "symbolId": "lib/alarm-status-widget:AlarmStatusWidgetSortBy"
    },
    "@aws-cdk/aws-cloudwatch.AlarmWidget": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));",
        "stability": "stable",
        "summary": "Display the metric associated with an alarm, including the alarm line."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmWidget",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/graph.ts",
          "line": 97
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.AlarmWidgetProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 94
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 102
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "AlarmWidget",
      "symbolId": "lib/graph:AlarmWidget"
    },
    "@aws-cdk/aws-cloudwatch.AlarmWidgetProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));",
        "stability": "stable",
        "summary": "Properties for an AlarmWidget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.AlarmWidgetProps",
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.MetricWidgetProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 77
      },
      "name": "AlarmWidgetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The alarm to show."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 81
          },
          "name": "alarm",
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.IAlarm"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No minimum or maximum values for the left Y-axis",
            "stability": "stable",
            "summary": "Left Y axis."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 88
          },
          "name": "leftYAxis",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.YAxisProps"
          }
        }
      ],
      "symbolId": "lib/graph:AlarmWidgetProps"
    },
    "@aws-cdk/aws-cloudwatch.CfnAlarm": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::CloudWatch::Alarm",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::CloudWatch::Alarm` type specifies an alarm and associates it with the specified metric or metric math expression.\n\nWhen this operation creates an alarm, the alarm state is immediately set to `INSUFFICIENT_DATA` . The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.\n\nWhen you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::CloudWatch::Alarm`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnAlarm = new cloudwatch.CfnAlarm(this, 'MyCfnAlarm', {\n  comparisonOperator: 'comparisonOperator',\n  evaluationPeriods: 123,\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  alarmName: 'alarmName',\n  datapointsToAlarm: 123,\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  evaluateLowSampleCountPercentile: 'evaluateLowSampleCountPercentile',\n  extendedStatistic: 'extendedStatistic',\n  insufficientDataActions: ['insufficientDataActions'],\n  metricName: 'metricName',\n  metrics: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n        metricName: 'metricName',\n        namespace: 'namespace',\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n  namespace: 'namespace',\n  okActions: ['okActions'],\n  period: 123,\n  statistic: 'statistic',\n  threshold: 123,\n  thresholdMetricId: 'thresholdMetricId',\n  treatMissingData: 'treatMissingData',\n  unit: 'unit',\n});"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::CloudWatch::Alarm`."
        },
        "locationInModule": {
          "filename": "lib/cloudwatch.generated.ts",
          "line": 531
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarmProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 318
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 566
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 597
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnAlarm",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 322
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The ARN of the CloudWatch alarm, such as `arn:aws:cloudwatch:us-west-2:123456789012:alarm:myCloudWatchAlarm-CPUAlarm-UXMMZK36R55Z` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 347
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 571
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-comparisonoperator"
            },
            "remarks": "The specified statistic value is used as the first operand.\n\nYou can specify the following values: `GreaterThanThreshold` , `GreaterThanOrEqualToThreshold` , `LessThanThreshold` , or `LessThanOrEqualToThreshold` .",
            "stability": "external",
            "summary": "The arithmetic operation to use when comparing the specified statistic and threshold."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 356
          },
          "name": "comparisonOperator",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-evaluationperiods"
            },
            "remarks": "If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an \"M out of N\" alarm, this value is the N, and `DatapointsToAlarm` is the M.\n\nFor more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the *Amazon CloudWatch User Guide* .",
            "stability": "external",
            "summary": "The number of periods over which data is compared to the specified threshold."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 365
          },
          "name": "evaluationPeriods",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-actionsenabled"
            },
            "remarks": "The default is TRUE.",
            "stability": "external",
            "summary": "Indicates whether actions should be executed during any changes to the alarm state."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 372
          },
          "name": "actionsEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-alarmactions"
            },
            "remarks": "Specify each action as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "The list of actions to execute when this alarm transitions into an ALARM state from any other state."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 379
          },
          "name": "alarmActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-alarmdescription"
            },
            "stability": "external",
            "summary": "The description of the alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 386
          },
          "name": "alarmDescription",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-alarmname"
            },
            "remarks": "If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the alarm name.\n\n> If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.",
            "stability": "external",
            "summary": "The name of the alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 395
          },
          "name": "alarmName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarm-datapointstoalarm"
            },
            "remarks": "This is used only if you are setting an \"M out of N\" alarm. In that case, this value is the M, and the value that you set for `EvaluationPeriods` is the N value. For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the *Amazon CloudWatch User Guide* .\n\nIf you omit this parameter, CloudWatch uses the same value here that you set for `EvaluationPeriods` , and the alarm goes to alarm state if that many consecutive periods are breaching.",
            "stability": "external",
            "summary": "The number of datapoints that must be breaching to trigger the alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 404
          },
          "name": "datapointsToAlarm",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-dimension"
            },
            "remarks": "For an alarm based on a math expression, you can't specify `Dimensions` . Instead, you use `Metrics` .",
            "stability": "external",
            "summary": "The dimensions for the metric associated with the alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 411
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.DimensionProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-evaluatelowsamplecountpercentile"
            },
            "remarks": "If `ignore` , the alarm state does not change during periods with too few data points to be statistically significant. If `evaluate` or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.",
            "stability": "external",
            "summary": "Used only for alarms based on percentiles."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 418
          },
          "name": "evaluateLowSampleCountPercentile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-extendedstatistic"
            },
            "remarks": "For an alarm based on a metric, you must specify either `Statistic` or `ExtendedStatistic` but not both.\n\nFor an alarm based on a math expression, you can't specify `ExtendedStatistic` . Instead, you use `Metrics` .",
            "stability": "external",
            "summary": "The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 429
          },
          "name": "extendedStatistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-insufficientdataactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN).",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 436
          },
          "name": "insufficientDataActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-metricname"
            },
            "remarks": "This is required for an alarm based on a metric. For an alarm based on a math expression, you use `Metrics` instead and you can't specify `MetricName` .",
            "stability": "external",
            "summary": "The name of the metric associated with the alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 443
          },
          "name": "metricName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarm-metrics"
            },
            "remarks": "Each item in the array either retrieves a metric or performs a math expression.\n\nIf you specify the `Metrics` parameter, you cannot specify `MetricName` , `Dimensions` , `Period` , `Namespace` , `Statistic` , `ExtendedStatistic` , or `Unit` .",
            "stability": "external",
            "summary": "An array that enables you to create an alarm based on the result of a metric math expression."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 452
          },
          "name": "metrics",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricDataQueryProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-namespace"
            },
            "remarks": "This is required for an alarm based on a metric. For an alarm based on a math expression, you can't specify `Namespace` and you use `Metrics` instead.\n\nFor a list of namespaces for metrics from AWS services, see [AWS Services That Publish CloudWatch Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)",
            "stability": "external",
            "summary": "The namespace of the metric associated with the alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 461
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-okactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN).",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the `OK` state from any other state."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 468
          },
          "name": "okActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-period"
            },
            "remarks": "This is required for an alarm based on a metric. Valid values are 10, 30, 60, and any multiple of 60.\n\nFor an alarm based on a math expression, you can't specify `Period` , and instead you use the `Metrics` parameter.\n\n*Minimum:* 10",
            "stability": "external",
            "summary": "The period, in seconds, over which the statistic is applied."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 479
          },
          "name": "period",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-statistic"
            },
            "remarks": "For an alarm based on a metric, you must specify either `Statistic` or `ExtendedStatistic` but not both.\n\nFor an alarm based on a math expression, you can't specify `Statistic` . Instead, you use `Metrics` .",
            "stability": "external",
            "summary": "The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use `ExtendedStatistic` ."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 490
          },
          "name": "statistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-threshold"
            },
            "stability": "external",
            "summary": "The value to compare with the specified statistic."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 497
          },
          "name": "threshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-dynamic-threshold"
            },
            "stability": "external",
            "summary": "In an alarm based on an anomaly detection model, this is the ID of the `ANOMALY_DETECTION_BAND` function used as the threshold for the alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 504
          },
          "name": "thresholdMetricId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-treatmissingdata"
            },
            "remarks": "Valid values are `breaching` , `notBreaching` , `ignore` , and `missing` . For more information, see [Configuring How CloudWatch Alarms Treat Missing Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data) in the *Amazon CloudWatch User Guide* .\n\nIf you omit this parameter, the default behavior of `missing` is used.",
            "stability": "external",
            "summary": "Sets how this alarm is to handle missing data points."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 513
          },
          "name": "treatMissingData",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-unit"
            },
            "remarks": "Specify this only if you are creating an alarm based on a single metric. Do not specify this if you are specifying a `Metrics` array.\n\nYou can specify the following values: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.",
            "stability": "external",
            "summary": "The unit of the metric associated with the alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 522
          },
          "name": "unit",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAlarm"
    },
    "@aws-cdk/aws-cloudwatch.CfnAlarm.DimensionProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-dimension.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Dimensions are name/value pairs that can be associated with a CloudWatch metric. You can specify a maximum of 10 dimensions for a given metric.",
        "stability": "external",
        "summary": "Dimension is an embedded property of the `AWS::CloudWatch::Alarm` type.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst dimensionProperty: cloudwatch.CfnAlarm.DimensionProperty = {\n  name: 'name',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.DimensionProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 611
      },
      "name": "DimensionProperty",
      "namespace": "CfnAlarm",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-dimension.html#cfn-cloudwatch-alarm-dimension-name"
            },
            "remarks": "This dimension name must have been included when the metric was published.",
            "stability": "external",
            "summary": "The name of the dimension, from 1–255 characters in length."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 617
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-dimension.html#cfn-cloudwatch-alarm-dimension-value"
            },
            "stability": "external",
            "summary": "The value for the dimension, from 1–255 characters in length."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 623
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAlarm.DimensionProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricDataQueryProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Any expression used must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *Amazon CloudWatch User Guide* .",
        "stability": "external",
        "summary": "The `MetricDataQuery` property type specifies the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricDataQueryProperty: cloudwatch.CfnAlarm.MetricDataQueryProperty = {\n  id: 'id',\n\n  // the properties below are optional\n  accountId: 'accountId',\n  expression: 'expression',\n  label: 'label',\n  metricStat: {\n    metric: {\n      dimensions: [{\n        name: 'name',\n        value: 'value',\n      }],\n      metricName: 'metricName',\n      namespace: 'namespace',\n    },\n    period: 123,\n    stat: 'stat',\n\n    // the properties below are optional\n    unit: 'unit',\n  },\n  period: 123,\n  returnData: false,\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricDataQueryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 776
      },
      "name": "MetricDataQueryProperty",
      "namespace": "CfnAlarm",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html#cfn-cloudwatch-alarm-metricdataquery-id"
            },
            "remarks": "This name must be unique within a single call to `GetMetricData` . If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.",
            "stability": "external",
            "summary": "A short name used to tie this object to the results in the response."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 796
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html#cfn-cloudwatch-alarm-metricdataquery-accountid"
            },
            "stability": "external",
            "summary": "The ID of the account where the metrics are located, if this is a cross-account alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 782
          },
          "name": "accountId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html#cfn-cloudwatch-alarm-metricdataquery-expression"
            },
            "remarks": "This expression can use the `Id` of the other metrics to refer to those metrics, and can also use the `Id` of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *Amazon CloudWatch User Guide* .\n\nWithin each MetricDataQuery object, you must specify either `Expression` or `MetricStat` but not both.",
            "stability": "external",
            "summary": "The math expression to be performed on the returned data, if this object is performing a math expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 790
          },
          "name": "expression",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html#cfn-cloudwatch-alarm-metricdataquery-label"
            },
            "remarks": "This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If `Label` is omitted, CloudWatch generates a default.",
            "stability": "external",
            "summary": "A human-readable label for this metric or expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 802
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html#cfn-cloudwatch-alarm-metricdataquery-metricstat"
            },
            "remarks": "Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.\n\nWithin one MetricDataQuery object, you must specify either `Expression` or `MetricStat` but not both.",
            "stability": "external",
            "summary": "The metric to be returned, along with statistics, period, and units."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 810
          },
          "name": "metricStat",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricStatProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a `PutMetricData` operation that includes a `StorageResolution of 1 second` .",
            "stability": "external",
            "summary": "The granularity, in seconds, of the returned data points."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 814
          },
          "name": "period",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html#cfn-cloudwatch-alarm-metricdataquery-returndata"
            },
            "remarks": "When you create an alarm based on a metric math expression, specify `True` for this value for only the one math expression that the alarm is based on. You must specify `False` for `ReturnData` for all the other metrics and expressions used in the alarm.\n\nThis field is required.",
            "stability": "external",
            "summary": "This option indicates whether to return the timestamps and raw data values of this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 824
          },
          "name": "returnData",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAlarm.MetricDataQueryProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metric.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`Metric` is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html) property type.",
        "stability": "external",
        "summary": "The `Metric` property type represents a specific metric.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricProperty: cloudwatch.CfnAlarm.MetricProperty = {\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricName: 'metricName',\n  namespace: 'namespace',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 689
      },
      "name": "MetricProperty",
      "namespace": "CfnAlarm",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metric.html#cfn-cloudwatch-alarm-metric-dimensions"
            },
            "stability": "external",
            "summary": "The metric dimensions that you want to be used for the metric that the alarm will watch.."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 695
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.DimensionProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metric.html#cfn-cloudwatch-alarm-metric-metricname"
            },
            "remarks": "This is a required field.",
            "stability": "external",
            "summary": "The name of the metric that you want the alarm to watch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 701
          },
          "name": "metricName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metric.html#cfn-cloudwatch-alarm-metric-namespace"
            },
            "stability": "external",
            "summary": "The namespace of the metric that the alarm will watch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 707
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAlarm.MetricProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricStatProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`MetricStat` is a property of the [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html) property type.",
        "stability": "external",
        "summary": "This structure defines the metric to be returned, along with the statistics, period, and units.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStatProperty: cloudwatch.CfnAlarm.MetricStatProperty = {\n  metric: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n  },\n  period: 123,\n  stat: 'stat',\n\n  // the properties below are optional\n  unit: 'unit',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricStatProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 906
      },
      "name": "MetricStatProperty",
      "namespace": "CfnAlarm",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html#cfn-cloudwatch-alarm-metricstat-metric"
            },
            "stability": "external",
            "summary": "The metric to return, including the metric name, namespace, and dimensions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 912
          },
          "name": "metric",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html#cfn-cloudwatch-alarm-metricstat-period"
            },
            "remarks": "For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a `PutMetricData` call that includes a `StorageResolution` of 1 second.\n\nIf the `StartTime` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:\n\n- Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).\n- Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).\n- Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).",
            "stability": "external",
            "summary": "The granularity, in seconds, of the returned data points."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 924
          },
          "name": "period",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html#cfn-cloudwatch-alarm-metricstat-stat"
            },
            "remarks": "It can include any CloudWatch statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *Amazon CloudWatch User Guide* .",
            "stability": "external",
            "summary": "The statistic to return."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 930
          },
          "name": "stat",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html#cfn-cloudwatch-alarm-metricstat-unit"
            },
            "remarks": "Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.",
            "stability": "external",
            "summary": "The unit to use for the returned data points."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 938
          },
          "name": "unit",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAlarm.MetricStatProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAlarmProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnAlarm`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnAlarmProps: cloudwatch.CfnAlarmProps = {\n  comparisonOperator: 'comparisonOperator',\n  evaluationPeriods: 123,\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  alarmName: 'alarmName',\n  datapointsToAlarm: 123,\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  evaluateLowSampleCountPercentile: 'evaluateLowSampleCountPercentile',\n  extendedStatistic: 'extendedStatistic',\n  insufficientDataActions: ['insufficientDataActions'],\n  metricName: 'metricName',\n  metrics: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n        metricName: 'metricName',\n        namespace: 'namespace',\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n  namespace: 'namespace',\n  okActions: ['okActions'],\n  period: 123,\n  statistic: 'statistic',\n  threshold: 123,\n  thresholdMetricId: 'thresholdMetricId',\n  treatMissingData: 'treatMissingData',\n  unit: 'unit',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarmProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 19
      },
      "name": "CfnAlarmProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-comparisonoperator"
            },
            "remarks": "The specified statistic value is used as the first operand.\n\nYou can specify the following values: `GreaterThanThreshold` , `GreaterThanOrEqualToThreshold` , `LessThanThreshold` , or `LessThanOrEqualToThreshold` .",
            "stability": "external",
            "summary": "The arithmetic operation to use when comparing the specified statistic and threshold."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 28
          },
          "name": "comparisonOperator",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-evaluationperiods"
            },
            "remarks": "If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an \"M out of N\" alarm, this value is the N, and `DatapointsToAlarm` is the M.\n\nFor more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the *Amazon CloudWatch User Guide* .",
            "stability": "external",
            "summary": "The number of periods over which data is compared to the specified threshold."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 37
          },
          "name": "evaluationPeriods",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-actionsenabled"
            },
            "remarks": "The default is TRUE.",
            "stability": "external",
            "summary": "Indicates whether actions should be executed during any changes to the alarm state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 44
          },
          "name": "actionsEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-alarmactions"
            },
            "remarks": "Specify each action as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "The list of actions to execute when this alarm transitions into an ALARM state from any other state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 51
          },
          "name": "alarmActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-alarmdescription"
            },
            "stability": "external",
            "summary": "The description of the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 58
          },
          "name": "alarmDescription",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-alarmname"
            },
            "remarks": "If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the alarm name.\n\n> If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.",
            "stability": "external",
            "summary": "The name of the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 67
          },
          "name": "alarmName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarm-datapointstoalarm"
            },
            "remarks": "This is used only if you are setting an \"M out of N\" alarm. In that case, this value is the M, and the value that you set for `EvaluationPeriods` is the N value. For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the *Amazon CloudWatch User Guide* .\n\nIf you omit this parameter, CloudWatch uses the same value here that you set for `EvaluationPeriods` , and the alarm goes to alarm state if that many consecutive periods are breaching.",
            "stability": "external",
            "summary": "The number of datapoints that must be breaching to trigger the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 76
          },
          "name": "datapointsToAlarm",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-dimension"
            },
            "remarks": "For an alarm based on a math expression, you can't specify `Dimensions` . Instead, you use `Metrics` .",
            "stability": "external",
            "summary": "The dimensions for the metric associated with the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 83
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.DimensionProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-evaluatelowsamplecountpercentile"
            },
            "remarks": "If `ignore` , the alarm state does not change during periods with too few data points to be statistically significant. If `evaluate` or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.",
            "stability": "external",
            "summary": "Used only for alarms based on percentiles."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 90
          },
          "name": "evaluateLowSampleCountPercentile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-extendedstatistic"
            },
            "remarks": "For an alarm based on a metric, you must specify either `Statistic` or `ExtendedStatistic` but not both.\n\nFor an alarm based on a math expression, you can't specify `ExtendedStatistic` . Instead, you use `Metrics` .",
            "stability": "external",
            "summary": "The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 101
          },
          "name": "extendedStatistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-insufficientdataactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN).",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 108
          },
          "name": "insufficientDataActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-metricname"
            },
            "remarks": "This is required for an alarm based on a metric. For an alarm based on a math expression, you use `Metrics` instead and you can't specify `MetricName` .",
            "stability": "external",
            "summary": "The name of the metric associated with the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 115
          },
          "name": "metricName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarm-metrics"
            },
            "remarks": "Each item in the array either retrieves a metric or performs a math expression.\n\nIf you specify the `Metrics` parameter, you cannot specify `MetricName` , `Dimensions` , `Period` , `Namespace` , `Statistic` , `ExtendedStatistic` , or `Unit` .",
            "stability": "external",
            "summary": "An array that enables you to create an alarm based on the result of a metric math expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 124
          },
          "name": "metrics",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricDataQueryProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-namespace"
            },
            "remarks": "This is required for an alarm based on a metric. For an alarm based on a math expression, you can't specify `Namespace` and you use `Metrics` instead.\n\nFor a list of namespaces for metrics from AWS services, see [AWS Services That Publish CloudWatch Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)",
            "stability": "external",
            "summary": "The namespace of the metric associated with the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 133
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-okactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN).",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the `OK` state from any other state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 140
          },
          "name": "okActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-period"
            },
            "remarks": "This is required for an alarm based on a metric. Valid values are 10, 30, 60, and any multiple of 60.\n\nFor an alarm based on a math expression, you can't specify `Period` , and instead you use the `Metrics` parameter.\n\n*Minimum:* 10",
            "stability": "external",
            "summary": "The period, in seconds, over which the statistic is applied."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 151
          },
          "name": "period",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-statistic"
            },
            "remarks": "For an alarm based on a metric, you must specify either `Statistic` or `ExtendedStatistic` but not both.\n\nFor an alarm based on a math expression, you can't specify `Statistic` . Instead, you use `Metrics` .",
            "stability": "external",
            "summary": "The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use `ExtendedStatistic` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 162
          },
          "name": "statistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-threshold"
            },
            "stability": "external",
            "summary": "The value to compare with the specified statistic."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 169
          },
          "name": "threshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-dynamic-threshold"
            },
            "stability": "external",
            "summary": "In an alarm based on an anomaly detection model, this is the ID of the `ANOMALY_DETECTION_BAND` function used as the threshold for the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 176
          },
          "name": "thresholdMetricId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-treatmissingdata"
            },
            "remarks": "Valid values are `breaching` , `notBreaching` , `ignore` , and `missing` . For more information, see [Configuring How CloudWatch Alarms Treat Missing Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data) in the *Amazon CloudWatch User Guide* .\n\nIf you omit this parameter, the default behavior of `missing` is used.",
            "stability": "external",
            "summary": "Sets how this alarm is to handle missing data points."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 185
          },
          "name": "treatMissingData",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-unit"
            },
            "remarks": "Specify this only if you are creating an alarm based on a single metric. Do not specify this if you are specifying a `Metrics` array.\n\nYou can specify the following values: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.",
            "stability": "external",
            "summary": "The unit of the metric associated with the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 194
          },
          "name": "unit",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAlarmProps"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::CloudWatch::AnomalyDetector",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::CloudWatch::AnomalyDetector` type specifies an anomaly detection band for a certain metric and statistic. The band represents the expected \"normal\" range for the metric values. Anomaly detection bands can be used for visualization of a metric's expected values, and for alarms.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::CloudWatch::AnomalyDetector`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnAnomalyDetector = new cloudwatch.CfnAnomalyDetector(this, 'MyCfnAnomalyDetector', /* all optional props */ {\n  configuration: {\n    excludedTimeRanges: [{\n      endTime: 'endTime',\n      startTime: 'startTime',\n    }],\n    metricTimeZone: 'metricTimeZone',\n  },\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricMathAnomalyDetector: {\n    metricDataQueries: [{\n      id: 'id',\n\n      // the properties below are optional\n      accountId: 'accountId',\n      expression: 'expression',\n      label: 'label',\n      metricStat: {\n        metric: {\n          metricName: 'metricName',\n          namespace: 'namespace',\n\n          // the properties below are optional\n          dimensions: [{\n            name: 'name',\n            value: 'value',\n          }],\n        },\n        period: 123,\n        stat: 'stat',\n\n        // the properties below are optional\n        unit: 'unit',\n      },\n      period: 123,\n      returnData: false,\n    }],\n  },\n  metricName: 'metricName',\n  namespace: 'namespace',\n  singleMetricAnomalyDetector: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n    stat: 'stat',\n  },\n  stat: 'stat',\n});"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::CloudWatch::AnomalyDetector`."
        },
        "locationInModule": {
          "filename": "lib/cloudwatch.generated.ts",
          "line": 1216
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetectorProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1135
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1234
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1251
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnAnomalyDetector",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1139
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1239
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-configuration"
            },
            "remarks": "The configuration can also include the time zone to use for the metric.",
            "stability": "external",
            "summary": "Specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1165
          },
          "name": "configuration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.ConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-dimensions"
            },
            "stability": "external",
            "summary": "The dimensions of the metric associated with the anomaly detection band."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1172
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.DimensionProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-metricmathanomalydetector"
            },
            "stability": "external",
            "summary": "The CloudWatch metric math expression for this anomaly detector."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1179
          },
          "name": "metricMathAnomalyDetector",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-metricname"
            },
            "stability": "external",
            "summary": "The name of the metric associated with the anomaly detection band."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1186
          },
          "name": "metricName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-namespace"
            },
            "stability": "external",
            "summary": "The namespace of the metric associated with the anomaly detection band."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1193
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-singlemetricanomalydetector"
            },
            "stability": "external",
            "summary": "The CloudWatch metric and statistic for this anomaly detector."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1200
          },
          "name": "singleMetricAnomalyDetector",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-stat"
            },
            "stability": "external",
            "summary": "The statistic of the metric associated with the anomaly detection band."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1207
          },
          "name": "stat",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.ConfigurationProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-configuration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The configuration can also include the time zone to use for the metric.",
        "stability": "external",
        "summary": "Specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst configurationProperty: cloudwatch.CfnAnomalyDetector.ConfigurationProperty = {\n  excludedTimeRanges: [{\n    endTime: 'endTime',\n    startTime: 'startTime',\n  }],\n  metricTimeZone: 'metricTimeZone',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.ConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1265
      },
      "name": "ConfigurationProperty",
      "namespace": "CfnAnomalyDetector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-configuration.html#cfn-cloudwatch-anomalydetector-configuration-excludedtimeranges"
            },
            "remarks": "Use this to make sure that events that could cause unusual values for the metric, such as deployments, aren't used when CloudWatch creates or updates the model.",
            "stability": "external",
            "summary": "Specifies an array of time ranges to exclude from use when the anomaly detection model is trained and updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1271
          },
          "name": "excludedTimeRanges",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.RangeProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-configuration.html#cfn-cloudwatch-anomalydetector-configuration-metrictimezone"
            },
            "remarks": "This is useful to enable the model to automatically account for daylight savings time changes if the metric is sensitive to such time changes.\n\nTo specify a time zone, use the name of the time zone as specified in the standard tz database. For more information, see [tz database](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Tz_database) .",
            "stability": "external",
            "summary": "The time zone to use for the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1279
          },
          "name": "metricTimeZone",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector.ConfigurationProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.DimensionProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-dimension.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish `InstanceId` as a dimension name, and the actual instance ID as the value for that dimension.\n\nYou can assign up to 10 dimensions to a metric.",
        "stability": "external",
        "summary": "A dimension is a name/value pair that is part of the identity of a metric.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst dimensionProperty: cloudwatch.CfnAnomalyDetector.DimensionProperty = {\n  name: 'name',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.DimensionProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1345
      },
      "name": "DimensionProperty",
      "namespace": "CfnAnomalyDetector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-dimension.html#cfn-cloudwatch-anomalydetector-dimension-name"
            },
            "stability": "external",
            "summary": "The name of the dimension."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1351
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-dimension.html#cfn-cloudwatch-anomalydetector-dimension-value"
            },
            "remarks": "Dimension values must contain only ASCII characters and must include at least one non-whitespace character.",
            "stability": "external",
            "summary": "The value of the dimension."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1357
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector.DimensionProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricdataquery.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The supported use of this structure is different for those two operations.\n\nWhen used in `GetMetricData` , it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A single `GetMetricData` call can include up to 500 `MetricDataQuery` structures.\n\nWhen used in `PutMetricAlarm` , it enables you to create an alarm based on a metric math expression. Each `MetricDataQuery` in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single `PutMetricAlarm` call can include up to 20 `MetricDataQuery` structures in the array. The 20 structures can include as many as 10 structures that contain a `MetricStat` parameter to retrieve a metric, and as many as 10 structures that contain the `Expression` parameter to perform a math expression. Of those `Expression` structures, one must have `True` as the value for `ReturnData` . The result of this expression is the value the alarm watches.\n\nAny expression used in a `PutMetricAlarm` operation must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *Amazon CloudWatch User Guide* .\n\nSome of the parameters of this structure also have different uses whether you are using this structure in a `GetMetricData` operation or a `PutMetricAlarm` operation. These differences are explained in the following parameter list.",
        "stability": "external",
        "summary": "This structure is used in both `GetMetricData` and `PutMetricAlarm` .",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricDataQueryProperty: cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty = {\n  id: 'id',\n\n  // the properties below are optional\n  accountId: 'accountId',\n  expression: 'expression',\n  label: 'label',\n  metricStat: {\n    metric: {\n      metricName: 'metricName',\n      namespace: 'namespace',\n\n      // the properties below are optional\n      dimensions: [{\n        name: 'name',\n        value: 'value',\n      }],\n    },\n    period: 123,\n    stat: 'stat',\n\n    // the properties below are optional\n    unit: 'unit',\n  },\n  period: 123,\n  returnData: false,\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1518
      },
      "name": "MetricDataQueryProperty",
      "namespace": "CfnAnomalyDetector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricdataquery.html#cfn-cloudwatch-anomalydetector-metricdataquery-id"
            },
            "remarks": "This name must be unique within a single call to `GetMetricData` . If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.",
            "stability": "external",
            "summary": "A short name used to tie this object to the results in the response."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1542
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricdataquery.html#cfn-cloudwatch-anomalydetector-metricdataquery-accountid"
            },
            "remarks": "Use this field only for `PutMetricAlarm` operations. It is not used in `GetMetricData` operations.",
            "stability": "external",
            "summary": "The ID of the account where the metrics are located, if this is a cross-account alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1526
          },
          "name": "accountId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricdataquery.html#cfn-cloudwatch-anomalydetector-metricdataquery-expression"
            },
            "remarks": "For more information about Metrics Insights queries, see [Metrics Insights query components and syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-metrics-insights-querylanguage) in the *Amazon CloudWatch User Guide* .\n\nA math expression can use the `Id` of the other metrics or queries to refer to those metrics, and can also use the `Id` of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *Amazon CloudWatch User Guide* .\n\nWithin each MetricDataQuery object, you must specify either `Expression` or `MetricStat` but not both.",
            "stability": "external",
            "summary": "This field can contain either a Metrics Insights query, or a metric math expression to be performed on the returned data."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1536
          },
          "name": "expression",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricdataquery.html#cfn-cloudwatch-anomalydetector-metricdataquery-label"
            },
            "remarks": "This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default.\n\nYou can put dynamic expressions into a label, so that it is more descriptive. For more information, see [Using Dynamic Labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html) .",
            "stability": "external",
            "summary": "A human-readable label for this metric or expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1550
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricdataquery.html#cfn-cloudwatch-anomalydetector-metricdataquery-metricstat"
            },
            "remarks": "Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.\n\nWithin one MetricDataQuery object, you must specify either `Expression` or `MetricStat` but not both.",
            "stability": "external",
            "summary": "The metric to be returned, along with statistics, period, and units."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1558
          },
          "name": "metricStat",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricStatProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricdataquery.html#cfn-cloudwatch-anomalydetector-metricdataquery-period"
            },
            "remarks": "For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a `PutMetricData` operation that includes a `StorageResolution of 1 second` .",
            "stability": "external",
            "summary": "The granularity, in seconds, of the returned data points."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1564
          },
          "name": "period",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricdataquery.html#cfn-cloudwatch-anomalydetector-metricdataquery-returndata"
            },
            "remarks": "If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify `False` . If you omit this, the default of `True` is used.\n\nWhen used in `PutMetricAlarm` , specify `True` for the one expression result to use as the alarm. For all other metrics and expressions in the same `PutMetricAlarm` operation, specify `ReturnData` as False.",
            "stability": "external",
            "summary": "When used in `GetMetricData` , this option indicates whether to return the timestamps and raw data values of this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1572
          },
          "name": "returnData",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector.MetricDataQueryProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricmathanomalydetector.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The designated math expression must return a single time series.",
        "stability": "external",
        "summary": "Indicates the CloudWatch math expression that provides the time series the anomaly detector uses as input.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricMathAnomalyDetectorProperty: cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty = {\n  metricDataQueries: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        metricName: 'metricName',\n        namespace: 'namespace',\n\n        // the properties below are optional\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1652
      },
      "name": "MetricMathAnomalyDetectorProperty",
      "namespace": "CfnAnomalyDetector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricmathanomalydetector.html#cfn-cloudwatch-anomalydetector-metricmathanomalydetector-metricdataqueries"
            },
            "remarks": "Each item in `MetricDataQueries` gets a metric or performs a math expression. One item in `MetricDataQueries` is the expression that provides the time series that the anomaly detector uses as input. Designate the expression by setting `ReturnData` to `True` for this object in the array. For all other expressions and metrics, set `ReturnData` to `False` . The designated expression must return a single time series.",
            "stability": "external",
            "summary": "An array of metric data query structures that enables you to create an anomaly detector based on the result of a metric math expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1658
          },
          "name": "metricDataQueries",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector.MetricMathAnomalyDetectorProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metric.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Represents a specific metric.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricProperty: cloudwatch.CfnAnomalyDetector.MetricProperty = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n\n  // the properties below are optional\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1423
      },
      "name": "MetricProperty",
      "namespace": "CfnAnomalyDetector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metric.html#cfn-cloudwatch-anomalydetector-metric-metricname"
            },
            "remarks": "This is a required field.",
            "stability": "external",
            "summary": "The name of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1435
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metric.html#cfn-cloudwatch-anomalydetector-metric-namespace"
            },
            "stability": "external",
            "summary": "The namespace of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1441
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metric.html#cfn-cloudwatch-anomalydetector-metric-dimensions"
            },
            "stability": "external",
            "summary": "The dimensions for the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1429
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.DimensionProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector.MetricProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricStatProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricstat.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "This structure defines the metric to be returned, along with the statistics, period, and units.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStatProperty: cloudwatch.CfnAnomalyDetector.MetricStatProperty = {\n  metric: {\n    metricName: 'metricName',\n    namespace: 'namespace',\n\n    // the properties below are optional\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n  },\n  period: 123,\n  stat: 'stat',\n\n  // the properties below are optional\n  unit: 'unit',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricStatProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1719
      },
      "name": "MetricStatProperty",
      "namespace": "CfnAnomalyDetector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricstat.html#cfn-cloudwatch-anomalydetector-metricstat-metric"
            },
            "stability": "external",
            "summary": "The metric to return, including the metric name, namespace, and dimensions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1725
          },
          "name": "metric",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricstat.html#cfn-cloudwatch-anomalydetector-metricstat-period"
            },
            "remarks": "For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a `PutMetricData` call that includes a `StorageResolution` of 1 second.\n\nIf the `StartTime` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:\n\n- Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).\n- Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).\n- Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).",
            "stability": "external",
            "summary": "The granularity, in seconds, of the returned data points."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1737
          },
          "name": "period",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricstat.html#cfn-cloudwatch-anomalydetector-metricstat-stat"
            },
            "remarks": "It can include any CloudWatch statistic or extended statistic.",
            "stability": "external",
            "summary": "The statistic to return."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1743
          },
          "name": "stat",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-metricstat.html#cfn-cloudwatch-anomalydetector-metricstat-unit"
            },
            "remarks": "In a `Get` operation, if you omit `Unit` then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.",
            "stability": "external",
            "summary": "When you are using a `Put` operation, this defines what unit you want to use when storing the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1751
          },
          "name": "unit",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector.MetricStatProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.RangeProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-range.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Each `Range` specifies one range of days or times to exclude from use for training or updating an anomaly detection model.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst rangeProperty: cloudwatch.CfnAnomalyDetector.RangeProperty = {\n  endTime: 'endTime',\n  startTime: 'startTime',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.RangeProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1824
      },
      "name": "RangeProperty",
      "namespace": "CfnAnomalyDetector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-range.html#cfn-cloudwatch-anomalydetector-range-endtime"
            },
            "remarks": "The format is `yyyy-MM-dd'T'HH:mm:ss` . For example, `2019-07-01T23:59:59` .",
            "stability": "external",
            "summary": "The end time of the range to exclude."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1830
          },
          "name": "endTime",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-range.html#cfn-cloudwatch-anomalydetector-range-starttime"
            },
            "remarks": "The format is `yyyy-MM-dd'T'HH:mm:ss` . For example, `2019-07-01T23:59:59` .",
            "stability": "external",
            "summary": "The start time of the range to exclude."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1836
          },
          "name": "startTime",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector.RangeProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-singlemetricanomalydetector.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Designates the CloudWatch metric and statistic that provides the time series the anomaly detector uses as input.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst singleMetricAnomalyDetectorProperty: cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty = {\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricName: 'metricName',\n  namespace: 'namespace',\n  stat: 'stat',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1902
      },
      "name": "SingleMetricAnomalyDetectorProperty",
      "namespace": "CfnAnomalyDetector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-singlemetricanomalydetector.html#cfn-cloudwatch-anomalydetector-singlemetricanomalydetector-dimensions"
            },
            "stability": "external",
            "summary": "The metric dimensions to create the anomaly detection model for."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1908
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.DimensionProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-singlemetricanomalydetector.html#cfn-cloudwatch-anomalydetector-singlemetricanomalydetector-metricname"
            },
            "stability": "external",
            "summary": "The name of the metric to create the anomaly detection model for."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1914
          },
          "name": "metricName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-singlemetricanomalydetector.html#cfn-cloudwatch-anomalydetector-singlemetricanomalydetector-namespace"
            },
            "stability": "external",
            "summary": "The namespace of the metric to create the anomaly detection model for."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1920
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-anomalydetector-singlemetricanomalydetector.html#cfn-cloudwatch-anomalydetector-singlemetricanomalydetector-stat"
            },
            "stability": "external",
            "summary": "The statistic to use for the metric and anomaly detection model."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1926
          },
          "name": "stat",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnAnomalyDetectorProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnAnomalyDetector`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnAnomalyDetectorProps: cloudwatch.CfnAnomalyDetectorProps = {\n  configuration: {\n    excludedTimeRanges: [{\n      endTime: 'endTime',\n      startTime: 'startTime',\n    }],\n    metricTimeZone: 'metricTimeZone',\n  },\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricMathAnomalyDetector: {\n    metricDataQueries: [{\n      id: 'id',\n\n      // the properties below are optional\n      accountId: 'accountId',\n      expression: 'expression',\n      label: 'label',\n      metricStat: {\n        metric: {\n          metricName: 'metricName',\n          namespace: 'namespace',\n\n          // the properties below are optional\n          dimensions: [{\n            name: 'name',\n            value: 'value',\n          }],\n        },\n        period: 123,\n        stat: 'stat',\n\n        // the properties below are optional\n        unit: 'unit',\n      },\n      period: 123,\n      returnData: false,\n    }],\n  },\n  metricName: 'metricName',\n  namespace: 'namespace',\n  singleMetricAnomalyDetector: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n    stat: 'stat',\n  },\n  stat: 'stat',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetectorProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1010
      },
      "name": "CfnAnomalyDetectorProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-configuration"
            },
            "remarks": "The configuration can also include the time zone to use for the metric.",
            "stability": "external",
            "summary": "Specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1017
          },
          "name": "configuration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.ConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-dimensions"
            },
            "stability": "external",
            "summary": "The dimensions of the metric associated with the anomaly detection band."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1024
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.DimensionProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-metricmathanomalydetector"
            },
            "stability": "external",
            "summary": "The CloudWatch metric math expression for this anomaly detector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1031
          },
          "name": "metricMathAnomalyDetector",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-metricname"
            },
            "stability": "external",
            "summary": "The name of the metric associated with the anomaly detection band."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1038
          },
          "name": "metricName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-namespace"
            },
            "stability": "external",
            "summary": "The namespace of the metric associated with the anomaly detection band."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1045
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-singlemetricanomalydetector"
            },
            "stability": "external",
            "summary": "The CloudWatch metric and statistic for this anomaly detector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1052
          },
          "name": "singleMetricAnomalyDetector",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html#cfn-cloudwatch-anomalydetector-stat"
            },
            "stability": "external",
            "summary": "The statistic of the metric associated with the anomaly detection band."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 1059
          },
          "name": "stat",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnAnomalyDetectorProps"
    },
    "@aws-cdk/aws-cloudwatch.CfnCompositeAlarm": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::CloudWatch::CompositeAlarm",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::CloudWatch::CompositeAlarm` type creates or updates a composite alarm. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.\n\nThe alarms specified in a composite alarm's rule expression can include metric alarms and other composite alarms.\n\nUsing composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.\n\nCurrently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.\n\nWhen this operation creates an alarm, the alarm state is immediately set to INSUFFICIENT_DATA. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in INSUFFICIENT_DATA state.\n\nWhen you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::CloudWatch::CompositeAlarm`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnCompositeAlarm = new cloudwatch.CfnCompositeAlarm(this, 'MyCfnCompositeAlarm', {\n  alarmName: 'alarmName',\n  alarmRule: 'alarmRule',\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  insufficientDataActions: ['insufficientDataActions'],\n  okActions: ['okActions'],\n});"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnCompositeAlarm",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::CloudWatch::CompositeAlarm`."
        },
        "locationInModule": {
          "filename": "lib/cloudwatch.generated.ts",
          "line": 2247
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.CfnCompositeAlarmProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 2146
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2268
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2285
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnCompositeAlarm",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2150
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The ARN of the composite alarm, such as `arn:aws:cloudwatch:us-west-2:123456789012:alarm/CompositeAlarmName` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2175
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2273
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-alarmname"
            },
            "remarks": "This name must be unique within your AWS account.",
            "stability": "external",
            "summary": "The name for the composite alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2182
          },
          "name": "alarmName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-alarmrule"
            },
            "remarks": "For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.\n\nYou can use either alarm names or ARNs to reference the other alarms that are to be evaluated.\n\nFunctions can include the following:\n\n- ALARM(\"alarm-name or alarm-ARN\") is TRUE if the named alarm is in ALARM state.\n- OK(\"alarm-name or alarm-ARN\") is TRUE if the named alarm is in OK state.\n- INSUFFICIENT_DATA(\"alarm-name or alarm-ARN\") is TRUE if the named alarm is in INSUFFICIENT_DATA state.\n- TRUE always evaluates to TRUE.\n- FALSE always evaluates to FALSE.\n\nTRUE and FALSE are useful for testing a complex AlarmRule structure, and for testing your alarm actions.\n\nFor more information about `AlarmRule` syntax, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2203
          },
          "name": "alarmRule",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-actionsenabled"
            },
            "remarks": "The default is TRUE.",
            "stability": "external",
            "summary": "Indicates whether actions should be executed during any changes to the alarm state of the composite alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2210
          },
          "name": "actionsEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-alarmactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the ALARM state from any other state."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2217
          },
          "name": "alarmActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-alarmdescription"
            },
            "stability": "external",
            "summary": "The description for the composite alarm."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2224
          },
          "name": "alarmDescription",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-insufficientdataactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2231
          },
          "name": "insufficientDataActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-okactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the OK state from any other state."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2238
          },
          "name": "okActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnCompositeAlarm"
    },
    "@aws-cdk/aws-cloudwatch.CfnCompositeAlarmProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnCompositeAlarm`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnCompositeAlarmProps: cloudwatch.CfnCompositeAlarmProps = {\n  alarmName: 'alarmName',\n  alarmRule: 'alarmRule',\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  insufficientDataActions: ['insufficientDataActions'],\n  okActions: ['okActions'],\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnCompositeAlarmProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 1995
      },
      "name": "CfnCompositeAlarmProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-alarmname"
            },
            "remarks": "This name must be unique within your AWS account.",
            "stability": "external",
            "summary": "The name for the composite alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2002
          },
          "name": "alarmName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-alarmrule"
            },
            "remarks": "For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.\n\nYou can use either alarm names or ARNs to reference the other alarms that are to be evaluated.\n\nFunctions can include the following:\n\n- ALARM(\"alarm-name or alarm-ARN\") is TRUE if the named alarm is in ALARM state.\n- OK(\"alarm-name or alarm-ARN\") is TRUE if the named alarm is in OK state.\n- INSUFFICIENT_DATA(\"alarm-name or alarm-ARN\") is TRUE if the named alarm is in INSUFFICIENT_DATA state.\n- TRUE always evaluates to TRUE.\n- FALSE always evaluates to FALSE.\n\nTRUE and FALSE are useful for testing a complex AlarmRule structure, and for testing your alarm actions.\n\nFor more information about `AlarmRule` syntax, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2023
          },
          "name": "alarmRule",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-actionsenabled"
            },
            "remarks": "The default is TRUE.",
            "stability": "external",
            "summary": "Indicates whether actions should be executed during any changes to the alarm state of the composite alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2030
          },
          "name": "actionsEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-alarmactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the ALARM state from any other state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2037
          },
          "name": "alarmActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-alarmdescription"
            },
            "stability": "external",
            "summary": "The description for the composite alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2044
          },
          "name": "alarmDescription",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-insufficientdataactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2051
          },
          "name": "insufficientDataActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html#cfn-cloudwatch-compositealarm-okactions"
            },
            "remarks": "Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .",
            "stability": "external",
            "summary": "The actions to execute when this alarm transitions to the OK state from any other state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2058
          },
          "name": "okActions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnCompositeAlarmProps"
    },
    "@aws-cdk/aws-cloudwatch.CfnDashboard": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::CloudWatch::Dashboard",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::CloudWatch::Dashboard` resource specifies an Amazon CloudWatch dashboard. A dashboard is a customizable home page in the CloudWatch console that you can use to monitor your AWS resources in a single view.\n\nAll dashboards in your account are global, not region-specific.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::CloudWatch::Dashboard`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnDashboard = new cloudwatch.CfnDashboard(this, 'MyCfnDashboard', {\n  dashboardBody: 'dashboardBody',\n\n  // the properties below are optional\n  dashboardName: 'dashboardName',\n});"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnDashboard",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::CloudWatch::Dashboard`."
        },
        "locationInModule": {
          "filename": "lib/cloudwatch.generated.ts",
          "line": 2426
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.CfnDashboardProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 2378
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2440
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2452
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDashboard",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2382
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2445
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html#cfn-cloudwatch-dashboard-dashboardbody"
            },
            "remarks": "This parameter is required.\n\nFor more information about the syntax, see [Dashboard Body Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html) .",
            "stability": "external",
            "summary": "The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2410
          },
          "name": "dashboardBody",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html#cfn-cloudwatch-dashboard-dashboardname"
            },
            "remarks": "The name must be between 1 and 255 characters. If you do not specify a name, one will be generated automatically.",
            "stability": "external",
            "summary": "The name of the dashboard."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2417
          },
          "name": "dashboardName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnDashboard"
    },
    "@aws-cdk/aws-cloudwatch.CfnDashboardProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDashboard`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnDashboardProps: cloudwatch.CfnDashboardProps = {\n  dashboardBody: 'dashboardBody',\n\n  // the properties below are optional\n  dashboardName: 'dashboardName',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnDashboardProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 2298
      },
      "name": "CfnDashboardProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html#cfn-cloudwatch-dashboard-dashboardbody"
            },
            "remarks": "This parameter is required.\n\nFor more information about the syntax, see [Dashboard Body Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html) .",
            "stability": "external",
            "summary": "The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2307
          },
          "name": "dashboardBody",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html#cfn-cloudwatch-dashboard-dashboardname"
            },
            "remarks": "The name must be between 1 and 255 characters. If you do not specify a name, one will be generated automatically.",
            "stability": "external",
            "summary": "The name of the dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2314
          },
          "name": "dashboardName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnDashboardProps"
    },
    "@aws-cdk/aws-cloudwatch.CfnInsightRule": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::CloudWatch::InsightRule",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Creates or updates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see [Using Contributor Insights to Analyze High-Cardinality Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html) in the *Amazon CloudWatch User Guide* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::CloudWatch::InsightRule`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnInsightRule = new cloudwatch.CfnInsightRule(this, 'MyCfnInsightRule', {\n  ruleBody: 'ruleBody',\n  ruleName: 'ruleName',\n  ruleState: 'ruleState',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnInsightRule",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::CloudWatch::InsightRule`."
        },
        "locationInModule": {
          "filename": "lib/cloudwatch.generated.ts",
          "line": 2643
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.CfnInsightRuleProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 2567
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2663
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2677
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnInsightRule",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2571
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The ARN of the Contributor Insights rule, such as `arn:aws:cloudwatch:us-west-2:123456789012:insight-rule/MyInsightRuleName` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2596
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "RuleName"
            },
            "stability": "external",
            "summary": "The name of the Contributor Insights rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2602
          },
          "name": "attrRuleName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2668
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html#cfn-cloudwatch-insightrule-tags"
            },
            "remarks": "You can associate as many as 50 tags with a rule.\n\nTags can help you organize and categorize your resources. For more information, see [Tagging Your Amazon CloudWatch Resources](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Tagging.html) .\n\nTo be able to associate tags with a rule, you must have the `cloudwatch:TagResource` permission in addition to the `cloudwatch:PutInsightRule` permission.",
            "stability": "external",
            "summary": "A list of key-value pairs to associate with the Contributor Insights rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2634
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html#cfn-cloudwatch-insightrule-rulebody"
            },
            "remarks": "For details about the syntax, see [Contributor Insights Rule Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html) in the *Amazon CloudWatch User Guide* .",
            "stability": "external",
            "summary": "The definition of the rule, as a JSON object."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2609
          },
          "name": "ruleBody",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html#cfn-cloudwatch-insightrule-rulename"
            },
            "stability": "external",
            "summary": "The name of the rule."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2616
          },
          "name": "ruleName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html#cfn-cloudwatch-insightrule-rulestate"
            },
            "remarks": "Valid values are `ENABLED` and `DISABLED` .",
            "stability": "external",
            "summary": "The current state of the rule."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2623
          },
          "name": "ruleState",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnInsightRule"
    },
    "@aws-cdk/aws-cloudwatch.CfnInsightRuleProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnInsightRule`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnInsightRuleProps: cloudwatch.CfnInsightRuleProps = {\n  ruleBody: 'ruleBody',\n  ruleName: 'ruleName',\n  ruleState: 'ruleState',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnInsightRuleProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 2465
      },
      "name": "CfnInsightRuleProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html#cfn-cloudwatch-insightrule-rulebody"
            },
            "remarks": "For details about the syntax, see [Contributor Insights Rule Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html) in the *Amazon CloudWatch User Guide* .",
            "stability": "external",
            "summary": "The definition of the rule, as a JSON object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2472
          },
          "name": "ruleBody",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html#cfn-cloudwatch-insightrule-rulename"
            },
            "stability": "external",
            "summary": "The name of the rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2479
          },
          "name": "ruleName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html#cfn-cloudwatch-insightrule-rulestate"
            },
            "remarks": "Valid values are `ENABLED` and `DISABLED` .",
            "stability": "external",
            "summary": "The current state of the rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2486
          },
          "name": "ruleState",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html#cfn-cloudwatch-insightrule-tags"
            },
            "remarks": "You can associate as many as 50 tags with a rule.\n\nTags can help you organize and categorize your resources. For more information, see [Tagging Your Amazon CloudWatch Resources](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Tagging.html) .\n\nTo be able to associate tags with a rule, you must have the `cloudwatch:TagResource` permission in addition to the `cloudwatch:PutInsightRule` permission.",
            "stability": "external",
            "summary": "A list of key-value pairs to associate with the Contributor Insights rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2497
          },
          "name": "tags",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/core.CfnTag"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnInsightRuleProps"
    },
    "@aws-cdk/aws-cloudwatch.CfnMetricStream": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::CloudWatch::MetricStream",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Creates or updates a metric stream. Metrics streams can automatically stream CloudWatch metrics to AWS destinations including Amazon S3 and to many third-party solutions. For more information, see [Metric streams](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html) .\n\nTo create a metric stream, you must be logged on to an account that has the `iam:PassRole` permission and either the *CloudWatchFullAccess* policy or the `cloudwatch:PutMetricStream` permission.\n\nWhen you create or update a metric stream, you choose one of the following:\n\n- Stream metrics from all metric namespaces in the account.\n- Stream metrics from all metric namespaces in the account, except for the namespaces that you list in `ExcludeFilters` .\n- Stream metrics from only the metric namespaces that you list in `IncludeFilters` .\n\nWhen you create a metric stream, the stream is created in the `running` state. If you update an existing metric stream, the state does not change.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::CloudWatch::MetricStream`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnMetricStream = new cloudwatch.CfnMetricStream(this, 'MyCfnMetricStream', {\n  firehoseArn: 'firehoseArn',\n  outputFormat: 'outputFormat',\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  excludeFilters: [{\n    namespace: 'namespace',\n  }],\n  includeFilters: [{\n    namespace: 'namespace',\n  }],\n  name: 'name',\n  statisticsConfigurations: [{\n    additionalStatistics: ['additionalStatistics'],\n    includeMetrics: [{\n      metricName: 'metricName',\n      namespace: 'namespace',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::CloudWatch::MetricStream`."
        },
        "locationInModule": {
          "filename": "lib/cloudwatch.generated.ts",
          "line": 2974
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStreamProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 2850
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 3000
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 3018
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnMetricStream",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2854
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The ARN of the metric stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2879
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "CreationDate"
            },
            "stability": "external",
            "summary": "The date that the metric stream was originally created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2885
          },
          "name": "attrCreationDate",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "LastUpdateDate"
            },
            "stability": "external",
            "summary": "The date that the metric stream was most recently updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2891
          },
          "name": "attrLastUpdateDate",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "State"
            },
            "stability": "external",
            "summary": "The state of the metric stream, either `running` or `stopped` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2897
          },
          "name": "attrState",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 3005
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-tags"
            },
            "remarks": "For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .",
            "stability": "external",
            "summary": "An array of key-value pairs to apply to the metric stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2965
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-firehosearn"
            },
            "remarks": "This Amazon Kinesis Firehose delivery stream must already exist and must be in the same account as the metric stream.",
            "stability": "external",
            "summary": "The ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2904
          },
          "name": "firehoseArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-outputformat"
            },
            "remarks": "Valid values are `json` and `opentelemetry0.7` For more information about metric stream output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html) .\n\nThis parameter is required.",
            "stability": "external",
            "summary": "The output format for the stream."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2913
          },
          "name": "outputFormat",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-rolearn"
            },
            "remarks": "This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the `firehose:PutRecord` and `firehose:PutRecordBatch` permissions.",
            "stability": "external",
            "summary": "The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Firehose resources."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2920
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-excludefilters"
            },
            "remarks": "You cannot specify both `IncludeFilters` and `ExcludeFilters` in the same metric stream.\n\nWhen you modify the `IncludeFilters` or `ExcludeFilters` of an existing metric stream in any way, the metric stream is effectively restarted, so after such a change you will get only the datapoints that have a timestamp after the time of the update.",
            "stability": "external",
            "summary": "If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2929
          },
          "name": "excludeFilters",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamFilterProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-includefilters"
            },
            "remarks": "You cannot specify both `IncludeFilters` and `ExcludeFilters` in the same metric stream.\n\nWhen you modify the `IncludeFilters` or `ExcludeFilters` of an existing metric stream in any way, the metric stream is effectively restarted, so after such a change you will get only the datapoints that have a timestamp after the time of the update.",
            "stability": "external",
            "summary": "If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2938
          },
          "name": "includeFilters",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamFilterProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-name"
            },
            "remarks": "The name must be different than the names of other metric streams in this account and Region.\n\nIf you are updating a metric stream, specify the name of that stream here.",
            "stability": "external",
            "summary": "If you are creating a new metric stream, this is the name for the new stream."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2947
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-statisticsconfigurations"
            },
            "remarks": "You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.\n\nFor each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream's `OutputFormat` . If the `OutputFormat` is `json` , you can stream any additional statistic that is supported by CloudWatch , listed in [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html) . If the `OutputFormat` is `opentelemetry0` .7, you can stream percentile statistics *(p??)* .",
            "stability": "external",
            "summary": "By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed."
          },
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2956
          },
          "name": "statisticsConfigurations",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnMetricStream"
    },
    "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamFilterProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamfilter.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "This structure contains the name of one of the metric namespaces that is listed in a filter of a metric stream.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStreamFilterProperty: cloudwatch.CfnMetricStream.MetricStreamFilterProperty = {\n  namespace: 'namespace',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamFilterProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 3032
      },
      "name": "MetricStreamFilterProperty",
      "namespace": "CfnMetricStream",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamfilter.html#cfn-cloudwatch-metricstream-metricstreamfilter-namespace"
            },
            "stability": "external",
            "summary": "The name of the metric namespace in the filter."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 3038
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnMetricStream.MetricStreamFilterProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamstatisticsconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "All metrics that match the combination of metric name and namespace will be streamed with the additional statistics, no matter their dimensions.",
        "stability": "external",
        "summary": "This structure specifies a list of additional statistics to stream, and the metrics to stream those additional statistics for.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStreamStatisticsConfigurationProperty: cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty = {\n  additionalStatistics: ['additionalStatistics'],\n  includeMetrics: [{\n    metricName: 'metricName',\n    namespace: 'namespace',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 3102
      },
      "name": "MetricStreamStatisticsConfigurationProperty",
      "namespace": "CfnMetricStream",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamstatisticsconfiguration.html#cfn-cloudwatch-metricstream-metricstreamstatisticsconfiguration-additionalstatistics"
            },
            "stability": "external",
            "summary": "The additional statistics to stream for the metrics listed in `IncludeMetrics` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 3108
          },
          "name": "additionalStatistics",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamstatisticsconfiguration.html#cfn-cloudwatch-metricstream-metricstreamstatisticsconfiguration-includemetrics"
            },
            "stability": "external",
            "summary": "An array that defines the metrics that are to have additional statistics streamed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 3114
          },
          "name": "includeMetrics",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnMetricStream.MetricStreamStatisticsConfigurationProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamstatisticsmetric.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "A structure that specifies the metric name and namespace for one metric that is going to have additional statistics included in the stream.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStreamStatisticsMetricProperty: cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 3180
      },
      "name": "MetricStreamStatisticsMetricProperty",
      "namespace": "CfnMetricStream",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamstatisticsmetric.html#cfn-cloudwatch-metricstream-metricstreamstatisticsmetric-metricname"
            },
            "stability": "external",
            "summary": "The name of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 3186
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamstatisticsmetric.html#cfn-cloudwatch-metricstream-metricstreamstatisticsmetric-namespace"
            },
            "stability": "external",
            "summary": "The namespace of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 3192
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnMetricStream.MetricStreamStatisticsMetricProperty"
    },
    "@aws-cdk/aws-cloudwatch.CfnMetricStreamProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnMetricStream`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnMetricStreamProps: cloudwatch.CfnMetricStreamProps = {\n  firehoseArn: 'firehoseArn',\n  outputFormat: 'outputFormat',\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  excludeFilters: [{\n    namespace: 'namespace',\n  }],\n  includeFilters: [{\n    namespace: 'namespace',\n  }],\n  name: 'name',\n  statisticsConfigurations: [{\n    additionalStatistics: ['additionalStatistics'],\n    includeMetrics: [{\n      metricName: 'metricName',\n      namespace: 'namespace',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStreamProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cloudwatch.generated.ts",
        "line": 2690
      },
      "name": "CfnMetricStreamProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-firehosearn"
            },
            "remarks": "This Amazon Kinesis Firehose delivery stream must already exist and must be in the same account as the metric stream.",
            "stability": "external",
            "summary": "The ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2697
          },
          "name": "firehoseArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-outputformat"
            },
            "remarks": "Valid values are `json` and `opentelemetry0.7` For more information about metric stream output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html) .\n\nThis parameter is required.",
            "stability": "external",
            "summary": "The output format for the stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2706
          },
          "name": "outputFormat",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-rolearn"
            },
            "remarks": "This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the `firehose:PutRecord` and `firehose:PutRecordBatch` permissions.",
            "stability": "external",
            "summary": "The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Firehose resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2713
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-excludefilters"
            },
            "remarks": "You cannot specify both `IncludeFilters` and `ExcludeFilters` in the same metric stream.\n\nWhen you modify the `IncludeFilters` or `ExcludeFilters` of an existing metric stream in any way, the metric stream is effectively restarted, so after such a change you will get only the datapoints that have a timestamp after the time of the update.",
            "stability": "external",
            "summary": "If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2722
          },
          "name": "excludeFilters",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamFilterProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-includefilters"
            },
            "remarks": "You cannot specify both `IncludeFilters` and `ExcludeFilters` in the same metric stream.\n\nWhen you modify the `IncludeFilters` or `ExcludeFilters` of an existing metric stream in any way, the metric stream is effectively restarted, so after such a change you will get only the datapoints that have a timestamp after the time of the update.",
            "stability": "external",
            "summary": "If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2731
          },
          "name": "includeFilters",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamFilterProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-name"
            },
            "remarks": "The name must be different than the names of other metric streams in this account and Region.\n\nIf you are updating a metric stream, specify the name of that stream here.",
            "stability": "external",
            "summary": "If you are creating a new metric stream, this is the name for the new stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2740
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-statisticsconfigurations"
            },
            "remarks": "You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.\n\nFor each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream's `OutputFormat` . If the `OutputFormat` is `json` , you can stream any additional statistic that is supported by CloudWatch , listed in [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html) . If the `OutputFormat` is `opentelemetry0` .7, you can stream percentile statistics *(p??)* .",
            "stability": "external",
            "summary": "By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2749
          },
          "name": "statisticsConfigurations",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html#cfn-cloudwatch-metricstream-tags"
            },
            "remarks": "For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .",
            "stability": "external",
            "summary": "An array of key-value pairs to apply to the metric stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cloudwatch.generated.ts",
            "line": 2758
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/cloudwatch.generated:CfnMetricStreamProps"
    },
    "@aws-cdk/aws-cloudwatch.Color": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN,\n  })]\n}));",
        "stability": "stable",
        "summary": "A set of standard colours that can be used in annotations in a GraphWidget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Color",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 433
      },
      "name": "Color",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "blue - hex #1f77b4."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 435
          },
          "name": "BLUE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "brown - hex #8c564b."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 438
          },
          "name": "BROWN",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "green - hex #2ca02c."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 441
          },
          "name": "GREEN",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "grey - hex #7f7f7f."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 444
          },
          "name": "GREY",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "orange - hex #ff7f0e."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 447
          },
          "name": "ORANGE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "pink - hex #e377c2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 450
          },
          "name": "PINK",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "purple - hex #9467bd."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 453
          },
          "name": "PURPLE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "red - hex #d62728."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 456
          },
          "name": "RED",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graph:Color"
    },
    "@aws-cdk/aws-cloudwatch.Column": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "remarks": "Widgets will be laid out next to each other",
        "stability": "stable",
        "summary": "A widget that contains other widgets in a vertical column.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\nconst column = new cloudwatch.Column(widget);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Column",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/layout.ts",
          "line": 75
        },
        "parameters": [
          {
            "name": "widgets",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IWidget"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/layout.ts",
        "line": 66
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Place the widget at a given position."
          },
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 83
          },
          "name": "position",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 91
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Column",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount of vertical grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 68
          },
          "name": "height",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "List of contained widgets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 73
          },
          "name": "widgets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IWidget"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount of horizontal grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 67
          },
          "name": "width",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/layout:Column"
    },
    "@aws-cdk/aws-cloudwatch.CommonMetricOptions": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options shared by most methods accepting metric options.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dimensions: any;\nconst commonMetricOptions: cloudwatch.CommonMetricOptions = {\n  account: 'account',\n  color: 'color',\n  dimensions: {\n    dimensionsKey: dimensions,\n  },\n  dimensionsMap: {\n    dimensionsMapKey: 'dimensionsMap',\n  },\n  label: 'label',\n  period: cdk.Duration.minutes(30),\n  region: 'region',\n  statistic: 'statistic',\n  unit: cloudwatch.Unit.SECONDS,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CommonMetricOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric.ts",
        "line": 20
      },
      "name": "CommonMetricOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Deployment account.",
            "stability": "stable",
            "summary": "Account which this metric comes from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 106
          },
          "name": "account",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatic color",
            "stability": "stable",
            "summary": "The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 99
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No dimensions.",
            "deprecated": "Use 'dimensionsMap' instead.",
            "stability": "deprecated",
            "summary": "Dimensions of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 51
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No dimensions.",
            "stability": "stable",
            "summary": "Dimensions of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 58
          },
          "name": "dimensionsMap",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No label",
            "remarks": "You can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)\nto show summary information about the entire displayed time series\nin the legend. For example, if you use:\n\n```\n[max: ${MAX}] MyMetric\n```\n\nAs the metric label, the maximum value in the visible range will\nbe shown next to the time series name in the graph's legend.",
            "stability": "stable",
            "summary": "Label for this metric when added to a Graph in a Dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 92
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "stability": "stable",
            "summary": "The period over which the specified statistic is applied."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 26
          },
          "name": "period",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Deployment region.",
            "stability": "stable",
            "summary": "Region which this metric comes from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 113
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Average",
            "remarks": "Can be one of the following:\n\n- \"Minimum\" | \"min\"\n- \"Maximum\" | \"max\"\n- \"Average\" | \"avg\"\n- \"Sum\" | \"sum\"\n- \"SampleCount | \"n\"\n- \"pNN.NN\"",
            "stability": "stable",
            "summary": "What function to use for aggregating."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 42
          },
          "name": "statistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All metric datums in the given metric stream",
            "remarks": "Only refer to datums emitted to the metric stream with the given unit and\nignore all others. Only useful when datums are being emitted to the same\nmetric stream under different units.\n\nThe default is to use all matric datums in the stream, regardless of unit,\nwhich is recommended in nearly all cases.\n\nCloudWatch does not honor this property for graphs.",
            "stability": "stable",
            "summary": "Unit used to filter the metric stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 74
          },
          "name": "unit",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.Unit"
          }
        }
      ],
      "symbolId": "lib/metric:CommonMetricOptions"
    },
    "@aws-cdk/aws-cloudwatch.ComparisonOperator": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const myHostedZone: route53.HostedZone;\nconst certificate = new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\ncertificate.metricDaysToExpiry().createAlarm(this, 'Alarm', {\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});",
        "stability": "stable",
        "summary": "Comparison operator for evaluating alarms."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.ComparisonOperator",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/alarm.ts",
        "line": 30
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Specified statistic is greater than or equal to the threshold."
          },
          "name": "GREATER_THAN_OR_EQUAL_TO_THRESHOLD"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Specified statistic is strictly greater than the threshold."
          },
          "name": "GREATER_THAN_THRESHOLD"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Specified statistic is strictly less than the threshold."
          },
          "name": "LESS_THAN_THRESHOLD"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Specified statistic is less than or equal to the threshold."
          },
          "name": "LESS_THAN_OR_EQUAL_TO_THRESHOLD"
        },
        {
          "docs": {
            "remarks": "Used only for alarms based on anomaly detection models",
            "stability": "stable",
            "summary": "Specified statistic is lower than or greater than the anomaly model band."
          },
          "name": "LESS_THAN_LOWER_OR_GREATER_THAN_UPPER_THRESHOLD"
        },
        {
          "docs": {
            "remarks": "Used only for alarms based on anomaly detection models",
            "stability": "stable",
            "summary": "Specified statistic is greater than the anomaly model band."
          },
          "name": "GREATER_THAN_UPPER_THRESHOLD"
        },
        {
          "docs": {
            "remarks": "Used only for alarms based on anomaly detection models",
            "stability": "stable",
            "summary": "Specified statistic is lower than the anomaly model band."
          },
          "name": "LESS_THAN_LOWER_THRESHOLD"
        }
      ],
      "name": "ComparisonOperator",
      "symbolId": "lib/alarm:ComparisonOperator"
    },
    "@aws-cdk/aws-cloudwatch.CompositeAlarm": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/aws-cloudwatch.AlarmBase",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
        "stability": "stable",
        "summary": "A Composite Alarm based on Alarm Rule."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CompositeAlarm",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/composite-alarm.ts",
          "line": 92
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.CompositeAlarmProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/composite-alarm.ts",
        "line": 42
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing CloudWatch composite alarm provided an ARN."
          },
          "locationInModule": {
            "filename": "lib/composite-alarm.ts",
            "line": 68
          },
          "name": "fromCompositeAlarmArn",
          "parameters": [
            {
              "docs": {
                "summary": "The parent creating construct (usually `this`)."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "The construct's name."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Composite Alarm ARN (i.e. arn:aws:cloudwatch:<region>:<account-id>:alarm/CompositeAlarmName)."
              },
              "name": "compositeAlarmArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarm"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing CloudWatch composite alarm provided an Name."
          },
          "locationInModule": {
            "filename": "lib/composite-alarm.ts",
            "line": 51
          },
          "name": "fromCompositeAlarmName",
          "parameters": [
            {
              "docs": {
                "summary": "The parent creating construct (usually `this`)."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "The construct's name."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Composite Alarm Name."
              },
              "name": "compositeAlarmName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IAlarm"
            }
          },
          "static": true
        }
      ],
      "name": "CompositeAlarm",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "ARN of this alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/composite-alarm.ts",
            "line": 81
          },
          "name": "alarmArn",
          "overrides": "@aws-cdk/aws-cloudwatch.AlarmBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "Name of this alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/composite-alarm.ts",
            "line": 88
          },
          "name": "alarmName",
          "overrides": "@aws-cdk/aws-cloudwatch.AlarmBase",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/composite-alarm:CompositeAlarm"
    },
    "@aws-cdk/aws-cloudwatch.CompositeAlarmProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
        "stability": "stable",
        "summary": "Properties for creating a Composite Alarm."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/composite-alarm.ts",
        "line": 9
      },
      "name": "CompositeAlarmProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Expression that specifies which other alarms are to be evaluated to determine this composite alarm's state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/composite-alarm.ts",
            "line": 35
          },
          "name": "alarmRule",
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Whether the actions for this alarm are enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/composite-alarm.ts",
            "line": 16
          },
          "name": "actionsEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No description",
            "stability": "stable",
            "summary": "Description for the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/composite-alarm.ts",
            "line": 23
          },
          "name": "alarmDescription",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Automatically generated name",
            "stability": "stable",
            "summary": "Name of the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/composite-alarm.ts",
            "line": 30
          },
          "name": "compositeAlarmName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/composite-alarm:CompositeAlarmProps"
    },
    "@aws-cdk/aws-cloudwatch.ConcreteWidget": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "remarks": "This is in contrast to other widgets which exist for layout purposes.",
        "stability": "stable",
        "summary": "A real CloudWatch widget that has its own fixed size and remembers its position."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/widget.ts",
          "line": 51
        },
        "parameters": [
          {
            "name": "width",
            "type": {
              "primitive": "number"
            }
          },
          {
            "name": "height",
            "type": {
              "primitive": "number"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/widget.ts",
        "line": 43
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Copy the warnings from the given metric."
          },
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 70
          },
          "name": "copyMetricWarnings",
          "parameters": [
            {
              "name": "ms",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              },
              "variadic": true
            }
          ],
          "protected": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Place the widget at a given position."
          },
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 60
          },
          "name": "position",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 65
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "ConcreteWidget",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount of vertical grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 45
          },
          "name": "height",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount of horizontal grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 44
          },
          "name": "width",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Any warnings that are produced as a result of putting together this widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 49
          },
          "name": "warnings",
          "optional": true,
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 46
          },
          "name": "x",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 47
          },
          "name": "y",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/widget:ConcreteWidget"
    },
    "@aws-cdk/aws-cloudwatch.CreateAlarmOptions": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const fn: lambda.Function;\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});",
        "stability": "stable",
        "summary": "Properties needed to make an alarm from a metric."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.CreateAlarmOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric.ts",
        "line": 730
      },
      "name": "CreateAlarmOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The number of periods over which data is compared to the specified threshold."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 789
          },
          "name": "evaluationPeriods",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The value against which the specified statistic is compared."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 784
          },
          "name": "threshold",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Whether the actions for this alarm are enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 812
          },
          "name": "actionsEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No description",
            "stability": "stable",
            "summary": "Description for the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 772
          },
          "name": "alarmDescription",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Automatically generated name",
            "stability": "stable",
            "summary": "Name of the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 765
          },
          "name": "alarmName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "GreaterThanOrEqualToThreshold",
            "stability": "stable",
            "summary": "Comparison to use to check if metric is breaching."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 779
          },
          "name": "comparisonOperator",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.ComparisonOperator"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "``evaluationPeriods``",
            "remarks": "This is used only if you are setting an \"M\nout of N\" alarm. In that case, this value is the M. For more information, see Evaluating an Alarm in the Amazon\nCloudWatch User Guide.",
            "see": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation",
            "stability": "stable",
            "summary": "The number of datapoints that must be breaching to trigger the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 823
          },
          "name": "datapointsToAlarm",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Not configured.",
            "remarks": "Used only for alarms that are based on percentiles.",
            "stability": "stable",
            "summary": "Specifies whether to evaluate the data and potentially change the alarm state if there are too few data points to be statistically significant."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 798
          },
          "name": "evaluateLowSampleCountPercentile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The period from the metric",
            "deprecated": "Use `metric.with({ period: ... })` to encode the period into the Metric object",
            "remarks": "Cannot be used with `MathExpression` objects.",
            "stability": "deprecated",
            "summary": "The period over which the specified statistic is applied."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 739
          },
          "name": "period",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The statistic from the metric",
            "deprecated": "Use `metric.with({ statistic: ... })` to encode the period into the Metric object",
            "remarks": "Can be one of the following:\n\n- \"Minimum\" | \"min\"\n- \"Maximum\" | \"max\"\n- \"Average\" | \"avg\"\n- \"Sum\" | \"sum\"\n- \"SampleCount | \"n\"\n- \"pNN.NN\"\n\nCannot be used with `MathExpression` objects.",
            "stability": "deprecated",
            "summary": "What function to use for aggregating."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 758
          },
          "name": "statistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "TreatMissingData.Missing",
            "stability": "stable",
            "summary": "Sets how this alarm is to handle missing data points."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 805
          },
          "name": "treatMissingData",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.TreatMissingData"
          }
        }
      ],
      "symbolId": "lib/metric:CreateAlarmOptions"
    },
    "@aws-cdk/aws-cloudwatch.Dashboard": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "A CloudWatch dashboard.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\nconst dashboard = new cloudwatch.Dashboard(this, 'MyDashboard', /* all optional props */ {\n  dashboardName: 'dashboardName',\n  end: 'end',\n  periodOverride: cloudwatch.PeriodOverride.AUTO,\n  start: 'start',\n  widgets: [[widget]],\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Dashboard",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/dashboard.ts",
          "line": 80
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.DashboardProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/dashboard.ts",
        "line": 77
      },
      "methods": [
        {
          "docs": {
            "remarks": "Widgets given in multiple calls to add() will be laid out stacked on\ntop of each other.\n\nMultiple widgets added in the same call to add() will be laid out next\nto each other.",
            "stability": "stable",
            "summary": "Add a widget to the dashboard."
          },
          "locationInModule": {
            "filename": "lib/dashboard.ts",
            "line": 125
          },
          "name": "addWidgets",
          "parameters": [
            {
              "name": "widgets",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IWidget"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "Dashboard",
      "symbolId": "lib/dashboard:Dashboard"
    },
    "@aws-cdk/aws-cloudwatch.DashboardProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a CloudWatch Dashboard.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\nconst dashboardProps: cloudwatch.DashboardProps = {\n  dashboardName: 'dashboardName',\n  end: 'end',\n  periodOverride: cloudwatch.PeriodOverride.AUTO,\n  start: 'start',\n  widgets: [[widget]],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.DashboardProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/dashboard.ts",
        "line": 24
      },
      "name": "DashboardProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- automatically generated name",
            "remarks": "If set, must only contain alphanumerics, dash (-) and underscore (_)",
            "stability": "stable",
            "summary": "Name of the dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/dashboard.ts",
            "line": 32
          },
          "name": "dashboardName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "When the dashboard loads, the end date will be the current time.",
            "remarks": "If you specify a value for end, you must also specify a value for start.\nSpecify an absolute time in the ISO 8601 format. For example, 2018-12-17T06:00:00.000Z.",
            "stability": "stable",
            "summary": "The end of the time range to use for each widget on the dashboard when the dashboard loads."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/dashboard.ts",
            "line": 53
          },
          "name": "end",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Auto",
            "remarks": "Specifying `Auto` causes the period of all graphs on the dashboard to automatically adapt to the time range of the dashboard.\nSpecifying `Inherit` ensures that the period set for each graph is always obeyed.",
            "stability": "stable",
            "summary": "Use this field to specify the period for the graphs when the dashboard loads."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/dashboard.ts",
            "line": 62
          },
          "name": "periodOverride",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.PeriodOverride"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "When the dashboard loads, the start time will be the default time range.",
            "remarks": "You can specify start without specifying end to specify a relative time range that ends with the current time.\nIn this case, the value of start must begin with -P, and you can use M, H, D, W and M as abbreviations for\nminutes, hours, days, weeks and months. For example, -PT8H shows the last 8 hours and -P3M shows the last three months.\nYou can also use start along with an end field, to specify an absolute time range.\nWhen specifying an absolute time range, use the ISO 8601 format. For example, 2018-12-17T06:00:00.000Z.",
            "stability": "stable",
            "summary": "The start of the time range to use for each widget on the dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/dashboard.ts",
            "line": 44
          },
          "name": "start",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No widgets",
            "remarks": "One array represents a row of widgets.",
            "stability": "stable",
            "summary": "Initial set of widgets on the dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/dashboard.ts",
            "line": 71
          },
          "name": "widgets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-cloudwatch.IWidget"
                  },
                  "kind": "array"
                }
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/dashboard:DashboardProps"
    },
    "@aws-cdk/aws-cloudwatch.Dimension": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-dimension.html",
        "stability": "stable",
        "summary": "Metric dimension.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\nconst dimension: cloudwatch.Dimension = {\n  name: 'name',\n  value: value,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Dimension",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 42
      },
      "name": "Dimension",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the dimension."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 46
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Value of the dimension."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 51
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/metric-types:Dimension"
    },
    "@aws-cdk/aws-cloudwatch.GraphWidget": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
        "stability": "stable",
        "summary": "A dashboard widget that displays metrics."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.GraphWidget",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/graph.ts",
          "line": 254
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.GraphWidgetProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 247
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Add another metric to the left Y axis of the GraphWidget."
          },
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 267
          },
          "name": "addLeftMetric",
          "parameters": [
            {
              "docs": {
                "summary": "the metric to add."
              },
              "name": "metric",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add another metric to the right Y axis of the GraphWidget."
          },
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 277
          },
          "name": "addRightMetric",
          "parameters": [
            {
              "docs": {
                "summary": "the metric to add."
              },
              "name": "metric",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 282
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "GraphWidget",
      "symbolId": "lib/graph:GraphWidget"
    },
    "@aws-cdk/aws-cloudwatch.GraphWidgetProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
        "stability": "stable",
        "summary": "Properties for a GraphWidget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.MetricWidgetProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 145
      },
      "name": "GraphWidgetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No metrics",
            "stability": "stable",
            "summary": "Metrics to display on left Y axis."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 151
          },
          "name": "left",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No annotations",
            "stability": "stable",
            "summary": "Annotations for the left Y axis."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 165
          },
          "name": "leftAnnotations",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.HorizontalAnnotation"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "Left Y axis."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 186
          },
          "name": "leftYAxis",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.YAxisProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- bottom",
            "stability": "stable",
            "summary": "Position of the legend."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 200
          },
          "name": "legendPosition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.LegendPosition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether the graph should show live data."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 207
          },
          "name": "liveData",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "cdk.Duration.seconds(300)",
            "remarks": "The period is the length of time represented by one data point on the graph.\nThis default can be overridden within each metric definition.",
            "stability": "stable",
            "summary": "The default period for all metrics in this widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 233
          },
          "name": "period",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No metrics",
            "stability": "stable",
            "summary": "Metrics to display on right Y axis."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 158
          },
          "name": "right",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No annotations",
            "stability": "stable",
            "summary": "Annotations for the right Y axis."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 172
          },
          "name": "rightAnnotations",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.HorizontalAnnotation"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "Right Y axis."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 193
          },
          "name": "rightYAxis",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.YAxisProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If false, values will be from the most recent period of your chosen time range;\nif true, shows the value from the entire time range.",
            "stability": "stable",
            "summary": "Whether to show the value from the entire time range. Only applicable for Bar and Pie charts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 224
          },
          "name": "setPeriodToTimeRange",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether the graph should be shown as stacked lines."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 179
          },
          "name": "stacked",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The statistic for each metric is used",
            "remarks": "This default can be overridden within the definition of each individual metric",
            "stability": "stable",
            "summary": "The default statistic to be displayed for each metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 241
          },
          "name": "statistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "TimeSeries",
            "stability": "stable",
            "summary": "Display this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 214
          },
          "name": "view",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.GraphWidgetView"
          }
        }
      ],
      "symbolId": "lib/graph:GraphWidgetProps"
    },
    "@aws-cdk/aws-cloudwatch.GraphWidgetView": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));",
        "stability": "stable",
        "summary": "Types of view."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.GraphWidgetView",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 127
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Display as a line graph."
          },
          "name": "TIME_SERIES"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Display as a bar graph."
          },
          "name": "BAR"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Display as a pie graph."
          },
          "name": "PIE"
        }
      ],
      "name": "GraphWidgetView",
      "symbolId": "lib/graph:GraphWidgetView"
    },
    "@aws-cdk/aws-cloudwatch.HorizontalAnnotation": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Horizontal annotation to be added to a graph.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst horizontalAnnotation: cloudwatch.HorizontalAnnotation = {\n  value: 123,\n\n  // the properties below are optional\n  color: 'color',\n  fill: cloudwatch.Shading.NONE,\n  label: 'label',\n  visible: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.HorizontalAnnotation",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 374
      },
      "name": "HorizontalAnnotation",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The value of the annotation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 378
          },
          "name": "value",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatic color",
            "stability": "stable",
            "summary": "The hex color code, prefixed with '#' (e.g. '#00ff00'), to be used for the annotation. The `Color` class has a set of standard colors that can be used here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 393
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No shading",
            "stability": "stable",
            "summary": "Add shading above or below the annotation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 400
          },
          "name": "fill",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.Shading"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No label",
            "stability": "stable",
            "summary": "Label for the annotation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 385
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Whether the annotation is visible."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 407
          },
          "name": "visible",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/graph:HorizontalAnnotation"
    },
    "@aws-cdk/aws-cloudwatch.IAlarm": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "Represents a CloudWatch Alarm."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.IAlarm",
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.IAlarmRule",
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alarm-base.ts",
        "line": 19
      },
      "name": "IAlarm",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "Alarm ARN (i.e. arn:aws:cloudwatch:<region>:<account-id>:alarm:Foo)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 25
          },
          "name": "alarmArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "Name of the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 32
          },
          "name": "alarmName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/alarm-base:IAlarm"
    },
    "@aws-cdk/aws-cloudwatch.IAlarmAction": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "Interface for objects that can be the targets of CloudWatch alarm actions."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.IAlarmAction",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alarm-action.ts",
        "line": 11
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Return the properties required to send alarm actions to this CloudWatch alarm."
          },
          "locationInModule": {
            "filename": "lib/alarm-action.ts",
            "line": 18
          },
          "name": "bind",
          "parameters": [
            {
              "docs": {
                "summary": "root Construct that allows creating new Constructs."
              },
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "docs": {
                "summary": "CloudWatch alarm that the action will target."
              },
              "name": "alarm",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.IAlarm"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.AlarmActionConfig"
            }
          }
        }
      ],
      "name": "IAlarmAction",
      "symbolId": "lib/alarm-action:IAlarmAction"
    },
    "@aws-cdk/aws-cloudwatch.IAlarmRule": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "Interface for Alarm Rule."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.IAlarmRule",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alarm-base.ts",
        "line": 7
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "serialized representation of Alarm Rule to be used when building the Composite Alarm resource."
          },
          "locationInModule": {
            "filename": "lib/alarm-base.ts",
            "line": 12
          },
          "name": "renderAlarmRule",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IAlarmRule",
      "symbolId": "lib/alarm-base:IAlarmRule"
    },
    "@aws-cdk/aws-cloudwatch.IMetric": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "Interface for metrics."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.IMetric",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 6
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "deprecated": "Use `toMetricConfig()` instead.",
            "stability": "deprecated",
            "summary": "Turn this metric object into an alarm configuration."
          },
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 26
          },
          "name": "toAlarmConfig",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricAlarmConfig"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "Use `toMetricConfig()` instead.",
            "stability": "deprecated",
            "summary": "Turn this metric object into a graph configuration."
          },
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 33
          },
          "name": "toGraphConfig",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricGraphConfig"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Inspect the details of the metric object."
          },
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 19
          },
          "name": "toMetricConfig",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricConfig"
            }
          }
        }
      ],
      "name": "IMetric",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "remarks": "Should be attached to the consuming construct.",
            "stability": "stable",
            "summary": "Any warnings related to this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 14
          },
          "name": "warnings",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/metric-types:IMetric"
    },
    "@aws-cdk/aws-cloudwatch.IWidget": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "A single dashboard widget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.IWidget",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/widget.ts",
        "line": 11
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Place the widget at a given position."
          },
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 30
          },
          "name": "position",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 35
          },
          "name": "toJson",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "IWidget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The amount of vertical grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 20
          },
          "name": "height",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The amount of horizontal grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 15
          },
          "name": "width",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Any warnings that are produced as a result of putting together this widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/widget.ts",
            "line": 25
          },
          "name": "warnings",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/widget:IWidget"
    },
    "@aws-cdk/aws-cloudwatch.LegendPosition": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
        "stability": "stable",
        "summary": "The position of the legend on a GraphWidget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.LegendPosition",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 464
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Legend appears below the graph (default)."
          },
          "name": "BOTTOM"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add shading above the annotation."
          },
          "name": "RIGHT"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add shading below the annotation."
          },
          "name": "HIDDEN"
        }
      ],
      "name": "LegendPosition",
      "symbolId": "lib/graph:LegendPosition"
    },
    "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
        "stability": "stable",
        "summary": "Types of view."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/log-query.ts",
        "line": 7
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Table view."
          },
          "name": "TABLE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Line view."
          },
          "name": "LINE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Stacked area view."
          },
          "name": "STACKEDAREA"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Bar view."
          },
          "name": "BAR"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Pie view."
          },
          "name": "PIE"
        }
      ],
      "name": "LogQueryVisualizationType",
      "symbolId": "lib/log-query:LogQueryVisualizationType"
    },
    "@aws-cdk/aws-cloudwatch.LogQueryWidget": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
        "stability": "stable",
        "summary": "Display query results from Logs Insights."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.LogQueryWidget",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/log-query.ts",
          "line": 100
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-query.ts",
        "line": 97
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 113
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "LogQueryWidget",
      "symbolId": "lib/log-query:LogQueryWidget"
    },
    "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
        "stability": "stable",
        "summary": "Properties for a Query widget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-query.ts",
        "line": 33
      },
      "name": "LogQueryWidgetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Names of log groups to query."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 44
          },
          "name": "logGroupNames",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "6",
            "stability": "stable",
            "summary": "Height of the widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 91
          },
          "name": "height",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Exactly one of `queryString`, `queryLines` is required.",
            "remarks": "The query will be built by joining the lines together using `\\n|`.",
            "stability": "stable",
            "summary": "A sequence of lines to use to build the query."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 63
          },
          "name": "queryLines",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Exactly one of `queryString`, `queryLines` is required.",
            "remarks": "Be sure to prepend every new line with a newline and pipe character\n(`\\n|`).",
            "stability": "stable",
            "summary": "Full query string for log insights."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 54
          },
          "name": "queryString",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Current region",
            "stability": "stable",
            "summary": "The region the metrics of this widget should be taken from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 70
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No title",
            "stability": "stable",
            "summary": "Title for the widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 39
          },
          "name": "title",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "LogQueryVisualizationType.TABLE",
            "stability": "stable",
            "summary": "The type of view to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 77
          },
          "name": "view",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "6",
            "stability": "stable",
            "summary": "Width of the widget, in a grid of 24 units wide."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-query.ts",
            "line": 84
          },
          "name": "width",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/log-query:LogQueryWidgetProps"
    },
    "@aws-cdk/aws-cloudwatch.MathExpression": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});",
        "remarks": "The math expression is a combination of an expression (x+y) and metrics to apply expression on.\nIt also contains metadata which is used only in graphs, such as color and label.\nIt makes sense to embed this in here, so that compound constructs can attach\nthat metadata to metrics they expose.\n\nMathExpression can also be used for search expressions. In this case,\nit also optionally accepts a searchRegion and searchAccount property for cross-environment\nsearch expressions.\n\nThis class does not represent a resource, so hence is not a construct. Instead,\nMathExpression is an abstraction that makes it easy to specify metrics for use in both\nalarms and graphs.",
        "stability": "stable",
        "summary": "A math expression built with metric(s) emitted by a service."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MathExpression",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/metric.ts",
          "line": 561
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MathExpressionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.IMetric"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/metric.ts",
        "line": 519
      },
      "methods": [
        {
          "docs": {
            "remarks": "Combines both properties that may adjust the metric (aggregation) as well\nas alarm properties.",
            "stability": "stable",
            "summary": "Make a new Alarm for this metric."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 663
          },
          "name": "createAlarm",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.CreateAlarmOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Alarm"
            }
          }
        },
        {
          "docs": {
            "deprecated": "use toMetricConfig()",
            "stability": "deprecated",
            "summary": "Turn this metric object into an alarm configuration."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 630
          },
          "name": "toAlarmConfig",
          "overrides": "@aws-cdk/aws-cloudwatch.IMetric",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricAlarmConfig"
            }
          }
        },
        {
          "docs": {
            "deprecated": "use toMetricConfig()",
            "stability": "deprecated",
            "summary": "Turn this metric object into a graph configuration."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 637
          },
          "name": "toGraphConfig",
          "overrides": "@aws-cdk/aws-cloudwatch.IMetric",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricGraphConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Inspect the details of the metric object."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 641
          },
          "name": "toMetricConfig",
          "overrides": "@aws-cdk/aws-cloudwatch.IMetric",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns a string representation of an object."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 680
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "remarks": "All properties except namespace and metricName can be changed.",
            "stability": "stable",
            "summary": "Return a copy of Metric with properties changed."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 606
          },
          "name": "with",
          "parameters": [
            {
              "docs": {
                "summary": "The set of properties to change."
              },
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MathExpressionOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MathExpression"
            }
          }
        }
      ],
      "name": "MathExpression",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The expression defining the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 523
          },
          "name": "expression",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Aggregation period of this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 544
          },
          "name": "period",
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The metrics used in the expression as KeyValuePair <id, metric>."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 528
          },
          "name": "usingMetrics",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 539
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Label for this metric when added to a Graph."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 533
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Account to evaluate search expressions within."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 549
          },
          "name": "searchAccount",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Region to evaluate search expressions within."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 554
          },
          "name": "searchRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Warnings generated by this math expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 559
          },
          "name": "warnings",
          "optional": true,
          "overrides": "@aws-cdk/aws-cloudwatch.IMetric",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/metric:MathExpression"
    },
    "@aws-cdk/aws-cloudwatch.MathExpressionOptions": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Configurable options for MathExpressions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\nconst mathExpressionOptions: cloudwatch.MathExpressionOptions = {\n  color: 'color',\n  label: 'label',\n  period: cdk.Duration.minutes(30),\n  searchAccount: 'searchAccount',\n  searchRegion: 'searchRegion',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MathExpressionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric.ts",
        "line": 140
      },
      "name": "MathExpressionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Automatic color",
            "stability": "stable",
            "summary": "Color for this metric when added to a Graph in a Dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 174
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Expression value is used as label",
            "remarks": "If this expression evaluates to more than one time series (for\nexample, through the use of `METRICS()` or `SEARCH()` expressions),\neach time series will appear in the graph using a combination of the\nexpression label and the individual metric label. Specify the empty\nstring (`''`) to suppress the expression label and only keep the\nmetric label.\n\nYou can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)\nto show summary information about the displayed time series\nin the legend. For example, if you use:\n\n```\n[max: ${MAX}] MyMetric\n```\n\nAs the metric label, the maximum value in the visible range will\nbe shown next to the time series name in the graph's legend. If the\nmath expression produces more than one time series, the maximum\nwill be shown for each individual time series produce by this\nmath expression.",
            "stability": "stable",
            "summary": "Label for this expression when added to a Graph in a Dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 167
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "remarks": "This period overrides all periods in the metrics used in this\nmath expression.",
            "stability": "stable",
            "summary": "The period over which the expression's statistics are applied."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 184
          },
          "name": "period",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Deployment account.",
            "remarks": "Specifying a searchAccount has no effect to the account used\nfor metrics within the expression (passed via usingMetrics).",
            "stability": "stable",
            "summary": "Account to evaluate search expressions within."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 194
          },
          "name": "searchAccount",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Deployment region.",
            "remarks": "Specifying a searchRegion has no effect to the region used\nfor metrics within the expression (passed via usingMetrics).",
            "stability": "stable",
            "summary": "Region to evaluate search expressions within."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 204
          },
          "name": "searchRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/metric:MathExpressionOptions"
    },
    "@aws-cdk/aws-cloudwatch.MathExpressionProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});",
        "stability": "stable",
        "summary": "Properties for a MathExpression."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MathExpressionProps",
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.MathExpressionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric.ts",
        "line": 210
      },
      "name": "MathExpressionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "When an expression contains a SEARCH function, it cannot be used\nwithin an Alarm.",
            "stability": "stable",
            "summary": "The expression defining the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 217
          },
          "name": "expression",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Empty map.",
            "remarks": "The key is the identifier that represents the given metric in the\nexpression, and the value is the actual Metric object.",
            "stability": "stable",
            "summary": "The metrics used in the expression, in a map."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 227
          },
          "name": "usingMetrics",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/metric:MathExpressionProps"
    },
    "@aws-cdk/aws-cloudwatch.Metric": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const fn: lambda.Function;\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});",
        "remarks": "The metric is a combination of a metric identifier (namespace, name and dimensions)\nand an aggregation function (statistic, period and unit).\n\nIt also contains metadata which is used only in graphs, such as color and label.\nIt makes sense to embed this in here, so that compound constructs can attach\nthat metadata to metrics they expose.\n\nThis class does not represent a resource, so hence is not a construct. Instead,\nMetric is an abstraction that makes it easy to specify metrics for use in both\nalarms and graphs.",
        "stability": "stable",
        "summary": "A metric emitted by a service."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Metric",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/metric.ts",
          "line": 282
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.IMetric"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/metric.ts",
        "line": 244
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant permissions to the given identity to write metrics."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 250
          },
          "name": "grantPutMetricData",
          "parameters": [
            {
              "docs": {
                "summary": "The IAM identity to give permissions to."
              },
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Returns a Metric object that uses the account and region from the Stack\nthe given construct is defined in. If the metric is subsequently used\nin a Dashboard or Alarm in a different Stack defined in a different\naccount or region, the appropriate 'region' and 'account' fields\nwill be added to it.\n\nIf the scope we attach to is in an environment-agnostic stack,\nnothing is done and the same Metric object is returned.",
            "stability": "stable",
            "summary": "Attach the metric object to the given construct scope."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 349
          },
          "name": "attachTo",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "remarks": "Combines both properties that may adjust the metric (aggregation) as well\nas alarm properties.",
            "stability": "stable",
            "summary": "Make a new Alarm for this metric."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 431
          },
          "name": "createAlarm",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.CreateAlarmOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Alarm"
            }
          }
        },
        {
          "docs": {
            "deprecated": "use toMetricConfig()",
            "stability": "deprecated",
            "summary": "Turn this metric object into an alarm configuration."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 379
          },
          "name": "toAlarmConfig",
          "overrides": "@aws-cdk/aws-cloudwatch.IMetric",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricAlarmConfig"
            }
          }
        },
        {
          "docs": {
            "deprecated": "use toMetricConfig()",
            "stability": "deprecated",
            "summary": "Turn this metric object into a graph configuration."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 400
          },
          "name": "toGraphConfig",
          "overrides": "@aws-cdk/aws-cloudwatch.IMetric",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricGraphConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Inspect the details of the metric object."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 358
          },
          "name": "toMetricConfig",
          "overrides": "@aws-cdk/aws-cloudwatch.IMetric",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.MetricConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns a string representation of an object."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 449
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "remarks": "All properties except namespace and metricName can be changed.",
            "stability": "stable",
            "summary": "Return a copy of Metric `with` properties changed."
          },
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 307
          },
          "name": "with",
          "parameters": [
            {
              "docs": {
                "summary": "The set of properties to change."
              },
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        }
      ],
      "name": "Metric",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Name of this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 263
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Namespace of this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 261
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Period of this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 265
          },
          "name": "period",
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Statistic of this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 267
          },
          "name": "statistic",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Account which this metric comes from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 277
          },
          "name": "account",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The hex color code used when this metric is rendered on a graph."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 271
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Dimensions of this metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 259
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Label for this metric when added to a Graph in a Dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 269
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Region which this metric comes from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 280
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Unit of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 274
          },
          "name": "unit",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.Unit"
          }
        }
      ],
      "symbolId": "lib/metric:Metric"
    },
    "@aws-cdk/aws-cloudwatch.MetricAlarmConfig": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "deprecated": "Replaced by MetricConfig",
        "stability": "deprecated",
        "summary": "Properties used to construct the Metric identifying part of an Alarm.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\nconst metricAlarmConfig: cloudwatch.MetricAlarmConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: 123,\n\n  // the properties below are optional\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  extendedStatistic: 'extendedStatistic',\n  statistic: cloudwatch.Statistic.SAMPLE_COUNT,\n  unit: cloudwatch.Unit.SECONDS,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricAlarmConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 355
      },
      "name": "MetricAlarmConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Name of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 369
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Namespace of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 364
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "How many seconds to aggregate over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 374
          },
          "name": "period",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "The dimensions to apply to the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 359
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.Dimension"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Percentile aggregation function to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 384
          },
          "name": "extendedStatistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Simple aggregation function to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 379
          },
          "name": "statistic",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.Statistic"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "The unit of the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 389
          },
          "name": "unit",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.Unit"
          }
        }
      ],
      "symbolId": "lib/metric-types:MetricAlarmConfig"
    },
    "@aws-cdk/aws-cloudwatch.MetricConfig": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties of a rendered metric.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metric: cloudwatch.Metric;\ndeclare const renderingProperties: any;\ndeclare const value: any;\nconst metricConfig: cloudwatch.MetricConfig = {\n  mathExpression: {\n    expression: 'expression',\n    period: 123,\n    usingMetrics: {\n      usingMetricsKey: metric,\n    },\n\n    // the properties below are optional\n    searchAccount: 'searchAccount',\n    searchRegion: 'searchRegion',\n  },\n  metricStat: {\n    metricName: 'metricName',\n    namespace: 'namespace',\n    period: cdk.Duration.minutes(30),\n    statistic: 'statistic',\n\n    // the properties below are optional\n    account: 'account',\n    dimensions: [{\n      name: 'name',\n      value: value,\n    }],\n    region: 'region',\n    unitFilter: cloudwatch.Unit.SECONDS,\n  },\n  renderingProperties: {\n    renderingPropertiesKey: renderingProperties,\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 227
      },
      "name": "MetricConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "In case the metric is a math expression, the details of the math expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 240
          },
          "name": "mathExpression",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.MetricExpressionConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "In case the metric represents a query, the details of the query."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 233
          },
          "name": "metricStat",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.MetricStatConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "remarks": "Examples are 'label' and 'color', but any key in here will be\nadded to dashboard graphs.",
            "stability": "stable",
            "summary": "Additional properties which will be rendered if the metric is used in a dashboard."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 250
          },
          "name": "renderingProperties",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/metric-types:MetricConfig"
    },
    "@aws-cdk/aws-cloudwatch.MetricExpressionConfig": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a concrete metric.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const metric: cloudwatch.Metric;\nconst metricExpressionConfig: cloudwatch.MetricExpressionConfig = {\n  expression: 'expression',\n  period: 123,\n  usingMetrics: {\n    usingMetricsKey: metric,\n  },\n\n  // the properties below are optional\n  searchAccount: 'searchAccount',\n  searchRegion: 'searchRegion',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricExpressionConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 319
      },
      "name": "MetricExpressionConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Math expression for the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 323
          },
          "name": "expression",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "How many seconds to aggregate over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 333
          },
          "name": "period",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Metrics used in the math expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 328
          },
          "name": "usingMetrics",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Deployment account.",
            "stability": "stable",
            "summary": "Account to evaluate search expressions within."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 340
          },
          "name": "searchAccount",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Deployment region.",
            "stability": "stable",
            "summary": "Region to evaluate search expressions within."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 347
          },
          "name": "searchRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/metric-types:MetricExpressionConfig"
    },
    "@aws-cdk/aws-cloudwatch.MetricGraphConfig": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "deprecated": "Replaced by MetricConfig",
        "stability": "deprecated",
        "summary": "Properties used to construct the Metric identifying part of a Graph.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\nconst metricGraphConfig: cloudwatch.MetricGraphConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: 123,\n  renderingProperties: {\n    period: 123,\n\n    // the properties below are optional\n    color: 'color',\n    label: 'label',\n    stat: 'stat',\n  },\n\n  // the properties below are optional\n  color: 'color',\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  label: 'label',\n  statistic: 'statistic',\n  unit: cloudwatch.Unit.SECONDS,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricGraphConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 397
      },
      "name": "MetricGraphConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Name of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 411
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Namespace of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 406
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "Use `period` in `renderingProperties`",
            "stability": "deprecated",
            "summary": "How many seconds to aggregate over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 423
          },
          "name": "period",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Rendering properties override yAxis parameter of the widget object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 416
          },
          "name": "renderingProperties",
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.MetricRenderingProperties"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "Use `color` in `renderingProperties`",
            "stability": "deprecated",
            "summary": "Color for the graph line."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 437
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "The dimensions to apply to the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 401
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.Dimension"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "Use `label` in `renderingProperties`",
            "stability": "deprecated",
            "summary": "Label for the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 430
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "Use `stat` in `renderingProperties`",
            "stability": "deprecated",
            "summary": "Aggregation function to use (can be either simple or a percentile)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 444
          },
          "name": "statistic",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "not used in dashboard widgets",
            "stability": "deprecated",
            "summary": "The unit of the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 451
          },
          "name": "unit",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.Unit"
          }
        }
      ],
      "symbolId": "lib/metric-types:MetricGraphConfig"
    },
    "@aws-cdk/aws-cloudwatch.MetricOptions": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});",
        "stability": "stable",
        "summary": "Properties of a metric that can be changed."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions",
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.CommonMetricOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric.ts",
        "line": 134
      },
      "name": "MetricOptions",
      "symbolId": "lib/metric:MetricOptions"
    },
    "@aws-cdk/aws-cloudwatch.MetricProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "const hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});",
        "stability": "stable",
        "summary": "Properties for a metric."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricProps",
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.CommonMetricOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric.ts",
        "line": 119
      },
      "name": "MetricProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 128
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Namespace of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric.ts",
            "line": 123
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/metric:MetricProps"
    },
    "@aws-cdk/aws-cloudwatch.MetricRenderingProperties": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "deprecated": "Replaced by MetricConfig.",
        "stability": "deprecated",
        "summary": "Custom rendering properties that override the default rendering properties specified in the yAxis parameter of the widget object.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricRenderingProperties: cloudwatch.MetricRenderingProperties = {\n  period: 123,\n\n  // the properties below are optional\n  color: 'color',\n  label: 'label',\n  stat: 'stat',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricRenderingProperties",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 459
      },
      "name": "MetricRenderingProperties",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "How many seconds to aggregate over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 463
          },
          "name": "period",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 474
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Label for the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 468
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Aggregation function to use (can be either simple or a percentile)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 479
          },
          "name": "stat",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/metric-types:MetricRenderingProperties"
    },
    "@aws-cdk/aws-cloudwatch.MetricStatConfig": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "remarks": "NOTE: `unit` is no longer on this object since it is only used for `Alarms`, and doesn't mean what one\nwould expect it to mean there anyway. It is most likely to be misused.",
        "stability": "stable",
        "summary": "Properties for a concrete metric.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const value: any;\nconst metricStatConfig: cloudwatch.MetricStatConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: cdk.Duration.minutes(30),\n  statistic: 'statistic',\n\n  // the properties below are optional\n  account: 'account',\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  region: 'region',\n  unitFilter: cloudwatch.Unit.SECONDS,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricStatConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 259
      },
      "name": "MetricStatConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 275
          },
          "name": "metricName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Namespace of the metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 270
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "How many seconds to aggregate over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 280
          },
          "name": "period",
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Aggregation function to use (can be either simple or a percentile)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 285
          },
          "name": "statistic",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Deployment account.",
            "stability": "stable",
            "summary": "Account which this metric comes from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 313
          },
          "name": "account",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "stable",
            "summary": "The dimensions to apply to the alarm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 265
          },
          "name": "dimensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.Dimension"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Deployment region.",
            "stability": "stable",
            "summary": "Region which this metric comes from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 306
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Refer to all metric datums",
            "remarks": "Only refer to datums emitted to the metric stream with the given unit and\nignore all others. Only useful when datums are being emitted to the same\nmetric stream under different units.\n\nThis field has been renamed from plain `unit` to clearly communicate\nits purpose.",
            "stability": "stable",
            "summary": "Unit used to filter the metric stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metric-types.ts",
            "line": 299
          },
          "name": "unitFilter",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.Unit"
          }
        }
      ],
      "symbolId": "lib/metric-types:MetricStatConfig"
    },
    "@aws-cdk/aws-cloudwatch.MetricWidgetProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Basic properties for widgets that display metrics.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricWidgetProps: cloudwatch.MetricWidgetProps = {\n  height: 123,\n  region: 'region',\n  title: 'title',\n  width: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.MetricWidgetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 10
      },
      "name": "MetricWidgetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- 6 for Alarm and Graph widgets.\n3 for single value widgets where most recent value of a metric is displayed.",
            "stability": "stable",
            "summary": "Height of the widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 38
          },
          "name": "height",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Current region",
            "stability": "stable",
            "summary": "The region the metrics of this graph should be taken from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 23
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "Title for the graph."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 16
          },
          "name": "title",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "6",
            "stability": "stable",
            "summary": "Width of the widget, in a grid of 24 units wide."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 30
          },
          "name": "width",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/graph:MetricWidgetProps"
    },
    "@aws-cdk/aws-cloudwatch.PeriodOverride": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "Specify the period for graphs when the CloudWatch dashboard loads."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.PeriodOverride",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/dashboard.ts",
        "line": 10
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Period of all graphs on the dashboard automatically adapt to the time range of the dashboard."
          },
          "name": "AUTO"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Period set for each graph will be used."
          },
          "name": "INHERIT"
        }
      ],
      "name": "PeriodOverride",
      "symbolId": "lib/dashboard:PeriodOverride"
    },
    "@aws-cdk/aws-cloudwatch.Row": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "remarks": "Widgets will be laid out next to each other",
        "stability": "stable",
        "summary": "A widget that contains other widgets in a horizontal row.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\nconst row = new cloudwatch.Row(widget);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Row",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/layout.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "widgets",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.IWidget"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/layout.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Place the widget at a given position."
          },
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 46
          },
          "name": "position",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 52
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Row",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount of vertical grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 12
          },
          "name": "height",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "List of contained widgets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 17
          },
          "name": "widgets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IWidget"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount of horizontal grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 11
          },
          "name": "width",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/layout:Row"
    },
    "@aws-cdk/aws-cloudwatch.Shading": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "Fill shading options that will be used with an annotation."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Shading",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 413
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Don't add shading."
          },
          "name": "NONE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add shading above the annotation."
          },
          "name": "ABOVE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add shading below the annotation."
          },
          "name": "BELOW"
        }
      ],
      "name": "Shading",
      "symbolId": "lib/graph:Shading"
    },
    "@aws-cdk/aws-cloudwatch.SingleValueWidget": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));",
        "stability": "stable",
        "summary": "A dashboard widget that displays the most recent value for every metric."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.SingleValueWidget",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/graph.ts",
          "line": 346
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 343
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 352
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "SingleValueWidget",
      "symbolId": "lib/graph:SingleValueWidget"
    },
    "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));",
        "stability": "stable",
        "summary": "Properties for a SingleValueWidget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps",
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.MetricWidgetProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 319
      },
      "name": "SingleValueWidgetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Metrics to display."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 323
          },
          "name": "metrics",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether to show as many digits as can fit, before rounding."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 337
          },
          "name": "fullPrecision",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether to show the value from the entire time range."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 330
          },
          "name": "setPeriodToTimeRange",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/graph:SingleValueWidgetProps"
    },
    "@aws-cdk/aws-cloudwatch.Spacer": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "A widget that doesn't display anything but takes up space.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst spacer = new cloudwatch.Spacer(/* all optional props */ {\n  height: 123,\n  width: 123,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Spacer",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/layout.ts",
          "line": 126
        },
        "parameters": [
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.SpacerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/layout.ts",
        "line": 122
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Place the widget at a given position."
          },
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 131
          },
          "name": "position",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 135
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Spacer",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount of vertical grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 124
          },
          "name": "height",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount of horizontal grid units the widget will take up."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 123
          },
          "name": "width",
          "overrides": "@aws-cdk/aws-cloudwatch.IWidget",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/layout:Spacer"
    },
    "@aws-cdk/aws-cloudwatch.SpacerProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Props of the spacer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst spacerProps: cloudwatch.SpacerProps = {\n  height: 123,\n  width: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.SpacerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/layout.ts",
        "line": 103
      },
      "name": "SpacerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": ": 1",
            "stability": "stable",
            "summary": "Height of the spacer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 116
          },
          "name": "height",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "stable",
            "summary": "Width of the spacer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/layout.ts",
            "line": 109
          },
          "name": "width",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/layout:SpacerProps"
    },
    "@aws-cdk/aws-cloudwatch.Statistic": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});",
        "stability": "stable",
        "summary": "Statistic to use over the aggregation period."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Statistic",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 57
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The count (number) of data points used for the statistical calculation."
          },
          "name": "SAMPLE_COUNT"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The value of Sum / SampleCount during the specified period."
          },
          "name": "AVERAGE"
        },
        {
          "docs": {
            "remarks": "This statistic can be useful for determining the total volume of a metric.",
            "stability": "stable",
            "summary": "All values submitted for the matching metric added together."
          },
          "name": "SUM"
        },
        {
          "docs": {
            "remarks": "You can use this value to determine low volumes of activity for your application.",
            "stability": "stable",
            "summary": "The lowest value observed during the specified period."
          },
          "name": "MINIMUM"
        },
        {
          "docs": {
            "remarks": "You can use this value to determine high volumes of activity for your application.",
            "stability": "stable",
            "summary": "The highest value observed during the specified period."
          },
          "name": "MAXIMUM"
        }
      ],
      "name": "Statistic",
      "symbolId": "lib/metric-types:Statistic"
    },
    "@aws-cdk/aws-cloudwatch.TextWidget": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "base": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));",
        "stability": "stable",
        "summary": "A dashboard widget that displays MarkDown."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.TextWidget",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/text.ts",
          "line": 33
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.TextWidgetProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/text.ts",
        "line": 30
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Place the widget at a given position."
          },
          "locationInModule": {
            "filename": "lib/text.ts",
            "line": 38
          },
          "name": "position",
          "overrides": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the widget JSON for use in the dashboard."
          },
          "locationInModule": {
            "filename": "lib/text.ts",
            "line": 43
          },
          "name": "toJson",
          "overrides": "@aws-cdk/aws-cloudwatch.ConcreteWidget",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "TextWidget",
      "symbolId": "lib/text:TextWidget"
    },
    "@aws-cdk/aws-cloudwatch.TextWidgetProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));",
        "stability": "stable",
        "summary": "Properties for a Text widget."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.TextWidgetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/text.ts",
        "line": 6
      },
      "name": "TextWidgetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The text to display, in MarkDown format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/text.ts",
            "line": 10
          },
          "name": "markdown",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "2",
            "stability": "stable",
            "summary": "Height of the widget."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/text.ts",
            "line": 24
          },
          "name": "height",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "6",
            "stability": "stable",
            "summary": "Width of the widget, in a grid of 24 units wide."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/text.ts",
            "line": 17
          },
          "name": "width",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/text:TextWidgetProps"
    },
    "@aws-cdk/aws-cloudwatch.TreatMissingData": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}",
        "stability": "stable",
        "summary": "Specify how missing data points are treated during alarm evaluation."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.TreatMissingData",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/alarm.ts",
        "line": 80
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Missing data points are treated as breaching the threshold."
          },
          "name": "BREACHING"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Missing data points are treated as being within the threshold."
          },
          "name": "NOT_BREACHING"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The current alarm state is maintained."
          },
          "name": "IGNORE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The alarm does not consider missing data points when evaluating whether to change state."
          },
          "name": "MISSING"
        }
      ],
      "name": "TreatMissingData",
      "symbolId": "lib/alarm:TreatMissingData"
    },
    "@aws-cdk/aws-cloudwatch.Unit": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "docs": {
        "stability": "stable",
        "summary": "Unit for metric."
      },
      "fqn": "@aws-cdk/aws-cloudwatch.Unit",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/metric-types.ts",
        "line": 87
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Seconds."
          },
          "name": "SECONDS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Microseconds."
          },
          "name": "MICROSECONDS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Milliseconds."
          },
          "name": "MILLISECONDS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Bytes."
          },
          "name": "BYTES"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Kilobytes."
          },
          "name": "KILOBYTES"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Megabytes."
          },
          "name": "MEGABYTES"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Gigabytes."
          },
          "name": "GIGABYTES"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Terabytes."
          },
          "name": "TERABYTES"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Bits."
          },
          "name": "BITS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Kilobits."
          },
          "name": "KILOBITS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Megabits."
          },
          "name": "MEGABITS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Gigabits."
          },
          "name": "GIGABITS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Terabits."
          },
          "name": "TERABITS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Percent."
          },
          "name": "PERCENT"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Count."
          },
          "name": "COUNT"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Bytes/second (B/s)."
          },
          "name": "BYTES_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Kilobytes/second (kB/s)."
          },
          "name": "KILOBYTES_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Megabytes/second (MB/s)."
          },
          "name": "MEGABYTES_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Gigabytes/second (GB/s)."
          },
          "name": "GIGABYTES_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Terabytes/second (TB/s)."
          },
          "name": "TERABYTES_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Bits/second (b/s)."
          },
          "name": "BITS_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Kilobits/second (kb/s)."
          },
          "name": "KILOBITS_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Megabits/second (Mb/s)."
          },
          "name": "MEGABITS_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Gigabits/second (Gb/s)."
          },
          "name": "GIGABITS_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Terabits/second (Tb/s)."
          },
          "name": "TERABITS_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Count/second."
          },
          "name": "COUNT_PER_SECOND"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "No unit."
          },
          "name": "NONE"
        }
      ],
      "name": "Unit",
      "symbolId": "lib/metric-types:Unit"
    },
    "@aws-cdk/aws-cloudwatch.YAxisProps": {
      "assembly": "@aws-cdk/aws-cloudwatch",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a Y-Axis.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst yAxisProps: cloudwatch.YAxisProps = {\n  label: 'label',\n  max: 123,\n  min: 123,\n  showUnits: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cloudwatch.YAxisProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graph.ts",
        "line": 44
      },
      "name": "YAxisProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No label",
            "stability": "stable",
            "summary": "The label."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 64
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No maximum value",
            "stability": "stable",
            "summary": "The max value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 57
          },
          "name": "max",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "stability": "stable",
            "summary": "The min value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 50
          },
          "name": "min",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Whether to show units."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graph.ts",
            "line": 71
          },
          "name": "showUnits",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/graph:YAxisProps"
    }
  },
  "version": "1.153.1",
  "fingerprint": "**********"
}
