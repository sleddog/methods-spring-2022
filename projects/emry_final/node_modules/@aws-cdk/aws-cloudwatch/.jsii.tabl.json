{
  "version": "2",
  "toolVersion": "1.57.0",
  "snippets": {
    "d49c979b36d1f57a507f7f95e9e2d23d003214f8bdeb16d07ea83910b08db7ea": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nerrors = fn.metric_errors()",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMetric errors = fn.MetricErrors();",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMetric errors = fn.metricErrors();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nerrors := fn.metricErrors()",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst errors = fn.metricErrors();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 27
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst errors = fn.metricErrors();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "287f845e16ab82fe0b8fc0e385911f0a554ebc3ae6d21daf7f63df4534e4e328"
    },
    "7c03a3d404f91569cb80fce723ee41998a7cf14d98191192247e133b3887fe49": {
      "translations": {
        "python": {
          "source": "hosted_zone = route53.HostedZone(self, \"MyHostedZone\", zone_name=\"example.org\")\nmetric = cloudwatch.Metric(\n    namespace=\"AWS/Route53\",\n    metric_name=\"DNSQueries\",\n    dimensions_map={\n        \"HostedZoneId\": hosted_zone.hosted_zone_id\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone hostedZone = new HostedZone(this, \"MyHostedZone\", new HostedZoneProps { ZoneName = \"example.org\" });\nMetric metric = new Metric(new MetricProps {\n    Namespace = \"AWS/Route53\",\n    MetricName = \"DNSQueries\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"HostedZoneId\", hostedZone.HostedZoneId }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone hostedZone = HostedZone.Builder.create(this, \"MyHostedZone\").zoneName(\"example.org\").build();\nMetric metric = Metric.Builder.create()\n        .namespace(\"AWS/Route53\")\n        .metricName(\"DNSQueries\")\n        .dimensionsMap(Map.of(\n                \"HostedZoneId\", hostedZone.getHostedZoneId()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "hostedZone := route53.NewHostedZone(this, jsii.String(\"MyHostedZone\"), &hostedZoneProps{\n\tzoneName: jsii.String(\"example.org\"),\n})\nmetric := cloudwatch.NewMetric(&metricProps{\n\tnamespace: jsii.String(\"AWS/Route53\"),\n\tmetricName: jsii.String(\"DNSQueries\"),\n\tdimensionsMap: map[string]*string{\n\t\t\"HostedZoneId\": hostedZone.hostedZoneId,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 40
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#hostedZoneId",
        "@aws-cdk/aws-route53.HostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "226d2e5e768b3619335474aeae4eb668e6a7859e306e3c9b66f2c925830002f2"
    },
    "1c24d76a9416e5e1854f02b341d462fc6f2c84275adb8ba45bc9a4a4906e1bb7": {
      "translations": {
        "python": {
          "source": "metric = cloudwatch.Metric(\n    namespace=\"MyNamespace\",\n    metric_name=\"MyMetric\",\n    dimensions_map={\n        \"ProcessingStep\": \"Download\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Metric metric = new Metric(new MetricProps {\n    Namespace = \"MyNamespace\",\n    MetricName = \"MyMetric\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"ProcessingStep\", \"Download\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Metric metric = Metric.Builder.create()\n        .namespace(\"MyNamespace\")\n        .metricName(\"MyMetric\")\n        .dimensionsMap(Map.of(\n                \"ProcessingStep\", \"Download\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "metric := cloudwatch.NewMetric(&metricProps{\n\tnamespace: jsii.String(\"MyNamespace\"),\n\tmetricName: jsii.String(\"MyMetric\"),\n\tdimensionsMap: map[string]*string{\n\t\t\"ProcessingStep\": jsii.String(\"Download\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const metric = new cloudwatch.Metric({\n  namespace: 'MyNamespace',\n  metricName: 'MyMetric',\n  dimensionsMap: {\n    ProcessingStep: 'Download'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 56
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst metric = new cloudwatch.Metric({\n  namespace: 'MyNamespace',\n  metricName: 'MyMetric',\n  dimensionsMap: {\n    ProcessingStep: 'Download'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "caf54703e5fe330b4b13aae4240487a6e593480b7c1f25e8fc881c545b46af90"
    },
    "e0e6577612f4e90fca287dcf97860b1cbfd24be1756b60b03839bef859c150c7": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nall_problems = cloudwatch.MathExpression(\n    expression=\"errors + throttles\",\n    using_metrics={\n        \"errors\": fn.metric_errors(),\n        \"faults\": fn.metric_throttles()\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMathExpression allProblems = new MathExpression(new MathExpressionProps {\n    Expression = \"errors + throttles\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"errors\", fn.MetricErrors() },\n        { \"faults\", fn.MetricThrottles() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMathExpression allProblems = MathExpression.Builder.create()\n        .expression(\"errors + throttles\")\n        .usingMetrics(Map.of(\n                \"errors\", fn.metricErrors(),\n                \"faults\", fn.metricThrottles()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nallProblems := cloudwatch.NewMathExpression(&mathExpressionProps{\n\texpression: jsii.String(\"errors + throttles\"),\n\tusingMetrics: map[string]iMetric{\n\t\t\"errors\": fn.metricErrors(),\n\t\t\"faults\": fn.metricThrottles(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 71
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8a95c14cad450e60e066f38e4e55360a750a83efd1716dfbd4e3bc9cf1607374"
    },
    "3c44ef26fbf1700dc2d558fdb87da7bccc962a384472ffb84411cd91e987ecd8": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n# all_problems: cloudwatch.MathExpression\n\n\nproblem_percentage = cloudwatch.MathExpression(\n    expression=\"(problems / invocations) * 100\",\n    using_metrics={\n        \"problems\": all_problems,\n        \"invocations\": fn.metric_invocations()\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\nMathExpression allProblems;\n\n\nMathExpression problemPercentage = new MathExpression(new MathExpressionProps {\n    Expression = \"(problems / invocations) * 100\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"problems\", allProblems },\n        { \"invocations\", fn.MetricInvocations() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\nMathExpression allProblems;\n\n\nMathExpression problemPercentage = MathExpression.Builder.create()\n        .expression(\"(problems / invocations) * 100\")\n        .usingMetrics(Map.of(\n                \"problems\", allProblems,\n                \"invocations\", fn.metricInvocations()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\nvar allProblems mathExpression\n\nproblemPercentage := cloudwatch.NewMathExpression(&mathExpressionProps{\n\texpression: jsii.String(\"(problems / invocations) * 100\"),\n\tusingMetrics: map[string]iMetric{\n\t\t\"problems\": allProblems,\n\t\t\"invocations\": fn.metricInvocations(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\ndeclare const allProblems: cloudwatch.MathExpression;\n\nconst problemPercentage = new cloudwatch.MathExpression({\n  expression: \"(problems / invocations) * 100\",\n  usingMetrics: {\n    problems: allProblems,\n    invocations: fn.metricInvocations()\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 86
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\ndeclare const allProblems: cloudwatch.MathExpression;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst problemPercentage = new cloudwatch.MathExpression({\n  expression: \"(problems / invocations) * 100\",\n  usingMetrics: {\n    problems: allProblems,\n    invocations: fn.metricInvocations()\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 16,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8a95c14cad450e60e066f38e4e55360a750a83efd1716dfbd4e3bc9cf1607374"
    },
    "9bb2a1cc3eff64a126194c3fd08d28fddda3000fe27c44ac356adc5e38ff2d96": {
      "translations": {
        "python": {
          "source": "cpu_utilization = cloudwatch.MathExpression(\n    expression=\"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\",\n\n    # Specifying '' as the label suppresses the default behavior\n    # of using the expression as metric label. This is especially appropriate\n    # when using expressions that return multiple time series (like SEARCH()\n    # or METRICS()), to show the labels of the retrieved metrics only.\n    label=\"\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "MathExpression cpuUtilization = new MathExpression(new MathExpressionProps {\n    Expression = \"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\",\n\n    // Specifying '' as the label suppresses the default behavior\n    // of using the expression as metric label. This is especially appropriate\n    // when using expressions that return multiple time series (like SEARCH()\n    // or METRICS()), to show the labels of the retrieved metrics only.\n    Label = \"\"\n});",
          "version": "1"
        },
        "java": {
          "source": "MathExpression cpuUtilization = MathExpression.Builder.create()\n        .expression(\"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\")\n\n        // Specifying '' as the label suppresses the default behavior\n        // of using the expression as metric label. This is especially appropriate\n        // when using expressions that return multiple time series (like SEARCH()\n        // or METRICS()), to show the labels of the retrieved metrics only.\n        .label(\"\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cpuUtilization := cloudwatch.NewMathExpression(&mathExpressionProps{\n\texpression: jsii.String(\"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\"),\n\n\t// Specifying '' as the label suppresses the default behavior\n\t// of using the expression as metric label. This is especially appropriate\n\t// when using expressions that return multiple time series (like SEARCH()\n\t// or METRICS()), to show the labels of the retrieved metrics only.\n\tlabel: jsii.String(\"\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cpuUtilization = new cloudwatch.MathExpression({\n  expression: \"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\",\n\n  // Specifying '' as the label suppresses the default behavior\n  // of using the expression as metric label. This is especially appropriate\n  // when using expressions that return multiple time series (like SEARCH()\n  // or METRICS()), to show the labels of the retrieved metrics only.\n  label: '',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 105
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cpuUtilization = new cloudwatch.MathExpression({\n  expression: \"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\",\n\n  // Specifying '' as the label suppresses the default behavior\n  // of using the expression as metric label. This is especially appropriate\n  // when using expressions that return multiple time series (like SEARCH()\n  // or METRICS()), to show the labels of the retrieved metrics only.\n  label: '',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "d076b8f8d5159f89701271919860e1d06da34c1b313ccdeda1241e8347a71d6f"
    },
    "2cde04306e1a22bd62e171efa5384e4e8e27af0ee46cea9a8734eb5bd670c361": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nminute_error_rate = fn.metric_errors(\n    statistic=\"avg\",\n    period=Duration.minutes(1),\n    label=\"Lambda failure rate\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.MetricErrors(new MetricOptions {\n    Statistic = \"avg\",\n    Period = Duration.Minutes(1),\n    Label = \"Lambda failure rate\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.metricErrors(MetricOptions.builder()\n        .statistic(\"avg\")\n        .period(Duration.minutes(1))\n        .label(\"Lambda failure rate\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nminuteErrorRate := fn.metricErrors(&metricOptions{\n\tstatistic: jsii.String(\"avg\"),\n\tperiod: duration.minutes(jsii.Number(1)),\n\tlabel: jsii.String(\"Lambda failure rate\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 135
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "287886e6f2fef9b328813ffbda6a27b50ffd28aba95390c2f43b43dd8e44f85d"
    },
    "c48368c3648768426d3ff9557d4d50a524f8033ec2776e226c92ecf4aeece403": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nminute_error_rate = fn.metric_errors(\n    statistic=\"sum\",\n    period=Duration.hours(1),\n\n    # Show the maximum hourly error count in the legend\n    label=\"[max: ${MAX}] Lambda failure rate\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.MetricErrors(new MetricOptions {\n    Statistic = \"sum\",\n    Period = Duration.Hours(1),\n\n    // Show the maximum hourly error count in the legend\n    Label = \"[max: ${MAX}] Lambda failure rate\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.metricErrors(MetricOptions.builder()\n        .statistic(\"sum\")\n        .period(Duration.hours(1))\n\n        // Show the maximum hourly error count in the legend\n        .label(\"[max: ${MAX}] Lambda failure rate\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nminuteErrorRate := fn.metricErrors(&metricOptions{\n\tstatistic: jsii.String(\"sum\"),\n\tperiod: duration.hours(jsii.Number(1)),\n\n\t// Show the maximum hourly error count in the legend\n\tlabel: jsii.String(\"[max: ${MAX}] Lambda failure rate\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'sum',\n  period: Duration.hours(1),\n\n  // Show the maximum hourly error count in the legend\n  label: '[max: ${MAX}] Lambda failure rate',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 174
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'sum',\n  period: Duration.hours(1),\n\n  // Show the maximum hourly error count in the legend\n  label: '[max: ${MAX}] Lambda failure rate',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6ca3449d423b65daa8ba501a9d21c874c35edd526d24c3033b14702d387faf57"
    },
    "c62b6e9ea6eb19cde44536cb807c284a15ba05e9615294eda4a7fc502259f55d": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\ncloudwatch.Alarm(self, \"Alarm\",\n    metric=fn.metric_errors(),\n    threshold=100,\n    evaluation_periods=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nnew Alarm(this, \"Alarm\", new AlarmProps {\n    Metric = fn.MetricErrors(),\n    Threshold = 100,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nAlarm.Builder.create(this, \"Alarm\")\n        .metric(fn.metricErrors())\n        .threshold(100)\n        .evaluationPeriods(2)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\ncloudwatch.NewAlarm(this, jsii.String(\"Alarm\"), &alarmProps{\n\tmetric: fn.metricErrors(),\n\tthreshold: jsii.Number(100),\n\tevaluationPeriods: jsii.Number(2),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: fn.metricErrors(),\n  threshold: 100,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 198
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: fn.metricErrors(),\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6e79e7dcfe0189242492fb93f3f778cec45c81a17088ee3486ae591176f05d95"
    },
    "79c88735991c2aa6796adf9e38f29a8328ece1d607bf300be6700e755aa652fd": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nfn.metric_errors().create_alarm(self, \"Alarm\",\n    threshold=100,\n    evaluation_periods=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nfn.MetricErrors().CreateAlarm(this, \"Alarm\", new CreateAlarmOptions {\n    Threshold = 100,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nfn.metricErrors().createAlarm(this, \"Alarm\", CreateAlarmOptions.builder()\n        .threshold(100)\n        .evaluationPeriods(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nfn.metricErrors().createAlarm(this, jsii.String(\"Alarm\"), &createAlarmOptions{\n\tthreshold: jsii.Number(100),\n\tevaluationPeriods: jsii.Number(2),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 210
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CreateAlarmOptions",
        "@aws-cdk/aws-cloudwatch.Metric#createAlarm",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ecd9b00a4113c7a85c9d87a2d5cb2133b2e7eaf42a1f4b221f50ed8608c77f0c"
    },
    "3a31b8ab4f24dc7de1dc1aa021ccae3b0074fc61ebe97ba9c528b5418a4fefcc": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch_actions as cw_actions\n# alarm: cloudwatch.Alarm\n\n\ntopic = sns.Topic(self, \"Topic\")\nalarm.add_alarm_action(cw_actions.SnsAction(topic))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch.Actions;\nAlarm alarm;\n\n\nTopic topic = new Topic(this, \"Topic\");\nalarm.AddAlarmAction(new SnsAction(topic));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.actions.*;\nAlarm alarm;\n\n\nTopic topic = new Topic(this, \"Topic\");\nalarm.addAlarmAction(new SnsAction(topic));",
          "version": "1"
        },
        "go": {
          "source": "import cw_actions \"github.com/aws-samples/dummy/awscdkawscloudwatchactions\"\nvar alarm alarm\n\ntopic := sns.NewTopic(this, jsii.String(\"Topic\"))\nalarm.addAlarmAction(cw_actions.NewSnsAction(topic))",
          "version": "1"
        },
        "$": {
          "source": "import * as cw_actions from '@aws-cdk/aws-cloudwatch-actions';\ndeclare const alarm: cloudwatch.Alarm;\n\nconst topic = new sns.Topic(this, 'Topic');\nalarm.addAlarmAction(new cw_actions.SnsAction(topic));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 234
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch-actions.SnsAction",
        "@aws-cdk/aws-cloudwatch.Alarm#addAlarmAction",
        "@aws-cdk/aws-cloudwatch.IAlarmAction",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cw_actions from '@aws-cdk/aws-cloudwatch-actions';\ndeclare const alarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst topic = new sns.Topic(this, 'Topic');\nalarm.addAlarmAction(new cw_actions.SnsAction(topic));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "1b80880d1a9d2df844af36d17c4e68cc9a4a16f68ee8d435563d030fc2d759a2"
    },
    "c1484f351e36b25a33ad249d74d35830c5473e7ea50fe6424359174d131c5b4e": {
      "translations": {
        "python": {
          "source": "# alarm1: cloudwatch.Alarm\n# alarm2: cloudwatch.Alarm\n# alarm3: cloudwatch.Alarm\n# alarm4: cloudwatch.Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var alarm1 alarm\nvar alarm2 alarm\nvar alarm3 alarm\nvar alarm4 alarm\n\nalarmRule := cloudwatch.alarmRule.anyOf(cloudwatch.alarmRule.allOf(cloudwatch.alarmRule.anyOf(alarm1, cloudwatch.alarmRule.fromAlarm(alarm2, cloudwatch.alarmState_OK), alarm3), cloudwatch.alarmRule.not(cloudwatch.alarmRule.fromAlarm(alarm4, cloudwatch.alarmState_INSUFFICIENT_DATA))), cloudwatch.alarmRule.fromBoolean(jsii.Boolean(false)))\n\ncloudwatch.NewCompositeAlarm(this, jsii.String(\"MyAwesomeCompositeAlarm\"), &compositeAlarmProps{\n\talarmRule: alarmRule,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 268
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fee41f55ebdb796ada349b0655c3d755869d1a1f81292ff128fb32225e52886f"
    },
    "108729d9bad0f66478ac124f1c1e4a1b7267b0308868fad209f878f7d624f0c1": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# execution_count_metric: cloudwatch.Metric\n# error_count_metric: cloudwatch.Metric\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    title=\"Executions vs error rate\",\n\n    left=[execution_count_metric],\n\n    right=[error_count_metric.with(\n        statistic=\"average\",\n        label=\"Error rate\",\n        color=cloudwatch.Color.GREEN\n    )]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric executionCountMetric;\nMetric errorCountMetric;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    Title = \"Executions vs error rate\",\n\n    Left = new [] { executionCountMetric },\n\n    Right = new [] { errorCountMetric.With(new MetricOptions {\n        Statistic = \"average\",\n        Label = \"Error rate\",\n        Color = Color.GREEN\n    }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric executionCountMetric;\nMetric errorCountMetric;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        .title(\"Executions vs error rate\")\n\n        .left(List.of(executionCountMetric))\n\n        .right(List.of(errorCountMetric.with(MetricOptions.builder()\n                .statistic(\"average\")\n                .label(\"Error rate\")\n                .color(Color.GREEN)\n                .build())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar executionCountMetric metric\nvar errorCountMetric metric\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\ttitle: jsii.String(\"Executions vs error rate\"),\n\n\tleft: []iMetric{\n\t\texecutionCountMetric,\n\t},\n\n\tright: []*iMetric{\n\t\terrorCountMetric.with(&metricOptions{\n\t\t\tstatistic: jsii.String(\"average\"),\n\t\t\tlabel: jsii.String(\"Error rate\"),\n\t\t\tcolor: cloudwatch.color_GREEN(),\n\t\t}),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN,\n  })]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 331
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Color",
        "@aws-cdk/aws-cloudwatch.Color#GREEN",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN,\n  })]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 25,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "1645fef2b75b21b1050b2ea6bda4405579544588e20fc0f2a7e37d7eb18b7f63"
    },
    "2e8b47815ed5ca3b937b3be6af75939cc73563b5ae737f8429adc5643fdff9c8": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    left_annotations=[cloudwatch.HorizontalAnnotation(value=1800, label=Duration.minutes(30).to_human_string(), color=cloudwatch.Color.RED), cloudwatch.HorizontalAnnotation(value=3600, label=\"1 hour\", color=\"#2ca02c\")\n    ]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LeftAnnotations = new [] { new HorizontalAnnotation { Value = 1800, Label = Duration.Minutes(30).ToHumanString(), Color = Color.RED }, new HorizontalAnnotation { Value = 3600, Label = \"1 hour\", Color = \"#2ca02c\" } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .leftAnnotations(List.of(HorizontalAnnotation.builder().value(1800).label(Duration.minutes(30).toHumanString()).color(Color.RED).build(), HorizontalAnnotation.builder().value(3600).label(\"1 hour\").color(\"#2ca02c\").build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\t// ...\n\n\tleftAnnotations: []horizontalAnnotation{\n\t\t&horizontalAnnotation{\n\t\t\tvalue: jsii.Number(1800),\n\t\t\tlabel: duration.minutes(jsii.Number(30)).toHumanString(),\n\t\t\tcolor: cloudwatch.color_RED(),\n\t\t},\n\t\t&horizontalAnnotation{\n\t\t\tvalue: jsii.Number(3600),\n\t\t\tlabel: jsii.String(\"1 hour\"),\n\t\t\tcolor: jsii.String(\"#2ca02c\"),\n\t\t},\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  leftAnnotations: [\n    { value: 1800, label: Duration.minutes(30).toHumanString(), color: cloudwatch.Color.RED, },\n    { value: 3600, label: '1 hour', color: '#2ca02c', }\n  ],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 353
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Color",
        "@aws-cdk/aws-cloudwatch.Color#RED",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#toHumanString"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  leftAnnotations: [\n    { value: 1800, label: Duration.minutes(30).toHumanString(), color: cloudwatch.Color.RED, },\n    { value: 3600, label: '1 hour', color: '#2ca02c', }\n  ],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 20,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "060e31b28e77f024e29d1b39e1b4d21d9f16e99270ee5625447c4e45ec82ae84"
    },
    "ebffb1747be766ac73a8c46aa4c87806e62a7e714d66019e4673710be3bb05dc": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    legend_position=cloudwatch.LegendPosition.RIGHT\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LegendPosition = LegendPosition.RIGHT\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .legendPosition(LegendPosition.RIGHT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\t// ...\n\n\tlegendPosition: cloudwatch.legendPosition_RIGHT,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 368
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LegendPosition",
        "@aws-cdk/aws-cloudwatch.LegendPosition#RIGHT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ea9c769f622a1b98a2ed82e67b6d8570122a26ea375f8381dc72eb53b13d68d4"
    },
    "a2e7f2afff918dc7f551f30d40cacdd3aa38bb09231a30ab4b75317efb50d0ad": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    live_data=True\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LiveData = true\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .liveData(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\t// ...\n\n\tliveData: jsii.Boolean(true),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  liveData: true,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 380
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  liveData: true,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 8,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a78e544e731ab391671ecd4bf98e47a61cbad6f76ce229c38e1584661742d7d7"
    },
    "4a8dda045236271b954f0a4a021d985fc67baf588a656645d83021827fa261d3": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    view=cloudwatch.GraphWidgetView.BAR\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    View = GraphWidgetView.BAR\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .view(GraphWidgetView.BAR)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\t// ...\n\n\tview: cloudwatch.graphWidgetView_BAR,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 392
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.GraphWidgetView",
        "@aws-cdk/aws-cloudwatch.GraphWidgetView#BAR",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7fd4e224ed06d70f93bfa2abd6c61c292f1a9fae0071e785589986757fe904db"
    },
    "c31fff1309d284676bdcb38516d53ef267ab9b1bfdbaa9b255aa176fd48477f7": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmWidget(\n    title=\"Errors\",\n    alarm=error_alarm\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmWidget(new AlarmWidgetProps {\n    Title = \"Errors\",\n    Alarm = errorAlarm\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmWidget.Builder.create()\n        .title(\"Errors\")\n        .alarm(errorAlarm)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(cloudwatch.NewAlarmWidget(&alarmWidgetProps{\n\ttitle: jsii.String(\"Errors\"),\n\talarm: errorAlarm,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 406
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmWidget",
        "@aws-cdk/aws-cloudwatch.AlarmWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ac432a1bd4e556866ba15b7d5f796c2906317f1e8ac8dceaf5da524c95bdd3c3"
    },
    "145414953db361f4767e9f75899200e57a40b9184b4e9ce50f18877ef88bc5a6": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# visitor_count: cloudwatch.Metric\n# purchase_count: cloudwatch.Metric\n\n\ndashboard.add_widgets(cloudwatch.SingleValueWidget(\n    metrics=[visitor_count, purchase_count]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.AddWidgets(new SingleValueWidget(new SingleValueWidgetProps {\n    Metrics = new [] { visitorCount, purchaseCount }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.addWidgets(SingleValueWidget.Builder.create()\n        .metrics(List.of(visitorCount, purchaseCount))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar visitorCount metric\nvar purchaseCount metric\n\ndashboard.addWidgets(cloudwatch.NewSingleValueWidget(&singleValueWidgetProps{\n\tmetrics: []iMetric{\n\t\tvisitorCount,\n\t\tpurchaseCount,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 421
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 16,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a2c505727d9abafe653a0e97b3c86cae9d2be3b9abf3639795bf82dcfa31cce"
    },
    "d93943d2d92cc9f4ffff5908e95ecefc4f9d0e24fc769b0b684e012c38f556c2": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.SingleValueWidget(\n    metrics=[],\n\n    full_precision=True\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new SingleValueWidget(new SingleValueWidgetProps {\n    Metrics = new [] {  },\n\n    FullPrecision = true\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(SingleValueWidget.Builder.create()\n        .metrics(List.of())\n\n        .fullPrecision(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewSingleValueWidget(&singleValueWidgetProps{\n\tmetrics: []iMetric{\n\t},\n\n\tfullPrecision: jsii.Boolean(true),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [ /* ... */ ],\n\n  fullPrecision: true,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 433
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [ /* ... */ ],\n\n  fullPrecision: true,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 9,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4a2c505727d9abafe653a0e97b3c86cae9d2be3b9abf3639795bf82dcfa31cce"
    },
    "bbdf276cfc637755ea25b90a6a543275cdfd2ca924618182a6aec8c79f954587": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.TextWidget(\n    markdown=\"# Key Performance Indicators\"\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new TextWidget(new TextWidgetProps {\n    Markdown = \"# Key Performance Indicators\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(TextWidget.Builder.create()\n        .markdown(\"# Key Performance Indicators\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewTextWidget(&textWidgetProps{\n\tmarkdown: jsii.String(\"# Key Performance Indicators\"),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 448
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.TextWidget",
        "@aws-cdk/aws-cloudwatch.TextWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "840d59935c40a04fe23656d25d0a4951fd7b817663d33eac77f797151ee52974"
    },
    "428539244bb683b09be7cefaa27d0b994c706b841a2f401cc5e70518015af6ee": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(\n    cloudwatch.AlarmStatusWidget(\n        alarms=[error_alarm]\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(\nnew AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Alarms = new [] { errorAlarm }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(\nAlarmStatusWidget.Builder.create()\n        .alarms(List.of(errorAlarm))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(\ncloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{\n\talarms: []iAlarm{\n\t\terrorAlarm,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 461
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 12,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9afe23edfb649b00bff97e4ec475f78fe49aeda23857ff26e28af9c9f4501e81"
    },
    "2a1a032ff771bf4770aa3e4f96fa6e2c076bcd8d4521966d105442ef87fd5930": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmStatusWidget(\n    title=\"Errors\",\n    alarms=[error_alarm],\n    sort_by=cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n    states=[cloudwatch.AlarmState.ALARM]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Title = \"Errors\",\n    Alarms = new [] { errorAlarm },\n    SortBy = AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n    States = new [] { AlarmState.ALARM }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmStatusWidget.Builder.create()\n        .title(\"Errors\")\n        .alarms(List.of(errorAlarm))\n        .sortBy(AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP)\n        .states(List.of(AlarmState.ALARM))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(cloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{\n\ttitle: jsii.String(\"Errors\"),\n\talarms: []iAlarm{\n\t\terrorAlarm,\n\t},\n\tsortBy: cloudwatch.alarmStatusWidgetSortBy_STATE_UPDATED_TIMESTAMP,\n\tstates: []alarmState{\n\t\tcloudwatch.*alarmState_ALARM,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 474
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#ALARM",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy#STATE_UPDATED_TIMESTAMP",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 21,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "765f2ea2455ace2c2d86264f210d48026473c81383f4e59ff5022414cb9a0e58"
    },
    "699ce96d41b9f05d21bc754c2f3e49348b11d09760c03cd32b50ca2cee42633a": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.LogQueryWidget(\n    log_group_names=[\"my-log-group\"],\n    view=cloudwatch.LogQueryVisualizationType.TABLE,\n    # The lines will be automatically combined using '\\n|'.\n    query_lines=[\"fields @message\", \"filter @message like /Error/\"\n    ]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new LogQueryWidget(new LogQueryWidgetProps {\n    LogGroupNames = new [] { \"my-log-group\" },\n    View = LogQueryVisualizationType.TABLE,\n    // The lines will be automatically combined using '\\n|'.\n    QueryLines = new [] { \"fields @message\", \"filter @message like /Error/\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(LogQueryWidget.Builder.create()\n        .logGroupNames(List.of(\"my-log-group\"))\n        .view(LogQueryVisualizationType.TABLE)\n        // The lines will be automatically combined using '\\n|'.\n        .queryLines(List.of(\"fields @message\", \"filter @message like /Error/\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewLogQueryWidget(&logQueryWidgetProps{\n\tlogGroupNames: []*string{\n\t\tjsii.String(\"my-log-group\"),\n\t},\n\tview: cloudwatch.logQueryVisualizationType_TABLE,\n\t// The lines will be automatically combined using '\\n|'.\n\tqueryLines: []*string{\n\t\tjsii.String(\"fields @message\"),\n\t\tjsii.String(\"filter @message like /Error/\"),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 490
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType#TABLE",
        "@aws-cdk/aws-cloudwatch.LogQueryWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1438f4219dd2040823fc631cfcf67e7c07934cacb3065d141d6d07efab7786f2"
    },
    "201498f63bb15814ddc237a86ab9e72e0cd72c9781974968b70420b81bf4b287": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n\n# alias: lambda.Alias\n\n# or add alarms to an existing group\n# blue_green_alias: lambda.Alias\n\nalarm = cloudwatch.Alarm(self, \"Errors\",\n    comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n    threshold=1,\n    evaluation_periods=1,\n    metric=alias.metric_errors()\n)\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n    alarms=[alarm\n    ]\n)\ndeployment_group.add_alarm(cloudwatch.Alarm(self, \"BlueGreenErrors\",\n    comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n    threshold=1,\n    evaluation_periods=1,\n    metric=blue_green_alias.metric_errors()\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\n\nAlias alias;\n\n// or add alarms to an existing group\nAlias blueGreenAlias;\n\nAlarm alarm = new Alarm(this, \"Errors\", new AlarmProps {\n    ComparisonOperator = ComparisonOperator.GREATER_THAN_THRESHOLD,\n    Threshold = 1,\n    EvaluationPeriods = 1,\n    Metric = alias.MetricErrors()\n});\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n    Alarms = new [] { alarm }\n});\ndeploymentGroup.AddAlarm(new Alarm(this, \"BlueGreenErrors\", new AlarmProps {\n    ComparisonOperator = ComparisonOperator.GREATER_THAN_THRESHOLD,\n    Threshold = 1,\n    EvaluationPeriods = 1,\n    Metric = blueGreenAlias.MetricErrors()\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\n\nAlias alias;\n\n// or add alarms to an existing group\nAlias blueGreenAlias;\n\nAlarm alarm = Alarm.Builder.create(this, \"Errors\")\n        .comparisonOperator(ComparisonOperator.GREATER_THAN_THRESHOLD)\n        .threshold(1)\n        .evaluationPeriods(1)\n        .metric(alias.metricErrors())\n        .build();\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .alarms(List.of(alarm))\n        .build();\ndeploymentGroup.addAlarm(Alarm.Builder.create(this, \"BlueGreenErrors\")\n        .comparisonOperator(ComparisonOperator.GREATER_THAN_THRESHOLD)\n        .threshold(1)\n        .evaluationPeriods(1)\n        .metric(blueGreenAlias.metricErrors())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar alias alias\n\n// or add alarms to an existing group\nvar blueGreenAlias alias\nalarm := cloudwatch.NewAlarm(this, jsii.String(\"Errors\"), &alarmProps{\n\tcomparisonOperator: cloudwatch.comparisonOperator_GREATER_THAN_THRESHOLD,\n\tthreshold: jsii.Number(1),\n\tevaluationPeriods: jsii.Number(1),\n\tmetric: alias.metricErrors(),\n})\ndeploymentGroup := codedeploy.NewLambdaDeploymentGroup(this, jsii.String(\"BlueGreenDeployment\"), &lambdaDeploymentGroupProps{\n\talias: alias,\n\tdeploymentConfig: codedeploy.lambdaDeploymentConfig_LINEAR_10PERCENT_EVERY_1MINUTE(),\n\talarms: []iAlarm{\n\t\talarm,\n\t},\n})\ndeploymentGroup.addAlarm(cloudwatch.NewAlarm(this, jsii.String(\"BlueGreenErrors\"), &alarmProps{\n\tcomparisonOperator: cloudwatch.*comparisonOperator_GREATER_THAN_THRESHOLD,\n\tthreshold: jsii.Number(1),\n\tevaluationPeriods: jsii.Number(1),\n\tmetric: blueGreenAlias.metricErrors(),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const alias: lambda.Alias;\nconst alarm = new cloudwatch.Alarm(this, 'Errors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: alias.metricErrors(),\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  alarms: [\n    // pass some alarms when constructing the deployment group\n    alarm,\n  ],\n});\n\n// or add alarms to an existing group\ndeclare const blueGreenAlias: lambda.Alias;\ndeploymentGroup.addAlarm(new cloudwatch.Alarm(this, 'BlueGreenErrors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: blueGreenAlias.metricErrors(),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Alarm"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator#GREATER_THAN_THRESHOLD",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup#addAlarm",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const alias: lambda.Alias;\n\n// or add alarms to an existing group\ndeclare const blueGreenAlias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alarm = new cloudwatch.Alarm(this, 'Errors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: alias.metricErrors(),\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  alarms: [\n    // pass some alarms when constructing the deployment group\n    alarm,\n  ],\n});\ndeploymentGroup.addAlarm(new cloudwatch.Alarm(this, 'BlueGreenErrors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: blueGreenAlias.metricErrors(),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 4,
        "75": 42,
        "104": 3,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a87fa00d87571c8f9d182c7be0b8ac6eb38a5e4b76816852c135874c55394362"
    },
    "1d2288ec1e3e5b0a03edf458e4c5a3e33f79ba83720f411f64c81043e27d1efd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nalarm_action_config = cloudwatch.AlarmActionConfig(\n    alarm_action_arn=\"alarmActionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nAlarmActionConfig alarmActionConfig = new AlarmActionConfig {\n    AlarmActionArn = \"alarmActionArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nAlarmActionConfig alarmActionConfig = AlarmActionConfig.builder()\n        .alarmActionArn(\"alarmActionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nalarmActionConfig := &alarmActionConfig{\n\talarmActionArn: jsii.String(\"alarmActionArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst alarmActionConfig: cloudwatch.AlarmActionConfig = {\n  alarmActionArn: 'alarmActionArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmActionConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmActionConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst alarmActionConfig: cloudwatch.AlarmActionConfig = {\n  alarmActionArn: 'alarmActionArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8947f31e5c297886dbe7916d26a1a9251914ec15dded5c4cbbc319bd5b30b9db"
    },
    "8fbbb8e6d4db0d09574c696ed38756cde0799c77ce7e4db65f821b400b9e40aa": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n\n# alias: lambda.Alias\n\n# or add alarms to an existing group\n# blue_green_alias: lambda.Alias\n\nalarm = cloudwatch.Alarm(self, \"Errors\",\n    comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n    threshold=1,\n    evaluation_periods=1,\n    metric=alias.metric_errors()\n)\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n    alarms=[alarm\n    ]\n)\ndeployment_group.add_alarm(cloudwatch.Alarm(self, \"BlueGreenErrors\",\n    comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n    threshold=1,\n    evaluation_periods=1,\n    metric=blue_green_alias.metric_errors()\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\n\nAlias alias;\n\n// or add alarms to an existing group\nAlias blueGreenAlias;\n\nAlarm alarm = new Alarm(this, \"Errors\", new AlarmProps {\n    ComparisonOperator = ComparisonOperator.GREATER_THAN_THRESHOLD,\n    Threshold = 1,\n    EvaluationPeriods = 1,\n    Metric = alias.MetricErrors()\n});\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n    Alarms = new [] { alarm }\n});\ndeploymentGroup.AddAlarm(new Alarm(this, \"BlueGreenErrors\", new AlarmProps {\n    ComparisonOperator = ComparisonOperator.GREATER_THAN_THRESHOLD,\n    Threshold = 1,\n    EvaluationPeriods = 1,\n    Metric = blueGreenAlias.MetricErrors()\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\n\nAlias alias;\n\n// or add alarms to an existing group\nAlias blueGreenAlias;\n\nAlarm alarm = Alarm.Builder.create(this, \"Errors\")\n        .comparisonOperator(ComparisonOperator.GREATER_THAN_THRESHOLD)\n        .threshold(1)\n        .evaluationPeriods(1)\n        .metric(alias.metricErrors())\n        .build();\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .alarms(List.of(alarm))\n        .build();\ndeploymentGroup.addAlarm(Alarm.Builder.create(this, \"BlueGreenErrors\")\n        .comparisonOperator(ComparisonOperator.GREATER_THAN_THRESHOLD)\n        .threshold(1)\n        .evaluationPeriods(1)\n        .metric(blueGreenAlias.metricErrors())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar alias alias\n\n// or add alarms to an existing group\nvar blueGreenAlias alias\nalarm := cloudwatch.NewAlarm(this, jsii.String(\"Errors\"), &alarmProps{\n\tcomparisonOperator: cloudwatch.comparisonOperator_GREATER_THAN_THRESHOLD,\n\tthreshold: jsii.Number(1),\n\tevaluationPeriods: jsii.Number(1),\n\tmetric: alias.metricErrors(),\n})\ndeploymentGroup := codedeploy.NewLambdaDeploymentGroup(this, jsii.String(\"BlueGreenDeployment\"), &lambdaDeploymentGroupProps{\n\talias: alias,\n\tdeploymentConfig: codedeploy.lambdaDeploymentConfig_LINEAR_10PERCENT_EVERY_1MINUTE(),\n\talarms: []iAlarm{\n\t\talarm,\n\t},\n})\ndeploymentGroup.addAlarm(cloudwatch.NewAlarm(this, jsii.String(\"BlueGreenErrors\"), &alarmProps{\n\tcomparisonOperator: cloudwatch.*comparisonOperator_GREATER_THAN_THRESHOLD,\n\tthreshold: jsii.Number(1),\n\tevaluationPeriods: jsii.Number(1),\n\tmetric: blueGreenAlias.metricErrors(),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const alias: lambda.Alias;\nconst alarm = new cloudwatch.Alarm(this, 'Errors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: alias.metricErrors(),\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  alarms: [\n    // pass some alarms when constructing the deployment group\n    alarm,\n  ],\n});\n\n// or add alarms to an existing group\ndeclare const blueGreenAlias: lambda.Alias;\ndeploymentGroup.addAlarm(new cloudwatch.Alarm(this, 'BlueGreenErrors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: blueGreenAlias.metricErrors(),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator#GREATER_THAN_THRESHOLD",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup#addAlarm",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const alias: lambda.Alias;\n\n// or add alarms to an existing group\ndeclare const blueGreenAlias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alarm = new cloudwatch.Alarm(this, 'Errors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: alias.metricErrors(),\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  alarms: [\n    // pass some alarms when constructing the deployment group\n    alarm,\n  ],\n});\ndeploymentGroup.addAlarm(new cloudwatch.Alarm(this, 'BlueGreenErrors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: blueGreenAlias.metricErrors(),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 4,
        "75": 42,
        "104": 3,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a87fa00d87571c8f9d182c7be0b8ac6eb38a5e4b76816852c135874c55394362"
    },
    "b5a0b53c613020c544bb32de59e83913201b0893948b774bf5780bb791f95f98": {
      "translations": {
        "python": {
          "source": "# alarm1: cloudwatch.Alarm\n# alarm2: cloudwatch.Alarm\n# alarm3: cloudwatch.Alarm\n# alarm4: cloudwatch.Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var alarm1 alarm\nvar alarm2 alarm\nvar alarm3 alarm\nvar alarm4 alarm\n\nalarmRule := cloudwatch.alarmRule.anyOf(cloudwatch.alarmRule.allOf(cloudwatch.alarmRule.anyOf(alarm1, cloudwatch.alarmRule.fromAlarm(alarm2, cloudwatch.alarmState_OK), alarm3), cloudwatch.alarmRule.not(cloudwatch.alarmRule.fromAlarm(alarm4, cloudwatch.alarmState_INSUFFICIENT_DATA))), cloudwatch.alarmRule.fromBoolean(jsii.Boolean(false)))\n\ncloudwatch.NewCompositeAlarm(this, jsii.String(\"MyAwesomeCompositeAlarm\"), &compositeAlarmProps{\n\talarmRule: alarmRule,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fee41f55ebdb796ada349b0655c3d755869d1a1f81292ff128fb32225e52886f"
    },
    "a500c581ec8897f19930b52bbc29b3e6c6c1ab55cdc6bb70dd9d752967fd642d": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmStatusWidget(\n    title=\"Errors\",\n    alarms=[error_alarm],\n    sort_by=cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n    states=[cloudwatch.AlarmState.ALARM]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Title = \"Errors\",\n    Alarms = new [] { errorAlarm },\n    SortBy = AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n    States = new [] { AlarmState.ALARM }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmStatusWidget.Builder.create()\n        .title(\"Errors\")\n        .alarms(List.of(errorAlarm))\n        .sortBy(AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP)\n        .states(List.of(AlarmState.ALARM))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(cloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{\n\ttitle: jsii.String(\"Errors\"),\n\talarms: []iAlarm{\n\t\terrorAlarm,\n\t},\n\tsortBy: cloudwatch.alarmStatusWidgetSortBy_STATE_UPDATED_TIMESTAMP,\n\tstates: []alarmState{\n\t\tcloudwatch.*alarmState_ALARM,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmState"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#ALARM",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy#STATE_UPDATED_TIMESTAMP",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 21,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "765f2ea2455ace2c2d86264f210d48026473c81383f4e59ff5022414cb9a0e58"
    },
    "6a93294e274dda0c7c232d41627f9c367d06dbc8edc0e6c5ce44d7e764954def": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(\n    cloudwatch.AlarmStatusWidget(\n        alarms=[error_alarm]\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(\nnew AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Alarms = new [] { errorAlarm }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(\nAlarmStatusWidget.Builder.create()\n        .alarms(List.of(errorAlarm))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(\ncloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{\n\talarms: []iAlarm{\n\t\terrorAlarm,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 12,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9afe23edfb649b00bff97e4ec475f78fe49aeda23857ff26e28af9c9f4501e81"
    },
    "b57e8fe2b16cbb19e750de0fccf701f607c7b70fafae4a48d17b882afecad6a5": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(\n    cloudwatch.AlarmStatusWidget(\n        alarms=[error_alarm]\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(\nnew AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Alarms = new [] { errorAlarm }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(\nAlarmStatusWidget.Builder.create()\n        .alarms(List.of(errorAlarm))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(\ncloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{\n\talarms: []iAlarm{\n\t\terrorAlarm,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 12,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9afe23edfb649b00bff97e4ec475f78fe49aeda23857ff26e28af9c9f4501e81"
    },
    "d390122529105ed8d47e0bd07bea1a8438d27c7d997d8f98b93a278e8e79199a": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmStatusWidget(\n    title=\"Errors\",\n    alarms=[error_alarm],\n    sort_by=cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n    states=[cloudwatch.AlarmState.ALARM]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Title = \"Errors\",\n    Alarms = new [] { errorAlarm },\n    SortBy = AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n    States = new [] { AlarmState.ALARM }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmStatusWidget.Builder.create()\n        .title(\"Errors\")\n        .alarms(List.of(errorAlarm))\n        .sortBy(AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP)\n        .states(List.of(AlarmState.ALARM))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(cloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{\n\ttitle: jsii.String(\"Errors\"),\n\talarms: []iAlarm{\n\t\terrorAlarm,\n\t},\n\tsortBy: cloudwatch.alarmStatusWidgetSortBy_STATE_UPDATED_TIMESTAMP,\n\tstates: []alarmState{\n\t\tcloudwatch.*alarmState_ALARM,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#ALARM",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetSortBy#STATE_UPDATED_TIMESTAMP",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmStatusWidget({\n  title: \"Errors\",\n  alarms: [errorAlarm],\n  sortBy: cloudwatch.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,\n  states: [cloudwatch.AlarmState.ALARM],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 21,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "765f2ea2455ace2c2d86264f210d48026473c81383f4e59ff5022414cb9a0e58"
    },
    "044f5888c975b6f320adb3cbaddf2773ce467ffbeafc5c28872bae3421f34e01": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmWidget(\n    title=\"Errors\",\n    alarm=error_alarm\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmWidget(new AlarmWidgetProps {\n    Title = \"Errors\",\n    Alarm = errorAlarm\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmWidget.Builder.create()\n        .title(\"Errors\")\n        .alarm(errorAlarm)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(cloudwatch.NewAlarmWidget(&alarmWidgetProps{\n\ttitle: jsii.String(\"Errors\"),\n\talarm: errorAlarm,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmWidget",
        "@aws-cdk/aws-cloudwatch.AlarmWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ac432a1bd4e556866ba15b7d5f796c2906317f1e8ac8dceaf5da524c95bdd3c3"
    },
    "46e2553ccc818912da4aeb04fe8a87531dd3b54cd720176fc1973ae0a151bf3b": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# error_alarm: cloudwatch.Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmWidget(\n    title=\"Errors\",\n    alarm=error_alarm\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmWidget(new AlarmWidgetProps {\n    Title = \"Errors\",\n    Alarm = errorAlarm\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmWidget.Builder.create()\n        .title(\"Errors\")\n        .alarm(errorAlarm)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar errorAlarm alarm\n\ndashboard.addWidgets(cloudwatch.NewAlarmWidget(&alarmWidgetProps{\n\ttitle: jsii.String(\"Errors\"),\n\talarm: errorAlarm,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmWidget",
        "@aws-cdk/aws-cloudwatch.AlarmWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ac432a1bd4e556866ba15b7d5f796c2906317f1e8ac8dceaf5da524c95bdd3c3"
    },
    "0a749c96b308d2e0af6c90e4ba9e1a292a63a81dcd2d720bf2ee394484a20ff6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_alarm = cloudwatch.CfnAlarm(self, \"MyCfnAlarm\",\n    comparison_operator=\"comparisonOperator\",\n    evaluation_periods=123,\n\n    # the properties below are optional\n    actions_enabled=False,\n    alarm_actions=[\"alarmActions\"],\n    alarm_description=\"alarmDescription\",\n    alarm_name=\"alarmName\",\n    datapoints_to_alarm=123,\n    dimensions=[cloudwatch.CfnAlarm.DimensionProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    evaluate_low_sample_count_percentile=\"evaluateLowSampleCountPercentile\",\n    extended_statistic=\"extendedStatistic\",\n    insufficient_data_actions=[\"insufficientDataActions\"],\n    metric_name=\"metricName\",\n    metrics=[cloudwatch.CfnAlarm.MetricDataQueryProperty(\n        id=\"id\",\n\n        # the properties below are optional\n        account_id=\"accountId\",\n        expression=\"expression\",\n        label=\"label\",\n        metric_stat=cloudwatch.CfnAlarm.MetricStatProperty(\n            metric=cloudwatch.CfnAlarm.MetricProperty(\n                dimensions=[cloudwatch.CfnAlarm.DimensionProperty(\n                    name=\"name\",\n                    value=\"value\"\n                )],\n                metric_name=\"metricName\",\n                namespace=\"namespace\"\n            ),\n            period=123,\n            stat=\"stat\",\n\n            # the properties below are optional\n            unit=\"unit\"\n        ),\n        period=123,\n        return_data=False\n    )],\n    namespace=\"namespace\",\n    ok_actions=[\"okActions\"],\n    period=123,\n    statistic=\"statistic\",\n    threshold=123,\n    threshold_metric_id=\"thresholdMetricId\",\n    treat_missing_data=\"treatMissingData\",\n    unit=\"unit\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnAlarm cfnAlarm = new CfnAlarm(this, \"MyCfnAlarm\", new CfnAlarmProps {\n    ComparisonOperator = \"comparisonOperator\",\n    EvaluationPeriods = 123,\n\n    // the properties below are optional\n    ActionsEnabled = false,\n    AlarmActions = new [] { \"alarmActions\" },\n    AlarmDescription = \"alarmDescription\",\n    AlarmName = \"alarmName\",\n    DatapointsToAlarm = 123,\n    Dimensions = new [] { new DimensionProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    EvaluateLowSampleCountPercentile = \"evaluateLowSampleCountPercentile\",\n    ExtendedStatistic = \"extendedStatistic\",\n    InsufficientDataActions = new [] { \"insufficientDataActions\" },\n    MetricName = \"metricName\",\n    Metrics = new [] { new MetricDataQueryProperty {\n        Id = \"id\",\n\n        // the properties below are optional\n        AccountId = \"accountId\",\n        Expression = \"expression\",\n        Label = \"label\",\n        MetricStat = new MetricStatProperty {\n            Metric = new MetricProperty {\n                Dimensions = new [] { new DimensionProperty {\n                    Name = \"name\",\n                    Value = \"value\"\n                } },\n                MetricName = \"metricName\",\n                Namespace = \"namespace\"\n            },\n            Period = 123,\n            Stat = \"stat\",\n\n            // the properties below are optional\n            Unit = \"unit\"\n        },\n        Period = 123,\n        ReturnData = false\n    } },\n    Namespace = \"namespace\",\n    OkActions = new [] { \"okActions\" },\n    Period = 123,\n    Statistic = \"statistic\",\n    Threshold = 123,\n    ThresholdMetricId = \"thresholdMetricId\",\n    TreatMissingData = \"treatMissingData\",\n    Unit = \"unit\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnAlarm cfnAlarm = CfnAlarm.Builder.create(this, \"MyCfnAlarm\")\n        .comparisonOperator(\"comparisonOperator\")\n        .evaluationPeriods(123)\n\n        // the properties below are optional\n        .actionsEnabled(false)\n        .alarmActions(List.of(\"alarmActions\"))\n        .alarmDescription(\"alarmDescription\")\n        .alarmName(\"alarmName\")\n        .datapointsToAlarm(123)\n        .dimensions(List.of(DimensionProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .evaluateLowSampleCountPercentile(\"evaluateLowSampleCountPercentile\")\n        .extendedStatistic(\"extendedStatistic\")\n        .insufficientDataActions(List.of(\"insufficientDataActions\"))\n        .metricName(\"metricName\")\n        .metrics(List.of(MetricDataQueryProperty.builder()\n                .id(\"id\")\n\n                // the properties below are optional\n                .accountId(\"accountId\")\n                .expression(\"expression\")\n                .label(\"label\")\n                .metricStat(MetricStatProperty.builder()\n                        .metric(MetricProperty.builder()\n                                .dimensions(List.of(DimensionProperty.builder()\n                                        .name(\"name\")\n                                        .value(\"value\")\n                                        .build()))\n                                .metricName(\"metricName\")\n                                .namespace(\"namespace\")\n                                .build())\n                        .period(123)\n                        .stat(\"stat\")\n\n                        // the properties below are optional\n                        .unit(\"unit\")\n                        .build())\n                .period(123)\n                .returnData(false)\n                .build()))\n        .namespace(\"namespace\")\n        .okActions(List.of(\"okActions\"))\n        .period(123)\n        .statistic(\"statistic\")\n        .threshold(123)\n        .thresholdMetricId(\"thresholdMetricId\")\n        .treatMissingData(\"treatMissingData\")\n        .unit(\"unit\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnAlarm := cloudwatch.NewCfnAlarm(this, jsii.String(\"MyCfnAlarm\"), &cfnAlarmProps{\n\tcomparisonOperator: jsii.String(\"comparisonOperator\"),\n\tevaluationPeriods: jsii.Number(123),\n\n\t// the properties below are optional\n\tactionsEnabled: jsii.Boolean(false),\n\talarmActions: []*string{\n\t\tjsii.String(\"alarmActions\"),\n\t},\n\talarmDescription: jsii.String(\"alarmDescription\"),\n\talarmName: jsii.String(\"alarmName\"),\n\tdatapointsToAlarm: jsii.Number(123),\n\tdimensions: []interface{}{\n\t\t&dimensionProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tevaluateLowSampleCountPercentile: jsii.String(\"evaluateLowSampleCountPercentile\"),\n\textendedStatistic: jsii.String(\"extendedStatistic\"),\n\tinsufficientDataActions: []*string{\n\t\tjsii.String(\"insufficientDataActions\"),\n\t},\n\tmetricName: jsii.String(\"metricName\"),\n\tmetrics: []interface{}{\n\t\t&metricDataQueryProperty{\n\t\t\tid: jsii.String(\"id\"),\n\n\t\t\t// the properties below are optional\n\t\t\taccountId: jsii.String(\"accountId\"),\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t\tlabel: jsii.String(\"label\"),\n\t\t\tmetricStat: &metricStatProperty{\n\t\t\t\tmetric: &metricProperty{\n\t\t\t\t\tdimensions: []interface{}{\n\t\t\t\t\t\t&dimensionProperty{\n\t\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\t\t},\n\t\t\t\tperiod: jsii.Number(123),\n\t\t\t\tstat: jsii.String(\"stat\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tunit: jsii.String(\"unit\"),\n\t\t\t},\n\t\t\tperiod: jsii.Number(123),\n\t\t\treturnData: jsii.Boolean(false),\n\t\t},\n\t},\n\tnamespace: jsii.String(\"namespace\"),\n\tokActions: []*string{\n\t\tjsii.String(\"okActions\"),\n\t},\n\tperiod: jsii.Number(123),\n\tstatistic: jsii.String(\"statistic\"),\n\tthreshold: jsii.Number(123),\n\tthresholdMetricId: jsii.String(\"thresholdMetricId\"),\n\ttreatMissingData: jsii.String(\"treatMissingData\"),\n\tunit: jsii.String(\"unit\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnAlarm = new cloudwatch.CfnAlarm(this, 'MyCfnAlarm', {\n  comparisonOperator: 'comparisonOperator',\n  evaluationPeriods: 123,\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  alarmName: 'alarmName',\n  datapointsToAlarm: 123,\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  evaluateLowSampleCountPercentile: 'evaluateLowSampleCountPercentile',\n  extendedStatistic: 'extendedStatistic',\n  insufficientDataActions: ['insufficientDataActions'],\n  metricName: 'metricName',\n  metrics: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n        metricName: 'metricName',\n        namespace: 'namespace',\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n  namespace: 'namespace',\n  okActions: ['okActions'],\n  period: 123,\n  statistic: 'statistic',\n  threshold: 123,\n  thresholdMetricId: 'thresholdMetricId',\n  treatMissingData: 'treatMissingData',\n  unit: 'unit',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAlarm",
        "@aws-cdk/aws-cloudwatch.CfnAlarmProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAlarm = new cloudwatch.CfnAlarm(this, 'MyCfnAlarm', {\n  comparisonOperator: 'comparisonOperator',\n  evaluationPeriods: 123,\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  alarmName: 'alarmName',\n  datapointsToAlarm: 123,\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  evaluateLowSampleCountPercentile: 'evaluateLowSampleCountPercentile',\n  extendedStatistic: 'extendedStatistic',\n  insufficientDataActions: ['insufficientDataActions'],\n  metricName: 'metricName',\n  metrics: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n        metricName: 'metricName',\n        namespace: 'namespace',\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n  namespace: 'namespace',\n  okActions: ['okActions'],\n  period: 123,\n  statistic: 'statistic',\n  threshold: 123,\n  thresholdMetricId: 'thresholdMetricId',\n  treatMissingData: 'treatMissingData',\n  unit: 'unit',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 28,
        "75": 43,
        "91": 2,
        "104": 1,
        "192": 6,
        "193": 6,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 39,
        "290": 1
      },
      "fqnsFingerprint": "8fb0d82ddc5f1c970921f3c7a4e95b3ea62743d88524fe133bdc32c9f0e7563c"
    },
    "eb3cceebd3d5f123544cb72d148df9b70c41fd94e18e1b1c9ce6743178b8c2d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ndimension_property = cloudwatch.CfnAlarm.DimensionProperty(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nDimensionProperty dimensionProperty = new DimensionProperty {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nDimensionProperty dimensionProperty = DimensionProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ndimensionProperty := &dimensionProperty{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst dimensionProperty: cloudwatch.CfnAlarm.DimensionProperty = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.DimensionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAlarm.DimensionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dimensionProperty: cloudwatch.CfnAlarm.DimensionProperty = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7d01cf0d690ceacec30af619ea6174e5f2dd47a1df7bc56111c71d8d48052ed6"
    },
    "9381886044830f50234b3bc7ab27313872a4279628a68444d24d662c45c0ffbe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_data_query_property = cloudwatch.CfnAlarm.MetricDataQueryProperty(\n    id=\"id\",\n\n    # the properties below are optional\n    account_id=\"accountId\",\n    expression=\"expression\",\n    label=\"label\",\n    metric_stat=cloudwatch.CfnAlarm.MetricStatProperty(\n        metric=cloudwatch.CfnAlarm.MetricProperty(\n            dimensions=[cloudwatch.CfnAlarm.DimensionProperty(\n                name=\"name\",\n                value=\"value\"\n            )],\n            metric_name=\"metricName\",\n            namespace=\"namespace\"\n        ),\n        period=123,\n        stat=\"stat\",\n\n        # the properties below are optional\n        unit=\"unit\"\n    ),\n    period=123,\n    return_data=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricDataQueryProperty metricDataQueryProperty = new MetricDataQueryProperty {\n    Id = \"id\",\n\n    // the properties below are optional\n    AccountId = \"accountId\",\n    Expression = \"expression\",\n    Label = \"label\",\n    MetricStat = new MetricStatProperty {\n        Metric = new MetricProperty {\n            Dimensions = new [] { new DimensionProperty {\n                Name = \"name\",\n                Value = \"value\"\n            } },\n            MetricName = \"metricName\",\n            Namespace = \"namespace\"\n        },\n        Period = 123,\n        Stat = \"stat\",\n\n        // the properties below are optional\n        Unit = \"unit\"\n    },\n    Period = 123,\n    ReturnData = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricDataQueryProperty metricDataQueryProperty = MetricDataQueryProperty.builder()\n        .id(\"id\")\n\n        // the properties below are optional\n        .accountId(\"accountId\")\n        .expression(\"expression\")\n        .label(\"label\")\n        .metricStat(MetricStatProperty.builder()\n                .metric(MetricProperty.builder()\n                        .dimensions(List.of(DimensionProperty.builder()\n                                .name(\"name\")\n                                .value(\"value\")\n                                .build()))\n                        .metricName(\"metricName\")\n                        .namespace(\"namespace\")\n                        .build())\n                .period(123)\n                .stat(\"stat\")\n\n                // the properties below are optional\n                .unit(\"unit\")\n                .build())\n        .period(123)\n        .returnData(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricDataQueryProperty := &metricDataQueryProperty{\n\tid: jsii.String(\"id\"),\n\n\t// the properties below are optional\n\taccountId: jsii.String(\"accountId\"),\n\texpression: jsii.String(\"expression\"),\n\tlabel: jsii.String(\"label\"),\n\tmetricStat: &metricStatProperty{\n\t\tmetric: &metricProperty{\n\t\t\tdimensions: []interface{}{\n\t\t\t\t&dimensionProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t},\n\t\tperiod: jsii.Number(123),\n\t\tstat: jsii.String(\"stat\"),\n\n\t\t// the properties below are optional\n\t\tunit: jsii.String(\"unit\"),\n\t},\n\tperiod: jsii.Number(123),\n\treturnData: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricDataQueryProperty: cloudwatch.CfnAlarm.MetricDataQueryProperty = {\n  id: 'id',\n\n  // the properties below are optional\n  accountId: 'accountId',\n  expression: 'expression',\n  label: 'label',\n  metricStat: {\n    metric: {\n      dimensions: [{\n        name: 'name',\n        value: 'value',\n      }],\n      metricName: 'metricName',\n      namespace: 'namespace',\n    },\n    period: 123,\n    stat: 'stat',\n\n    // the properties below are optional\n    unit: 'unit',\n  },\n  period: 123,\n  returnData: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricDataQueryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricDataQueryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricDataQueryProperty: cloudwatch.CfnAlarm.MetricDataQueryProperty = {\n  id: 'id',\n\n  // the properties below are optional\n  accountId: 'accountId',\n  expression: 'expression',\n  label: 'label',\n  metricStat: {\n    metric: {\n      dimensions: [{\n        name: 'name',\n        value: 'value',\n      }],\n      metricName: 'metricName',\n      namespace: 'namespace',\n    },\n    period: 123,\n    stat: 'stat',\n\n    // the properties below are optional\n    unit: 'unit',\n  },\n  period: 123,\n  returnData: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 21,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "81f5c93b1171b7cb4899225f5cdfc0dfae2d40a7e14610234675b672a75ab868"
    },
    "bde8ec085a3745f8a6d95448f19d49038f4c3a11bc492242c7c90c0067725b60": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_property = cloudwatch.CfnAlarm.MetricProperty(\n    dimensions=[cloudwatch.CfnAlarm.DimensionProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    metric_name=\"metricName\",\n    namespace=\"namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricProperty metricProperty = new MetricProperty {\n    Dimensions = new [] { new DimensionProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    MetricName = \"metricName\",\n    Namespace = \"namespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricProperty metricProperty = MetricProperty.builder()\n        .dimensions(List.of(DimensionProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricProperty := &metricProperty{\n\tdimensions: []interface{}{\n\t\t&dimensionProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricProperty: cloudwatch.CfnAlarm.MetricProperty = {\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricName: 'metricName',\n  namespace: 'namespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricProperty: cloudwatch.CfnAlarm.MetricProperty = {\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricName: 'metricName',\n  namespace: 'namespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "0d7d3ad1da0d39aceac7c22e42932064f3cf8812414bf9b4e7678799cb3f035b"
    },
    "ff7ecc09e14a746dfa084e33819c9f1177f10c010bb62d24ff0ebbc8bd39c2af": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_stat_property = cloudwatch.CfnAlarm.MetricStatProperty(\n    metric=cloudwatch.CfnAlarm.MetricProperty(\n        dimensions=[cloudwatch.CfnAlarm.DimensionProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        metric_name=\"metricName\",\n        namespace=\"namespace\"\n    ),\n    period=123,\n    stat=\"stat\",\n\n    # the properties below are optional\n    unit=\"unit\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricStatProperty metricStatProperty = new MetricStatProperty {\n    Metric = new MetricProperty {\n        Dimensions = new [] { new DimensionProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MetricName = \"metricName\",\n        Namespace = \"namespace\"\n    },\n    Period = 123,\n    Stat = \"stat\",\n\n    // the properties below are optional\n    Unit = \"unit\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricStatProperty metricStatProperty = MetricStatProperty.builder()\n        .metric(MetricProperty.builder()\n                .dimensions(List.of(DimensionProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .metricName(\"metricName\")\n                .namespace(\"namespace\")\n                .build())\n        .period(123)\n        .stat(\"stat\")\n\n        // the properties below are optional\n        .unit(\"unit\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricStatProperty := &metricStatProperty{\n\tmetric: &metricProperty{\n\t\tdimensions: []interface{}{\n\t\t\t&dimensionProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tmetricName: jsii.String(\"metricName\"),\n\t\tnamespace: jsii.String(\"namespace\"),\n\t},\n\tperiod: jsii.Number(123),\n\tstat: jsii.String(\"stat\"),\n\n\t// the properties below are optional\n\tunit: jsii.String(\"unit\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStatProperty: cloudwatch.CfnAlarm.MetricStatProperty = {\n  metric: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n  },\n  period: 123,\n  stat: 'stat',\n\n  // the properties below are optional\n  unit: 'unit',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricStatProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAlarm.MetricStatProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricStatProperty: cloudwatch.CfnAlarm.MetricStatProperty = {\n  metric: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n  },\n  period: 123,\n  stat: 'stat',\n\n  // the properties below are optional\n  unit: 'unit',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 14,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "ea329729a987afbf3605f6e3377195e42c3b6c7d41c4588da98e74d157a46c04"
    },
    "f270134be7d3f325729a9e89c39db7bda0b37f6e5d58b40b6b5111aaa95cab68": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_alarm_props = cloudwatch.CfnAlarmProps(\n    comparison_operator=\"comparisonOperator\",\n    evaluation_periods=123,\n\n    # the properties below are optional\n    actions_enabled=False,\n    alarm_actions=[\"alarmActions\"],\n    alarm_description=\"alarmDescription\",\n    alarm_name=\"alarmName\",\n    datapoints_to_alarm=123,\n    dimensions=[cloudwatch.CfnAlarm.DimensionProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    evaluate_low_sample_count_percentile=\"evaluateLowSampleCountPercentile\",\n    extended_statistic=\"extendedStatistic\",\n    insufficient_data_actions=[\"insufficientDataActions\"],\n    metric_name=\"metricName\",\n    metrics=[cloudwatch.CfnAlarm.MetricDataQueryProperty(\n        id=\"id\",\n\n        # the properties below are optional\n        account_id=\"accountId\",\n        expression=\"expression\",\n        label=\"label\",\n        metric_stat=cloudwatch.CfnAlarm.MetricStatProperty(\n            metric=cloudwatch.CfnAlarm.MetricProperty(\n                dimensions=[cloudwatch.CfnAlarm.DimensionProperty(\n                    name=\"name\",\n                    value=\"value\"\n                )],\n                metric_name=\"metricName\",\n                namespace=\"namespace\"\n            ),\n            period=123,\n            stat=\"stat\",\n\n            # the properties below are optional\n            unit=\"unit\"\n        ),\n        period=123,\n        return_data=False\n    )],\n    namespace=\"namespace\",\n    ok_actions=[\"okActions\"],\n    period=123,\n    statistic=\"statistic\",\n    threshold=123,\n    threshold_metric_id=\"thresholdMetricId\",\n    treat_missing_data=\"treatMissingData\",\n    unit=\"unit\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnAlarmProps cfnAlarmProps = new CfnAlarmProps {\n    ComparisonOperator = \"comparisonOperator\",\n    EvaluationPeriods = 123,\n\n    // the properties below are optional\n    ActionsEnabled = false,\n    AlarmActions = new [] { \"alarmActions\" },\n    AlarmDescription = \"alarmDescription\",\n    AlarmName = \"alarmName\",\n    DatapointsToAlarm = 123,\n    Dimensions = new [] { new DimensionProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    EvaluateLowSampleCountPercentile = \"evaluateLowSampleCountPercentile\",\n    ExtendedStatistic = \"extendedStatistic\",\n    InsufficientDataActions = new [] { \"insufficientDataActions\" },\n    MetricName = \"metricName\",\n    Metrics = new [] { new MetricDataQueryProperty {\n        Id = \"id\",\n\n        // the properties below are optional\n        AccountId = \"accountId\",\n        Expression = \"expression\",\n        Label = \"label\",\n        MetricStat = new MetricStatProperty {\n            Metric = new MetricProperty {\n                Dimensions = new [] { new DimensionProperty {\n                    Name = \"name\",\n                    Value = \"value\"\n                } },\n                MetricName = \"metricName\",\n                Namespace = \"namespace\"\n            },\n            Period = 123,\n            Stat = \"stat\",\n\n            // the properties below are optional\n            Unit = \"unit\"\n        },\n        Period = 123,\n        ReturnData = false\n    } },\n    Namespace = \"namespace\",\n    OkActions = new [] { \"okActions\" },\n    Period = 123,\n    Statistic = \"statistic\",\n    Threshold = 123,\n    ThresholdMetricId = \"thresholdMetricId\",\n    TreatMissingData = \"treatMissingData\",\n    Unit = \"unit\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnAlarmProps cfnAlarmProps = CfnAlarmProps.builder()\n        .comparisonOperator(\"comparisonOperator\")\n        .evaluationPeriods(123)\n\n        // the properties below are optional\n        .actionsEnabled(false)\n        .alarmActions(List.of(\"alarmActions\"))\n        .alarmDescription(\"alarmDescription\")\n        .alarmName(\"alarmName\")\n        .datapointsToAlarm(123)\n        .dimensions(List.of(DimensionProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .evaluateLowSampleCountPercentile(\"evaluateLowSampleCountPercentile\")\n        .extendedStatistic(\"extendedStatistic\")\n        .insufficientDataActions(List.of(\"insufficientDataActions\"))\n        .metricName(\"metricName\")\n        .metrics(List.of(MetricDataQueryProperty.builder()\n                .id(\"id\")\n\n                // the properties below are optional\n                .accountId(\"accountId\")\n                .expression(\"expression\")\n                .label(\"label\")\n                .metricStat(MetricStatProperty.builder()\n                        .metric(MetricProperty.builder()\n                                .dimensions(List.of(DimensionProperty.builder()\n                                        .name(\"name\")\n                                        .value(\"value\")\n                                        .build()))\n                                .metricName(\"metricName\")\n                                .namespace(\"namespace\")\n                                .build())\n                        .period(123)\n                        .stat(\"stat\")\n\n                        // the properties below are optional\n                        .unit(\"unit\")\n                        .build())\n                .period(123)\n                .returnData(false)\n                .build()))\n        .namespace(\"namespace\")\n        .okActions(List.of(\"okActions\"))\n        .period(123)\n        .statistic(\"statistic\")\n        .threshold(123)\n        .thresholdMetricId(\"thresholdMetricId\")\n        .treatMissingData(\"treatMissingData\")\n        .unit(\"unit\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnAlarmProps := &cfnAlarmProps{\n\tcomparisonOperator: jsii.String(\"comparisonOperator\"),\n\tevaluationPeriods: jsii.Number(123),\n\n\t// the properties below are optional\n\tactionsEnabled: jsii.Boolean(false),\n\talarmActions: []*string{\n\t\tjsii.String(\"alarmActions\"),\n\t},\n\talarmDescription: jsii.String(\"alarmDescription\"),\n\talarmName: jsii.String(\"alarmName\"),\n\tdatapointsToAlarm: jsii.Number(123),\n\tdimensions: []interface{}{\n\t\t&dimensionProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tevaluateLowSampleCountPercentile: jsii.String(\"evaluateLowSampleCountPercentile\"),\n\textendedStatistic: jsii.String(\"extendedStatistic\"),\n\tinsufficientDataActions: []*string{\n\t\tjsii.String(\"insufficientDataActions\"),\n\t},\n\tmetricName: jsii.String(\"metricName\"),\n\tmetrics: []interface{}{\n\t\t&metricDataQueryProperty{\n\t\t\tid: jsii.String(\"id\"),\n\n\t\t\t// the properties below are optional\n\t\t\taccountId: jsii.String(\"accountId\"),\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t\tlabel: jsii.String(\"label\"),\n\t\t\tmetricStat: &metricStatProperty{\n\t\t\t\tmetric: &metricProperty{\n\t\t\t\t\tdimensions: []interface{}{\n\t\t\t\t\t\t&dimensionProperty{\n\t\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\t\t},\n\t\t\t\tperiod: jsii.Number(123),\n\t\t\t\tstat: jsii.String(\"stat\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tunit: jsii.String(\"unit\"),\n\t\t\t},\n\t\t\tperiod: jsii.Number(123),\n\t\t\treturnData: jsii.Boolean(false),\n\t\t},\n\t},\n\tnamespace: jsii.String(\"namespace\"),\n\tokActions: []*string{\n\t\tjsii.String(\"okActions\"),\n\t},\n\tperiod: jsii.Number(123),\n\tstatistic: jsii.String(\"statistic\"),\n\tthreshold: jsii.Number(123),\n\tthresholdMetricId: jsii.String(\"thresholdMetricId\"),\n\ttreatMissingData: jsii.String(\"treatMissingData\"),\n\tunit: jsii.String(\"unit\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnAlarmProps: cloudwatch.CfnAlarmProps = {\n  comparisonOperator: 'comparisonOperator',\n  evaluationPeriods: 123,\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  alarmName: 'alarmName',\n  datapointsToAlarm: 123,\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  evaluateLowSampleCountPercentile: 'evaluateLowSampleCountPercentile',\n  extendedStatistic: 'extendedStatistic',\n  insufficientDataActions: ['insufficientDataActions'],\n  metricName: 'metricName',\n  metrics: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n        metricName: 'metricName',\n        namespace: 'namespace',\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n  namespace: 'namespace',\n  okActions: ['okActions'],\n  period: 123,\n  statistic: 'statistic',\n  threshold: 123,\n  thresholdMetricId: 'thresholdMetricId',\n  treatMissingData: 'treatMissingData',\n  unit: 'unit',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAlarmProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAlarmProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAlarmProps: cloudwatch.CfnAlarmProps = {\n  comparisonOperator: 'comparisonOperator',\n  evaluationPeriods: 123,\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  alarmName: 'alarmName',\n  datapointsToAlarm: 123,\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  evaluateLowSampleCountPercentile: 'evaluateLowSampleCountPercentile',\n  extendedStatistic: 'extendedStatistic',\n  insufficientDataActions: ['insufficientDataActions'],\n  metricName: 'metricName',\n  metrics: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n        metricName: 'metricName',\n        namespace: 'namespace',\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n  namespace: 'namespace',\n  okActions: ['okActions'],\n  period: 123,\n  statistic: 'statistic',\n  threshold: 123,\n  thresholdMetricId: 'thresholdMetricId',\n  treatMissingData: 'treatMissingData',\n  unit: 'unit',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 27,
        "75": 43,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 6,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 39,
        "290": 1
      },
      "fqnsFingerprint": "1580bdc5f0cbceb9676f14e5c427b8a52c08d5c2f78985924b57bf69e95d2903"
    },
    "3a15086a381a680f95a065abcb183c6236e984dfe8622b32759370a4f40d4f10": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_anomaly_detector = cloudwatch.CfnAnomalyDetector(self, \"MyCfnAnomalyDetector\",\n    configuration=cloudwatch.CfnAnomalyDetector.ConfigurationProperty(\n        excluded_time_ranges=[cloudwatch.CfnAnomalyDetector.RangeProperty(\n            end_time=\"endTime\",\n            start_time=\"startTime\"\n        )],\n        metric_time_zone=\"metricTimeZone\"\n    ),\n    dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    metric_math_anomaly_detector=cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty(\n        metric_data_queries=[cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty(\n            id=\"id\",\n\n            # the properties below are optional\n            account_id=\"accountId\",\n            expression=\"expression\",\n            label=\"label\",\n            metric_stat=cloudwatch.CfnAnomalyDetector.MetricStatProperty(\n                metric=cloudwatch.CfnAnomalyDetector.MetricProperty(\n                    metric_name=\"metricName\",\n                    namespace=\"namespace\",\n\n                    # the properties below are optional\n                    dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n                        name=\"name\",\n                        value=\"value\"\n                    )]\n                ),\n                period=123,\n                stat=\"stat\",\n\n                # the properties below are optional\n                unit=\"unit\"\n            ),\n            period=123,\n            return_data=False\n        )]\n    ),\n    metric_name=\"metricName\",\n    namespace=\"namespace\",\n    single_metric_anomaly_detector=cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty(\n        dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        metric_name=\"metricName\",\n        namespace=\"namespace\",\n        stat=\"stat\"\n    ),\n    stat=\"stat\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnAnomalyDetector cfnAnomalyDetector = new CfnAnomalyDetector(this, \"MyCfnAnomalyDetector\", new CfnAnomalyDetectorProps {\n    Configuration = new ConfigurationProperty {\n        ExcludedTimeRanges = new [] { new RangeProperty {\n            EndTime = \"endTime\",\n            StartTime = \"startTime\"\n        } },\n        MetricTimeZone = \"metricTimeZone\"\n    },\n    Dimensions = new [] { new DimensionProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    MetricMathAnomalyDetector = new MetricMathAnomalyDetectorProperty {\n        MetricDataQueries = new [] { new MetricDataQueryProperty {\n            Id = \"id\",\n\n            // the properties below are optional\n            AccountId = \"accountId\",\n            Expression = \"expression\",\n            Label = \"label\",\n            MetricStat = new MetricStatProperty {\n                Metric = new MetricProperty {\n                    MetricName = \"metricName\",\n                    Namespace = \"namespace\",\n\n                    // the properties below are optional\n                    Dimensions = new [] { new DimensionProperty {\n                        Name = \"name\",\n                        Value = \"value\"\n                    } }\n                },\n                Period = 123,\n                Stat = \"stat\",\n\n                // the properties below are optional\n                Unit = \"unit\"\n            },\n            Period = 123,\n            ReturnData = false\n        } }\n    },\n    MetricName = \"metricName\",\n    Namespace = \"namespace\",\n    SingleMetricAnomalyDetector = new SingleMetricAnomalyDetectorProperty {\n        Dimensions = new [] { new DimensionProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MetricName = \"metricName\",\n        Namespace = \"namespace\",\n        Stat = \"stat\"\n    },\n    Stat = \"stat\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnAnomalyDetector cfnAnomalyDetector = CfnAnomalyDetector.Builder.create(this, \"MyCfnAnomalyDetector\")\n        .configuration(ConfigurationProperty.builder()\n                .excludedTimeRanges(List.of(RangeProperty.builder()\n                        .endTime(\"endTime\")\n                        .startTime(\"startTime\")\n                        .build()))\n                .metricTimeZone(\"metricTimeZone\")\n                .build())\n        .dimensions(List.of(DimensionProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .metricMathAnomalyDetector(MetricMathAnomalyDetectorProperty.builder()\n                .metricDataQueries(List.of(MetricDataQueryProperty.builder()\n                        .id(\"id\")\n\n                        // the properties below are optional\n                        .accountId(\"accountId\")\n                        .expression(\"expression\")\n                        .label(\"label\")\n                        .metricStat(MetricStatProperty.builder()\n                                .metric(MetricProperty.builder()\n                                        .metricName(\"metricName\")\n                                        .namespace(\"namespace\")\n\n                                        // the properties below are optional\n                                        .dimensions(List.of(DimensionProperty.builder()\n                                                .name(\"name\")\n                                                .value(\"value\")\n                                                .build()))\n                                        .build())\n                                .period(123)\n                                .stat(\"stat\")\n\n                                // the properties below are optional\n                                .unit(\"unit\")\n                                .build())\n                        .period(123)\n                        .returnData(false)\n                        .build()))\n                .build())\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n        .singleMetricAnomalyDetector(SingleMetricAnomalyDetectorProperty.builder()\n                .dimensions(List.of(DimensionProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .metricName(\"metricName\")\n                .namespace(\"namespace\")\n                .stat(\"stat\")\n                .build())\n        .stat(\"stat\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnAnomalyDetector := cloudwatch.NewCfnAnomalyDetector(this, jsii.String(\"MyCfnAnomalyDetector\"), &cfnAnomalyDetectorProps{\n\tconfiguration: &configurationProperty{\n\t\texcludedTimeRanges: []interface{}{\n\t\t\t&rangeProperty{\n\t\t\t\tendTime: jsii.String(\"endTime\"),\n\t\t\t\tstartTime: jsii.String(\"startTime\"),\n\t\t\t},\n\t\t},\n\t\tmetricTimeZone: jsii.String(\"metricTimeZone\"),\n\t},\n\tdimensions: []interface{}{\n\t\t&dimensionProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tmetricMathAnomalyDetector: &metricMathAnomalyDetectorProperty{\n\t\tmetricDataQueries: []interface{}{\n\t\t\t&metricDataQueryProperty{\n\t\t\t\tid: jsii.String(\"id\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\taccountId: jsii.String(\"accountId\"),\n\t\t\t\texpression: jsii.String(\"expression\"),\n\t\t\t\tlabel: jsii.String(\"label\"),\n\t\t\t\tmetricStat: &metricStatProperty{\n\t\t\t\t\tmetric: &metricProperty{\n\t\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tdimensions: []interface{}{\n\t\t\t\t\t\t\t&dimensionProperty{\n\t\t\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tperiod: jsii.Number(123),\n\t\t\t\t\tstat: jsii.String(\"stat\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tunit: jsii.String(\"unit\"),\n\t\t\t\t},\n\t\t\t\tperiod: jsii.Number(123),\n\t\t\t\treturnData: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t},\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n\tsingleMetricAnomalyDetector: &singleMetricAnomalyDetectorProperty{\n\t\tdimensions: []interface{}{\n\t\t\t&dimensionProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tmetricName: jsii.String(\"metricName\"),\n\t\tnamespace: jsii.String(\"namespace\"),\n\t\tstat: jsii.String(\"stat\"),\n\t},\n\tstat: jsii.String(\"stat\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnAnomalyDetector = new cloudwatch.CfnAnomalyDetector(this, 'MyCfnAnomalyDetector', /* all optional props */ {\n  configuration: {\n    excludedTimeRanges: [{\n      endTime: 'endTime',\n      startTime: 'startTime',\n    }],\n    metricTimeZone: 'metricTimeZone',\n  },\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricMathAnomalyDetector: {\n    metricDataQueries: [{\n      id: 'id',\n\n      // the properties below are optional\n      accountId: 'accountId',\n      expression: 'expression',\n      label: 'label',\n      metricStat: {\n        metric: {\n          metricName: 'metricName',\n          namespace: 'namespace',\n\n          // the properties below are optional\n          dimensions: [{\n            name: 'name',\n            value: 'value',\n          }],\n        },\n        period: 123,\n        stat: 'stat',\n\n        // the properties below are optional\n        unit: 'unit',\n      },\n      period: 123,\n      returnData: false,\n    }],\n  },\n  metricName: 'metricName',\n  namespace: 'namespace',\n  singleMetricAnomalyDetector: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n    stat: 'stat',\n  },\n  stat: 'stat',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector",
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetectorProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAnomalyDetector = new cloudwatch.CfnAnomalyDetector(this, 'MyCfnAnomalyDetector', /* all optional props */ {\n  configuration: {\n    excludedTimeRanges: [{\n      endTime: 'endTime',\n      startTime: 'startTime',\n    }],\n    metricTimeZone: 'metricTimeZone',\n  },\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricMathAnomalyDetector: {\n    metricDataQueries: [{\n      id: 'id',\n\n      // the properties below are optional\n      accountId: 'accountId',\n      expression: 'expression',\n      label: 'label',\n      metricStat: {\n        metric: {\n          metricName: 'metricName',\n          namespace: 'namespace',\n\n          // the properties below are optional\n          dimensions: [{\n            name: 'name',\n            value: 'value',\n          }],\n        },\n        period: 123,\n        stat: 'stat',\n\n        // the properties below are optional\n        unit: 'unit',\n      },\n      period: 123,\n      returnData: false,\n    }],\n  },\n  metricName: 'metricName',\n  namespace: 'namespace',\n  singleMetricAnomalyDetector: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n    stat: 'stat',\n  },\n  stat: 'stat',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 25,
        "75": 40,
        "91": 1,
        "104": 1,
        "192": 5,
        "193": 11,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 36,
        "290": 1
      },
      "fqnsFingerprint": "ac55f66e901682ed5e213a96e686b07260ac85a8df1a0e5b50a2dcaff9864d81"
    },
    "f6cd5f70162a3cd7ed5211d530b3811cbde806ecfd061813e0e216fd7c6932b6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nconfiguration_property = cloudwatch.CfnAnomalyDetector.ConfigurationProperty(\n    excluded_time_ranges=[cloudwatch.CfnAnomalyDetector.RangeProperty(\n        end_time=\"endTime\",\n        start_time=\"startTime\"\n    )],\n    metric_time_zone=\"metricTimeZone\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nConfigurationProperty configurationProperty = new ConfigurationProperty {\n    ExcludedTimeRanges = new [] { new RangeProperty {\n        EndTime = \"endTime\",\n        StartTime = \"startTime\"\n    } },\n    MetricTimeZone = \"metricTimeZone\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nConfigurationProperty configurationProperty = ConfigurationProperty.builder()\n        .excludedTimeRanges(List.of(RangeProperty.builder()\n                .endTime(\"endTime\")\n                .startTime(\"startTime\")\n                .build()))\n        .metricTimeZone(\"metricTimeZone\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nconfigurationProperty := &configurationProperty{\n\texcludedTimeRanges: []interface{}{\n\t\t&rangeProperty{\n\t\t\tendTime: jsii.String(\"endTime\"),\n\t\t\tstartTime: jsii.String(\"startTime\"),\n\t\t},\n\t},\n\tmetricTimeZone: jsii.String(\"metricTimeZone\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst configurationProperty: cloudwatch.CfnAnomalyDetector.ConfigurationProperty = {\n  excludedTimeRanges: [{\n    endTime: 'endTime',\n    startTime: 'startTime',\n  }],\n  metricTimeZone: 'metricTimeZone',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.ConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.ConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst configurationProperty: cloudwatch.CfnAnomalyDetector.ConfigurationProperty = {\n  excludedTimeRanges: [{\n    endTime: 'endTime',\n    startTime: 'startTime',\n  }],\n  metricTimeZone: 'metricTimeZone',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8b558dd40414843b04c447e10bd0f4825c872d63188824afc3a2f325430f651e"
    },
    "7da447024dc129deff3674450652f37595ebf448468d8461945a3e8956eec720": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ndimension_property = cloudwatch.CfnAnomalyDetector.DimensionProperty(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nDimensionProperty dimensionProperty = new DimensionProperty {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nDimensionProperty dimensionProperty = DimensionProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ndimensionProperty := &dimensionProperty{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst dimensionProperty: cloudwatch.CfnAnomalyDetector.DimensionProperty = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.DimensionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.DimensionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dimensionProperty: cloudwatch.CfnAnomalyDetector.DimensionProperty = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3052710bc90e848cc6dbd63a44a71051c8531bbebf1fddf91d2bb2fa6779103"
    },
    "e69b20fe2dea2df385f512a87472980d322e447cab14f611236c257aad66b68a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_data_query_property = cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty(\n    id=\"id\",\n\n    # the properties below are optional\n    account_id=\"accountId\",\n    expression=\"expression\",\n    label=\"label\",\n    metric_stat=cloudwatch.CfnAnomalyDetector.MetricStatProperty(\n        metric=cloudwatch.CfnAnomalyDetector.MetricProperty(\n            metric_name=\"metricName\",\n            namespace=\"namespace\",\n\n            # the properties below are optional\n            dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n                name=\"name\",\n                value=\"value\"\n            )]\n        ),\n        period=123,\n        stat=\"stat\",\n\n        # the properties below are optional\n        unit=\"unit\"\n    ),\n    period=123,\n    return_data=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricDataQueryProperty metricDataQueryProperty = new MetricDataQueryProperty {\n    Id = \"id\",\n\n    // the properties below are optional\n    AccountId = \"accountId\",\n    Expression = \"expression\",\n    Label = \"label\",\n    MetricStat = new MetricStatProperty {\n        Metric = new MetricProperty {\n            MetricName = \"metricName\",\n            Namespace = \"namespace\",\n\n            // the properties below are optional\n            Dimensions = new [] { new DimensionProperty {\n                Name = \"name\",\n                Value = \"value\"\n            } }\n        },\n        Period = 123,\n        Stat = \"stat\",\n\n        // the properties below are optional\n        Unit = \"unit\"\n    },\n    Period = 123,\n    ReturnData = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricDataQueryProperty metricDataQueryProperty = MetricDataQueryProperty.builder()\n        .id(\"id\")\n\n        // the properties below are optional\n        .accountId(\"accountId\")\n        .expression(\"expression\")\n        .label(\"label\")\n        .metricStat(MetricStatProperty.builder()\n                .metric(MetricProperty.builder()\n                        .metricName(\"metricName\")\n                        .namespace(\"namespace\")\n\n                        // the properties below are optional\n                        .dimensions(List.of(DimensionProperty.builder()\n                                .name(\"name\")\n                                .value(\"value\")\n                                .build()))\n                        .build())\n                .period(123)\n                .stat(\"stat\")\n\n                // the properties below are optional\n                .unit(\"unit\")\n                .build())\n        .period(123)\n        .returnData(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricDataQueryProperty := &metricDataQueryProperty{\n\tid: jsii.String(\"id\"),\n\n\t// the properties below are optional\n\taccountId: jsii.String(\"accountId\"),\n\texpression: jsii.String(\"expression\"),\n\tlabel: jsii.String(\"label\"),\n\tmetricStat: &metricStatProperty{\n\t\tmetric: &metricProperty{\n\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdimensions: []interface{}{\n\t\t\t\t&dimensionProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tperiod: jsii.Number(123),\n\t\tstat: jsii.String(\"stat\"),\n\n\t\t// the properties below are optional\n\t\tunit: jsii.String(\"unit\"),\n\t},\n\tperiod: jsii.Number(123),\n\treturnData: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricDataQueryProperty: cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty = {\n  id: 'id',\n\n  // the properties below are optional\n  accountId: 'accountId',\n  expression: 'expression',\n  label: 'label',\n  metricStat: {\n    metric: {\n      metricName: 'metricName',\n      namespace: 'namespace',\n\n      // the properties below are optional\n      dimensions: [{\n        name: 'name',\n        value: 'value',\n      }],\n    },\n    period: 123,\n    stat: 'stat',\n\n    // the properties below are optional\n    unit: 'unit',\n  },\n  period: 123,\n  returnData: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricDataQueryProperty: cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty = {\n  id: 'id',\n\n  // the properties below are optional\n  accountId: 'accountId',\n  expression: 'expression',\n  label: 'label',\n  metricStat: {\n    metric: {\n      metricName: 'metricName',\n      namespace: 'namespace',\n\n      // the properties below are optional\n      dimensions: [{\n        name: 'name',\n        value: 'value',\n      }],\n    },\n    period: 123,\n    stat: 'stat',\n\n    // the properties below are optional\n    unit: 'unit',\n  },\n  period: 123,\n  returnData: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 21,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "399d95d1bd4d70a87de7c8c427e3d15387fc413dee1e2b7024e32623917d7317"
    },
    "b1159d7da9c632a2b6853420f860d37d32c1c87f10a0ca29ca267952ee3a2539": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_math_anomaly_detector_property = cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty(\n    metric_data_queries=[cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty(\n        id=\"id\",\n\n        # the properties below are optional\n        account_id=\"accountId\",\n        expression=\"expression\",\n        label=\"label\",\n        metric_stat=cloudwatch.CfnAnomalyDetector.MetricStatProperty(\n            metric=cloudwatch.CfnAnomalyDetector.MetricProperty(\n                metric_name=\"metricName\",\n                namespace=\"namespace\",\n\n                # the properties below are optional\n                dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n                    name=\"name\",\n                    value=\"value\"\n                )]\n            ),\n            period=123,\n            stat=\"stat\",\n\n            # the properties below are optional\n            unit=\"unit\"\n        ),\n        period=123,\n        return_data=False\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricMathAnomalyDetectorProperty metricMathAnomalyDetectorProperty = new MetricMathAnomalyDetectorProperty {\n    MetricDataQueries = new [] { new MetricDataQueryProperty {\n        Id = \"id\",\n\n        // the properties below are optional\n        AccountId = \"accountId\",\n        Expression = \"expression\",\n        Label = \"label\",\n        MetricStat = new MetricStatProperty {\n            Metric = new MetricProperty {\n                MetricName = \"metricName\",\n                Namespace = \"namespace\",\n\n                // the properties below are optional\n                Dimensions = new [] { new DimensionProperty {\n                    Name = \"name\",\n                    Value = \"value\"\n                } }\n            },\n            Period = 123,\n            Stat = \"stat\",\n\n            // the properties below are optional\n            Unit = \"unit\"\n        },\n        Period = 123,\n        ReturnData = false\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricMathAnomalyDetectorProperty metricMathAnomalyDetectorProperty = MetricMathAnomalyDetectorProperty.builder()\n        .metricDataQueries(List.of(MetricDataQueryProperty.builder()\n                .id(\"id\")\n\n                // the properties below are optional\n                .accountId(\"accountId\")\n                .expression(\"expression\")\n                .label(\"label\")\n                .metricStat(MetricStatProperty.builder()\n                        .metric(MetricProperty.builder()\n                                .metricName(\"metricName\")\n                                .namespace(\"namespace\")\n\n                                // the properties below are optional\n                                .dimensions(List.of(DimensionProperty.builder()\n                                        .name(\"name\")\n                                        .value(\"value\")\n                                        .build()))\n                                .build())\n                        .period(123)\n                        .stat(\"stat\")\n\n                        // the properties below are optional\n                        .unit(\"unit\")\n                        .build())\n                .period(123)\n                .returnData(false)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricMathAnomalyDetectorProperty := &metricMathAnomalyDetectorProperty{\n\tmetricDataQueries: []interface{}{\n\t\t&metricDataQueryProperty{\n\t\t\tid: jsii.String(\"id\"),\n\n\t\t\t// the properties below are optional\n\t\t\taccountId: jsii.String(\"accountId\"),\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t\tlabel: jsii.String(\"label\"),\n\t\t\tmetricStat: &metricStatProperty{\n\t\t\t\tmetric: &metricProperty{\n\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tdimensions: []interface{}{\n\t\t\t\t\t\t&dimensionProperty{\n\t\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tperiod: jsii.Number(123),\n\t\t\t\tstat: jsii.String(\"stat\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tunit: jsii.String(\"unit\"),\n\t\t\t},\n\t\t\tperiod: jsii.Number(123),\n\t\t\treturnData: jsii.Boolean(false),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricMathAnomalyDetectorProperty: cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty = {\n  metricDataQueries: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        metricName: 'metricName',\n        namespace: 'namespace',\n\n        // the properties below are optional\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricMathAnomalyDetectorProperty: cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty = {\n  metricDataQueries: [{\n    id: 'id',\n\n    // the properties below are optional\n    accountId: 'accountId',\n    expression: 'expression',\n    label: 'label',\n    metricStat: {\n      metric: {\n        metricName: 'metricName',\n        namespace: 'namespace',\n\n        // the properties below are optional\n        dimensions: [{\n          name: 'name',\n          value: 'value',\n        }],\n      },\n      period: 123,\n      stat: 'stat',\n\n      // the properties below are optional\n      unit: 'unit',\n    },\n    period: 123,\n    returnData: false,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 22,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "ff98bf4baf41f8772f7230967268bebf00876ba87e2a8249823e77232f4c682a"
    },
    "7032cb3657056cea1687cae5f105636971f46f5c2882b822b4e4b5a6d7eddb74": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_property = cloudwatch.CfnAnomalyDetector.MetricProperty(\n    metric_name=\"metricName\",\n    namespace=\"namespace\",\n\n    # the properties below are optional\n    dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n        name=\"name\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricProperty metricProperty = new MetricProperty {\n    MetricName = \"metricName\",\n    Namespace = \"namespace\",\n\n    // the properties below are optional\n    Dimensions = new [] { new DimensionProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricProperty metricProperty = MetricProperty.builder()\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n\n        // the properties below are optional\n        .dimensions(List.of(DimensionProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricProperty := &metricProperty{\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n\n\t// the properties below are optional\n\tdimensions: []interface{}{\n\t\t&dimensionProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricProperty: cloudwatch.CfnAnomalyDetector.MetricProperty = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n\n  // the properties below are optional\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricProperty: cloudwatch.CfnAnomalyDetector.MetricProperty = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n\n  // the properties below are optional\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "96b66d24ed9e8313939f2302e3618ae1517ecf7f2b3424f7e80f7d4cc07ed9f4"
    },
    "f237d37fa4f16cc990fec3aed90d03240407d443f5a694bf84f342a728a0f0d4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_stat_property = cloudwatch.CfnAnomalyDetector.MetricStatProperty(\n    metric=cloudwatch.CfnAnomalyDetector.MetricProperty(\n        metric_name=\"metricName\",\n        namespace=\"namespace\",\n\n        # the properties below are optional\n        dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n            name=\"name\",\n            value=\"value\"\n        )]\n    ),\n    period=123,\n    stat=\"stat\",\n\n    # the properties below are optional\n    unit=\"unit\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricStatProperty metricStatProperty = new MetricStatProperty {\n    Metric = new MetricProperty {\n        MetricName = \"metricName\",\n        Namespace = \"namespace\",\n\n        // the properties below are optional\n        Dimensions = new [] { new DimensionProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } }\n    },\n    Period = 123,\n    Stat = \"stat\",\n\n    // the properties below are optional\n    Unit = \"unit\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricStatProperty metricStatProperty = MetricStatProperty.builder()\n        .metric(MetricProperty.builder()\n                .metricName(\"metricName\")\n                .namespace(\"namespace\")\n\n                // the properties below are optional\n                .dimensions(List.of(DimensionProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .build())\n        .period(123)\n        .stat(\"stat\")\n\n        // the properties below are optional\n        .unit(\"unit\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricStatProperty := &metricStatProperty{\n\tmetric: &metricProperty{\n\t\tmetricName: jsii.String(\"metricName\"),\n\t\tnamespace: jsii.String(\"namespace\"),\n\n\t\t// the properties below are optional\n\t\tdimensions: []interface{}{\n\t\t\t&dimensionProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t},\n\tperiod: jsii.Number(123),\n\tstat: jsii.String(\"stat\"),\n\n\t// the properties below are optional\n\tunit: jsii.String(\"unit\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStatProperty: cloudwatch.CfnAnomalyDetector.MetricStatProperty = {\n  metric: {\n    metricName: 'metricName',\n    namespace: 'namespace',\n\n    // the properties below are optional\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n  },\n  period: 123,\n  stat: 'stat',\n\n  // the properties below are optional\n  unit: 'unit',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricStatProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.MetricStatProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricStatProperty: cloudwatch.CfnAnomalyDetector.MetricStatProperty = {\n  metric: {\n    metricName: 'metricName',\n    namespace: 'namespace',\n\n    // the properties below are optional\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n  },\n  period: 123,\n  stat: 'stat',\n\n  // the properties below are optional\n  unit: 'unit',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 14,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "cd132cc06352fbe46cb397757f48eb4df3b90d9d15eb675ccbe90fddc740d589"
    },
    "219c594503bd3efc349fb91c152c6d0ac2d67e6701761af00eae2856a66d238f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nrange_property = cloudwatch.CfnAnomalyDetector.RangeProperty(\n    end_time=\"endTime\",\n    start_time=\"startTime\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nRangeProperty rangeProperty = new RangeProperty {\n    EndTime = \"endTime\",\n    StartTime = \"startTime\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nRangeProperty rangeProperty = RangeProperty.builder()\n        .endTime(\"endTime\")\n        .startTime(\"startTime\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nrangeProperty := &rangeProperty{\n\tendTime: jsii.String(\"endTime\"),\n\tstartTime: jsii.String(\"startTime\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst rangeProperty: cloudwatch.CfnAnomalyDetector.RangeProperty = {\n  endTime: 'endTime',\n  startTime: 'startTime',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.RangeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.RangeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rangeProperty: cloudwatch.CfnAnomalyDetector.RangeProperty = {\n  endTime: 'endTime',\n  startTime: 'startTime',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "93aee829c116a7ac41821d3484ed70363698ddeba6122188592487fd84d2cfc7"
    },
    "3b74f70ef75dc4fdabd0765eb22349176674c605eba929eeef6ef3e39fd114ce": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nsingle_metric_anomaly_detector_property = cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty(\n    dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    metric_name=\"metricName\",\n    namespace=\"namespace\",\n    stat=\"stat\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nSingleMetricAnomalyDetectorProperty singleMetricAnomalyDetectorProperty = new SingleMetricAnomalyDetectorProperty {\n    Dimensions = new [] { new DimensionProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    MetricName = \"metricName\",\n    Namespace = \"namespace\",\n    Stat = \"stat\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nSingleMetricAnomalyDetectorProperty singleMetricAnomalyDetectorProperty = SingleMetricAnomalyDetectorProperty.builder()\n        .dimensions(List.of(DimensionProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n        .stat(\"stat\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nsingleMetricAnomalyDetectorProperty := &singleMetricAnomalyDetectorProperty{\n\tdimensions: []interface{}{\n\t\t&dimensionProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n\tstat: jsii.String(\"stat\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst singleMetricAnomalyDetectorProperty: cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty = {\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricName: 'metricName',\n  namespace: 'namespace',\n  stat: 'stat',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst singleMetricAnomalyDetectorProperty: cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty = {\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricName: 'metricName',\n  namespace: 'namespace',\n  stat: 'stat',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "5ecf8b0891a24f60ea702e24bf4a4a6be2fecd3b57713212930b529113761eb7"
    },
    "e3456d8866016d6faf96ba556728aca25dc63b8f9d6e36235ec4da715c4e0e15": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_anomaly_detector_props = cloudwatch.CfnAnomalyDetectorProps(\n    configuration=cloudwatch.CfnAnomalyDetector.ConfigurationProperty(\n        excluded_time_ranges=[cloudwatch.CfnAnomalyDetector.RangeProperty(\n            end_time=\"endTime\",\n            start_time=\"startTime\"\n        )],\n        metric_time_zone=\"metricTimeZone\"\n    ),\n    dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    metric_math_anomaly_detector=cloudwatch.CfnAnomalyDetector.MetricMathAnomalyDetectorProperty(\n        metric_data_queries=[cloudwatch.CfnAnomalyDetector.MetricDataQueryProperty(\n            id=\"id\",\n\n            # the properties below are optional\n            account_id=\"accountId\",\n            expression=\"expression\",\n            label=\"label\",\n            metric_stat=cloudwatch.CfnAnomalyDetector.MetricStatProperty(\n                metric=cloudwatch.CfnAnomalyDetector.MetricProperty(\n                    metric_name=\"metricName\",\n                    namespace=\"namespace\",\n\n                    # the properties below are optional\n                    dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n                        name=\"name\",\n                        value=\"value\"\n                    )]\n                ),\n                period=123,\n                stat=\"stat\",\n\n                # the properties below are optional\n                unit=\"unit\"\n            ),\n            period=123,\n            return_data=False\n        )]\n    ),\n    metric_name=\"metricName\",\n    namespace=\"namespace\",\n    single_metric_anomaly_detector=cloudwatch.CfnAnomalyDetector.SingleMetricAnomalyDetectorProperty(\n        dimensions=[cloudwatch.CfnAnomalyDetector.DimensionProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        metric_name=\"metricName\",\n        namespace=\"namespace\",\n        stat=\"stat\"\n    ),\n    stat=\"stat\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnAnomalyDetectorProps cfnAnomalyDetectorProps = new CfnAnomalyDetectorProps {\n    Configuration = new ConfigurationProperty {\n        ExcludedTimeRanges = new [] { new RangeProperty {\n            EndTime = \"endTime\",\n            StartTime = \"startTime\"\n        } },\n        MetricTimeZone = \"metricTimeZone\"\n    },\n    Dimensions = new [] { new DimensionProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    MetricMathAnomalyDetector = new MetricMathAnomalyDetectorProperty {\n        MetricDataQueries = new [] { new MetricDataQueryProperty {\n            Id = \"id\",\n\n            // the properties below are optional\n            AccountId = \"accountId\",\n            Expression = \"expression\",\n            Label = \"label\",\n            MetricStat = new MetricStatProperty {\n                Metric = new MetricProperty {\n                    MetricName = \"metricName\",\n                    Namespace = \"namespace\",\n\n                    // the properties below are optional\n                    Dimensions = new [] { new DimensionProperty {\n                        Name = \"name\",\n                        Value = \"value\"\n                    } }\n                },\n                Period = 123,\n                Stat = \"stat\",\n\n                // the properties below are optional\n                Unit = \"unit\"\n            },\n            Period = 123,\n            ReturnData = false\n        } }\n    },\n    MetricName = \"metricName\",\n    Namespace = \"namespace\",\n    SingleMetricAnomalyDetector = new SingleMetricAnomalyDetectorProperty {\n        Dimensions = new [] { new DimensionProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MetricName = \"metricName\",\n        Namespace = \"namespace\",\n        Stat = \"stat\"\n    },\n    Stat = \"stat\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnAnomalyDetectorProps cfnAnomalyDetectorProps = CfnAnomalyDetectorProps.builder()\n        .configuration(ConfigurationProperty.builder()\n                .excludedTimeRanges(List.of(RangeProperty.builder()\n                        .endTime(\"endTime\")\n                        .startTime(\"startTime\")\n                        .build()))\n                .metricTimeZone(\"metricTimeZone\")\n                .build())\n        .dimensions(List.of(DimensionProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .metricMathAnomalyDetector(MetricMathAnomalyDetectorProperty.builder()\n                .metricDataQueries(List.of(MetricDataQueryProperty.builder()\n                        .id(\"id\")\n\n                        // the properties below are optional\n                        .accountId(\"accountId\")\n                        .expression(\"expression\")\n                        .label(\"label\")\n                        .metricStat(MetricStatProperty.builder()\n                                .metric(MetricProperty.builder()\n                                        .metricName(\"metricName\")\n                                        .namespace(\"namespace\")\n\n                                        // the properties below are optional\n                                        .dimensions(List.of(DimensionProperty.builder()\n                                                .name(\"name\")\n                                                .value(\"value\")\n                                                .build()))\n                                        .build())\n                                .period(123)\n                                .stat(\"stat\")\n\n                                // the properties below are optional\n                                .unit(\"unit\")\n                                .build())\n                        .period(123)\n                        .returnData(false)\n                        .build()))\n                .build())\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n        .singleMetricAnomalyDetector(SingleMetricAnomalyDetectorProperty.builder()\n                .dimensions(List.of(DimensionProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .metricName(\"metricName\")\n                .namespace(\"namespace\")\n                .stat(\"stat\")\n                .build())\n        .stat(\"stat\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnAnomalyDetectorProps := &cfnAnomalyDetectorProps{\n\tconfiguration: &configurationProperty{\n\t\texcludedTimeRanges: []interface{}{\n\t\t\t&rangeProperty{\n\t\t\t\tendTime: jsii.String(\"endTime\"),\n\t\t\t\tstartTime: jsii.String(\"startTime\"),\n\t\t\t},\n\t\t},\n\t\tmetricTimeZone: jsii.String(\"metricTimeZone\"),\n\t},\n\tdimensions: []interface{}{\n\t\t&dimensionProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tmetricMathAnomalyDetector: &metricMathAnomalyDetectorProperty{\n\t\tmetricDataQueries: []interface{}{\n\t\t\t&metricDataQueryProperty{\n\t\t\t\tid: jsii.String(\"id\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\taccountId: jsii.String(\"accountId\"),\n\t\t\t\texpression: jsii.String(\"expression\"),\n\t\t\t\tlabel: jsii.String(\"label\"),\n\t\t\t\tmetricStat: &metricStatProperty{\n\t\t\t\t\tmetric: &metricProperty{\n\t\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tdimensions: []interface{}{\n\t\t\t\t\t\t\t&dimensionProperty{\n\t\t\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tperiod: jsii.Number(123),\n\t\t\t\t\tstat: jsii.String(\"stat\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tunit: jsii.String(\"unit\"),\n\t\t\t\t},\n\t\t\t\tperiod: jsii.Number(123),\n\t\t\t\treturnData: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t},\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n\tsingleMetricAnomalyDetector: &singleMetricAnomalyDetectorProperty{\n\t\tdimensions: []interface{}{\n\t\t\t&dimensionProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tmetricName: jsii.String(\"metricName\"),\n\t\tnamespace: jsii.String(\"namespace\"),\n\t\tstat: jsii.String(\"stat\"),\n\t},\n\tstat: jsii.String(\"stat\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnAnomalyDetectorProps: cloudwatch.CfnAnomalyDetectorProps = {\n  configuration: {\n    excludedTimeRanges: [{\n      endTime: 'endTime',\n      startTime: 'startTime',\n    }],\n    metricTimeZone: 'metricTimeZone',\n  },\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricMathAnomalyDetector: {\n    metricDataQueries: [{\n      id: 'id',\n\n      // the properties below are optional\n      accountId: 'accountId',\n      expression: 'expression',\n      label: 'label',\n      metricStat: {\n        metric: {\n          metricName: 'metricName',\n          namespace: 'namespace',\n\n          // the properties below are optional\n          dimensions: [{\n            name: 'name',\n            value: 'value',\n          }],\n        },\n        period: 123,\n        stat: 'stat',\n\n        // the properties below are optional\n        unit: 'unit',\n      },\n      period: 123,\n      returnData: false,\n    }],\n  },\n  metricName: 'metricName',\n  namespace: 'namespace',\n  singleMetricAnomalyDetector: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n    stat: 'stat',\n  },\n  stat: 'stat',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnAnomalyDetectorProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnAnomalyDetectorProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAnomalyDetectorProps: cloudwatch.CfnAnomalyDetectorProps = {\n  configuration: {\n    excludedTimeRanges: [{\n      endTime: 'endTime',\n      startTime: 'startTime',\n    }],\n    metricTimeZone: 'metricTimeZone',\n  },\n  dimensions: [{\n    name: 'name',\n    value: 'value',\n  }],\n  metricMathAnomalyDetector: {\n    metricDataQueries: [{\n      id: 'id',\n\n      // the properties below are optional\n      accountId: 'accountId',\n      expression: 'expression',\n      label: 'label',\n      metricStat: {\n        metric: {\n          metricName: 'metricName',\n          namespace: 'namespace',\n\n          // the properties below are optional\n          dimensions: [{\n            name: 'name',\n            value: 'value',\n          }],\n        },\n        period: 123,\n        stat: 'stat',\n\n        // the properties below are optional\n        unit: 'unit',\n      },\n      period: 123,\n      returnData: false,\n    }],\n  },\n  metricName: 'metricName',\n  namespace: 'namespace',\n  singleMetricAnomalyDetector: {\n    dimensions: [{\n      name: 'name',\n      value: 'value',\n    }],\n    metricName: 'metricName',\n    namespace: 'namespace',\n    stat: 'stat',\n  },\n  stat: 'stat',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 24,
        "75": 40,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 36,
        "290": 1
      },
      "fqnsFingerprint": "8c6485cf4f28727545b9cd87f31d712ff5eafe851116bdf2b9312998eee04876"
    },
    "2f447b3be7bd252eb3014d3ea3a440bf4c1ac3288dfcb65e1b44d1660faa4149": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_composite_alarm = cloudwatch.CfnCompositeAlarm(self, \"MyCfnCompositeAlarm\",\n    alarm_name=\"alarmName\",\n    alarm_rule=\"alarmRule\",\n\n    # the properties below are optional\n    actions_enabled=False,\n    alarm_actions=[\"alarmActions\"],\n    alarm_description=\"alarmDescription\",\n    insufficient_data_actions=[\"insufficientDataActions\"],\n    ok_actions=[\"okActions\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnCompositeAlarm cfnCompositeAlarm = new CfnCompositeAlarm(this, \"MyCfnCompositeAlarm\", new CfnCompositeAlarmProps {\n    AlarmName = \"alarmName\",\n    AlarmRule = \"alarmRule\",\n\n    // the properties below are optional\n    ActionsEnabled = false,\n    AlarmActions = new [] { \"alarmActions\" },\n    AlarmDescription = \"alarmDescription\",\n    InsufficientDataActions = new [] { \"insufficientDataActions\" },\n    OkActions = new [] { \"okActions\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnCompositeAlarm cfnCompositeAlarm = CfnCompositeAlarm.Builder.create(this, \"MyCfnCompositeAlarm\")\n        .alarmName(\"alarmName\")\n        .alarmRule(\"alarmRule\")\n\n        // the properties below are optional\n        .actionsEnabled(false)\n        .alarmActions(List.of(\"alarmActions\"))\n        .alarmDescription(\"alarmDescription\")\n        .insufficientDataActions(List.of(\"insufficientDataActions\"))\n        .okActions(List.of(\"okActions\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnCompositeAlarm := cloudwatch.NewCfnCompositeAlarm(this, jsii.String(\"MyCfnCompositeAlarm\"), &cfnCompositeAlarmProps{\n\talarmName: jsii.String(\"alarmName\"),\n\talarmRule: jsii.String(\"alarmRule\"),\n\n\t// the properties below are optional\n\tactionsEnabled: jsii.Boolean(false),\n\talarmActions: []*string{\n\t\tjsii.String(\"alarmActions\"),\n\t},\n\talarmDescription: jsii.String(\"alarmDescription\"),\n\tinsufficientDataActions: []*string{\n\t\tjsii.String(\"insufficientDataActions\"),\n\t},\n\tokActions: []*string{\n\t\tjsii.String(\"okActions\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnCompositeAlarm = new cloudwatch.CfnCompositeAlarm(this, 'MyCfnCompositeAlarm', {\n  alarmName: 'alarmName',\n  alarmRule: 'alarmRule',\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  insufficientDataActions: ['insufficientDataActions'],\n  okActions: ['okActions'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnCompositeAlarm"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnCompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CfnCompositeAlarmProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCompositeAlarm = new cloudwatch.CfnCompositeAlarm(this, 'MyCfnCompositeAlarm', {\n  alarmName: 'alarmName',\n  alarmRule: 'alarmRule',\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  insufficientDataActions: ['insufficientDataActions'],\n  okActions: ['okActions'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 11,
        "91": 1,
        "104": 1,
        "192": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9f6cc1ae0145c023a86ecacabba0efbd3f270d82f3b7d06c2e8773124b37954a"
    },
    "eb96b2275c355addb187a0e5814cc5c9b9913d5486b6870622f7fcbba5674496": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_composite_alarm_props = cloudwatch.CfnCompositeAlarmProps(\n    alarm_name=\"alarmName\",\n    alarm_rule=\"alarmRule\",\n\n    # the properties below are optional\n    actions_enabled=False,\n    alarm_actions=[\"alarmActions\"],\n    alarm_description=\"alarmDescription\",\n    insufficient_data_actions=[\"insufficientDataActions\"],\n    ok_actions=[\"okActions\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnCompositeAlarmProps cfnCompositeAlarmProps = new CfnCompositeAlarmProps {\n    AlarmName = \"alarmName\",\n    AlarmRule = \"alarmRule\",\n\n    // the properties below are optional\n    ActionsEnabled = false,\n    AlarmActions = new [] { \"alarmActions\" },\n    AlarmDescription = \"alarmDescription\",\n    InsufficientDataActions = new [] { \"insufficientDataActions\" },\n    OkActions = new [] { \"okActions\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnCompositeAlarmProps cfnCompositeAlarmProps = CfnCompositeAlarmProps.builder()\n        .alarmName(\"alarmName\")\n        .alarmRule(\"alarmRule\")\n\n        // the properties below are optional\n        .actionsEnabled(false)\n        .alarmActions(List.of(\"alarmActions\"))\n        .alarmDescription(\"alarmDescription\")\n        .insufficientDataActions(List.of(\"insufficientDataActions\"))\n        .okActions(List.of(\"okActions\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnCompositeAlarmProps := &cfnCompositeAlarmProps{\n\talarmName: jsii.String(\"alarmName\"),\n\talarmRule: jsii.String(\"alarmRule\"),\n\n\t// the properties below are optional\n\tactionsEnabled: jsii.Boolean(false),\n\talarmActions: []*string{\n\t\tjsii.String(\"alarmActions\"),\n\t},\n\talarmDescription: jsii.String(\"alarmDescription\"),\n\tinsufficientDataActions: []*string{\n\t\tjsii.String(\"insufficientDataActions\"),\n\t},\n\tokActions: []*string{\n\t\tjsii.String(\"okActions\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnCompositeAlarmProps: cloudwatch.CfnCompositeAlarmProps = {\n  alarmName: 'alarmName',\n  alarmRule: 'alarmRule',\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  insufficientDataActions: ['insufficientDataActions'],\n  okActions: ['okActions'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnCompositeAlarmProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnCompositeAlarmProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCompositeAlarmProps: cloudwatch.CfnCompositeAlarmProps = {\n  alarmName: 'alarmName',\n  alarmRule: 'alarmRule',\n\n  // the properties below are optional\n  actionsEnabled: false,\n  alarmActions: ['alarmActions'],\n  alarmDescription: 'alarmDescription',\n  insufficientDataActions: ['insufficientDataActions'],\n  okActions: ['okActions'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 11,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "2d7abd9eb092c84296a42348e38b092d2f02bfc0fd1cfa22914445be6eea414f"
    },
    "3d842624bfe652636f25d827fbf61e15e4da3292f2a582cfe41d78faa050f1ac": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_dashboard = cloudwatch.CfnDashboard(self, \"MyCfnDashboard\",\n    dashboard_body=\"dashboardBody\",\n\n    # the properties below are optional\n    dashboard_name=\"dashboardName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnDashboard cfnDashboard = new CfnDashboard(this, \"MyCfnDashboard\", new CfnDashboardProps {\n    DashboardBody = \"dashboardBody\",\n\n    // the properties below are optional\n    DashboardName = \"dashboardName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnDashboard cfnDashboard = CfnDashboard.Builder.create(this, \"MyCfnDashboard\")\n        .dashboardBody(\"dashboardBody\")\n\n        // the properties below are optional\n        .dashboardName(\"dashboardName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnDashboard := cloudwatch.NewCfnDashboard(this, jsii.String(\"MyCfnDashboard\"), &cfnDashboardProps{\n\tdashboardBody: jsii.String(\"dashboardBody\"),\n\n\t// the properties below are optional\n\tdashboardName: jsii.String(\"dashboardName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnDashboard = new cloudwatch.CfnDashboard(this, 'MyCfnDashboard', {\n  dashboardBody: 'dashboardBody',\n\n  // the properties below are optional\n  dashboardName: 'dashboardName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnDashboard"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnDashboard",
        "@aws-cdk/aws-cloudwatch.CfnDashboardProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDashboard = new cloudwatch.CfnDashboard(this, 'MyCfnDashboard', {\n  dashboardBody: 'dashboardBody',\n\n  // the properties below are optional\n  dashboardName: 'dashboardName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ff2a037f58dc0253dff89e702ca454e36d1d13c74d9ac6a2eb36bb825c9dcdec"
    },
    "595d4a7d4a0f90ed2c482b8b7d291fba1a2f3d58469e4a0b08aa320bc62ef247": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_dashboard_props = cloudwatch.CfnDashboardProps(\n    dashboard_body=\"dashboardBody\",\n\n    # the properties below are optional\n    dashboard_name=\"dashboardName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnDashboardProps cfnDashboardProps = new CfnDashboardProps {\n    DashboardBody = \"dashboardBody\",\n\n    // the properties below are optional\n    DashboardName = \"dashboardName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnDashboardProps cfnDashboardProps = CfnDashboardProps.builder()\n        .dashboardBody(\"dashboardBody\")\n\n        // the properties below are optional\n        .dashboardName(\"dashboardName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnDashboardProps := &cfnDashboardProps{\n\tdashboardBody: jsii.String(\"dashboardBody\"),\n\n\t// the properties below are optional\n\tdashboardName: jsii.String(\"dashboardName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnDashboardProps: cloudwatch.CfnDashboardProps = {\n  dashboardBody: 'dashboardBody',\n\n  // the properties below are optional\n  dashboardName: 'dashboardName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnDashboardProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnDashboardProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDashboardProps: cloudwatch.CfnDashboardProps = {\n  dashboardBody: 'dashboardBody',\n\n  // the properties below are optional\n  dashboardName: 'dashboardName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3f77a16df544f10a994826aa13e0690f412057dc730b1f322ace9ed950dd389f"
    },
    "f38b022027a4ab7eecbc10252d48ae69bc138aaac493bd8deaf5de0c448d93ef": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_insight_rule = cloudwatch.CfnInsightRule(self, \"MyCfnInsightRule\",\n    rule_body=\"ruleBody\",\n    rule_name=\"ruleName\",\n    rule_state=\"ruleState\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnInsightRule cfnInsightRule = new CfnInsightRule(this, \"MyCfnInsightRule\", new CfnInsightRuleProps {\n    RuleBody = \"ruleBody\",\n    RuleName = \"ruleName\",\n    RuleState = \"ruleState\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnInsightRule cfnInsightRule = CfnInsightRule.Builder.create(this, \"MyCfnInsightRule\")\n        .ruleBody(\"ruleBody\")\n        .ruleName(\"ruleName\")\n        .ruleState(\"ruleState\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnInsightRule := cloudwatch.NewCfnInsightRule(this, jsii.String(\"MyCfnInsightRule\"), &cfnInsightRuleProps{\n\truleBody: jsii.String(\"ruleBody\"),\n\truleName: jsii.String(\"ruleName\"),\n\truleState: jsii.String(\"ruleState\"),\n\n\t// the properties below are optional\n\ttags: []interface{}{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnInsightRule = new cloudwatch.CfnInsightRule(this, 'MyCfnInsightRule', {\n  ruleBody: 'ruleBody',\n  ruleName: 'ruleName',\n  ruleState: 'ruleState',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnInsightRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnInsightRule",
        "@aws-cdk/aws-cloudwatch.CfnInsightRuleProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnInsightRule = new cloudwatch.CfnInsightRule(this, 'MyCfnInsightRule', {\n  ruleBody: 'ruleBody',\n  ruleName: 'ruleName',\n  ruleState: 'ruleState',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "f4f3f891a334487fad57a568e267b864777712bdea839495b815672f7e9965d1"
    },
    "a321c877404a98cb9e07b037f16ddf98aba62902eb24d32ab3de1622a815d588": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_insight_rule_props = cloudwatch.CfnInsightRuleProps(\n    rule_body=\"ruleBody\",\n    rule_name=\"ruleName\",\n    rule_state=\"ruleState\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnInsightRuleProps cfnInsightRuleProps = new CfnInsightRuleProps {\n    RuleBody = \"ruleBody\",\n    RuleName = \"ruleName\",\n    RuleState = \"ruleState\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnInsightRuleProps cfnInsightRuleProps = CfnInsightRuleProps.builder()\n        .ruleBody(\"ruleBody\")\n        .ruleName(\"ruleName\")\n        .ruleState(\"ruleState\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnInsightRuleProps := &cfnInsightRuleProps{\n\truleBody: jsii.String(\"ruleBody\"),\n\truleName: jsii.String(\"ruleName\"),\n\truleState: jsii.String(\"ruleState\"),\n\n\t// the properties below are optional\n\ttags: []interface{}{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnInsightRuleProps: cloudwatch.CfnInsightRuleProps = {\n  ruleBody: 'ruleBody',\n  ruleName: 'ruleName',\n  ruleState: 'ruleState',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnInsightRuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnInsightRuleProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnInsightRuleProps: cloudwatch.CfnInsightRuleProps = {\n  ruleBody: 'ruleBody',\n  ruleName: 'ruleName',\n  ruleState: 'ruleState',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "f61a327cdd1cbba15f0ffb4da08aa5b9d34ec610ea38dac0677117cc35ce9409"
    },
    "4b06c06e71d1c0f64446807bba0498cbd435d74f9b078f7b72539a9e8a370041": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_metric_stream = cloudwatch.CfnMetricStream(self, \"MyCfnMetricStream\",\n    firehose_arn=\"firehoseArn\",\n    output_format=\"outputFormat\",\n    role_arn=\"roleArn\",\n\n    # the properties below are optional\n    exclude_filters=[cloudwatch.CfnMetricStream.MetricStreamFilterProperty(\n        namespace=\"namespace\"\n    )],\n    include_filters=[cloudwatch.CfnMetricStream.MetricStreamFilterProperty(\n        namespace=\"namespace\"\n    )],\n    name=\"name\",\n    statistics_configurations=[cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty(\n        additional_statistics=[\"additionalStatistics\"],\n        include_metrics=[cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty(\n            metric_name=\"metricName\",\n            namespace=\"namespace\"\n        )]\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnMetricStream cfnMetricStream = new CfnMetricStream(this, \"MyCfnMetricStream\", new CfnMetricStreamProps {\n    FirehoseArn = \"firehoseArn\",\n    OutputFormat = \"outputFormat\",\n    RoleArn = \"roleArn\",\n\n    // the properties below are optional\n    ExcludeFilters = new [] { new MetricStreamFilterProperty {\n        Namespace = \"namespace\"\n    } },\n    IncludeFilters = new [] { new MetricStreamFilterProperty {\n        Namespace = \"namespace\"\n    } },\n    Name = \"name\",\n    StatisticsConfigurations = new [] { new MetricStreamStatisticsConfigurationProperty {\n        AdditionalStatistics = new [] { \"additionalStatistics\" },\n        IncludeMetrics = new [] { new MetricStreamStatisticsMetricProperty {\n            MetricName = \"metricName\",\n            Namespace = \"namespace\"\n        } }\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnMetricStream cfnMetricStream = CfnMetricStream.Builder.create(this, \"MyCfnMetricStream\")\n        .firehoseArn(\"firehoseArn\")\n        .outputFormat(\"outputFormat\")\n        .roleArn(\"roleArn\")\n\n        // the properties below are optional\n        .excludeFilters(List.of(MetricStreamFilterProperty.builder()\n                .namespace(\"namespace\")\n                .build()))\n        .includeFilters(List.of(MetricStreamFilterProperty.builder()\n                .namespace(\"namespace\")\n                .build()))\n        .name(\"name\")\n        .statisticsConfigurations(List.of(MetricStreamStatisticsConfigurationProperty.builder()\n                .additionalStatistics(List.of(\"additionalStatistics\"))\n                .includeMetrics(List.of(MetricStreamStatisticsMetricProperty.builder()\n                        .metricName(\"metricName\")\n                        .namespace(\"namespace\")\n                        .build()))\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnMetricStream := cloudwatch.NewCfnMetricStream(this, jsii.String(\"MyCfnMetricStream\"), &cfnMetricStreamProps{\n\tfirehoseArn: jsii.String(\"firehoseArn\"),\n\toutputFormat: jsii.String(\"outputFormat\"),\n\troleArn: jsii.String(\"roleArn\"),\n\n\t// the properties below are optional\n\texcludeFilters: []interface{}{\n\t\t&metricStreamFilterProperty{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t},\n\t},\n\tincludeFilters: []interface{}{\n\t\t&metricStreamFilterProperty{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tstatisticsConfigurations: []interface{}{\n\t\t&metricStreamStatisticsConfigurationProperty{\n\t\t\tadditionalStatistics: []*string{\n\t\t\t\tjsii.String(\"additionalStatistics\"),\n\t\t\t},\n\t\t\tincludeMetrics: []interface{}{\n\t\t\t\t&metricStreamStatisticsMetricProperty{\n\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnMetricStream = new cloudwatch.CfnMetricStream(this, 'MyCfnMetricStream', {\n  firehoseArn: 'firehoseArn',\n  outputFormat: 'outputFormat',\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  excludeFilters: [{\n    namespace: 'namespace',\n  }],\n  includeFilters: [{\n    namespace: 'namespace',\n  }],\n  name: 'name',\n  statisticsConfigurations: [{\n    additionalStatistics: ['additionalStatistics'],\n    includeMetrics: [{\n      metricName: 'metricName',\n      namespace: 'namespace',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnMetricStream",
        "@aws-cdk/aws-cloudwatch.CfnMetricStreamProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMetricStream = new cloudwatch.CfnMetricStream(this, 'MyCfnMetricStream', {\n  firehoseArn: 'firehoseArn',\n  outputFormat: 'outputFormat',\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  excludeFilters: [{\n    namespace: 'namespace',\n  }],\n  includeFilters: [{\n    namespace: 'namespace',\n  }],\n  name: 'name',\n  statisticsConfigurations: [{\n    additionalStatistics: ['additionalStatistics'],\n    includeMetrics: [{\n      metricName: 'metricName',\n      namespace: 'namespace',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 13,
        "75": 20,
        "104": 1,
        "192": 6,
        "193": 6,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "71b7257e8adf747b74d6a4bdcd54716fe9e2b43cba1b567551cc248c497188b1"
    },
    "b5269680d0bef49e3170637f86d803c345aed11a6bc89f66b2b9a71e6e1ea613": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_stream_filter_property = cloudwatch.CfnMetricStream.MetricStreamFilterProperty(\n    namespace=\"namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricStreamFilterProperty metricStreamFilterProperty = new MetricStreamFilterProperty {\n    Namespace = \"namespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricStreamFilterProperty metricStreamFilterProperty = MetricStreamFilterProperty.builder()\n        .namespace(\"namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricStreamFilterProperty := &metricStreamFilterProperty{\n\tnamespace: jsii.String(\"namespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStreamFilterProperty: cloudwatch.CfnMetricStream.MetricStreamFilterProperty = {\n  namespace: 'namespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamFilterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamFilterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricStreamFilterProperty: cloudwatch.CfnMetricStream.MetricStreamFilterProperty = {\n  namespace: 'namespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "77d983042da41e287521462d8ac5f5b9269e96dd4ec642a45e34818cd81a4029"
    },
    "e3631cb41d5ae94c2776f747b1679d793fd3ca85ba1ce50c7a763d3a7ecda232": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_stream_statistics_configuration_property = cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty(\n    additional_statistics=[\"additionalStatistics\"],\n    include_metrics=[cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty(\n        metric_name=\"metricName\",\n        namespace=\"namespace\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricStreamStatisticsConfigurationProperty metricStreamStatisticsConfigurationProperty = new MetricStreamStatisticsConfigurationProperty {\n    AdditionalStatistics = new [] { \"additionalStatistics\" },\n    IncludeMetrics = new [] { new MetricStreamStatisticsMetricProperty {\n        MetricName = \"metricName\",\n        Namespace = \"namespace\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricStreamStatisticsConfigurationProperty metricStreamStatisticsConfigurationProperty = MetricStreamStatisticsConfigurationProperty.builder()\n        .additionalStatistics(List.of(\"additionalStatistics\"))\n        .includeMetrics(List.of(MetricStreamStatisticsMetricProperty.builder()\n                .metricName(\"metricName\")\n                .namespace(\"namespace\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricStreamStatisticsConfigurationProperty := &metricStreamStatisticsConfigurationProperty{\n\tadditionalStatistics: []*string{\n\t\tjsii.String(\"additionalStatistics\"),\n\t},\n\tincludeMetrics: []interface{}{\n\t\t&metricStreamStatisticsMetricProperty{\n\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStreamStatisticsConfigurationProperty: cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty = {\n  additionalStatistics: ['additionalStatistics'],\n  includeMetrics: [{\n    metricName: 'metricName',\n    namespace: 'namespace',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricStreamStatisticsConfigurationProperty: cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty = {\n  additionalStatistics: ['additionalStatistics'],\n  includeMetrics: [{\n    metricName: 'metricName',\n    namespace: 'namespace',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0040864ca0342e2a6c5ceeded8d41ff7766e0a243e65a565954c1d28fba43831"
    },
    "c0adced3adb0add2d98ea526bd3bbbc740fe043f7c7dced076ab139c137ed125": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_stream_statistics_metric_property = cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty(\n    metric_name=\"metricName\",\n    namespace=\"namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricStreamStatisticsMetricProperty metricStreamStatisticsMetricProperty = new MetricStreamStatisticsMetricProperty {\n    MetricName = \"metricName\",\n    Namespace = \"namespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricStreamStatisticsMetricProperty metricStreamStatisticsMetricProperty = MetricStreamStatisticsMetricProperty.builder()\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricStreamStatisticsMetricProperty := &metricStreamStatisticsMetricProperty{\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricStreamStatisticsMetricProperty: cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricStreamStatisticsMetricProperty: cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fa9297ced2a2b2c99a7db0e6810be3641e13c0b8581fe6b8efc5ff66898117b1"
    },
    "168795783f0f209cbc883e8a39b7ee404e82fb3f86fff01598e20bc87c050894": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ncfn_metric_stream_props = cloudwatch.CfnMetricStreamProps(\n    firehose_arn=\"firehoseArn\",\n    output_format=\"outputFormat\",\n    role_arn=\"roleArn\",\n\n    # the properties below are optional\n    exclude_filters=[cloudwatch.CfnMetricStream.MetricStreamFilterProperty(\n        namespace=\"namespace\"\n    )],\n    include_filters=[cloudwatch.CfnMetricStream.MetricStreamFilterProperty(\n        namespace=\"namespace\"\n    )],\n    name=\"name\",\n    statistics_configurations=[cloudwatch.CfnMetricStream.MetricStreamStatisticsConfigurationProperty(\n        additional_statistics=[\"additionalStatistics\"],\n        include_metrics=[cloudwatch.CfnMetricStream.MetricStreamStatisticsMetricProperty(\n            metric_name=\"metricName\",\n            namespace=\"namespace\"\n        )]\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nCfnMetricStreamProps cfnMetricStreamProps = new CfnMetricStreamProps {\n    FirehoseArn = \"firehoseArn\",\n    OutputFormat = \"outputFormat\",\n    RoleArn = \"roleArn\",\n\n    // the properties below are optional\n    ExcludeFilters = new [] { new MetricStreamFilterProperty {\n        Namespace = \"namespace\"\n    } },\n    IncludeFilters = new [] { new MetricStreamFilterProperty {\n        Namespace = \"namespace\"\n    } },\n    Name = \"name\",\n    StatisticsConfigurations = new [] { new MetricStreamStatisticsConfigurationProperty {\n        AdditionalStatistics = new [] { \"additionalStatistics\" },\n        IncludeMetrics = new [] { new MetricStreamStatisticsMetricProperty {\n            MetricName = \"metricName\",\n            Namespace = \"namespace\"\n        } }\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nCfnMetricStreamProps cfnMetricStreamProps = CfnMetricStreamProps.builder()\n        .firehoseArn(\"firehoseArn\")\n        .outputFormat(\"outputFormat\")\n        .roleArn(\"roleArn\")\n\n        // the properties below are optional\n        .excludeFilters(List.of(MetricStreamFilterProperty.builder()\n                .namespace(\"namespace\")\n                .build()))\n        .includeFilters(List.of(MetricStreamFilterProperty.builder()\n                .namespace(\"namespace\")\n                .build()))\n        .name(\"name\")\n        .statisticsConfigurations(List.of(MetricStreamStatisticsConfigurationProperty.builder()\n                .additionalStatistics(List.of(\"additionalStatistics\"))\n                .includeMetrics(List.of(MetricStreamStatisticsMetricProperty.builder()\n                        .metricName(\"metricName\")\n                        .namespace(\"namespace\")\n                        .build()))\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\ncfnMetricStreamProps := &cfnMetricStreamProps{\n\tfirehoseArn: jsii.String(\"firehoseArn\"),\n\toutputFormat: jsii.String(\"outputFormat\"),\n\troleArn: jsii.String(\"roleArn\"),\n\n\t// the properties below are optional\n\texcludeFilters: []interface{}{\n\t\t&metricStreamFilterProperty{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t},\n\t},\n\tincludeFilters: []interface{}{\n\t\t&metricStreamFilterProperty{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tstatisticsConfigurations: []interface{}{\n\t\t&metricStreamStatisticsConfigurationProperty{\n\t\t\tadditionalStatistics: []*string{\n\t\t\t\tjsii.String(\"additionalStatistics\"),\n\t\t\t},\n\t\t\tincludeMetrics: []interface{}{\n\t\t\t\t&metricStreamStatisticsMetricProperty{\n\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst cfnMetricStreamProps: cloudwatch.CfnMetricStreamProps = {\n  firehoseArn: 'firehoseArn',\n  outputFormat: 'outputFormat',\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  excludeFilters: [{\n    namespace: 'namespace',\n  }],\n  includeFilters: [{\n    namespace: 'namespace',\n  }],\n  name: 'name',\n  statisticsConfigurations: [{\n    additionalStatistics: ['additionalStatistics'],\n    includeMetrics: [{\n      metricName: 'metricName',\n      namespace: 'namespace',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CfnMetricStreamProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CfnMetricStreamProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMetricStreamProps: cloudwatch.CfnMetricStreamProps = {\n  firehoseArn: 'firehoseArn',\n  outputFormat: 'outputFormat',\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  excludeFilters: [{\n    namespace: 'namespace',\n  }],\n  includeFilters: [{\n    namespace: 'namespace',\n  }],\n  name: 'name',\n  statisticsConfigurations: [{\n    additionalStatistics: ['additionalStatistics'],\n    includeMetrics: [{\n      metricName: 'metricName',\n      namespace: 'namespace',\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 12,
        "75": 20,
        "153": 1,
        "169": 1,
        "192": 6,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "d4768c30b928e607b870994104ee900804875f76ecf936839655d3a82c3745fc"
    },
    "d62981be45e2ef0a5ab94e0c7a1f98522c73d2e6ebf88f850cc5675b72054908": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# execution_count_metric: cloudwatch.Metric\n# error_count_metric: cloudwatch.Metric\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    title=\"Executions vs error rate\",\n\n    left=[execution_count_metric],\n\n    right=[error_count_metric.with(\n        statistic=\"average\",\n        label=\"Error rate\",\n        color=cloudwatch.Color.GREEN\n    )]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric executionCountMetric;\nMetric errorCountMetric;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    Title = \"Executions vs error rate\",\n\n    Left = new [] { executionCountMetric },\n\n    Right = new [] { errorCountMetric.With(new MetricOptions {\n        Statistic = \"average\",\n        Label = \"Error rate\",\n        Color = Color.GREEN\n    }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric executionCountMetric;\nMetric errorCountMetric;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        .title(\"Executions vs error rate\")\n\n        .left(List.of(executionCountMetric))\n\n        .right(List.of(errorCountMetric.with(MetricOptions.builder()\n                .statistic(\"average\")\n                .label(\"Error rate\")\n                .color(Color.GREEN)\n                .build())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar executionCountMetric metric\nvar errorCountMetric metric\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\ttitle: jsii.String(\"Executions vs error rate\"),\n\n\tleft: []iMetric{\n\t\texecutionCountMetric,\n\t},\n\n\tright: []*iMetric{\n\t\terrorCountMetric.with(&metricOptions{\n\t\t\tstatistic: jsii.String(\"average\"),\n\t\t\tlabel: jsii.String(\"Error rate\"),\n\t\t\tcolor: cloudwatch.color_GREEN(),\n\t\t}),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN,\n  })]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Color"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Color",
        "@aws-cdk/aws-cloudwatch.Color#GREEN",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN,\n  })]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 25,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "1645fef2b75b21b1050b2ea6bda4405579544588e20fc0f2a7e37d7eb18b7f63"
    },
    "fba655e357152daec849bd77d6d9a838d8a0218ad6c097750e19f01dc81962d2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# widget: cloudwatch.IWidget\n\ncolumn = cloudwatch.Column(widget)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nIWidget widget;\n\nColumn column = new Column(widget);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nIWidget widget;\n\nColumn column = new Column(widget);",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar widget iWidget\ncolumn := cloudwatch.NewColumn(widget)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\nconst column = new cloudwatch.Column(widget);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Column"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Column",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst column = new cloudwatch.Column(widget);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "c1a5800b9f5e9f14f47934377cdfa5b8c656d557e37fc65e01705c011d40ca5f"
    },
    "3bee72b9ef458c87194b69fc049fe8929a42e6500832a51b15388576cd31b887": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\nimport aws_cdk.core as cdk\n\n# dimensions: Any\n\ncommon_metric_options = cloudwatch.CommonMetricOptions(\n    account=\"account\",\n    color=\"color\",\n    dimensions={\n        \"dimensions_key\": dimensions\n    },\n    dimensions_map={\n        \"dimensions_map_key\": \"dimensionsMap\"\n    },\n    label=\"label\",\n    period=cdk.Duration.minutes(30),\n    region=\"region\",\n    statistic=\"statistic\",\n    unit=cloudwatch.Unit.SECONDS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\nusing Amazon.CDK;\n\nvar dimensions;\nCommonMetricOptions commonMetricOptions = new CommonMetricOptions {\n    Account = \"account\",\n    Color = \"color\",\n    Dimensions = new Dictionary<string, object> {\n        { \"dimensionsKey\", dimensions }\n    },\n    DimensionsMap = new Dictionary<string, string> {\n        { \"dimensionsMapKey\", \"dimensionsMap\" }\n    },\n    Label = \"label\",\n    Period = Duration.Minutes(30),\n    Region = \"region\",\n    Statistic = \"statistic\",\n    Unit = Unit.SECONDS\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\nimport software.amazon.awscdk.core.*;\n\nObject dimensions;\n\nCommonMetricOptions commonMetricOptions = CommonMetricOptions.builder()\n        .account(\"account\")\n        .color(\"color\")\n        .dimensions(Map.of(\n                \"dimensionsKey\", dimensions))\n        .dimensionsMap(Map.of(\n                \"dimensionsMapKey\", \"dimensionsMap\"))\n        .label(\"label\")\n        .period(Duration.minutes(30))\n        .region(\"region\")\n        .statistic(\"statistic\")\n        .unit(Unit.SECONDS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dimensions interface{}\ncommonMetricOptions := &commonMetricOptions{\n\taccount: jsii.String(\"account\"),\n\tcolor: jsii.String(\"color\"),\n\tdimensions: map[string]interface{}{\n\t\t\"dimensionsKey\": dimensions,\n\t},\n\tdimensionsMap: map[string]*string{\n\t\t\"dimensionsMapKey\": jsii.String(\"dimensionsMap\"),\n\t},\n\tlabel: jsii.String(\"label\"),\n\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\tregion: jsii.String(\"region\"),\n\tstatistic: jsii.String(\"statistic\"),\n\tunit: cloudwatch.unit_SECONDS,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dimensions: any;\nconst commonMetricOptions: cloudwatch.CommonMetricOptions = {\n  account: 'account',\n  color: 'color',\n  dimensions: {\n    dimensionsKey: dimensions,\n  },\n  dimensionsMap: {\n    dimensionsMapKey: 'dimensionsMap',\n  },\n  label: 'label',\n  period: cdk.Duration.minutes(30),\n  region: 'region',\n  statistic: 'statistic',\n  unit: cloudwatch.Unit.SECONDS,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CommonMetricOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CommonMetricOptions",
        "@aws-cdk/aws-cloudwatch.Unit",
        "@aws-cdk/aws-cloudwatch.Unit#SECONDS",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dimensions: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonMetricOptions: cloudwatch.CommonMetricOptions = {\n  account: 'account',\n  color: 'color',\n  dimensions: {\n    dimensionsKey: dimensions,\n  },\n  dimensionsMap: {\n    dimensionsMapKey: 'dimensionsMap',\n  },\n  label: 'label',\n  period: cdk.Duration.minutes(30),\n  region: 'region',\n  statistic: 'statistic',\n  unit: cloudwatch.Unit.SECONDS,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 24,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "1ab3ce2c514d641cad2a983b72c1a64f5e0d0307ca98b84f7ae0c0d874151051"
    },
    "d27a4013118f8a738a2f4737802db75ff341b475cb92ebf5b0bfdf33a8fb209b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n\n# my_hosted_zone: route53.HostedZone\n\ncertificate = acm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns(my_hosted_zone)\n)\ncertificate.metric_days_to_expiry().create_alarm(self, \"Alarm\",\n    comparison_operator=cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n    evaluation_periods=1,\n    threshold=45\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\n\nHostedZone myHostedZone;\n\nCertificate certificate = new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns(myHostedZone)\n});\ncertificate.MetricDaysToExpiry().CreateAlarm(this, \"Alarm\", new CreateAlarmOptions {\n    ComparisonOperator = ComparisonOperator.LESS_THAN_THRESHOLD,\n    EvaluationPeriods = 1,\n    Threshold = 45\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\n\nHostedZone myHostedZone;\n\nCertificate certificate = Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns(myHostedZone))\n        .build();\ncertificate.metricDaysToExpiry().createAlarm(this, \"Alarm\", CreateAlarmOptions.builder()\n        .comparisonOperator(ComparisonOperator.LESS_THAN_THRESHOLD)\n        .evaluationPeriods(1)\n        .threshold(45)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar myHostedZone hostedZone\ncertificate := acm.NewCertificate(this, jsii.String(\"Certificate\"), &certificateProps{\n\tdomainName: jsii.String(\"hello.example.com\"),\n\tvalidation: acm.certificateValidation.fromDns(myHostedZone),\n})\ncertificate.metricDaysToExpiry().createAlarm(this, jsii.String(\"Alarm\"), &createAlarmOptions{\n\tcomparisonOperator: cloudwatch.comparisonOperator_LESS_THAN_THRESHOLD,\n\tevaluationPeriods: jsii.Number(1),\n\tthreshold: jsii.Number(45),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const myHostedZone: route53.HostedZone;\nconst certificate = new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\ncertificate.metricDaysToExpiry().createAlarm(this, 'Alarm', {\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.ComparisonOperator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.CertificateValidation",
        "@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator#LESS_THAN_THRESHOLD",
        "@aws-cdk/aws-cloudwatch.CreateAlarmOptions",
        "@aws-cdk/aws-cloudwatch.Metric#createAlarm",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Construct",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const myHostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst certificate = new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\ncertificate.metricDaysToExpiry().createAlarm(this, 'Alarm', {\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 22,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7874493202fcb14f4fc57e5715131104fe2d493e00dec412c1deab100fdcbad1"
    },
    "be00b46a1afcc1a1f54398cbc0d12c23909853d2ed3eecd1d106b994a749ad75": {
      "translations": {
        "python": {
          "source": "# alarm1: cloudwatch.Alarm\n# alarm2: cloudwatch.Alarm\n# alarm3: cloudwatch.Alarm\n# alarm4: cloudwatch.Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var alarm1 alarm\nvar alarm2 alarm\nvar alarm3 alarm\nvar alarm4 alarm\n\nalarmRule := cloudwatch.alarmRule.anyOf(cloudwatch.alarmRule.allOf(cloudwatch.alarmRule.anyOf(alarm1, cloudwatch.alarmRule.fromAlarm(alarm2, cloudwatch.alarmState_OK), alarm3), cloudwatch.alarmRule.not(cloudwatch.alarmRule.fromAlarm(alarm4, cloudwatch.alarmState_INSUFFICIENT_DATA))), cloudwatch.alarmRule.fromBoolean(jsii.Boolean(false)))\n\ncloudwatch.NewCompositeAlarm(this, jsii.String(\"MyAwesomeCompositeAlarm\"), &compositeAlarmProps{\n\talarmRule: alarmRule,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CompositeAlarm"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fee41f55ebdb796ada349b0655c3d755869d1a1f81292ff128fb32225e52886f"
    },
    "f41c48a2fba6c4f6101f6071fde1d83a1a2d25fdedee5692bd7128f340372757": {
      "translations": {
        "python": {
          "source": "# alarm1: cloudwatch.Alarm\n# alarm2: cloudwatch.Alarm\n# alarm3: cloudwatch.Alarm\n# alarm4: cloudwatch.Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var alarm1 alarm\nvar alarm2 alarm\nvar alarm3 alarm\nvar alarm4 alarm\n\nalarmRule := cloudwatch.alarmRule.anyOf(cloudwatch.alarmRule.allOf(cloudwatch.alarmRule.anyOf(alarm1, cloudwatch.alarmRule.fromAlarm(alarm2, cloudwatch.alarmState_OK), alarm3), cloudwatch.alarmRule.not(cloudwatch.alarmRule.fromAlarm(alarm4, cloudwatch.alarmState_INSUFFICIENT_DATA))), cloudwatch.alarmRule.fromBoolean(jsii.Boolean(false)))\n\ncloudwatch.NewCompositeAlarm(this, jsii.String(\"MyAwesomeCompositeAlarm\"), &compositeAlarmProps{\n\talarmRule: alarmRule,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CompositeAlarmProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fee41f55ebdb796ada349b0655c3d755869d1a1f81292ff128fb32225e52886f"
    },
    "6a55bf27f5fb42d11c97b8bbc4a5945cd4020c5ca899d7c54734734f4d5494f9": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nfn.metric_errors().create_alarm(self, \"Alarm\",\n    threshold=100,\n    evaluation_periods=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nfn.MetricErrors().CreateAlarm(this, \"Alarm\", new CreateAlarmOptions {\n    Threshold = 100,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nfn.metricErrors().createAlarm(this, \"Alarm\", CreateAlarmOptions.builder()\n        .threshold(100)\n        .evaluationPeriods(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nfn.metricErrors().createAlarm(this, jsii.String(\"Alarm\"), &createAlarmOptions{\n\tthreshold: jsii.Number(100),\n\tevaluationPeriods: jsii.Number(2),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CreateAlarmOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CreateAlarmOptions",
        "@aws-cdk/aws-cloudwatch.Metric#createAlarm",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ecd9b00a4113c7a85c9d87a2d5cb2133b2e7eaf42a1f4b221f50ed8608c77f0c"
    },
    "e2331681cf7f4f19f885a0704fb7a47d4cd027ee292410afcaae5e5a8f735e7a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# widget: cloudwatch.IWidget\n\ndashboard = cloudwatch.Dashboard(self, \"MyDashboard\",\n    dashboard_name=\"dashboardName\",\n    end=\"end\",\n    period_override=cloudwatch.PeriodOverride.AUTO,\n    start=\"start\",\n    widgets=[[widget]]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nIWidget widget;\n\nDashboard dashboard = new Dashboard(this, \"MyDashboard\", new DashboardProps {\n    DashboardName = \"dashboardName\",\n    End = \"end\",\n    PeriodOverride = PeriodOverride.AUTO,\n    Start = \"start\",\n    Widgets = new [] { new [] { widget } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nIWidget widget;\n\nDashboard dashboard = Dashboard.Builder.create(this, \"MyDashboard\")\n        .dashboardName(\"dashboardName\")\n        .end(\"end\")\n        .periodOverride(PeriodOverride.AUTO)\n        .start(\"start\")\n        .widgets(List.of(List.of(widget)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar widget iWidget\ndashboard := cloudwatch.NewDashboard(this, jsii.String(\"MyDashboard\"), &dashboardProps{\n\tdashboardName: jsii.String(\"dashboardName\"),\n\tend: jsii.String(\"end\"),\n\tperiodOverride: cloudwatch.periodOverride_AUTO,\n\tstart: jsii.String(\"start\"),\n\twidgets: [][]*iWidget{\n\t\t[]*iWidget{\n\t\t\twidget,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\nconst dashboard = new cloudwatch.Dashboard(this, 'MyDashboard', /* all optional props */ {\n  dashboardName: 'dashboardName',\n  end: 'end',\n  periodOverride: cloudwatch.PeriodOverride.AUTO,\n  start: 'start',\n  widgets: [[widget]],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Dashboard"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard",
        "@aws-cdk/aws-cloudwatch.DashboardProps",
        "@aws-cdk/aws-cloudwatch.PeriodOverride",
        "@aws-cdk/aws-cloudwatch.PeriodOverride#AUTO",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dashboard = new cloudwatch.Dashboard(this, 'MyDashboard', /* all optional props */ {\n  dashboardName: 'dashboardName',\n  end: 'end',\n  periodOverride: cloudwatch.PeriodOverride.AUTO,\n  start: 'start',\n  widgets: [[widget]],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "196e4da4fa06561f7c8404080ac4710fa84f025f31162078cc67cba35c7195a0"
    },
    "920b5856db56a6c5d7f3ef7ab8411e11d387b05507b33850b1fcc711448442f0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# widget: cloudwatch.IWidget\n\ndashboard_props = cloudwatch.DashboardProps(\n    dashboard_name=\"dashboardName\",\n    end=\"end\",\n    period_override=cloudwatch.PeriodOverride.AUTO,\n    start=\"start\",\n    widgets=[[widget]]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nIWidget widget;\n\nDashboardProps dashboardProps = new DashboardProps {\n    DashboardName = \"dashboardName\",\n    End = \"end\",\n    PeriodOverride = PeriodOverride.AUTO,\n    Start = \"start\",\n    Widgets = new [] { new [] { widget } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nIWidget widget;\n\nDashboardProps dashboardProps = DashboardProps.builder()\n        .dashboardName(\"dashboardName\")\n        .end(\"end\")\n        .periodOverride(PeriodOverride.AUTO)\n        .start(\"start\")\n        .widgets(List.of(List.of(widget)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar widget iWidget\ndashboardProps := &dashboardProps{\n\tdashboardName: jsii.String(\"dashboardName\"),\n\tend: jsii.String(\"end\"),\n\tperiodOverride: cloudwatch.periodOverride_AUTO,\n\tstart: jsii.String(\"start\"),\n\twidgets: [][]*iWidget{\n\t\t[]*iWidget{\n\t\t\twidget,\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\nconst dashboardProps: cloudwatch.DashboardProps = {\n  dashboardName: 'dashboardName',\n  end: 'end',\n  periodOverride: cloudwatch.PeriodOverride.AUTO,\n  start: 'start',\n  widgets: [[widget]],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.DashboardProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.DashboardProps",
        "@aws-cdk/aws-cloudwatch.PeriodOverride",
        "@aws-cdk/aws-cloudwatch.PeriodOverride#AUTO"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dashboardProps: cloudwatch.DashboardProps = {\n  dashboardName: 'dashboardName',\n  end: 'end',\n  periodOverride: cloudwatch.PeriodOverride.AUTO,\n  start: 'start',\n  widgets: [[widget]],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "4696165b145a938c20da7d16598f37eebd1ddea9d15ecf90e0e9b4a7dec37593"
    },
    "10c45d060a5e18ab64bc5247f1af859ae52f0ab0912dbbe5409f979468e032db": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# value: Any\n\ndimension = cloudwatch.Dimension(\n    name=\"name\",\n    value=value\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nvar value;\n\nDimension dimension = new Dimension {\n    Name = \"name\",\n    Value = value\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nObject value;\n\nDimension dimension = Dimension.builder()\n        .name(\"name\")\n        .value(value)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar value interface{}\ndimension := &dimension{\n\tname: jsii.String(\"name\"),\n\tvalue: value,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\nconst dimension: cloudwatch.Dimension = {\n  name: 'name',\n  value: value,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Dimension"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dimension"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dimension: cloudwatch.Dimension = {\n  name: 'name',\n  value: value,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c9618cfcfc0e16d1805273e0b46662a1a6674ad3be2b55bd217b5369b784c5b9"
    },
    "40adf5570e686affd2be470929e3273422bc26eabf4686f5c5706f1aad351905": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    legend_position=cloudwatch.LegendPosition.RIGHT\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LegendPosition = LegendPosition.RIGHT\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .legendPosition(LegendPosition.RIGHT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\t// ...\n\n\tlegendPosition: cloudwatch.legendPosition_RIGHT,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.GraphWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LegendPosition",
        "@aws-cdk/aws-cloudwatch.LegendPosition#RIGHT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ea9c769f622a1b98a2ed82e67b6d8570122a26ea375f8381dc72eb53b13d68d4"
    },
    "ac374948881f5994e671f77b3973c3a37f791dab8b550fa4574ec7dc1bd10c34": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    legend_position=cloudwatch.LegendPosition.RIGHT\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LegendPosition = LegendPosition.RIGHT\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .legendPosition(LegendPosition.RIGHT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\t// ...\n\n\tlegendPosition: cloudwatch.legendPosition_RIGHT,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.GraphWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LegendPosition",
        "@aws-cdk/aws-cloudwatch.LegendPosition#RIGHT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ea9c769f622a1b98a2ed82e67b6d8570122a26ea375f8381dc72eb53b13d68d4"
    },
    "be672da3a425dd3e4747cfa685f684d7d403b49aef153e5a46a08b71c533372a": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    view=cloudwatch.GraphWidgetView.BAR\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    View = GraphWidgetView.BAR\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .view(GraphWidgetView.BAR)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\t// ...\n\n\tview: cloudwatch.graphWidgetView_BAR,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.GraphWidgetView"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.GraphWidgetView",
        "@aws-cdk/aws-cloudwatch.GraphWidgetView#BAR",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7fd4e224ed06d70f93bfa2abd6c61c292f1a9fae0071e785589986757fe904db"
    },
    "d3a55d8cee6e314512d0772fb8d628cb85e8c9e0a04d5a0a03ea0fb98dd56800": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nhorizontal_annotation = cloudwatch.HorizontalAnnotation(\n    value=123,\n\n    # the properties below are optional\n    color=\"color\",\n    fill=cloudwatch.Shading.NONE,\n    label=\"label\",\n    visible=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nHorizontalAnnotation horizontalAnnotation = new HorizontalAnnotation {\n    Value = 123,\n\n    // the properties below are optional\n    Color = \"color\",\n    Fill = Shading.NONE,\n    Label = \"label\",\n    Visible = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nHorizontalAnnotation horizontalAnnotation = HorizontalAnnotation.builder()\n        .value(123)\n\n        // the properties below are optional\n        .color(\"color\")\n        .fill(Shading.NONE)\n        .label(\"label\")\n        .visible(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nhorizontalAnnotation := &horizontalAnnotation{\n\tvalue: jsii.Number(123),\n\n\t// the properties below are optional\n\tcolor: jsii.String(\"color\"),\n\tfill: cloudwatch.shading_NONE,\n\tlabel: jsii.String(\"label\"),\n\tvisible: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst horizontalAnnotation: cloudwatch.HorizontalAnnotation = {\n  value: 123,\n\n  // the properties below are optional\n  color: 'color',\n  fill: cloudwatch.Shading.NONE,\n  label: 'label',\n  visible: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.HorizontalAnnotation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.HorizontalAnnotation",
        "@aws-cdk/aws-cloudwatch.Shading",
        "@aws-cdk/aws-cloudwatch.Shading#NONE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst horizontalAnnotation: cloudwatch.HorizontalAnnotation = {\n  value: 123,\n\n  // the properties below are optional\n  color: 'color',\n  fill: cloudwatch.Shading.NONE,\n  label: 'label',\n  visible: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e45a953bbd2eb348c4b43411411dae2e03a7515cfa0e92249b7d51b74a43045a"
    },
    "628b0b191ab3ab0b1ceb2e058095a1b722eeeba39fc5092a0ecc05b2129639cd": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    legend_position=cloudwatch.LegendPosition.RIGHT\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LegendPosition = LegendPosition.RIGHT\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .legendPosition(LegendPosition.RIGHT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{\n\t// ...\n\n\tlegendPosition: cloudwatch.legendPosition_RIGHT,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.LegendPosition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LegendPosition",
        "@aws-cdk/aws-cloudwatch.LegendPosition#RIGHT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ea9c769f622a1b98a2ed82e67b6d8570122a26ea375f8381dc72eb53b13d68d4"
    },
    "0b2de5234bdc1492fc86cc5dd0a0a8de5faf9b8cfc9776294b07f5a5e88a7a8e": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.LogQueryWidget(\n    log_group_names=[\"my-log-group\"],\n    view=cloudwatch.LogQueryVisualizationType.TABLE,\n    # The lines will be automatically combined using '\\n|'.\n    query_lines=[\"fields @message\", \"filter @message like /Error/\"\n    ]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new LogQueryWidget(new LogQueryWidgetProps {\n    LogGroupNames = new [] { \"my-log-group\" },\n    View = LogQueryVisualizationType.TABLE,\n    // The lines will be automatically combined using '\\n|'.\n    QueryLines = new [] { \"fields @message\", \"filter @message like /Error/\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(LogQueryWidget.Builder.create()\n        .logGroupNames(List.of(\"my-log-group\"))\n        .view(LogQueryVisualizationType.TABLE)\n        // The lines will be automatically combined using '\\n|'.\n        .queryLines(List.of(\"fields @message\", \"filter @message like /Error/\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewLogQueryWidget(&logQueryWidgetProps{\n\tlogGroupNames: []*string{\n\t\tjsii.String(\"my-log-group\"),\n\t},\n\tview: cloudwatch.logQueryVisualizationType_TABLE,\n\t// The lines will be automatically combined using '\\n|'.\n\tqueryLines: []*string{\n\t\tjsii.String(\"fields @message\"),\n\t\tjsii.String(\"filter @message like /Error/\"),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType#TABLE",
        "@aws-cdk/aws-cloudwatch.LogQueryWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1438f4219dd2040823fc631cfcf67e7c07934cacb3065d141d6d07efab7786f2"
    },
    "182e3ee670115569e174af7196fb01aa45d932131c39f0aecbb6107047003ad9": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.LogQueryWidget(\n    log_group_names=[\"my-log-group\"],\n    view=cloudwatch.LogQueryVisualizationType.TABLE,\n    # The lines will be automatically combined using '\\n|'.\n    query_lines=[\"fields @message\", \"filter @message like /Error/\"\n    ]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new LogQueryWidget(new LogQueryWidgetProps {\n    LogGroupNames = new [] { \"my-log-group\" },\n    View = LogQueryVisualizationType.TABLE,\n    // The lines will be automatically combined using '\\n|'.\n    QueryLines = new [] { \"fields @message\", \"filter @message like /Error/\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(LogQueryWidget.Builder.create()\n        .logGroupNames(List.of(\"my-log-group\"))\n        .view(LogQueryVisualizationType.TABLE)\n        // The lines will be automatically combined using '\\n|'.\n        .queryLines(List.of(\"fields @message\", \"filter @message like /Error/\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewLogQueryWidget(&logQueryWidgetProps{\n\tlogGroupNames: []*string{\n\t\tjsii.String(\"my-log-group\"),\n\t},\n\tview: cloudwatch.logQueryVisualizationType_TABLE,\n\t// The lines will be automatically combined using '\\n|'.\n\tqueryLines: []*string{\n\t\tjsii.String(\"fields @message\"),\n\t\tjsii.String(\"filter @message like /Error/\"),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.LogQueryWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType#TABLE",
        "@aws-cdk/aws-cloudwatch.LogQueryWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1438f4219dd2040823fc631cfcf67e7c07934cacb3065d141d6d07efab7786f2"
    },
    "8850f1264612c53c2152c4393f1c6254fe21be9ad31f7e5242dde13132a040eb": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.LogQueryWidget(\n    log_group_names=[\"my-log-group\"],\n    view=cloudwatch.LogQueryVisualizationType.TABLE,\n    # The lines will be automatically combined using '\\n|'.\n    query_lines=[\"fields @message\", \"filter @message like /Error/\"\n    ]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new LogQueryWidget(new LogQueryWidgetProps {\n    LogGroupNames = new [] { \"my-log-group\" },\n    View = LogQueryVisualizationType.TABLE,\n    // The lines will be automatically combined using '\\n|'.\n    QueryLines = new [] { \"fields @message\", \"filter @message like /Error/\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(LogQueryWidget.Builder.create()\n        .logGroupNames(List.of(\"my-log-group\"))\n        .view(LogQueryVisualizationType.TABLE)\n        // The lines will be automatically combined using '\\n|'.\n        .queryLines(List.of(\"fields @message\", \"filter @message like /Error/\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewLogQueryWidget(&logQueryWidgetProps{\n\tlogGroupNames: []*string{\n\t\tjsii.String(\"my-log-group\"),\n\t},\n\tview: cloudwatch.logQueryVisualizationType_TABLE,\n\t// The lines will be automatically combined using '\\n|'.\n\tqueryLines: []*string{\n\t\tjsii.String(\"fields @message\"),\n\t\tjsii.String(\"filter @message like /Error/\"),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType#TABLE",
        "@aws-cdk/aws-cloudwatch.LogQueryWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1438f4219dd2040823fc631cfcf67e7c07934cacb3065d141d6d07efab7786f2"
    },
    "2c31ab422034913f24a0e75a03a17b0a64141ec4a606886f9928153db263775f": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nall_problems = cloudwatch.MathExpression(\n    expression=\"errors + throttles\",\n    using_metrics={\n        \"errors\": fn.metric_errors(),\n        \"faults\": fn.metric_throttles()\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMathExpression allProblems = new MathExpression(new MathExpressionProps {\n    Expression = \"errors + throttles\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"errors\", fn.MetricErrors() },\n        { \"faults\", fn.MetricThrottles() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMathExpression allProblems = MathExpression.Builder.create()\n        .expression(\"errors + throttles\")\n        .usingMetrics(Map.of(\n                \"errors\", fn.metricErrors(),\n                \"faults\", fn.metricThrottles()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nallProblems := cloudwatch.NewMathExpression(&mathExpressionProps{\n\texpression: jsii.String(\"errors + throttles\"),\n\tusingMetrics: map[string]iMetric{\n\t\t\"errors\": fn.metricErrors(),\n\t\t\"faults\": fn.metricThrottles(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MathExpression"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8a95c14cad450e60e066f38e4e55360a750a83efd1716dfbd4e3bc9cf1607374"
    },
    "a13c0c51fd8c31dc626112ad1d1fc44a895a52e3a72de7863bb92bba4e463fc9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\nimport aws_cdk.core as cdk\n\nmath_expression_options = cloudwatch.MathExpressionOptions(\n    color=\"color\",\n    label=\"label\",\n    period=cdk.Duration.minutes(30),\n    search_account=\"searchAccount\",\n    search_region=\"searchRegion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\nusing Amazon.CDK;\nMathExpressionOptions mathExpressionOptions = new MathExpressionOptions {\n    Color = \"color\",\n    Label = \"label\",\n    Period = Duration.Minutes(30),\n    SearchAccount = \"searchAccount\",\n    SearchRegion = \"searchRegion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\nimport software.amazon.awscdk.core.*;\n\nMathExpressionOptions mathExpressionOptions = MathExpressionOptions.builder()\n        .color(\"color\")\n        .label(\"label\")\n        .period(Duration.minutes(30))\n        .searchAccount(\"searchAccount\")\n        .searchRegion(\"searchRegion\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nmathExpressionOptions := &mathExpressionOptions{\n\tcolor: jsii.String(\"color\"),\n\tlabel: jsii.String(\"label\"),\n\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\tsearchAccount: jsii.String(\"searchAccount\"),\n\tsearchRegion: jsii.String(\"searchRegion\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\nconst mathExpressionOptions: cloudwatch.MathExpressionOptions = {\n  color: 'color',\n  label: 'label',\n  period: cdk.Duration.minutes(30),\n  searchAccount: 'searchAccount',\n  searchRegion: 'searchRegion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MathExpressionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MathExpressionOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mathExpressionOptions: cloudwatch.MathExpressionOptions = {\n  color: 'color',\n  label: 'label',\n  period: cdk.Duration.minutes(30),\n  searchAccount: 'searchAccount',\n  searchRegion: 'searchRegion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 13,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1a8506e686a7a5d6fe51bbab786cbab85e741465a17d0d254765afdbab7f4917"
    },
    "e920359be7fb77cc6525b6953b07fba3109f932f8401b8d46cd3f807daf5eaa7": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nall_problems = cloudwatch.MathExpression(\n    expression=\"errors + throttles\",\n    using_metrics={\n        \"errors\": fn.metric_errors(),\n        \"faults\": fn.metric_throttles()\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMathExpression allProblems = new MathExpression(new MathExpressionProps {\n    Expression = \"errors + throttles\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"errors\", fn.MetricErrors() },\n        { \"faults\", fn.MetricThrottles() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMathExpression allProblems = MathExpression.Builder.create()\n        .expression(\"errors + throttles\")\n        .usingMetrics(Map.of(\n                \"errors\", fn.metricErrors(),\n                \"faults\", fn.metricThrottles()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nallProblems := cloudwatch.NewMathExpression(&mathExpressionProps{\n\texpression: jsii.String(\"errors + throttles\"),\n\tusingMetrics: map[string]iMetric{\n\t\t\"errors\": fn.metricErrors(),\n\t\t\"faults\": fn.metricThrottles(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MathExpressionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8a95c14cad450e60e066f38e4e55360a750a83efd1716dfbd4e3bc9cf1607374"
    },
    "03e99abb2d70e62275728b1498fec02182137e513483c05b6e941142df94b0d9": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nminute_error_rate = fn.metric_errors(\n    statistic=\"avg\",\n    period=Duration.minutes(1),\n    label=\"Lambda failure rate\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.MetricErrors(new MetricOptions {\n    Statistic = \"avg\",\n    Period = Duration.Minutes(1),\n    Label = \"Lambda failure rate\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.metricErrors(MetricOptions.builder()\n        .statistic(\"avg\")\n        .period(Duration.minutes(1))\n        .label(\"Lambda failure rate\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nminuteErrorRate := fn.metricErrors(&metricOptions{\n\tstatistic: jsii.String(\"avg\"),\n\tperiod: duration.minutes(jsii.Number(1)),\n\tlabel: jsii.String(\"Lambda failure rate\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Metric"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "287886e6f2fef9b328813ffbda6a27b50ffd28aba95390c2f43b43dd8e44f85d"
    },
    "edda0a49fadc12560d9683e565822845b732877599d297bc09eb9482dc27d323": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# value: Any\n\nmetric_alarm_config = cloudwatch.MetricAlarmConfig(\n    metric_name=\"metricName\",\n    namespace=\"namespace\",\n    period=123,\n\n    # the properties below are optional\n    dimensions=[cloudwatch.Dimension(\n        name=\"name\",\n        value=value\n    )],\n    extended_statistic=\"extendedStatistic\",\n    statistic=cloudwatch.Statistic.SAMPLE_COUNT,\n    unit=cloudwatch.Unit.SECONDS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nvar value;\n\nMetricAlarmConfig metricAlarmConfig = new MetricAlarmConfig {\n    MetricName = \"metricName\",\n    Namespace = \"namespace\",\n    Period = 123,\n\n    // the properties below are optional\n    Dimensions = new [] { new Dimension {\n        Name = \"name\",\n        Value = value\n    } },\n    ExtendedStatistic = \"extendedStatistic\",\n    Statistic = Statistic.SAMPLE_COUNT,\n    Unit = Unit.SECONDS\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nObject value;\n\nMetricAlarmConfig metricAlarmConfig = MetricAlarmConfig.builder()\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n        .period(123)\n\n        // the properties below are optional\n        .dimensions(List.of(Dimension.builder()\n                .name(\"name\")\n                .value(value)\n                .build()))\n        .extendedStatistic(\"extendedStatistic\")\n        .statistic(Statistic.SAMPLE_COUNT)\n        .unit(Unit.SECONDS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar value interface{}\nmetricAlarmConfig := &metricAlarmConfig{\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n\tperiod: jsii.Number(123),\n\n\t// the properties below are optional\n\tdimensions: []dimension{\n\t\t&dimension{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: value,\n\t\t},\n\t},\n\textendedStatistic: jsii.String(\"extendedStatistic\"),\n\tstatistic: cloudwatch.statistic_SAMPLE_COUNT,\n\tunit: cloudwatch.unit_SECONDS,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\nconst metricAlarmConfig: cloudwatch.MetricAlarmConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: 123,\n\n  // the properties below are optional\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  extendedStatistic: 'extendedStatistic',\n  statistic: cloudwatch.Statistic.SAMPLE_COUNT,\n  unit: cloudwatch.Unit.SECONDS,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricAlarmConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MetricAlarmConfig",
        "@aws-cdk/aws-cloudwatch.Statistic",
        "@aws-cdk/aws-cloudwatch.Statistic#SAMPLE_COUNT",
        "@aws-cdk/aws-cloudwatch.Unit",
        "@aws-cdk/aws-cloudwatch.Unit#SECONDS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricAlarmConfig: cloudwatch.MetricAlarmConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: 123,\n\n  // the properties below are optional\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  extendedStatistic: 'extendedStatistic',\n  statistic: cloudwatch.Statistic.SAMPLE_COUNT,\n  unit: cloudwatch.Unit.SECONDS,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 21,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "691fe0e84f15b55f0cc431c7c9a7c1d900ec0222456a8b7f673c7e6b455cb266"
    },
    "c88f628362f98f0ffb13323dd74bcbc5d6b3490d63be5adabc9cbcbcca23e18c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\nimport aws_cdk.core as cdk\n\n# metric: cloudwatch.Metric\n# rendering_properties: Any\n# value: Any\n\nmetric_config = cloudwatch.MetricConfig(\n    math_expression=cloudwatch.MetricExpressionConfig(\n        expression=\"expression\",\n        period=123,\n        using_metrics={\n            \"using_metrics_key\": metric\n        },\n\n        # the properties below are optional\n        search_account=\"searchAccount\",\n        search_region=\"searchRegion\"\n    ),\n    metric_stat=cloudwatch.MetricStatConfig(\n        metric_name=\"metricName\",\n        namespace=\"namespace\",\n        period=cdk.Duration.minutes(30),\n        statistic=\"statistic\",\n\n        # the properties below are optional\n        account=\"account\",\n        dimensions=[cloudwatch.Dimension(\n            name=\"name\",\n            value=value\n        )],\n        region=\"region\",\n        unit_filter=cloudwatch.Unit.SECONDS\n    ),\n    rendering_properties={\n        \"rendering_properties_key\": rendering_properties\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\nusing Amazon.CDK;\n\nMetric metric;\nvar renderingProperties;\nvar value;\nMetricConfig metricConfig = new MetricConfig {\n    MathExpression = new MetricExpressionConfig {\n        Expression = \"expression\",\n        Period = 123,\n        UsingMetrics = new Dictionary<string, IMetric> {\n            { \"usingMetricsKey\", metric }\n        },\n\n        // the properties below are optional\n        SearchAccount = \"searchAccount\",\n        SearchRegion = \"searchRegion\"\n    },\n    MetricStat = new MetricStatConfig {\n        MetricName = \"metricName\",\n        Namespace = \"namespace\",\n        Period = Duration.Minutes(30),\n        Statistic = \"statistic\",\n\n        // the properties below are optional\n        Account = \"account\",\n        Dimensions = new [] { new Dimension {\n            Name = \"name\",\n            Value = value\n        } },\n        Region = \"region\",\n        UnitFilter = Unit.SECONDS\n    },\n    RenderingProperties = new Dictionary<string, object> {\n        { \"renderingPropertiesKey\", renderingProperties }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\nimport software.amazon.awscdk.core.*;\n\nMetric metric;\nObject renderingProperties;\nObject value;\n\nMetricConfig metricConfig = MetricConfig.builder()\n        .mathExpression(MetricExpressionConfig.builder()\n                .expression(\"expression\")\n                .period(123)\n                .usingMetrics(Map.of(\n                        \"usingMetricsKey\", metric))\n\n                // the properties below are optional\n                .searchAccount(\"searchAccount\")\n                .searchRegion(\"searchRegion\")\n                .build())\n        .metricStat(MetricStatConfig.builder()\n                .metricName(\"metricName\")\n                .namespace(\"namespace\")\n                .period(Duration.minutes(30))\n                .statistic(\"statistic\")\n\n                // the properties below are optional\n                .account(\"account\")\n                .dimensions(List.of(Dimension.builder()\n                        .name(\"name\")\n                        .value(value)\n                        .build()))\n                .region(\"region\")\n                .unitFilter(Unit.SECONDS)\n                .build())\n        .renderingProperties(Map.of(\n                \"renderingPropertiesKey\", renderingProperties))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar metric metric\nvar renderingProperties interface{}\nvar value interface{}\nmetricConfig := &metricConfig{\n\tmathExpression: &metricExpressionConfig{\n\t\texpression: jsii.String(\"expression\"),\n\t\tperiod: jsii.Number(123),\n\t\tusingMetrics: map[string]iMetric{\n\t\t\t\"usingMetricsKey\": metric,\n\t\t},\n\n\t\t// the properties below are optional\n\t\tsearchAccount: jsii.String(\"searchAccount\"),\n\t\tsearchRegion: jsii.String(\"searchRegion\"),\n\t},\n\tmetricStat: &metricStatConfig{\n\t\tmetricName: jsii.String(\"metricName\"),\n\t\tnamespace: jsii.String(\"namespace\"),\n\t\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\t\tstatistic: jsii.String(\"statistic\"),\n\n\t\t// the properties below are optional\n\t\taccount: jsii.String(\"account\"),\n\t\tdimensions: []dimension{\n\t\t\t&dimension{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: value,\n\t\t\t},\n\t\t},\n\t\tregion: jsii.String(\"region\"),\n\t\tunitFilter: cloudwatch.unit_SECONDS,\n\t},\n\trenderingProperties: map[string]interface{}{\n\t\t\"renderingPropertiesKey\": renderingProperties,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metric: cloudwatch.Metric;\ndeclare const renderingProperties: any;\ndeclare const value: any;\nconst metricConfig: cloudwatch.MetricConfig = {\n  mathExpression: {\n    expression: 'expression',\n    period: 123,\n    usingMetrics: {\n      usingMetricsKey: metric,\n    },\n\n    // the properties below are optional\n    searchAccount: 'searchAccount',\n    searchRegion: 'searchRegion',\n  },\n  metricStat: {\n    metricName: 'metricName',\n    namespace: 'namespace',\n    period: cdk.Duration.minutes(30),\n    statistic: 'statistic',\n\n    // the properties below are optional\n    account: 'account',\n    dimensions: [{\n      name: 'name',\n      value: value,\n    }],\n    region: 'region',\n    unitFilter: cloudwatch.Unit.SECONDS,\n  },\n  renderingProperties: {\n    renderingPropertiesKey: renderingProperties,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MetricConfig",
        "@aws-cdk/aws-cloudwatch.MetricExpressionConfig",
        "@aws-cdk/aws-cloudwatch.MetricStatConfig",
        "@aws-cdk/aws-cloudwatch.Unit",
        "@aws-cdk/aws-cloudwatch.Unit#SECONDS",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metric: cloudwatch.Metric;\ndeclare const renderingProperties: any;\ndeclare const value: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricConfig: cloudwatch.MetricConfig = {\n  mathExpression: {\n    expression: 'expression',\n    period: 123,\n    usingMetrics: {\n      usingMetricsKey: metric,\n    },\n\n    // the properties below are optional\n    searchAccount: 'searchAccount',\n    searchRegion: 'searchRegion',\n  },\n  metricStat: {\n    metricName: 'metricName',\n    namespace: 'namespace',\n    period: cdk.Duration.minutes(30),\n    statistic: 'statistic',\n\n    // the properties below are optional\n    account: 'account',\n    dimensions: [{\n      name: 'name',\n      value: value,\n    }],\n    region: 'region',\n    unitFilter: cloudwatch.Unit.SECONDS,\n  },\n  renderingProperties: {\n    renderingPropertiesKey: renderingProperties,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 39,
        "125": 2,
        "130": 3,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 6,
        "194": 4,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "bbc19fc43cf92f00c42e34ba68ff176a50b8fae350d2cb1b5c6fee9398ccca8f"
    },
    "c1ef6b43eadaa701bab71d5722c37237306558c3bbf6d4373674adeec029fd19": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# metric: cloudwatch.Metric\n\nmetric_expression_config = cloudwatch.MetricExpressionConfig(\n    expression=\"expression\",\n    period=123,\n    using_metrics={\n        \"using_metrics_key\": metric\n    },\n\n    # the properties below are optional\n    search_account=\"searchAccount\",\n    search_region=\"searchRegion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetric metric;\n\nMetricExpressionConfig metricExpressionConfig = new MetricExpressionConfig {\n    Expression = \"expression\",\n    Period = 123,\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"usingMetricsKey\", metric }\n    },\n\n    // the properties below are optional\n    SearchAccount = \"searchAccount\",\n    SearchRegion = \"searchRegion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetric metric;\n\nMetricExpressionConfig metricExpressionConfig = MetricExpressionConfig.builder()\n        .expression(\"expression\")\n        .period(123)\n        .usingMetrics(Map.of(\n                \"usingMetricsKey\", metric))\n\n        // the properties below are optional\n        .searchAccount(\"searchAccount\")\n        .searchRegion(\"searchRegion\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar metric metric\nmetricExpressionConfig := &metricExpressionConfig{\n\texpression: jsii.String(\"expression\"),\n\tperiod: jsii.Number(123),\n\tusingMetrics: map[string]iMetric{\n\t\t\"usingMetricsKey\": metric,\n\t},\n\n\t// the properties below are optional\n\tsearchAccount: jsii.String(\"searchAccount\"),\n\tsearchRegion: jsii.String(\"searchRegion\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const metric: cloudwatch.Metric;\nconst metricExpressionConfig: cloudwatch.MetricExpressionConfig = {\n  expression: 'expression',\n  period: 123,\n  usingMetrics: {\n    usingMetricsKey: metric,\n  },\n\n  // the properties below are optional\n  searchAccount: 'searchAccount',\n  searchRegion: 'searchRegion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricExpressionConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MetricExpressionConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const metric: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricExpressionConfig: cloudwatch.MetricExpressionConfig = {\n  expression: 'expression',\n  period: 123,\n  usingMetrics: {\n    usingMetricsKey: metric,\n  },\n\n  // the properties below are optional\n  searchAccount: 'searchAccount',\n  searchRegion: 'searchRegion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 14,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "fbeba2c126377de6701fd259be8167ad2e3ff1dd0c7f638c1a60bcc8fea757ea"
    },
    "57fa66b4d07ca6f53a9257c6d999966b80b0b34fa91a41a13e41706656aca96a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# value: Any\n\nmetric_graph_config = cloudwatch.MetricGraphConfig(\n    metric_name=\"metricName\",\n    namespace=\"namespace\",\n    period=123,\n    rendering_properties=cloudwatch.MetricRenderingProperties(\n        period=123,\n\n        # the properties below are optional\n        color=\"color\",\n        label=\"label\",\n        stat=\"stat\"\n    ),\n\n    # the properties below are optional\n    color=\"color\",\n    dimensions=[cloudwatch.Dimension(\n        name=\"name\",\n        value=value\n    )],\n    label=\"label\",\n    statistic=\"statistic\",\n    unit=cloudwatch.Unit.SECONDS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nvar value;\n\nMetricGraphConfig metricGraphConfig = new MetricGraphConfig {\n    MetricName = \"metricName\",\n    Namespace = \"namespace\",\n    Period = 123,\n    RenderingProperties = new MetricRenderingProperties {\n        Period = 123,\n\n        // the properties below are optional\n        Color = \"color\",\n        Label = \"label\",\n        Stat = \"stat\"\n    },\n\n    // the properties below are optional\n    Color = \"color\",\n    Dimensions = new [] { new Dimension {\n        Name = \"name\",\n        Value = value\n    } },\n    Label = \"label\",\n    Statistic = \"statistic\",\n    Unit = Unit.SECONDS\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nObject value;\n\nMetricGraphConfig metricGraphConfig = MetricGraphConfig.builder()\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n        .period(123)\n        .renderingProperties(MetricRenderingProperties.builder()\n                .period(123)\n\n                // the properties below are optional\n                .color(\"color\")\n                .label(\"label\")\n                .stat(\"stat\")\n                .build())\n\n        // the properties below are optional\n        .color(\"color\")\n        .dimensions(List.of(Dimension.builder()\n                .name(\"name\")\n                .value(value)\n                .build()))\n        .label(\"label\")\n        .statistic(\"statistic\")\n        .unit(Unit.SECONDS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar value interface{}\nmetricGraphConfig := &metricGraphConfig{\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n\tperiod: jsii.Number(123),\n\trenderingProperties: &metricRenderingProperties{\n\t\tperiod: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tcolor: jsii.String(\"color\"),\n\t\tlabel: jsii.String(\"label\"),\n\t\tstat: jsii.String(\"stat\"),\n\t},\n\n\t// the properties below are optional\n\tcolor: jsii.String(\"color\"),\n\tdimensions: []dimension{\n\t\t&dimension{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: value,\n\t\t},\n\t},\n\tlabel: jsii.String(\"label\"),\n\tstatistic: jsii.String(\"statistic\"),\n\tunit: cloudwatch.unit_SECONDS,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\nconst metricGraphConfig: cloudwatch.MetricGraphConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: 123,\n  renderingProperties: {\n    period: 123,\n\n    // the properties below are optional\n    color: 'color',\n    label: 'label',\n    stat: 'stat',\n  },\n\n  // the properties below are optional\n  color: 'color',\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  label: 'label',\n  statistic: 'statistic',\n  unit: cloudwatch.Unit.SECONDS,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricGraphConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MetricGraphConfig",
        "@aws-cdk/aws-cloudwatch.MetricRenderingProperties",
        "@aws-cdk/aws-cloudwatch.Unit",
        "@aws-cdk/aws-cloudwatch.Unit#SECONDS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const value: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricGraphConfig: cloudwatch.MetricGraphConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: 123,\n  renderingProperties: {\n    period: 123,\n\n    // the properties below are optional\n    color: 'color',\n    label: 'label',\n    stat: 'stat',\n  },\n\n  // the properties below are optional\n  color: 'color',\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  label: 'label',\n  statistic: 'statistic',\n  unit: cloudwatch.Unit.SECONDS,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 24,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "18d3aa54426f483c55cb5ae5912beaecc66dc4b7e7b952f3069f3ad9ffc4bf2f"
    },
    "f5828401125c86d5de81c15818c8f7f7414ee6476c3546fbd86f149bb92bd24e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n# delivery_stream: firehose.DeliveryStream\n\n\n# Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nincoming_bytes_percent_of_limit = cloudwatch.MathExpression(\n    expression=\"incomingBytes / 300 / bytePerSecLimit\",\n    using_metrics={\n        \"incoming_bytes\": delivery_stream.metric_incoming_bytes(statistic=cloudwatch.Statistic.SUM),\n        \"byte_per_sec_limit\": delivery_stream.metric(\"BytesPerSecondLimit\")\n    }\n)\n\ncloudwatch.Alarm(self, \"Alarm\",\n    metric=incoming_bytes_percent_of_limit,\n    threshold=0.9,\n    evaluation_periods=3\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\nDeliveryStream deliveryStream;\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nMathExpression incomingBytesPercentOfLimit = new MathExpression(new MathExpressionProps {\n    Expression = \"incomingBytes / 300 / bytePerSecLimit\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"incomingBytes\", deliveryStream.MetricIncomingBytes(new MetricOptions { Statistic = Statistic.SUM }) },\n        { \"bytePerSecLimit\", deliveryStream.Metric(\"BytesPerSecondLimit\") }\n    }\n});\n\nnew Alarm(this, \"Alarm\", new AlarmProps {\n    Metric = incomingBytesPercentOfLimit,\n    Threshold = 0.9,\n    EvaluationPeriods = 3\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\nDeliveryStream deliveryStream;\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nMathExpression incomingBytesPercentOfLimit = MathExpression.Builder.create()\n        .expression(\"incomingBytes / 300 / bytePerSecLimit\")\n        .usingMetrics(Map.of(\n                \"incomingBytes\", deliveryStream.metricIncomingBytes(MetricOptions.builder().statistic(Statistic.SUM).build()),\n                \"bytePerSecLimit\", deliveryStream.metric(\"BytesPerSecondLimit\")))\n        .build();\n\nAlarm.Builder.create(this, \"Alarm\")\n        .metric(incomingBytesPercentOfLimit)\n        .threshold(0.9)\n        .evaluationPeriods(3)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nvar deliveryStream deliveryStream\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nincomingBytesPercentOfLimit := cloudwatch.NewMathExpression(&mathExpressionProps{\n\texpression: jsii.String(\"incomingBytes / 300 / bytePerSecLimit\"),\n\tusingMetrics: map[string]iMetric{\n\t\t\"incomingBytes\": deliveryStream.metricIncomingBytes(&MetricOptions{\n\t\t\t\"statistic\": cloudwatch.Statistic_SUM,\n\t\t}),\n\t\t\"bytePerSecLimit\": deliveryStream.metric(jsii.String(\"BytesPerSecondLimit\")),\n\t},\n})\n\ncloudwatch.NewAlarm(this, jsii.String(\"Alarm\"), &alarmProps{\n\tmetric: incomingBytesPercentOfLimit,\n\tthreshold: jsii.Number(0.9),\n\tevaluationPeriods: jsii.Number(3),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.Statistic",
        "@aws-cdk/aws-cloudwatch.Statistic#SUM",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Size, Stack } from '@aws-cdk/core';\nimport * as firehose from '@aws-cdk/aws-kinesisfirehose';\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as destinations from '@aws-cdk/aws-kinesisfirehose-destinations';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "510ce058a1b61e1165c65d1e636f347b2e3db933f5a1ca9e2bc016e94fcd0fdf"
    },
    "81b645e1a11b3337b864e4208b1258c45aba806cda3c6e686d060e4bc1831dbf": {
      "translations": {
        "python": {
          "source": "hosted_zone = route53.HostedZone(self, \"MyHostedZone\", zone_name=\"example.org\")\nmetric = cloudwatch.Metric(\n    namespace=\"AWS/Route53\",\n    metric_name=\"DNSQueries\",\n    dimensions_map={\n        \"HostedZoneId\": hosted_zone.hosted_zone_id\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone hostedZone = new HostedZone(this, \"MyHostedZone\", new HostedZoneProps { ZoneName = \"example.org\" });\nMetric metric = new Metric(new MetricProps {\n    Namespace = \"AWS/Route53\",\n    MetricName = \"DNSQueries\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"HostedZoneId\", hostedZone.HostedZoneId }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone hostedZone = HostedZone.Builder.create(this, \"MyHostedZone\").zoneName(\"example.org\").build();\nMetric metric = Metric.Builder.create()\n        .namespace(\"AWS/Route53\")\n        .metricName(\"DNSQueries\")\n        .dimensionsMap(Map.of(\n                \"HostedZoneId\", hostedZone.getHostedZoneId()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "hostedZone := route53.NewHostedZone(this, jsii.String(\"MyHostedZone\"), &hostedZoneProps{\n\tzoneName: jsii.String(\"example.org\"),\n})\nmetric := cloudwatch.NewMetric(&metricProps{\n\tnamespace: jsii.String(\"AWS/Route53\"),\n\tmetricName: jsii.String(\"DNSQueries\"),\n\tdimensionsMap: map[string]*string{\n\t\t\"HostedZoneId\": hostedZone.hostedZoneId,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#hostedZoneId",
        "@aws-cdk/aws-route53.HostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "226d2e5e768b3619335474aeae4eb668e6a7859e306e3c9b66f2c925830002f2"
    },
    "9d32c3a4b715eca9b760a5c7f04a4f8b7dde1422804dabb9bd92ae6dc2d33cb3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_rendering_properties = cloudwatch.MetricRenderingProperties(\n    period=123,\n\n    # the properties below are optional\n    color=\"color\",\n    label=\"label\",\n    stat=\"stat\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricRenderingProperties metricRenderingProperties = new MetricRenderingProperties {\n    Period = 123,\n\n    // the properties below are optional\n    Color = \"color\",\n    Label = \"label\",\n    Stat = \"stat\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricRenderingProperties metricRenderingProperties = MetricRenderingProperties.builder()\n        .period(123)\n\n        // the properties below are optional\n        .color(\"color\")\n        .label(\"label\")\n        .stat(\"stat\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricRenderingProperties := &metricRenderingProperties{\n\tperiod: jsii.Number(123),\n\n\t// the properties below are optional\n\tcolor: jsii.String(\"color\"),\n\tlabel: jsii.String(\"label\"),\n\tstat: jsii.String(\"stat\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricRenderingProperties: cloudwatch.MetricRenderingProperties = {\n  period: 123,\n\n  // the properties below are optional\n  color: 'color',\n  label: 'label',\n  stat: 'stat',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricRenderingProperties"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MetricRenderingProperties"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricRenderingProperties: cloudwatch.MetricRenderingProperties = {\n  period: 123,\n\n  // the properties below are optional\n  color: 'color',\n  label: 'label',\n  stat: 'stat',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "f2cd913721e120418e64a4e8cbad98288feffd4953434cfd4c7ac9b4bac514ac"
    },
    "f57c6c75b61a2a513ccd16878a4c9c1b3f52bdcd60fe7fc5c7e287875cf4fe3f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\nimport aws_cdk.core as cdk\n\n# value: Any\n\nmetric_stat_config = cloudwatch.MetricStatConfig(\n    metric_name=\"metricName\",\n    namespace=\"namespace\",\n    period=cdk.Duration.minutes(30),\n    statistic=\"statistic\",\n\n    # the properties below are optional\n    account=\"account\",\n    dimensions=[cloudwatch.Dimension(\n        name=\"name\",\n        value=value\n    )],\n    region=\"region\",\n    unit_filter=cloudwatch.Unit.SECONDS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\nusing Amazon.CDK;\n\nvar value;\nMetricStatConfig metricStatConfig = new MetricStatConfig {\n    MetricName = \"metricName\",\n    Namespace = \"namespace\",\n    Period = Duration.Minutes(30),\n    Statistic = \"statistic\",\n\n    // the properties below are optional\n    Account = \"account\",\n    Dimensions = new [] { new Dimension {\n        Name = \"name\",\n        Value = value\n    } },\n    Region = \"region\",\n    UnitFilter = Unit.SECONDS\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\nimport software.amazon.awscdk.core.*;\n\nObject value;\n\nMetricStatConfig metricStatConfig = MetricStatConfig.builder()\n        .metricName(\"metricName\")\n        .namespace(\"namespace\")\n        .period(Duration.minutes(30))\n        .statistic(\"statistic\")\n\n        // the properties below are optional\n        .account(\"account\")\n        .dimensions(List.of(Dimension.builder()\n                .name(\"name\")\n                .value(value)\n                .build()))\n        .region(\"region\")\n        .unitFilter(Unit.SECONDS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar value interface{}\nmetricStatConfig := &metricStatConfig{\n\tmetricName: jsii.String(\"metricName\"),\n\tnamespace: jsii.String(\"namespace\"),\n\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\tstatistic: jsii.String(\"statistic\"),\n\n\t// the properties below are optional\n\taccount: jsii.String(\"account\"),\n\tdimensions: []dimension{\n\t\t&dimension{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: value,\n\t\t},\n\t},\n\tregion: jsii.String(\"region\"),\n\tunitFilter: cloudwatch.unit_SECONDS,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const value: any;\nconst metricStatConfig: cloudwatch.MetricStatConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: cdk.Duration.minutes(30),\n  statistic: 'statistic',\n\n  // the properties below are optional\n  account: 'account',\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  region: 'region',\n  unitFilter: cloudwatch.Unit.SECONDS,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricStatConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MetricStatConfig",
        "@aws-cdk/aws-cloudwatch.Unit",
        "@aws-cdk/aws-cloudwatch.Unit#SECONDS",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const value: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricStatConfig: cloudwatch.MetricStatConfig = {\n  metricName: 'metricName',\n  namespace: 'namespace',\n  period: cdk.Duration.minutes(30),\n  statistic: 'statistic',\n\n  // the properties below are optional\n  account: 'account',\n  dimensions: [{\n    name: 'name',\n    value: value,\n  }],\n  region: 'region',\n  unitFilter: cloudwatch.Unit.SECONDS,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 23,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "a0fc43eec1868d8f1d6c9045c370a900ca8e58d7f84944eeaaf20d9e54f8cace"
    },
    "129b4d094a69fb9843f1cdb600420209d1b9ffe07b15f9c98d7be20a7924e90f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nmetric_widget_props = cloudwatch.MetricWidgetProps(\n    height=123,\n    region=\"region\",\n    title=\"title\",\n    width=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nMetricWidgetProps metricWidgetProps = new MetricWidgetProps {\n    Height = 123,\n    Region = \"region\",\n    Title = \"title\",\n    Width = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nMetricWidgetProps metricWidgetProps = MetricWidgetProps.builder()\n        .height(123)\n        .region(\"region\")\n        .title(\"title\")\n        .width(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nmetricWidgetProps := &metricWidgetProps{\n\theight: jsii.Number(123),\n\tregion: jsii.String(\"region\"),\n\ttitle: jsii.String(\"title\"),\n\twidth: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst metricWidgetProps: cloudwatch.MetricWidgetProps = {\n  height: 123,\n  region: 'region',\n  title: 'title',\n  width: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MetricWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricWidgetProps: cloudwatch.MetricWidgetProps = {\n  height: 123,\n  region: 'region',\n  title: 'title',\n  width: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "de45e0bb4e5a83cc1fd42a118ce30cc321379e62fc9cf2a2ba6790e18348d763"
    },
    "e507cda555036322f791376427f4332c4ef5baf958640a0f71302cee806f1abd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# widget: cloudwatch.IWidget\n\nrow = cloudwatch.Row(widget)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nIWidget widget;\n\nRow row = new Row(widget);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nIWidget widget;\n\nRow row = new Row(widget);",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar widget iWidget\nrow := cloudwatch.NewRow(widget)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\nconst row = new cloudwatch.Row(widget);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Row"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.Row"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const widget: cloudwatch.IWidget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst row = new cloudwatch.Row(widget);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "a9a64b7bb491f4481dc6722daa13844ea15a96480de5285b34d2838050a009e5"
    },
    "2f48db7ba8f0da40eab46e41f79a43beaf8e53cf0592c6a8ed0c27908f36e24e": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# visitor_count: cloudwatch.Metric\n# purchase_count: cloudwatch.Metric\n\n\ndashboard.add_widgets(cloudwatch.SingleValueWidget(\n    metrics=[visitor_count, purchase_count]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.AddWidgets(new SingleValueWidget(new SingleValueWidgetProps {\n    Metrics = new [] { visitorCount, purchaseCount }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.addWidgets(SingleValueWidget.Builder.create()\n        .metrics(List.of(visitorCount, purchaseCount))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar visitorCount metric\nvar purchaseCount metric\n\ndashboard.addWidgets(cloudwatch.NewSingleValueWidget(&singleValueWidgetProps{\n\tmetrics: []iMetric{\n\t\tvisitorCount,\n\t\tpurchaseCount,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.SingleValueWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 16,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a2c505727d9abafe653a0e97b3c86cae9d2be3b9abf3639795bf82dcfa31cce"
    },
    "3f638a5b16d36ef2b6c8ef9d0056d72df7cad2afa9750b440cd8ef5134ee9285": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n# visitor_count: cloudwatch.Metric\n# purchase_count: cloudwatch.Metric\n\n\ndashboard.add_widgets(cloudwatch.SingleValueWidget(\n    metrics=[visitor_count, purchase_count]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.AddWidgets(new SingleValueWidget(new SingleValueWidgetProps {\n    Metrics = new [] { visitorCount, purchaseCount }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.addWidgets(SingleValueWidget.Builder.create()\n        .metrics(List.of(visitorCount, purchaseCount))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\nvar visitorCount metric\nvar purchaseCount metric\n\ndashboard.addWidgets(cloudwatch.NewSingleValueWidget(&singleValueWidgetProps{\n\tmetrics: []iMetric{\n\t\tvisitorCount,\n\t\tpurchaseCount,\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 16,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a2c505727d9abafe653a0e97b3c86cae9d2be3b9abf3639795bf82dcfa31cce"
    },
    "41d7e5a97976ed9ab8c0b3886e491257e648197a3c42a967a4372a5bafe59b1c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nspacer = cloudwatch.Spacer(\n    height=123,\n    width=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nSpacer spacer = new Spacer(new SpacerProps {\n    Height = 123,\n    Width = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nSpacer spacer = Spacer.Builder.create()\n        .height(123)\n        .width(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nspacer := cloudwatch.NewSpacer(&spacerProps{\n\theight: jsii.Number(123),\n\twidth: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst spacer = new cloudwatch.Spacer(/* all optional props */ {\n  height: 123,\n  width: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Spacer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Spacer",
        "@aws-cdk/aws-cloudwatch.SpacerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spacer = new cloudwatch.Spacer(/* all optional props */ {\n  height: 123,\n  width: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9150f0c73371567609b786b348f3c09b4300fb775f071338754a8c7ce37a1a7d"
    },
    "39a2ef616aeb4da33cf74aff668e84153ded54ea7e8408936b69c65e5899a717": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\nspacer_props = cloudwatch.SpacerProps(\n    height=123,\n    width=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nSpacerProps spacerProps = new SpacerProps {\n    Height = 123,\n    Width = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nSpacerProps spacerProps = SpacerProps.builder()\n        .height(123)\n        .width(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nspacerProps := &spacerProps{\n\theight: jsii.Number(123),\n\twidth: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst spacerProps: cloudwatch.SpacerProps = {\n  height: 123,\n  width: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.SpacerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.SpacerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spacerProps: cloudwatch.SpacerProps = {\n  height: 123,\n  width: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c21455e492e1b160df87414d0d0d72f187f7eb2b1e749fd893bd49b556761b95"
    },
    "2be9885849f4c603f08514c05509ad6dcbca344a2b9952af1b7619cf5278f1d6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n# delivery_stream: firehose.DeliveryStream\n\n\n# Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nincoming_bytes_percent_of_limit = cloudwatch.MathExpression(\n    expression=\"incomingBytes / 300 / bytePerSecLimit\",\n    using_metrics={\n        \"incoming_bytes\": delivery_stream.metric_incoming_bytes(statistic=cloudwatch.Statistic.SUM),\n        \"byte_per_sec_limit\": delivery_stream.metric(\"BytesPerSecondLimit\")\n    }\n)\n\ncloudwatch.Alarm(self, \"Alarm\",\n    metric=incoming_bytes_percent_of_limit,\n    threshold=0.9,\n    evaluation_periods=3\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\nDeliveryStream deliveryStream;\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nMathExpression incomingBytesPercentOfLimit = new MathExpression(new MathExpressionProps {\n    Expression = \"incomingBytes / 300 / bytePerSecLimit\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"incomingBytes\", deliveryStream.MetricIncomingBytes(new MetricOptions { Statistic = Statistic.SUM }) },\n        { \"bytePerSecLimit\", deliveryStream.Metric(\"BytesPerSecondLimit\") }\n    }\n});\n\nnew Alarm(this, \"Alarm\", new AlarmProps {\n    Metric = incomingBytesPercentOfLimit,\n    Threshold = 0.9,\n    EvaluationPeriods = 3\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\nDeliveryStream deliveryStream;\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nMathExpression incomingBytesPercentOfLimit = MathExpression.Builder.create()\n        .expression(\"incomingBytes / 300 / bytePerSecLimit\")\n        .usingMetrics(Map.of(\n                \"incomingBytes\", deliveryStream.metricIncomingBytes(MetricOptions.builder().statistic(Statistic.SUM).build()),\n                \"bytePerSecLimit\", deliveryStream.metric(\"BytesPerSecondLimit\")))\n        .build();\n\nAlarm.Builder.create(this, \"Alarm\")\n        .metric(incomingBytesPercentOfLimit)\n        .threshold(0.9)\n        .evaluationPeriods(3)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nvar deliveryStream deliveryStream\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nincomingBytesPercentOfLimit := cloudwatch.NewMathExpression(&mathExpressionProps{\n\texpression: jsii.String(\"incomingBytes / 300 / bytePerSecLimit\"),\n\tusingMetrics: map[string]iMetric{\n\t\t\"incomingBytes\": deliveryStream.metricIncomingBytes(&MetricOptions{\n\t\t\t\"statistic\": cloudwatch.Statistic_SUM,\n\t\t}),\n\t\t\"bytePerSecLimit\": deliveryStream.metric(jsii.String(\"BytesPerSecondLimit\")),\n\t},\n})\n\ncloudwatch.NewAlarm(this, jsii.String(\"Alarm\"), &alarmProps{\n\tmetric: incomingBytesPercentOfLimit,\n\tthreshold: jsii.Number(0.9),\n\tevaluationPeriods: jsii.Number(3),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Statistic"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.Statistic",
        "@aws-cdk/aws-cloudwatch.Statistic#SUM",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Size, Stack } from '@aws-cdk/core';\nimport * as firehose from '@aws-cdk/aws-kinesisfirehose';\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as destinations from '@aws-cdk/aws-kinesisfirehose-destinations';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "510ce058a1b61e1165c65d1e636f347b2e3db933f5a1ca9e2bc016e94fcd0fdf"
    },
    "58674675282f7797692f025248ed8ff831e462577f820b19ac9f985af7c74b04": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.TextWidget(\n    markdown=\"# Key Performance Indicators\"\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new TextWidget(new TextWidgetProps {\n    Markdown = \"# Key Performance Indicators\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(TextWidget.Builder.create()\n        .markdown(\"# Key Performance Indicators\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewTextWidget(&textWidgetProps{\n\tmarkdown: jsii.String(\"# Key Performance Indicators\"),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.TextWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.TextWidget",
        "@aws-cdk/aws-cloudwatch.TextWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "840d59935c40a04fe23656d25d0a4951fd7b817663d33eac77f797151ee52974"
    },
    "bb9be7573bd114b0fd0d5db8370ef1565975758a3db244c9a64927e09d8c7db8": {
      "translations": {
        "python": {
          "source": "# dashboard: cloudwatch.Dashboard\n\n\ndashboard.add_widgets(cloudwatch.TextWidget(\n    markdown=\"# Key Performance Indicators\"\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new TextWidget(new TextWidgetProps {\n    Markdown = \"# Key Performance Indicators\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(TextWidget.Builder.create()\n        .markdown(\"# Key Performance Indicators\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var dashboard dashboard\n\ndashboard.addWidgets(cloudwatch.NewTextWidget(&textWidgetProps{\n\tmarkdown: jsii.String(\"# Key Performance Indicators\"),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.TextWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.TextWidget",
        "@aws-cdk/aws-cloudwatch.TextWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "840d59935c40a04fe23656d25d0a4951fd7b817663d33eac77f797151ee52974"
    },
    "c951e02da4ed92ab3cd1b1e30aa9ffd901ccd6374eb299a0a62cbe65442c861b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    timeout=cdk.Duration.minutes(5)\n)\n\nif fn.timeout:\n    cloudwatch.Alarm(self, \"MyAlarm\",\n        metric=fn.metric_duration().with(\n            statistic=\"Maximum\"\n        ),\n        evaluation_periods=1,\n        datapoints_to_alarm=1,\n        threshold=fn.timeout.to_milliseconds(),\n        treat_missing_data=cloudwatch.TreatMissingData.IGNORE,\n        alarm_name=\"My Lambda Timeout\"\n    )",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.CloudWatch;\n\n\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Timeout = Duration.Minutes(5)\n});\n\nif (fn.Timeout)\n{\n    new Alarm(this, \"MyAlarm\", new AlarmProps {\n        Metric = fn.MetricDuration().With(new MetricOptions {\n            Statistic = \"Maximum\"\n        }),\n        EvaluationPeriods = 1,\n        DatapointsToAlarm = 1,\n        Threshold = fn.Timeout.ToMilliseconds(),\n        TreatMissingData = TreatMissingData.IGNORE,\n        AlarmName = \"My Lambda Timeout\"\n    });\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .timeout(Duration.minutes(5))\n        .build();\n\nif (fn.getTimeout()) {\n    Alarm.Builder.create(this, \"MyAlarm\")\n            .metric(fn.metricDuration().with(MetricOptions.builder()\n                    .statistic(\"Maximum\")\n                    .build()))\n            .evaluationPeriods(1)\n            .datapointsToAlarm(1)\n            .threshold(fn.timeout.toMilliseconds())\n            .treatMissingData(TreatMissingData.IGNORE)\n            .alarmName(\"My Lambda Timeout\")\n            .build();\n}",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunction\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_12_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromAsset(path.join(__dirname, jsii.String(\"lambda-handler\"))),\n\ttimeout: cdk.duration.minutes(jsii.Number(5)),\n})\n\nif fn.timeout {\n\tcloudwatch.NewAlarm(this, jsii.String(\"MyAlarm\"), &alarmProps{\n\t\tmetric: fn.metricDuration().with(&metricOptions{\n\t\t\tstatistic: jsii.String(\"Maximum\"),\n\t\t}),\n\t\tevaluationPeriods: jsii.Number(1),\n\t\tdatapointsToAlarm: jsii.Number(1),\n\t\tthreshold: fn.timeout.toMilliseconds(),\n\t\ttreatMissingData: cloudwatch.treatMissingData_IGNORE,\n\t\talarmName: jsii.String(\"My Lambda Timeout\"),\n\t})\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.TreatMissingData"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.TreatMissingData",
        "@aws-cdk/aws-cloudwatch.TreatMissingData#IGNORE",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#timeout",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#toMilliseconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "14": 1,
        "75": 41,
        "104": 2,
        "193": 3,
        "194": 16,
        "196": 6,
        "197": 2,
        "223": 1,
        "225": 1,
        "226": 1,
        "227": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "9a1d5675b1dc31b7fd170833f01c5113b5bb336f8350b708982794b81f70e5cc"
    },
    "c62638da99f835d9f75c3b35daefeaec29f1f1c8144d36de6861697a99218247": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\ny_axis_props = cloudwatch.YAxisProps(\n    label=\"label\",\n    max=123,\n    min=123,\n    show_units=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\n\nYAxisProps yAxisProps = new YAxisProps {\n    Label = \"label\",\n    Max = 123,\n    Min = 123,\n    ShowUnits = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nYAxisProps yAxisProps = YAxisProps.builder()\n        .label(\"label\")\n        .max(123)\n        .min(123)\n        .showUnits(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nyAxisProps := &yAxisProps{\n\tlabel: jsii.String(\"label\"),\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n\tshowUnits: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nconst yAxisProps: cloudwatch.YAxisProps = {\n  label: 'label',\n  max: 123,\n  min: 123,\n  showUnits: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.YAxisProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.YAxisProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst yAxisProps: cloudwatch.YAxisProps = {\n  label: 'label',\n  max: 123,\n  min: 123,\n  showUnits: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "870170e9281957101664de6d55f1b17a206bd4ffe3187ae6413a75763f0c5bde"
    }
  }
}
