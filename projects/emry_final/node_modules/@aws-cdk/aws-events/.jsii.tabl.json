{
  "version": "2",
  "toolVersion": "1.57.0",
  "snippets": {
    "7cf49f40f663c44c6234d9e5bf65b18c13a6e7329610df601d01a65a8bccd5d7": {
      "translations": {
        "python": {
          "source": "# repo: codecommit.Repository\n# project: codebuild.Project\n\n\non_commit_rule = repo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project),\n    branches=[\"master\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repo;\nProject project;\n\n\nRule onCommitRule = repo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project),\n    Branches = new [] { \"master\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repo;\nProject project;\n\n\nRule onCommitRule = repo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new CodeBuildProject(project))\n        .branches(List.of(\"master\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var repo repository\nvar project project\n\nonCommitRule := repo.onCommit(jsii.String(\"OnCommit\"), &onCommitOptions{\n\ttarget: targets.NewCodeBuildProject(project),\n\tbranches: []*string{\n\t\tjsii.String(\"master\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const repo: codecommit.Repository;\ndeclare const project: codebuild.Project;\n\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n  branches: ['master']\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 61
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repo: codecommit.Repository;\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n  branches: ['master']\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "17d9c68eb4fac1cbff55367b87d7eb6c7a573c4011e1f272ac93eda10fc8620d"
    },
    "0ff6e72a22dbd36dacd690373116c162c1bd2b4ff43d7d01218d1ac6811c0ab7": {
      "translations": {
        "python": {
          "source": "# on_commit_rule: events.Rule\n# topic: sns.Topic\n\n\non_commit_rule.add_target(targets.SnsTopic(topic,\n    message=events.RuleTargetInput.from_text(f\"A commit was pushed to the repository {codecommit.ReferenceEvent.repositoryName} on branch {codecommit.ReferenceEvent.referenceName}\")\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.AddTarget(new SnsTopic(topic, new SnsTopicProps {\n    Message = RuleTargetInput.FromText($\"A commit was pushed to the repository {codecommit.ReferenceEvent.repositoryName} on branch {codecommit.ReferenceEvent.referenceName}\")\n}));",
          "version": "1"
        },
        "java": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.addTarget(SnsTopic.Builder.create(topic)\n        .message(RuleTargetInput.fromText(String.format(\"A commit was pushed to the repository %s on branch %s\", ReferenceEvent.getRepositoryName(), ReferenceEvent.getReferenceName())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var onCommitRule rule\nvar topic topic\n\nonCommitRule.addTarget(targets.NewSnsTopic(topic, &snsTopicProps{\n\tmessage: events.ruleTargetInput.fromText(\n\tfmt.Sprintf(\"A commit was pushed to the repository %v on branch %v\", codecommit.referenceEvent.repositoryName, codecommit.*referenceEvent.referenceName)),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromText(\n    `A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`\n  )\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events-targets.SnsTopicProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromText",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromText(\n    `A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`\n  )\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 21,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 8,
        "196": 2,
        "197": 1,
        "211": 1,
        "221": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f145cbc85542cf87295364cac1028907524b57d1a5ffe8cc47bd11ee09edfd08"
    },
    "8acd9a78f8d185adde2917387febff93e5528fbbc486f4e4718724eadc295dca": {
      "translations": {
        "python": {
          "source": "# on_commit_rule: events.Rule\n# topic: sns.Topic\n\n\non_commit_rule.add_target(targets.SnsTopic(topic,\n    message=events.RuleTargetInput.from_object({\n        \"DataType\": f\"custom_{events.EventField.fromPath('$.detail-type')}\"\n    })\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.AddTarget(new SnsTopic(topic, new SnsTopicProps {\n    Message = RuleTargetInput.FromObject(new Dictionary<string, string> {\n        { \"DataType\", $\"custom_{events.EventField.fromPath('$.detail-type')}\" }\n    })\n}));",
          "version": "1"
        },
        "java": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.addTarget(SnsTopic.Builder.create(topic)\n        .message(RuleTargetInput.fromObject(Map.of(\n                \"DataType\", String.format(\"custom_%s\", EventField.fromPath(\"$.detail-type\")))))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var onCommitRule rule\nvar topic topic\n\nonCommitRule.addTarget(targets.NewSnsTopic(topic, &snsTopicProps{\n\tmessage: events.ruleTargetInput.fromObject(map[string]*string{\n\t\t\"DataType\": fmt.Sprintf(\"custom_%v\", events.EventField.fromPath(jsii.String(\"$.detail-type\"))),\n\t}),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromObject(\n    {\n      DataType: `custom_${events.EventField.fromPath('$.detail-type')}`\n    }\n  )\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events-targets.SnsTopicProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromObject(\n    {\n      DataType: `custom_${events.EventField.fromPath('$.detail-type')}`\n    }\n  )\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "15": 1,
        "17": 1,
        "75": 19,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1cf19a7a748d1239f6b47dca9cd1884215f3a44d1bb074e996a16d0cb7489b02"
    },
    "eccf9afcaf8de6691b31152d3661bc14dc7cee02f8010f72354b48b5fa5ed3d8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_events import Rule, Schedule\nfrom aws_cdk.aws_events_targets import EcsTask\nfrom aws_cdk.aws_ecs import Cluster, TaskDefinition\nfrom aws_cdk.aws_iam import Role\n\n# cluster: Cluster\n# task_definition: TaskDefinition\n# role: Role\n\n\necs_task_target = EcsTask(cluster=cluster, task_definition=task_definition, role=role)\n\nRule(self, \"ScheduleRule\",\n    schedule=Schedule.cron(minute=\"0\", hour=\"4\"),\n    targets=[ecs_task_target]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = new EcsTask(new EcsTaskProps { Cluster = cluster, TaskDefinition = taskDefinition, Role = role });\n\nnew Rule(this, \"ScheduleRule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" }),\n    Targets = new [] { ecsTaskTarget }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.Rule;\nimport software.amazon.awscdk.services.events.Schedule;\nimport software.amazon.awscdk.services.events.targets.EcsTask;\nimport software.amazon.awscdk.services.ecs.Cluster;\nimport software.amazon.awscdk.services.ecs.TaskDefinition;\nimport software.amazon.awscdk.services.iam.Role;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = EcsTask.Builder.create().cluster(cluster).taskDefinition(taskDefinition).role(role).build();\n\nRule.Builder.create(this, \"ScheduleRule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .targets(List.of(ecsTaskTarget))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkawsevents \"github.com/aws-samples/dummy/awscdkawsevents\"type Rule awscdkawsevents.Rule\ntype Schedule awscdkawsevents.Scheduleimport awscdkawseventstargets \"github.com/aws-samples/dummy/awscdkawseventstargets\"type EcsTask awscdkawseventstargets.EcsTaskimport awscdkawsecs \"github.com/aws-samples/dummy/awscdkawsecs\"type Cluster awscdkawsecs.Cluster\ntype TaskDefinition awscdkawsecs.TaskDefinitionimport awscdkawsiam \"github.com/aws-samples/dummy/awscdkawsiam\"type Role awscdkawsiam.Role\n\nvar cluster cluster\nvar taskDefinition taskDefinition\nvar role role\n\necsTaskTarget := NewEcsTask(&ecsTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\trole: role,\n})\n\nNewRule(this, jsii.String(\"ScheduleRule\"), &ruleProps{\n\tschedule: schedule.cron(&cronOptions{\n\t\tminute: jsii.String(\"0\"),\n\t\thour: jsii.String(\"4\"),\n\t}),\n\ttargets: []iRuleTarget{\n\t\tecsTaskTarget,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 111
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "104": 1,
        "130": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "257": 4,
        "258": 6,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "d475f9c9575b8eb66617076935580c307d039f547f8303425190b74f03e85bd9"
    },
    "fc9533bb39108e00dfa980b5b1c40dfe71ad2e992477c5bac2208bf6ca78c9d5": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# role: iam.Role\n\n\nplatform_version = ecs.FargatePlatformVersion.VERSION1_4\necs_task_target = targets.EcsTask(cluster=cluster, task_definition=task_definition, role=role, platform_version=platform_version)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nFargatePlatformVersion platformVersion = FargatePlatformVersion.VERSION1_4;\nEcsTask ecsTaskTarget = new EcsTask(new EcsTaskProps { Cluster = cluster, TaskDefinition = taskDefinition, Role = role, PlatformVersion = platformVersion });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nFargatePlatformVersion platformVersion = FargatePlatformVersion.VERSION1_4;\nEcsTask ecsTaskTarget = EcsTask.Builder.create().cluster(cluster).taskDefinition(taskDefinition).role(role).platformVersion(platformVersion).build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar role role\n\nplatformVersion := ecs.fargatePlatformVersion_VERSION1_4\necsTaskTarget := targets.NewEcsTask(&ecsTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\trole: role,\n\tplatformVersion: platformVersion,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const role: iam.Role;\n\nconst platformVersion = ecs.FargatePlatformVersion.VERSION1_4;\nconst ecsTaskTarget = new targets.EcsTask({ cluster, taskDefinition, role, platformVersion });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 131
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#VERSION1_4",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst platformVersion = ecs.FargatePlatformVersion.VERSION1_4;\nconst ecsTaskTarget = new targets.EcsTask({ cluster, taskDefinition, role, platformVersion });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "75": 20,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "b5f36e86592cf98fd11b0a24c9b4b5f810db015b7b3a187466993616d3f2fec3"
    },
    "cb3ed42d1e89aa602607c9052cd892132b3e488d3a8a51142ae4d813b3e1bcc7": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Environment, Environment\nfrom aws_cdk.core import App, Stack\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codecommit as codecommit\nimport aws_cdk.aws_events_targets as targets\n\napp = App()\n\naccount1 = \"11111111111\"\naccount2 = \"22222222222\"\n\nstack1 = Stack(app, \"Stack1\", env=Environment(account=account1, region=\"us-west-1\"))\nrepo = codecommit.Repository(stack1, \"Repository\",\n    repository_name=\"myrepository\"\n)\n\nstack2 = Stack(app, \"Stack2\", env=Environment(account=account2, region=\"us-east-1\"))\nproject = codebuild.Project(stack2, \"Project\")\n\nrepo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodeCommit;\nusing Amazon.CDK.AWS.Events.Targets;\n\nApp app = new App();\n\nstring account1 = \"11111111111\";\nstring account2 = \"22222222222\";\n\nStack stack1 = new Stack(app, \"Stack1\", new StackProps { Env = new Environment { Account = account1, Region = \"us-west-1\" } });\nRepository repo = new Repository(stack1, \"Repository\", new RepositoryProps {\n    RepositoryName = \"myrepository\"\n});\n\nStack stack2 = new Stack(app, \"Stack2\", new StackProps { Env = new Environment { Account = account2, Region = \"us-east-1\" } });\nProject project = new Project(stack2, \"Project\", new ProjectProps { });\n\nrepo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codecommit.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nApp app = new App();\n\nString account1 = \"11111111111\";\nString account2 = \"22222222222\";\n\nStack stack1 = Stack.Builder.create(app, \"Stack1\").env(Environment.builder().account(account1).region(\"us-west-1\").build()).build();\nRepository repo = Repository.Builder.create(stack1, \"Repository\")\n        .repositoryName(\"myrepository\")\n        .build();\n\nStack stack2 = Stack.Builder.create(app, \"Stack2\").env(Environment.builder().account(account2).region(\"us-east-1\").build()).build();\nProject project = Project.Builder.create(stack2, \"Project\").build();\n\nrepo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new CodeBuildProject(project))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkcore \"github.com/aws-samples/dummy/awscdkcore\"type App awscdkcore.App\ntype Stack awscdkcore.Stackimport codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"import codecommit \"github.com/aws-samples/dummy/awscdkawscodecommit\"import targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\n\napp := NewApp()\n\naccount1 := \"11111111111\"\naccount2 := \"22222222222\"\n\nstack1 := NewStack(app, jsii.String(\"Stack1\"), &stackProps{\n\tenv: &environment{\n\t\taccount: account1,\n\t\tregion: jsii.String(\"us-west-1\"),\n\t},\n})\nrepo := codecommit.NewRepository(stack1, jsii.String(\"Repository\"), &repositoryProps{\n\trepositoryName: jsii.String(\"myrepository\"),\n})\n\nstack2 := NewStack(app, jsii.String(\"Stack2\"), &stackProps{\n\tenv: &environment{\n\t\taccount: account2,\n\t\tregion: jsii.String(\"us-east-1\"),\n\t},\n})\nproject := codebuild.NewProject(stack2, jsii.String(\"Project\"), &projectProps{\n})\n\nrepo.onCommit(jsii.String(\"OnCommit\"), &onCommitOptions{\n\ttarget: targets.NewCodeBuildProject(project),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { App, Stack } from '@aws-cdk/core';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\nconst app = new App();\n\nconst account1 = '11111111111';\nconst account2 = '22222222222';\n\nconst stack1 = new Stack(app, 'Stack1', { env: { account: account1, region: 'us-west-1' } });\nconst repo = new codecommit.Repository(stack1, 'Repository', {\n  repositoryName: 'myrepository',\n});\n\nconst stack2 = new Stack(app, 'Stack2', { env: { account: account2, region: 'us-east-1' } });\nconst project = new codebuild.Project(stack2, 'Project', {\n  // ...\n});\n\nrepo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 163
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "import { App, Stack } from '@aws-cdk/core';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\nconst app = new App();\n\nconst account1 = '11111111111';\nconst account2 = '22222222222';\n\nconst stack1 = new Stack(app, 'Stack1', { env: { account: account1, region: 'us-west-1' } });\nconst repo = new codecommit.Repository(stack1, 'Repository', {\n  repositoryName: 'myrepository',\n});\n\nconst stack2 = new Stack(app, 'Stack2', { env: { account: account2, region: 'us-east-1' } });\nconst project = new codebuild.Project(stack2, 'Project', {\n  // ...\n});\n\nrepo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n});",
      "syntaxKindCounter": {
        "10": 14,
        "75": 38,
        "193": 7,
        "194": 4,
        "196": 1,
        "197": 6,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "254": 4,
        "255": 4,
        "256": 3,
        "257": 1,
        "258": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "601170eb478d69cbb6fd1e1ef2a27a061091c3c48d95368858a17b59f2ad584b"
    },
    "9b906e679698ac5a36a82dbffb362b7397ae5c64753e3a4b41310b70c1be19a7": {
      "translations": {
        "python": {
          "source": "bus = events.EventBus(self, \"bus\",\n    event_bus_name=\"MyCustomEventBus\"\n)\n\nbus.archive(\"MyArchive\",\n    archive_name=\"MyCustomEventBusArchive\",\n    description=\"MyCustomerEventBus Archive\",\n    event_pattern=events.EventPattern(\n        account=[Stack.of(self).account]\n    ),\n    retention=Duration.days(365)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EventBus bus = new EventBus(this, \"bus\", new EventBusProps {\n    EventBusName = \"MyCustomEventBus\"\n});\n\nbus.Archive(\"MyArchive\", new BaseArchiveProps {\n    ArchiveName = \"MyCustomEventBusArchive\",\n    Description = \"MyCustomerEventBus Archive\",\n    EventPattern = new EventPattern {\n        Account = new [] { Stack.Of(this).Account }\n    },\n    Retention = Duration.Days(365)\n});",
          "version": "1"
        },
        "java": {
          "source": "EventBus bus = EventBus.Builder.create(this, \"bus\")\n        .eventBusName(\"MyCustomEventBus\")\n        .build();\n\nbus.archive(\"MyArchive\", BaseArchiveProps.builder()\n        .archiveName(\"MyCustomEventBusArchive\")\n        .description(\"MyCustomerEventBus Archive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(Stack.of(this).getAccount()))\n                .build())\n        .retention(Duration.days(365))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "bus := events.NewEventBus(this, jsii.String(\"bus\"), &eventBusProps{\n\teventBusName: jsii.String(\"MyCustomEventBus\"),\n})\n\nbus.archive(jsii.String(\"MyArchive\"), &baseArchiveProps{\n\tarchiveName: jsii.String(\"MyCustomEventBusArchive\"),\n\tdescription: jsii.String(\"MyCustomerEventBus Archive\"),\n\teventPattern: &eventPattern{\n\t\taccount: []*string{\n\t\t\t*stack.of(this).account,\n\t\t},\n\t},\n\tretention: duration.days(jsii.Number(365)),\n})",
          "version": "1"
        },
        "$": {
          "source": "const bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 204
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.BaseArchiveProps",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "8a370448c8850f9d3bf4b97e19e578ded327b3a3770acbff3aee6834ce814a3f"
    },
    "8b5cf83c5bb4b90175ce2c38aaa59de642928ef4d0c277ccebc7f0e17d8196fa": {
      "translations": {
        "python": {
          "source": "# lambda_function: lambda.Function\n\n\nevent_bus = events.EventBus.from_event_bus_arn(self, \"ImportedEventBus\", \"arn:aws:events:us-east-1:111111111:event-bus/my-event-bus\")\n\n# now you can just call methods on the eventbus\nevent_bus.grant_put_events_to(lambda_function)",
          "version": "2"
        },
        "csharp": {
          "source": "Function lambdaFunction;\n\n\nIEventBus eventBus = EventBus.FromEventBusArn(this, \"ImportedEventBus\", \"arn:aws:events:us-east-1:111111111:event-bus/my-event-bus\");\n\n// now you can just call methods on the eventbus\neventBus.GrantPutEventsTo(lambdaFunction);",
          "version": "1"
        },
        "java": {
          "source": "Function lambdaFunction;\n\n\nIEventBus eventBus = EventBus.fromEventBusArn(this, \"ImportedEventBus\", \"arn:aws:events:us-east-1:111111111:event-bus/my-event-bus\");\n\n// now you can just call methods on the eventbus\neventBus.grantPutEventsTo(lambdaFunction);",
          "version": "1"
        },
        "go": {
          "source": "var lambdaFunction function\n\neventBus := events.eventBus.fromEventBusArn(this, jsii.String(\"ImportedEventBus\"), jsii.String(\"arn:aws:events:us-east-1:111111111:event-bus/my-event-bus\"))\n\n// now you can just call methods on the eventbus\neventBus.grantPutEventsTo(lambdaFunction)",
          "version": "1"
        },
        "$": {
          "source": "declare const lambdaFunction: lambda.Function;\n\nconst eventBus = events.EventBus.fromEventBusArn(this, 'ImportedEventBus', 'arn:aws:events:us-east-1:111111111:event-bus/my-event-bus');\n\n// now you can just call methods on the eventbus\neventBus.grantPutEventsTo(lambdaFunction);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 226
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBus#fromEventBusArn",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-events.IEventBus#grantPutEventsTo",
        "@aws-cdk/aws-iam.IGrantable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const lambdaFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst eventBus = events.EventBus.fromEventBusArn(this, 'ImportedEventBus', 'arn:aws:events:us-east-1:111111111:event-bus/my-event-bus');\n\n// now you can just call methods on the eventbus\neventBus.grantPutEventsTo(lambdaFunction);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "cc068bc2c924b1e141e3c013b86be098f8cac5d226af8bee597d203bbf2dbea1"
    },
    "a4827dbeee1582d0bb87d1ecadcb5b55214df35b9893403fde11829245c840cb": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), secretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.ApiDestination"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d2c56457bed24a5a332230dfd2303263bf2a0e23e167544d086fc2ba69a24328"
    },
    "c8275deddeed5cd49edb8c21a818c2b3d1bd40389befb97dd8166e2ccb80f9f4": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), secretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.ApiDestinationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d2c56457bed24a5a332230dfd2303263bf2a0e23e167544d086fc2ba69a24328"
    },
    "3bfa4880a9c7066e6c40c8a52777eb616b63d2a331c6d5960ae5081f2f8d43af": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.core as cdk\n\n# detail: Any\n# event_bus: events.EventBus\n\narchive = events.Archive(self, \"MyArchive\",\n    event_pattern=events.EventPattern(\n        account=[\"account\"],\n        detail={\n            \"detail_key\": detail\n        },\n        detail_type=[\"detailType\"],\n        id=[\"id\"],\n        region=[\"region\"],\n        resources=[\"resources\"],\n        source=[\"source\"],\n        time=[\"time\"],\n        version=[\"version\"]\n    ),\n    source_event_bus=event_bus,\n\n    # the properties below are optional\n    archive_name=\"archiveName\",\n    description=\"description\",\n    retention=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK;\n\nvar detail;\nEventBus eventBus;\nArchive archive = new Archive(this, \"MyArchive\", new ArchiveProps {\n    EventPattern = new EventPattern {\n        Account = new [] { \"account\" },\n        Detail = new Dictionary<string, object> {\n            { \"detailKey\", detail }\n        },\n        DetailType = new [] { \"detailType\" },\n        Id = new [] { \"id\" },\n        Region = new [] { \"region\" },\n        Resources = new [] { \"resources\" },\n        Source = new [] { \"source\" },\n        Time = new [] { \"time\" },\n        Version = new [] { \"version\" }\n    },\n    SourceEventBus = eventBus,\n\n    // the properties below are optional\n    ArchiveName = \"archiveName\",\n    Description = \"description\",\n    Retention = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.core.*;\n\nObject detail;\nEventBus eventBus;\n\nArchive archive = Archive.Builder.create(this, \"MyArchive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(\"account\"))\n                .detail(Map.of(\n                        \"detailKey\", detail))\n                .detailType(List.of(\"detailType\"))\n                .id(List.of(\"id\"))\n                .region(List.of(\"region\"))\n                .resources(List.of(\"resources\"))\n                .source(List.of(\"source\"))\n                .time(List.of(\"time\"))\n                .version(List.of(\"version\"))\n                .build())\n        .sourceEventBus(eventBus)\n\n        // the properties below are optional\n        .archiveName(\"archiveName\")\n        .description(\"description\")\n        .retention(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar detail interface{}\nvar eventBus eventBus\narchive := events.NewArchive(this, jsii.String(\"MyArchive\"), &archiveProps{\n\teventPattern: &eventPattern{\n\t\taccount: []*string{\n\t\t\tjsii.String(\"account\"),\n\t\t},\n\t\tdetail: map[string]interface{}{\n\t\t\t\"detailKey\": detail,\n\t\t},\n\t\tdetailType: []*string{\n\t\t\tjsii.String(\"detailType\"),\n\t\t},\n\t\tid: []*string{\n\t\t\tjsii.String(\"id\"),\n\t\t},\n\t\tregion: []*string{\n\t\t\tjsii.String(\"region\"),\n\t\t},\n\t\tresources: []*string{\n\t\t\tjsii.String(\"resources\"),\n\t\t},\n\t\tsource: []*string{\n\t\t\tjsii.String(\"source\"),\n\t\t},\n\t\ttime: []*string{\n\t\t\tjsii.String(\"time\"),\n\t\t},\n\t\tversion: []*string{\n\t\t\tjsii.String(\"version\"),\n\t\t},\n\t},\n\tsourceEventBus: eventBus,\n\n\t// the properties below are optional\n\tarchiveName: jsii.String(\"archiveName\"),\n\tdescription: jsii.String(\"description\"),\n\tretention: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const detail: any;\ndeclare const eventBus: events.EventBus;\nconst archive = new events.Archive(this, 'MyArchive', {\n  eventPattern: {\n    account: ['account'],\n    detail: {\n      detailKey: detail,\n    },\n    detailType: ['detailType'],\n    id: ['id'],\n    region: ['region'],\n    resources: ['resources'],\n    source: ['source'],\n    time: ['time'],\n    version: ['version'],\n  },\n  sourceEventBus: eventBus,\n\n  // the properties below are optional\n  archiveName: 'archiveName',\n  description: 'description',\n  retention: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.Archive"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.Archive",
        "@aws-cdk/aws-events.ArchiveProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const detail: any;\ndeclare const eventBus: events.EventBus;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst archive = new events.Archive(this, 'MyArchive', {\n  eventPattern: {\n    account: ['account'],\n    detail: {\n      detailKey: detail,\n    },\n    detailType: ['detailType'],\n    id: ['id'],\n    region: ['region'],\n    resources: ['resources'],\n    source: ['source'],\n    time: ['time'],\n    version: ['version'],\n  },\n  sourceEventBus: eventBus,\n\n  // the properties below are optional\n  archiveName: 'archiveName',\n  description: 'description',\n  retention: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 29,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "192": 8,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "9e5d7d2ecf1da652d5cfd80939e175c3e06664bc53dde30279901cafda14007c"
    },
    "a0af5e04f438e5dd410292fb3f633daa1025f388fadc456653778cda58bc8174": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.core as cdk\n\n# detail: Any\n# event_bus: events.EventBus\n\narchive_props = events.ArchiveProps(\n    event_pattern=events.EventPattern(\n        account=[\"account\"],\n        detail={\n            \"detail_key\": detail\n        },\n        detail_type=[\"detailType\"],\n        id=[\"id\"],\n        region=[\"region\"],\n        resources=[\"resources\"],\n        source=[\"source\"],\n        time=[\"time\"],\n        version=[\"version\"]\n    ),\n    source_event_bus=event_bus,\n\n    # the properties below are optional\n    archive_name=\"archiveName\",\n    description=\"description\",\n    retention=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK;\n\nvar detail;\nEventBus eventBus;\nArchiveProps archiveProps = new ArchiveProps {\n    EventPattern = new EventPattern {\n        Account = new [] { \"account\" },\n        Detail = new Dictionary<string, object> {\n            { \"detailKey\", detail }\n        },\n        DetailType = new [] { \"detailType\" },\n        Id = new [] { \"id\" },\n        Region = new [] { \"region\" },\n        Resources = new [] { \"resources\" },\n        Source = new [] { \"source\" },\n        Time = new [] { \"time\" },\n        Version = new [] { \"version\" }\n    },\n    SourceEventBus = eventBus,\n\n    // the properties below are optional\n    ArchiveName = \"archiveName\",\n    Description = \"description\",\n    Retention = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.core.*;\n\nObject detail;\nEventBus eventBus;\n\nArchiveProps archiveProps = ArchiveProps.builder()\n        .eventPattern(EventPattern.builder()\n                .account(List.of(\"account\"))\n                .detail(Map.of(\n                        \"detailKey\", detail))\n                .detailType(List.of(\"detailType\"))\n                .id(List.of(\"id\"))\n                .region(List.of(\"region\"))\n                .resources(List.of(\"resources\"))\n                .source(List.of(\"source\"))\n                .time(List.of(\"time\"))\n                .version(List.of(\"version\"))\n                .build())\n        .sourceEventBus(eventBus)\n\n        // the properties below are optional\n        .archiveName(\"archiveName\")\n        .description(\"description\")\n        .retention(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar detail interface{}\nvar eventBus eventBus\narchiveProps := &archiveProps{\n\teventPattern: &eventPattern{\n\t\taccount: []*string{\n\t\t\tjsii.String(\"account\"),\n\t\t},\n\t\tdetail: map[string]interface{}{\n\t\t\t\"detailKey\": detail,\n\t\t},\n\t\tdetailType: []*string{\n\t\t\tjsii.String(\"detailType\"),\n\t\t},\n\t\tid: []*string{\n\t\t\tjsii.String(\"id\"),\n\t\t},\n\t\tregion: []*string{\n\t\t\tjsii.String(\"region\"),\n\t\t},\n\t\tresources: []*string{\n\t\t\tjsii.String(\"resources\"),\n\t\t},\n\t\tsource: []*string{\n\t\t\tjsii.String(\"source\"),\n\t\t},\n\t\ttime: []*string{\n\t\t\tjsii.String(\"time\"),\n\t\t},\n\t\tversion: []*string{\n\t\t\tjsii.String(\"version\"),\n\t\t},\n\t},\n\tsourceEventBus: eventBus,\n\n\t// the properties below are optional\n\tarchiveName: jsii.String(\"archiveName\"),\n\tdescription: jsii.String(\"description\"),\n\tretention: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const detail: any;\ndeclare const eventBus: events.EventBus;\nconst archiveProps: events.ArchiveProps = {\n  eventPattern: {\n    account: ['account'],\n    detail: {\n      detailKey: detail,\n    },\n    detailType: ['detailType'],\n    id: ['id'],\n    region: ['region'],\n    resources: ['resources'],\n    source: ['source'],\n    time: ['time'],\n    version: ['version'],\n  },\n  sourceEventBus: eventBus,\n\n  // the properties below are optional\n  archiveName: 'archiveName',\n  description: 'description',\n  retention: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.ArchiveProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.ArchiveProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const detail: any;\ndeclare const eventBus: events.EventBus;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst archiveProps: events.ArchiveProps = {\n  eventPattern: {\n    account: ['account'],\n    detail: {\n      detailKey: detail,\n    },\n    detailType: ['detailType'],\n    id: ['id'],\n    region: ['region'],\n    resources: ['resources'],\n    source: ['source'],\n    time: ['time'],\n    version: ['version'],\n  },\n  sourceEventBus: eventBus,\n\n  // the properties below are optional\n  archiveName: 'archiveName',\n  description: 'description',\n  retention: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 29,
        "125": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 8,
        "193": 3,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "6d7d1962a881d005a96fce23cdf32f8163f1c3345e88378d8242f6d5007e5be0"
    },
    "ce2adb2aa227db55bb22760520af285c5cfdb3c16bc6680748537d660d8ec485": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), secretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.Authorization"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d2c56457bed24a5a332230dfd2303263bf2a0e23e167544d086fc2ba69a24328"
    },
    "4b70a6d11a76731ce19aaf470539ae2cc2512ff10d725afd93db88294d7b4694": {
      "translations": {
        "python": {
          "source": "bus = events.EventBus(self, \"bus\",\n    event_bus_name=\"MyCustomEventBus\"\n)\n\nbus.archive(\"MyArchive\",\n    archive_name=\"MyCustomEventBusArchive\",\n    description=\"MyCustomerEventBus Archive\",\n    event_pattern=events.EventPattern(\n        account=[Stack.of(self).account]\n    ),\n    retention=Duration.days(365)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EventBus bus = new EventBus(this, \"bus\", new EventBusProps {\n    EventBusName = \"MyCustomEventBus\"\n});\n\nbus.Archive(\"MyArchive\", new BaseArchiveProps {\n    ArchiveName = \"MyCustomEventBusArchive\",\n    Description = \"MyCustomerEventBus Archive\",\n    EventPattern = new EventPattern {\n        Account = new [] { Stack.Of(this).Account }\n    },\n    Retention = Duration.Days(365)\n});",
          "version": "1"
        },
        "java": {
          "source": "EventBus bus = EventBus.Builder.create(this, \"bus\")\n        .eventBusName(\"MyCustomEventBus\")\n        .build();\n\nbus.archive(\"MyArchive\", BaseArchiveProps.builder()\n        .archiveName(\"MyCustomEventBusArchive\")\n        .description(\"MyCustomerEventBus Archive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(Stack.of(this).getAccount()))\n                .build())\n        .retention(Duration.days(365))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "bus := events.NewEventBus(this, jsii.String(\"bus\"), &eventBusProps{\n\teventBusName: jsii.String(\"MyCustomEventBus\"),\n})\n\nbus.archive(jsii.String(\"MyArchive\"), &baseArchiveProps{\n\tarchiveName: jsii.String(\"MyCustomEventBusArchive\"),\n\tdescription: jsii.String(\"MyCustomerEventBus Archive\"),\n\teventPattern: &eventPattern{\n\t\taccount: []*string{\n\t\t\t*stack.of(this).account,\n\t\t},\n\t},\n\tretention: duration.days(jsii.Number(365)),\n})",
          "version": "1"
        },
        "$": {
          "source": "const bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.BaseArchiveProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.BaseArchiveProps",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "8a370448c8850f9d3bf4b97e19e578ded327b3a3770acbff3aee6834ce814a3f"
    },
    "755a55b11e05b3fd795c0f9254821138adba078aa0fb1beda431140c5c52b70a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncfn_api_destination = events.CfnApiDestination(self, \"MyCfnApiDestination\",\n    connection_arn=\"connectionArn\",\n    http_method=\"httpMethod\",\n    invocation_endpoint=\"invocationEndpoint\",\n\n    # the properties below are optional\n    description=\"description\",\n    invocation_rate_limit_per_second=123,\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCfnApiDestination cfnApiDestination = new CfnApiDestination(this, \"MyCfnApiDestination\", new CfnApiDestinationProps {\n    ConnectionArn = \"connectionArn\",\n    HttpMethod = \"httpMethod\",\n    InvocationEndpoint = \"invocationEndpoint\",\n\n    // the properties below are optional\n    Description = \"description\",\n    InvocationRateLimitPerSecond = 123,\n    Name = \"name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCfnApiDestination cfnApiDestination = CfnApiDestination.Builder.create(this, \"MyCfnApiDestination\")\n        .connectionArn(\"connectionArn\")\n        .httpMethod(\"httpMethod\")\n        .invocationEndpoint(\"invocationEndpoint\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .invocationRateLimitPerSecond(123)\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncfnApiDestination := events.NewCfnApiDestination(this, jsii.String(\"MyCfnApiDestination\"), &cfnApiDestinationProps{\n\tconnectionArn: jsii.String(\"connectionArn\"),\n\thttpMethod: jsii.String(\"httpMethod\"),\n\tinvocationEndpoint: jsii.String(\"invocationEndpoint\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tinvocationRateLimitPerSecond: jsii.Number(123),\n\tname: jsii.String(\"name\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst cfnApiDestination = new events.CfnApiDestination(this, 'MyCfnApiDestination', {\n  connectionArn: 'connectionArn',\n  httpMethod: 'httpMethod',\n  invocationEndpoint: 'invocationEndpoint',\n\n  // the properties below are optional\n  description: 'description',\n  invocationRateLimitPerSecond: 123,\n  name: 'name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnApiDestination"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnApiDestination",
        "@aws-cdk/aws-events.CfnApiDestinationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiDestination = new events.CfnApiDestination(this, 'MyCfnApiDestination', {\n  connectionArn: 'connectionArn',\n  httpMethod: 'httpMethod',\n  invocationEndpoint: 'invocationEndpoint',\n\n  // the properties below are optional\n  description: 'description',\n  invocationRateLimitPerSecond: 123,\n  name: 'name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "8eb4042bded4633e36fe924e0c8adb3644e37f12a00abb04eacd3440e1233acb"
    },
    "e51bc3c6e5f0aa4c4dbc28d2a6207fcf07bbdcca70e721f3b5098c99284c0d2e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncfn_api_destination_props = events.CfnApiDestinationProps(\n    connection_arn=\"connectionArn\",\n    http_method=\"httpMethod\",\n    invocation_endpoint=\"invocationEndpoint\",\n\n    # the properties below are optional\n    description=\"description\",\n    invocation_rate_limit_per_second=123,\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCfnApiDestinationProps cfnApiDestinationProps = new CfnApiDestinationProps {\n    ConnectionArn = \"connectionArn\",\n    HttpMethod = \"httpMethod\",\n    InvocationEndpoint = \"invocationEndpoint\",\n\n    // the properties below are optional\n    Description = \"description\",\n    InvocationRateLimitPerSecond = 123,\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCfnApiDestinationProps cfnApiDestinationProps = CfnApiDestinationProps.builder()\n        .connectionArn(\"connectionArn\")\n        .httpMethod(\"httpMethod\")\n        .invocationEndpoint(\"invocationEndpoint\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .invocationRateLimitPerSecond(123)\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncfnApiDestinationProps := &cfnApiDestinationProps{\n\tconnectionArn: jsii.String(\"connectionArn\"),\n\thttpMethod: jsii.String(\"httpMethod\"),\n\tinvocationEndpoint: jsii.String(\"invocationEndpoint\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tinvocationRateLimitPerSecond: jsii.Number(123),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst cfnApiDestinationProps: events.CfnApiDestinationProps = {\n  connectionArn: 'connectionArn',\n  httpMethod: 'httpMethod',\n  invocationEndpoint: 'invocationEndpoint',\n\n  // the properties below are optional\n  description: 'description',\n  invocationRateLimitPerSecond: 123,\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnApiDestinationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnApiDestinationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiDestinationProps: events.CfnApiDestinationProps = {\n  connectionArn: 'connectionArn',\n  httpMethod: 'httpMethod',\n  invocationEndpoint: 'invocationEndpoint',\n\n  // the properties below are optional\n  description: 'description',\n  invocationRateLimitPerSecond: 123,\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e4e357dc207ba75b9d2edbade6f5bf492ba50f83f34b32fa2173ed006d749e0a"
    },
    "711c505aad29e4f8c48878e8b39077bb796edde6fc77c098332957578d8427ea": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\n# event_pattern: Any\n\ncfn_archive = events.CfnArchive(self, \"MyCfnArchive\",\n    source_arn=\"sourceArn\",\n\n    # the properties below are optional\n    archive_name=\"archiveName\",\n    description=\"description\",\n    event_pattern=event_pattern,\n    retention_days=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nvar eventPattern;\n\nCfnArchive cfnArchive = new CfnArchive(this, \"MyCfnArchive\", new CfnArchiveProps {\n    SourceArn = \"sourceArn\",\n\n    // the properties below are optional\n    ArchiveName = \"archiveName\",\n    Description = \"description\",\n    EventPattern = eventPattern,\n    RetentionDays = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nObject eventPattern;\n\nCfnArchive cfnArchive = CfnArchive.Builder.create(this, \"MyCfnArchive\")\n        .sourceArn(\"sourceArn\")\n\n        // the properties below are optional\n        .archiveName(\"archiveName\")\n        .description(\"description\")\n        .eventPattern(eventPattern)\n        .retentionDays(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nvar eventPattern interface{}\ncfnArchive := events.NewCfnArchive(this, jsii.String(\"MyCfnArchive\"), &cfnArchiveProps{\n\tsourceArn: jsii.String(\"sourceArn\"),\n\n\t// the properties below are optional\n\tarchiveName: jsii.String(\"archiveName\"),\n\tdescription: jsii.String(\"description\"),\n\teventPattern: eventPattern,\n\tretentionDays: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const eventPattern: any;\nconst cfnArchive = new events.CfnArchive(this, 'MyCfnArchive', {\n  sourceArn: 'sourceArn',\n\n  // the properties below are optional\n  archiveName: 'archiveName',\n  description: 'description',\n  eventPattern: eventPattern,\n  retentionDays: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnArchive"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnArchive",
        "@aws-cdk/aws-events.CfnArchiveProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const eventPattern: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnArchive = new events.CfnArchive(this, 'MyCfnArchive', {\n  sourceArn: 'sourceArn',\n\n  // the properties below are optional\n  archiveName: 'archiveName',\n  description: 'description',\n  eventPattern: eventPattern,\n  retentionDays: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 11,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7b28b6900d640825c7c8b47c16a432bbefb1d334170351773d2c6db8b934f558"
    },
    "e9167a0af828ef8734b239443436453c4b05fee992c4eb65960757eff93dd2e4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\n# event_pattern: Any\n\ncfn_archive_props = events.CfnArchiveProps(\n    source_arn=\"sourceArn\",\n\n    # the properties below are optional\n    archive_name=\"archiveName\",\n    description=\"description\",\n    event_pattern=event_pattern,\n    retention_days=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nvar eventPattern;\n\nCfnArchiveProps cfnArchiveProps = new CfnArchiveProps {\n    SourceArn = \"sourceArn\",\n\n    // the properties below are optional\n    ArchiveName = \"archiveName\",\n    Description = \"description\",\n    EventPattern = eventPattern,\n    RetentionDays = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nObject eventPattern;\n\nCfnArchiveProps cfnArchiveProps = CfnArchiveProps.builder()\n        .sourceArn(\"sourceArn\")\n\n        // the properties below are optional\n        .archiveName(\"archiveName\")\n        .description(\"description\")\n        .eventPattern(eventPattern)\n        .retentionDays(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nvar eventPattern interface{}\ncfnArchiveProps := &cfnArchiveProps{\n\tsourceArn: jsii.String(\"sourceArn\"),\n\n\t// the properties below are optional\n\tarchiveName: jsii.String(\"archiveName\"),\n\tdescription: jsii.String(\"description\"),\n\teventPattern: eventPattern,\n\tretentionDays: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const eventPattern: any;\nconst cfnArchiveProps: events.CfnArchiveProps = {\n  sourceArn: 'sourceArn',\n\n  // the properties below are optional\n  archiveName: 'archiveName',\n  description: 'description',\n  eventPattern: eventPattern,\n  retentionDays: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnArchiveProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnArchiveProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const eventPattern: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnArchiveProps: events.CfnArchiveProps = {\n  sourceArn: 'sourceArn',\n\n  // the properties below are optional\n  archiveName: 'archiveName',\n  description: 'description',\n  eventPattern: eventPattern,\n  retentionDays: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "69d4acd83113ffc69ea74447eb39373b01fe726d3365f0cb62c0c9239ebfa784"
    },
    "0330601f839157799161519177e7445e0d4bd84d37c15ae40a55c81ffacd075a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncfn_connection = events.CfnConnection(self, \"MyCfnConnection\",\n    authorization_type=\"authorizationType\",\n    auth_parameters=events.CfnConnection.AuthParametersProperty(\n        api_key_auth_parameters=events.CfnConnection.ApiKeyAuthParametersProperty(\n            api_key_name=\"apiKeyName\",\n            api_key_value=\"apiKeyValue\"\n        ),\n        basic_auth_parameters=events.CfnConnection.BasicAuthParametersProperty(\n            password=\"password\",\n            username=\"username\"\n        ),\n        invocation_http_parameters=events.CfnConnection.ConnectionHttpParametersProperty(\n            body_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )],\n            header_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )],\n            query_string_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )]\n        ),\n        o_auth_parameters=events.CfnConnection.OAuthParametersProperty(\n            authorization_endpoint=\"authorizationEndpoint\",\n            client_parameters=events.CfnConnection.ClientParametersProperty(\n                client_id=\"clientId\",\n                client_secret=\"clientSecret\"\n            ),\n            http_method=\"httpMethod\",\n\n            # the properties below are optional\n            o_auth_http_parameters=events.CfnConnection.ConnectionHttpParametersProperty(\n                body_parameters=[events.CfnConnection.ParameterProperty(\n                    key=\"key\",\n                    value=\"value\",\n\n                    # the properties below are optional\n                    is_value_secret=False\n                )],\n                header_parameters=[events.CfnConnection.ParameterProperty(\n                    key=\"key\",\n                    value=\"value\",\n\n                    # the properties below are optional\n                    is_value_secret=False\n                )],\n                query_string_parameters=[events.CfnConnection.ParameterProperty(\n                    key=\"key\",\n                    value=\"value\",\n\n                    # the properties below are optional\n                    is_value_secret=False\n                )]\n            )\n        )\n    ),\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCfnConnection cfnConnection = new CfnConnection(this, \"MyCfnConnection\", new CfnConnectionProps {\n    AuthorizationType = \"authorizationType\",\n    AuthParameters = new AuthParametersProperty {\n        ApiKeyAuthParameters = new ApiKeyAuthParametersProperty {\n            ApiKeyName = \"apiKeyName\",\n            ApiKeyValue = \"apiKeyValue\"\n        },\n        BasicAuthParameters = new BasicAuthParametersProperty {\n            Password = \"password\",\n            Username = \"username\"\n        },\n        InvocationHttpParameters = new ConnectionHttpParametersProperty {\n            BodyParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } },\n            HeaderParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } },\n            QueryStringParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } }\n        },\n        OAuthParameters = new OAuthParametersProperty {\n            AuthorizationEndpoint = \"authorizationEndpoint\",\n            ClientParameters = new ClientParametersProperty {\n                ClientId = \"clientId\",\n                ClientSecret = \"clientSecret\"\n            },\n            HttpMethod = \"httpMethod\",\n\n            // the properties below are optional\n            OAuthHttpParameters = new ConnectionHttpParametersProperty {\n                BodyParameters = new [] { new ParameterProperty {\n                    Key = \"key\",\n                    Value = \"value\",\n\n                    // the properties below are optional\n                    IsValueSecret = false\n                } },\n                HeaderParameters = new [] { new ParameterProperty {\n                    Key = \"key\",\n                    Value = \"value\",\n\n                    // the properties below are optional\n                    IsValueSecret = false\n                } },\n                QueryStringParameters = new [] { new ParameterProperty {\n                    Key = \"key\",\n                    Value = \"value\",\n\n                    // the properties below are optional\n                    IsValueSecret = false\n                } }\n            }\n        }\n    },\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCfnConnection cfnConnection = CfnConnection.Builder.create(this, \"MyCfnConnection\")\n        .authorizationType(\"authorizationType\")\n        .authParameters(AuthParametersProperty.builder()\n                .apiKeyAuthParameters(ApiKeyAuthParametersProperty.builder()\n                        .apiKeyName(\"apiKeyName\")\n                        .apiKeyValue(\"apiKeyValue\")\n                        .build())\n                .basicAuthParameters(BasicAuthParametersProperty.builder()\n                        .password(\"password\")\n                        .username(\"username\")\n                        .build())\n                .invocationHttpParameters(ConnectionHttpParametersProperty.builder()\n                        .bodyParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .headerParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .queryStringParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .build())\n                .oAuthParameters(OAuthParametersProperty.builder()\n                        .authorizationEndpoint(\"authorizationEndpoint\")\n                        .clientParameters(ClientParametersProperty.builder()\n                                .clientId(\"clientId\")\n                                .clientSecret(\"clientSecret\")\n                                .build())\n                        .httpMethod(\"httpMethod\")\n\n                        // the properties below are optional\n                        .oAuthHttpParameters(ConnectionHttpParametersProperty.builder()\n                                .bodyParameters(List.of(ParameterProperty.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n\n                                        // the properties below are optional\n                                        .isValueSecret(false)\n                                        .build()))\n                                .headerParameters(List.of(ParameterProperty.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n\n                                        // the properties below are optional\n                                        .isValueSecret(false)\n                                        .build()))\n                                .queryStringParameters(List.of(ParameterProperty.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n\n                                        // the properties below are optional\n                                        .isValueSecret(false)\n                                        .build()))\n                                .build())\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncfnConnection := events.NewCfnConnection(this, jsii.String(\"MyCfnConnection\"), &cfnConnectionProps{\n\tauthorizationType: jsii.String(\"authorizationType\"),\n\tauthParameters: &authParametersProperty{\n\t\tapiKeyAuthParameters: &apiKeyAuthParametersProperty{\n\t\t\tapiKeyName: jsii.String(\"apiKeyName\"),\n\t\t\tapiKeyValue: jsii.String(\"apiKeyValue\"),\n\t\t},\n\t\tbasicAuthParameters: &basicAuthParametersProperty{\n\t\t\tpassword: jsii.String(\"password\"),\n\t\t\tusername: jsii.String(\"username\"),\n\t\t},\n\t\tinvocationHttpParameters: &connectionHttpParametersProperty{\n\t\t\tbodyParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\theaderParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\tqueryStringParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\toAuthParameters: &oAuthParametersProperty{\n\t\t\tauthorizationEndpoint: jsii.String(\"authorizationEndpoint\"),\n\t\t\tclientParameters: &clientParametersProperty{\n\t\t\t\tclientId: jsii.String(\"clientId\"),\n\t\t\t\tclientSecret: jsii.String(\"clientSecret\"),\n\t\t\t},\n\t\t\thttpMethod: jsii.String(\"httpMethod\"),\n\n\t\t\t// the properties below are optional\n\t\t\toAuthHttpParameters: &connectionHttpParametersProperty{\n\t\t\t\tbodyParameters: []interface{}{\n\t\t\t\t\t&parameterProperty{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\theaderParameters: []interface{}{\n\t\t\t\t\t&parameterProperty{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tqueryStringParameters: []interface{}{\n\t\t\t\t\t&parameterProperty{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst cfnConnection = new events.CfnConnection(this, 'MyCfnConnection', {\n  authorizationType: 'authorizationType',\n  authParameters: {\n    apiKeyAuthParameters: {\n      apiKeyName: 'apiKeyName',\n      apiKeyValue: 'apiKeyValue',\n    },\n    basicAuthParameters: {\n      password: 'password',\n      username: 'username',\n    },\n    invocationHttpParameters: {\n      bodyParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      headerParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      queryStringParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n    },\n    oAuthParameters: {\n      authorizationEndpoint: 'authorizationEndpoint',\n      clientParameters: {\n        clientId: 'clientId',\n        clientSecret: 'clientSecret',\n      },\n      httpMethod: 'httpMethod',\n\n      // the properties below are optional\n      oAuthHttpParameters: {\n        bodyParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n        headerParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n        queryStringParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n      },\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnection",
        "@aws-cdk/aws-events.CfnConnectionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnConnection = new events.CfnConnection(this, 'MyCfnConnection', {\n  authorizationType: 'authorizationType',\n  authParameters: {\n    apiKeyAuthParameters: {\n      apiKeyName: 'apiKeyName',\n      apiKeyValue: 'apiKeyValue',\n    },\n    basicAuthParameters: {\n      password: 'password',\n      username: 'username',\n    },\n    invocationHttpParameters: {\n      bodyParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      headerParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      queryStringParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n    },\n    oAuthParameters: {\n      authorizationEndpoint: 'authorizationEndpoint',\n      clientParameters: {\n        clientId: 'clientId',\n        clientSecret: 'clientSecret',\n      },\n      httpMethod: 'httpMethod',\n\n      // the properties below are optional\n      oAuthHttpParameters: {\n        bodyParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n        headerParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n        queryStringParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n      },\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 25,
        "75": 46,
        "91": 6,
        "104": 1,
        "192": 6,
        "193": 14,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 42,
        "290": 1
      },
      "fqnsFingerprint": "39d8bbbdca48e9c85321b9a1c91d0b6110ec0c6249ed200e31c2f6ad1054de90"
    },
    "975d72c867f4038d1c07c66d4b816c7933d495ad100a3da5325d7a0dbfbbc633": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\napi_key_auth_parameters_property = events.CfnConnection.ApiKeyAuthParametersProperty(\n    api_key_name=\"apiKeyName\",\n    api_key_value=\"apiKeyValue\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nApiKeyAuthParametersProperty apiKeyAuthParametersProperty = new ApiKeyAuthParametersProperty {\n    ApiKeyName = \"apiKeyName\",\n    ApiKeyValue = \"apiKeyValue\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nApiKeyAuthParametersProperty apiKeyAuthParametersProperty = ApiKeyAuthParametersProperty.builder()\n        .apiKeyName(\"apiKeyName\")\n        .apiKeyValue(\"apiKeyValue\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\napiKeyAuthParametersProperty := &apiKeyAuthParametersProperty{\n\tapiKeyName: jsii.String(\"apiKeyName\"),\n\tapiKeyValue: jsii.String(\"apiKeyValue\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst apiKeyAuthParametersProperty: events.CfnConnection.ApiKeyAuthParametersProperty = {\n  apiKeyName: 'apiKeyName',\n  apiKeyValue: 'apiKeyValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnection.ApiKeyAuthParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnection.ApiKeyAuthParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiKeyAuthParametersProperty: events.CfnConnection.ApiKeyAuthParametersProperty = {\n  apiKeyName: 'apiKeyName',\n  apiKeyValue: 'apiKeyValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "861523e86a83d11976e82678a4ffd971a36c12ccfafc4c2cd02b98a223c8808b"
    },
    "0e4e843261714c41234343a6936a12a4811c07f8a497ac8abfba06780c76bf1b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nauth_parameters_property = events.CfnConnection.AuthParametersProperty(\n    api_key_auth_parameters=events.CfnConnection.ApiKeyAuthParametersProperty(\n        api_key_name=\"apiKeyName\",\n        api_key_value=\"apiKeyValue\"\n    ),\n    basic_auth_parameters=events.CfnConnection.BasicAuthParametersProperty(\n        password=\"password\",\n        username=\"username\"\n    ),\n    invocation_http_parameters=events.CfnConnection.ConnectionHttpParametersProperty(\n        body_parameters=[events.CfnConnection.ParameterProperty(\n            key=\"key\",\n            value=\"value\",\n\n            # the properties below are optional\n            is_value_secret=False\n        )],\n        header_parameters=[events.CfnConnection.ParameterProperty(\n            key=\"key\",\n            value=\"value\",\n\n            # the properties below are optional\n            is_value_secret=False\n        )],\n        query_string_parameters=[events.CfnConnection.ParameterProperty(\n            key=\"key\",\n            value=\"value\",\n\n            # the properties below are optional\n            is_value_secret=False\n        )]\n    ),\n    o_auth_parameters=events.CfnConnection.OAuthParametersProperty(\n        authorization_endpoint=\"authorizationEndpoint\",\n        client_parameters=events.CfnConnection.ClientParametersProperty(\n            client_id=\"clientId\",\n            client_secret=\"clientSecret\"\n        ),\n        http_method=\"httpMethod\",\n\n        # the properties below are optional\n        o_auth_http_parameters=events.CfnConnection.ConnectionHttpParametersProperty(\n            body_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )],\n            header_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )],\n            query_string_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )]\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nAuthParametersProperty authParametersProperty = new AuthParametersProperty {\n    ApiKeyAuthParameters = new ApiKeyAuthParametersProperty {\n        ApiKeyName = \"apiKeyName\",\n        ApiKeyValue = \"apiKeyValue\"\n    },\n    BasicAuthParameters = new BasicAuthParametersProperty {\n        Password = \"password\",\n        Username = \"username\"\n    },\n    InvocationHttpParameters = new ConnectionHttpParametersProperty {\n        BodyParameters = new [] { new ParameterProperty {\n            Key = \"key\",\n            Value = \"value\",\n\n            // the properties below are optional\n            IsValueSecret = false\n        } },\n        HeaderParameters = new [] { new ParameterProperty {\n            Key = \"key\",\n            Value = \"value\",\n\n            // the properties below are optional\n            IsValueSecret = false\n        } },\n        QueryStringParameters = new [] { new ParameterProperty {\n            Key = \"key\",\n            Value = \"value\",\n\n            // the properties below are optional\n            IsValueSecret = false\n        } }\n    },\n    OAuthParameters = new OAuthParametersProperty {\n        AuthorizationEndpoint = \"authorizationEndpoint\",\n        ClientParameters = new ClientParametersProperty {\n            ClientId = \"clientId\",\n            ClientSecret = \"clientSecret\"\n        },\n        HttpMethod = \"httpMethod\",\n\n        // the properties below are optional\n        OAuthHttpParameters = new ConnectionHttpParametersProperty {\n            BodyParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } },\n            HeaderParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } },\n            QueryStringParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } }\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nAuthParametersProperty authParametersProperty = AuthParametersProperty.builder()\n        .apiKeyAuthParameters(ApiKeyAuthParametersProperty.builder()\n                .apiKeyName(\"apiKeyName\")\n                .apiKeyValue(\"apiKeyValue\")\n                .build())\n        .basicAuthParameters(BasicAuthParametersProperty.builder()\n                .password(\"password\")\n                .username(\"username\")\n                .build())\n        .invocationHttpParameters(ConnectionHttpParametersProperty.builder()\n                .bodyParameters(List.of(ParameterProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n\n                        // the properties below are optional\n                        .isValueSecret(false)\n                        .build()))\n                .headerParameters(List.of(ParameterProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n\n                        // the properties below are optional\n                        .isValueSecret(false)\n                        .build()))\n                .queryStringParameters(List.of(ParameterProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n\n                        // the properties below are optional\n                        .isValueSecret(false)\n                        .build()))\n                .build())\n        .oAuthParameters(OAuthParametersProperty.builder()\n                .authorizationEndpoint(\"authorizationEndpoint\")\n                .clientParameters(ClientParametersProperty.builder()\n                        .clientId(\"clientId\")\n                        .clientSecret(\"clientSecret\")\n                        .build())\n                .httpMethod(\"httpMethod\")\n\n                // the properties below are optional\n                .oAuthHttpParameters(ConnectionHttpParametersProperty.builder()\n                        .bodyParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .headerParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .queryStringParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nauthParametersProperty := &authParametersProperty{\n\tapiKeyAuthParameters: &apiKeyAuthParametersProperty{\n\t\tapiKeyName: jsii.String(\"apiKeyName\"),\n\t\tapiKeyValue: jsii.String(\"apiKeyValue\"),\n\t},\n\tbasicAuthParameters: &basicAuthParametersProperty{\n\t\tpassword: jsii.String(\"password\"),\n\t\tusername: jsii.String(\"username\"),\n\t},\n\tinvocationHttpParameters: &connectionHttpParametersProperty{\n\t\tbodyParameters: []interface{}{\n\t\t\t&parameterProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t\theaderParameters: []interface{}{\n\t\t\t&parameterProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t\tqueryStringParameters: []interface{}{\n\t\t\t&parameterProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t},\n\toAuthParameters: &oAuthParametersProperty{\n\t\tauthorizationEndpoint: jsii.String(\"authorizationEndpoint\"),\n\t\tclientParameters: &clientParametersProperty{\n\t\t\tclientId: jsii.String(\"clientId\"),\n\t\t\tclientSecret: jsii.String(\"clientSecret\"),\n\t\t},\n\t\thttpMethod: jsii.String(\"httpMethod\"),\n\n\t\t// the properties below are optional\n\t\toAuthHttpParameters: &connectionHttpParametersProperty{\n\t\t\tbodyParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\theaderParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\tqueryStringParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst authParametersProperty: events.CfnConnection.AuthParametersProperty = {\n  apiKeyAuthParameters: {\n    apiKeyName: 'apiKeyName',\n    apiKeyValue: 'apiKeyValue',\n  },\n  basicAuthParameters: {\n    password: 'password',\n    username: 'username',\n  },\n  invocationHttpParameters: {\n    bodyParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n    headerParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n    queryStringParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n  },\n  oAuthParameters: {\n    authorizationEndpoint: 'authorizationEndpoint',\n    clientParameters: {\n      clientId: 'clientId',\n      clientSecret: 'clientSecret',\n    },\n    httpMethod: 'httpMethod',\n\n    // the properties below are optional\n    oAuthHttpParameters: {\n      bodyParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      headerParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      queryStringParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnection.AuthParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnection.AuthParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst authParametersProperty: events.CfnConnection.AuthParametersProperty = {\n  apiKeyAuthParameters: {\n    apiKeyName: 'apiKeyName',\n    apiKeyValue: 'apiKeyValue',\n  },\n  basicAuthParameters: {\n    password: 'password',\n    username: 'username',\n  },\n  invocationHttpParameters: {\n    bodyParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n    headerParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n    queryStringParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n  },\n  oAuthParameters: {\n    authorizationEndpoint: 'authorizationEndpoint',\n    clientParameters: {\n      clientId: 'clientId',\n      clientSecret: 'clientSecret',\n    },\n    httpMethod: 'httpMethod',\n\n    // the properties below are optional\n    oAuthHttpParameters: {\n      bodyParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      headerParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      queryStringParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 21,
        "75": 43,
        "91": 6,
        "153": 2,
        "169": 1,
        "192": 6,
        "193": 13,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 38,
        "290": 1
      },
      "fqnsFingerprint": "a82413e78f993226793a8e29e65560720611263d4c8eee108794f39a6e1dce5e"
    },
    "f08ee3adf520462185b21ed705ea0673c8331f2186f919ab4b813abd1d79ccdb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nbasic_auth_parameters_property = events.CfnConnection.BasicAuthParametersProperty(\n    password=\"password\",\n    username=\"username\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nBasicAuthParametersProperty basicAuthParametersProperty = new BasicAuthParametersProperty {\n    Password = \"password\",\n    Username = \"username\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nBasicAuthParametersProperty basicAuthParametersProperty = BasicAuthParametersProperty.builder()\n        .password(\"password\")\n        .username(\"username\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nbasicAuthParametersProperty := &basicAuthParametersProperty{\n\tpassword: jsii.String(\"password\"),\n\tusername: jsii.String(\"username\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst basicAuthParametersProperty: events.CfnConnection.BasicAuthParametersProperty = {\n  password: 'password',\n  username: 'username',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnection.BasicAuthParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnection.BasicAuthParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst basicAuthParametersProperty: events.CfnConnection.BasicAuthParametersProperty = {\n  password: 'password',\n  username: 'username',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "889b7a574fb26556100ac69c8d6c1cc16de29d72a0caf50ddb760ebc0a1219c8"
    },
    "9729227c1fb0b4f00147498ad77f54bb9346a4ff39797bed0af8faa0fe8dbb5c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nclient_parameters_property = events.CfnConnection.ClientParametersProperty(\n    client_id=\"clientId\",\n    client_secret=\"clientSecret\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nClientParametersProperty clientParametersProperty = new ClientParametersProperty {\n    ClientId = \"clientId\",\n    ClientSecret = \"clientSecret\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nClientParametersProperty clientParametersProperty = ClientParametersProperty.builder()\n        .clientId(\"clientId\")\n        .clientSecret(\"clientSecret\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nclientParametersProperty := &clientParametersProperty{\n\tclientId: jsii.String(\"clientId\"),\n\tclientSecret: jsii.String(\"clientSecret\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst clientParametersProperty: events.CfnConnection.ClientParametersProperty = {\n  clientId: 'clientId',\n  clientSecret: 'clientSecret',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnection.ClientParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnection.ClientParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientParametersProperty: events.CfnConnection.ClientParametersProperty = {\n  clientId: 'clientId',\n  clientSecret: 'clientSecret',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ce9899bebc24cc5762cd37903f4b94e9565c6fd507da2d728dbadb585a114632"
    },
    "d0436624d6a597257affa80625c56d51c88d1edabb35e4ce3df5d02baac2d9ae": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nconnection_http_parameters_property = events.CfnConnection.ConnectionHttpParametersProperty(\n    body_parameters=[events.CfnConnection.ParameterProperty(\n        key=\"key\",\n        value=\"value\",\n\n        # the properties below are optional\n        is_value_secret=False\n    )],\n    header_parameters=[events.CfnConnection.ParameterProperty(\n        key=\"key\",\n        value=\"value\",\n\n        # the properties below are optional\n        is_value_secret=False\n    )],\n    query_string_parameters=[events.CfnConnection.ParameterProperty(\n        key=\"key\",\n        value=\"value\",\n\n        # the properties below are optional\n        is_value_secret=False\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nConnectionHttpParametersProperty connectionHttpParametersProperty = new ConnectionHttpParametersProperty {\n    BodyParameters = new [] { new ParameterProperty {\n        Key = \"key\",\n        Value = \"value\",\n\n        // the properties below are optional\n        IsValueSecret = false\n    } },\n    HeaderParameters = new [] { new ParameterProperty {\n        Key = \"key\",\n        Value = \"value\",\n\n        // the properties below are optional\n        IsValueSecret = false\n    } },\n    QueryStringParameters = new [] { new ParameterProperty {\n        Key = \"key\",\n        Value = \"value\",\n\n        // the properties below are optional\n        IsValueSecret = false\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nConnectionHttpParametersProperty connectionHttpParametersProperty = ConnectionHttpParametersProperty.builder()\n        .bodyParameters(List.of(ParameterProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n\n                // the properties below are optional\n                .isValueSecret(false)\n                .build()))\n        .headerParameters(List.of(ParameterProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n\n                // the properties below are optional\n                .isValueSecret(false)\n                .build()))\n        .queryStringParameters(List.of(ParameterProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n\n                // the properties below are optional\n                .isValueSecret(false)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nconnectionHttpParametersProperty := &connectionHttpParametersProperty{\n\tbodyParameters: []interface{}{\n\t\t&parameterProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t// the properties below are optional\n\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t},\n\t},\n\theaderParameters: []interface{}{\n\t\t&parameterProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t// the properties below are optional\n\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t},\n\t},\n\tqueryStringParameters: []interface{}{\n\t\t&parameterProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t// the properties below are optional\n\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst connectionHttpParametersProperty: events.CfnConnection.ConnectionHttpParametersProperty = {\n  bodyParameters: [{\n    key: 'key',\n    value: 'value',\n\n    // the properties below are optional\n    isValueSecret: false,\n  }],\n  headerParameters: [{\n    key: 'key',\n    value: 'value',\n\n    // the properties below are optional\n    isValueSecret: false,\n  }],\n  queryStringParameters: [{\n    key: 'key',\n    value: 'value',\n\n    // the properties below are optional\n    isValueSecret: false,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnection.ConnectionHttpParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnection.ConnectionHttpParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connectionHttpParametersProperty: events.CfnConnection.ConnectionHttpParametersProperty = {\n  bodyParameters: [{\n    key: 'key',\n    value: 'value',\n\n    // the properties below are optional\n    isValueSecret: false,\n  }],\n  headerParameters: [{\n    key: 'key',\n    value: 'value',\n\n    // the properties below are optional\n    isValueSecret: false,\n  }],\n  queryStringParameters: [{\n    key: 'key',\n    value: 'value',\n\n    // the properties below are optional\n    isValueSecret: false,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 17,
        "91": 3,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "87c33e7b4c262fd60b3a5b1b50927cab1ef59403fdb4c08ec38e8b5089334209"
    },
    "94e459033768af776cf8a5655d2e3ac980e5e6a2670e48c4d4916d223c947bad": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\no_auth_parameters_property = events.CfnConnection.OAuthParametersProperty(\n    authorization_endpoint=\"authorizationEndpoint\",\n    client_parameters=events.CfnConnection.ClientParametersProperty(\n        client_id=\"clientId\",\n        client_secret=\"clientSecret\"\n    ),\n    http_method=\"httpMethod\",\n\n    # the properties below are optional\n    o_auth_http_parameters=events.CfnConnection.ConnectionHttpParametersProperty(\n        body_parameters=[events.CfnConnection.ParameterProperty(\n            key=\"key\",\n            value=\"value\",\n\n            # the properties below are optional\n            is_value_secret=False\n        )],\n        header_parameters=[events.CfnConnection.ParameterProperty(\n            key=\"key\",\n            value=\"value\",\n\n            # the properties below are optional\n            is_value_secret=False\n        )],\n        query_string_parameters=[events.CfnConnection.ParameterProperty(\n            key=\"key\",\n            value=\"value\",\n\n            # the properties below are optional\n            is_value_secret=False\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nOAuthParametersProperty oAuthParametersProperty = new OAuthParametersProperty {\n    AuthorizationEndpoint = \"authorizationEndpoint\",\n    ClientParameters = new ClientParametersProperty {\n        ClientId = \"clientId\",\n        ClientSecret = \"clientSecret\"\n    },\n    HttpMethod = \"httpMethod\",\n\n    // the properties below are optional\n    OAuthHttpParameters = new ConnectionHttpParametersProperty {\n        BodyParameters = new [] { new ParameterProperty {\n            Key = \"key\",\n            Value = \"value\",\n\n            // the properties below are optional\n            IsValueSecret = false\n        } },\n        HeaderParameters = new [] { new ParameterProperty {\n            Key = \"key\",\n            Value = \"value\",\n\n            // the properties below are optional\n            IsValueSecret = false\n        } },\n        QueryStringParameters = new [] { new ParameterProperty {\n            Key = \"key\",\n            Value = \"value\",\n\n            // the properties below are optional\n            IsValueSecret = false\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nOAuthParametersProperty oAuthParametersProperty = OAuthParametersProperty.builder()\n        .authorizationEndpoint(\"authorizationEndpoint\")\n        .clientParameters(ClientParametersProperty.builder()\n                .clientId(\"clientId\")\n                .clientSecret(\"clientSecret\")\n                .build())\n        .httpMethod(\"httpMethod\")\n\n        // the properties below are optional\n        .oAuthHttpParameters(ConnectionHttpParametersProperty.builder()\n                .bodyParameters(List.of(ParameterProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n\n                        // the properties below are optional\n                        .isValueSecret(false)\n                        .build()))\n                .headerParameters(List.of(ParameterProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n\n                        // the properties below are optional\n                        .isValueSecret(false)\n                        .build()))\n                .queryStringParameters(List.of(ParameterProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n\n                        // the properties below are optional\n                        .isValueSecret(false)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\noAuthParametersProperty := &oAuthParametersProperty{\n\tauthorizationEndpoint: jsii.String(\"authorizationEndpoint\"),\n\tclientParameters: &clientParametersProperty{\n\t\tclientId: jsii.String(\"clientId\"),\n\t\tclientSecret: jsii.String(\"clientSecret\"),\n\t},\n\thttpMethod: jsii.String(\"httpMethod\"),\n\n\t// the properties below are optional\n\toAuthHttpParameters: &connectionHttpParametersProperty{\n\t\tbodyParameters: []interface{}{\n\t\t\t&parameterProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t\theaderParameters: []interface{}{\n\t\t\t&parameterProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t\tqueryStringParameters: []interface{}{\n\t\t\t&parameterProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst oAuthParametersProperty: events.CfnConnection.OAuthParametersProperty = {\n  authorizationEndpoint: 'authorizationEndpoint',\n  clientParameters: {\n    clientId: 'clientId',\n    clientSecret: 'clientSecret',\n  },\n  httpMethod: 'httpMethod',\n\n  // the properties below are optional\n  oAuthHttpParameters: {\n    bodyParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n    headerParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n    queryStringParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnection.OAuthParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnection.OAuthParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst oAuthParametersProperty: events.CfnConnection.OAuthParametersProperty = {\n  authorizationEndpoint: 'authorizationEndpoint',\n  clientParameters: {\n    clientId: 'clientId',\n    clientSecret: 'clientSecret',\n  },\n  httpMethod: 'httpMethod',\n\n  // the properties below are optional\n  oAuthHttpParameters: {\n    bodyParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n    headerParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n    queryStringParameters: [{\n      key: 'key',\n      value: 'value',\n\n      // the properties below are optional\n      isValueSecret: false,\n    }],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 23,
        "91": 3,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "c6aff6df31168eccdcb27526c507a36628140e9993471a47f8e44ff1d604644f"
    },
    "f6bd57eb6cb7fb40d871f180c0df1b23f078b6d4c5332f14d1d74219236e4ca3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nparameter_property = events.CfnConnection.ParameterProperty(\n    key=\"key\",\n    value=\"value\",\n\n    # the properties below are optional\n    is_value_secret=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nParameterProperty parameterProperty = new ParameterProperty {\n    Key = \"key\",\n    Value = \"value\",\n\n    // the properties below are optional\n    IsValueSecret = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nParameterProperty parameterProperty = ParameterProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n\n        // the properties below are optional\n        .isValueSecret(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nparameterProperty := &parameterProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n\n\t// the properties below are optional\n\tisValueSecret: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst parameterProperty: events.CfnConnection.ParameterProperty = {\n  key: 'key',\n  value: 'value',\n\n  // the properties below are optional\n  isValueSecret: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnection.ParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnection.ParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterProperty: events.CfnConnection.ParameterProperty = {\n  key: 'key',\n  value: 'value',\n\n  // the properties below are optional\n  isValueSecret: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "699e1c47d2b9079669b76fe5558a6f5fd29e3f00ed8e40980f64c73179fdd5b6"
    },
    "c33e356018de931f479719d86aa2979f647378f465b9a9bf08f6c7d82544666b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncfn_connection_props = events.CfnConnectionProps(\n    authorization_type=\"authorizationType\",\n    auth_parameters=events.CfnConnection.AuthParametersProperty(\n        api_key_auth_parameters=events.CfnConnection.ApiKeyAuthParametersProperty(\n            api_key_name=\"apiKeyName\",\n            api_key_value=\"apiKeyValue\"\n        ),\n        basic_auth_parameters=events.CfnConnection.BasicAuthParametersProperty(\n            password=\"password\",\n            username=\"username\"\n        ),\n        invocation_http_parameters=events.CfnConnection.ConnectionHttpParametersProperty(\n            body_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )],\n            header_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )],\n            query_string_parameters=[events.CfnConnection.ParameterProperty(\n                key=\"key\",\n                value=\"value\",\n\n                # the properties below are optional\n                is_value_secret=False\n            )]\n        ),\n        o_auth_parameters=events.CfnConnection.OAuthParametersProperty(\n            authorization_endpoint=\"authorizationEndpoint\",\n            client_parameters=events.CfnConnection.ClientParametersProperty(\n                client_id=\"clientId\",\n                client_secret=\"clientSecret\"\n            ),\n            http_method=\"httpMethod\",\n\n            # the properties below are optional\n            o_auth_http_parameters=events.CfnConnection.ConnectionHttpParametersProperty(\n                body_parameters=[events.CfnConnection.ParameterProperty(\n                    key=\"key\",\n                    value=\"value\",\n\n                    # the properties below are optional\n                    is_value_secret=False\n                )],\n                header_parameters=[events.CfnConnection.ParameterProperty(\n                    key=\"key\",\n                    value=\"value\",\n\n                    # the properties below are optional\n                    is_value_secret=False\n                )],\n                query_string_parameters=[events.CfnConnection.ParameterProperty(\n                    key=\"key\",\n                    value=\"value\",\n\n                    # the properties below are optional\n                    is_value_secret=False\n                )]\n            )\n        )\n    ),\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCfnConnectionProps cfnConnectionProps = new CfnConnectionProps {\n    AuthorizationType = \"authorizationType\",\n    AuthParameters = new AuthParametersProperty {\n        ApiKeyAuthParameters = new ApiKeyAuthParametersProperty {\n            ApiKeyName = \"apiKeyName\",\n            ApiKeyValue = \"apiKeyValue\"\n        },\n        BasicAuthParameters = new BasicAuthParametersProperty {\n            Password = \"password\",\n            Username = \"username\"\n        },\n        InvocationHttpParameters = new ConnectionHttpParametersProperty {\n            BodyParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } },\n            HeaderParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } },\n            QueryStringParameters = new [] { new ParameterProperty {\n                Key = \"key\",\n                Value = \"value\",\n\n                // the properties below are optional\n                IsValueSecret = false\n            } }\n        },\n        OAuthParameters = new OAuthParametersProperty {\n            AuthorizationEndpoint = \"authorizationEndpoint\",\n            ClientParameters = new ClientParametersProperty {\n                ClientId = \"clientId\",\n                ClientSecret = \"clientSecret\"\n            },\n            HttpMethod = \"httpMethod\",\n\n            // the properties below are optional\n            OAuthHttpParameters = new ConnectionHttpParametersProperty {\n                BodyParameters = new [] { new ParameterProperty {\n                    Key = \"key\",\n                    Value = \"value\",\n\n                    // the properties below are optional\n                    IsValueSecret = false\n                } },\n                HeaderParameters = new [] { new ParameterProperty {\n                    Key = \"key\",\n                    Value = \"value\",\n\n                    // the properties below are optional\n                    IsValueSecret = false\n                } },\n                QueryStringParameters = new [] { new ParameterProperty {\n                    Key = \"key\",\n                    Value = \"value\",\n\n                    // the properties below are optional\n                    IsValueSecret = false\n                } }\n            }\n        }\n    },\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCfnConnectionProps cfnConnectionProps = CfnConnectionProps.builder()\n        .authorizationType(\"authorizationType\")\n        .authParameters(AuthParametersProperty.builder()\n                .apiKeyAuthParameters(ApiKeyAuthParametersProperty.builder()\n                        .apiKeyName(\"apiKeyName\")\n                        .apiKeyValue(\"apiKeyValue\")\n                        .build())\n                .basicAuthParameters(BasicAuthParametersProperty.builder()\n                        .password(\"password\")\n                        .username(\"username\")\n                        .build())\n                .invocationHttpParameters(ConnectionHttpParametersProperty.builder()\n                        .bodyParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .headerParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .queryStringParameters(List.of(ParameterProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n\n                                // the properties below are optional\n                                .isValueSecret(false)\n                                .build()))\n                        .build())\n                .oAuthParameters(OAuthParametersProperty.builder()\n                        .authorizationEndpoint(\"authorizationEndpoint\")\n                        .clientParameters(ClientParametersProperty.builder()\n                                .clientId(\"clientId\")\n                                .clientSecret(\"clientSecret\")\n                                .build())\n                        .httpMethod(\"httpMethod\")\n\n                        // the properties below are optional\n                        .oAuthHttpParameters(ConnectionHttpParametersProperty.builder()\n                                .bodyParameters(List.of(ParameterProperty.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n\n                                        // the properties below are optional\n                                        .isValueSecret(false)\n                                        .build()))\n                                .headerParameters(List.of(ParameterProperty.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n\n                                        // the properties below are optional\n                                        .isValueSecret(false)\n                                        .build()))\n                                .queryStringParameters(List.of(ParameterProperty.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n\n                                        // the properties below are optional\n                                        .isValueSecret(false)\n                                        .build()))\n                                .build())\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncfnConnectionProps := &cfnConnectionProps{\n\tauthorizationType: jsii.String(\"authorizationType\"),\n\tauthParameters: &authParametersProperty{\n\t\tapiKeyAuthParameters: &apiKeyAuthParametersProperty{\n\t\t\tapiKeyName: jsii.String(\"apiKeyName\"),\n\t\t\tapiKeyValue: jsii.String(\"apiKeyValue\"),\n\t\t},\n\t\tbasicAuthParameters: &basicAuthParametersProperty{\n\t\t\tpassword: jsii.String(\"password\"),\n\t\t\tusername: jsii.String(\"username\"),\n\t\t},\n\t\tinvocationHttpParameters: &connectionHttpParametersProperty{\n\t\t\tbodyParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\theaderParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\tqueryStringParameters: []interface{}{\n\t\t\t\t&parameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\toAuthParameters: &oAuthParametersProperty{\n\t\t\tauthorizationEndpoint: jsii.String(\"authorizationEndpoint\"),\n\t\t\tclientParameters: &clientParametersProperty{\n\t\t\t\tclientId: jsii.String(\"clientId\"),\n\t\t\t\tclientSecret: jsii.String(\"clientSecret\"),\n\t\t\t},\n\t\t\thttpMethod: jsii.String(\"httpMethod\"),\n\n\t\t\t// the properties below are optional\n\t\t\toAuthHttpParameters: &connectionHttpParametersProperty{\n\t\t\t\tbodyParameters: []interface{}{\n\t\t\t\t\t&parameterProperty{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\theaderParameters: []interface{}{\n\t\t\t\t\t&parameterProperty{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tqueryStringParameters: []interface{}{\n\t\t\t\t\t&parameterProperty{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tisValueSecret: jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst cfnConnectionProps: events.CfnConnectionProps = {\n  authorizationType: 'authorizationType',\n  authParameters: {\n    apiKeyAuthParameters: {\n      apiKeyName: 'apiKeyName',\n      apiKeyValue: 'apiKeyValue',\n    },\n    basicAuthParameters: {\n      password: 'password',\n      username: 'username',\n    },\n    invocationHttpParameters: {\n      bodyParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      headerParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      queryStringParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n    },\n    oAuthParameters: {\n      authorizationEndpoint: 'authorizationEndpoint',\n      clientParameters: {\n        clientId: 'clientId',\n        clientSecret: 'clientSecret',\n      },\n      httpMethod: 'httpMethod',\n\n      // the properties below are optional\n      oAuthHttpParameters: {\n        bodyParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n        headerParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n        queryStringParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n      },\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnConnectionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnConnectionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnConnectionProps: events.CfnConnectionProps = {\n  authorizationType: 'authorizationType',\n  authParameters: {\n    apiKeyAuthParameters: {\n      apiKeyName: 'apiKeyName',\n      apiKeyValue: 'apiKeyValue',\n    },\n    basicAuthParameters: {\n      password: 'password',\n      username: 'username',\n    },\n    invocationHttpParameters: {\n      bodyParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      headerParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n      queryStringParameters: [{\n        key: 'key',\n        value: 'value',\n\n        // the properties below are optional\n        isValueSecret: false,\n      }],\n    },\n    oAuthParameters: {\n      authorizationEndpoint: 'authorizationEndpoint',\n      clientParameters: {\n        clientId: 'clientId',\n        clientSecret: 'clientSecret',\n      },\n      httpMethod: 'httpMethod',\n\n      // the properties below are optional\n      oAuthHttpParameters: {\n        bodyParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n        headerParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n        queryStringParameters: [{\n          key: 'key',\n          value: 'value',\n\n          // the properties below are optional\n          isValueSecret: false,\n        }],\n      },\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 24,
        "75": 46,
        "91": 6,
        "153": 1,
        "169": 1,
        "192": 6,
        "193": 14,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 42,
        "290": 1
      },
      "fqnsFingerprint": "83a36c864c5ba6b00771254d85bf76a798ec6a7f453b41f2030d748f0913eb4a"
    },
    "f87ef226c1e2fe10d291009a070f43eab84eaf40ca66d99ebec91d42a14505fa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncfn_endpoint = events.CfnEndpoint(self, \"MyCfnEndpoint\",\n    event_buses=[events.CfnEndpoint.EndpointEventBusProperty(\n        event_bus_arn=\"eventBusArn\"\n    )],\n    name=\"name\",\n    routing_config=events.CfnEndpoint.RoutingConfigProperty(\n        failover_config=events.CfnEndpoint.FailoverConfigProperty(\n            primary=events.CfnEndpoint.PrimaryProperty(\n                health_check=\"healthCheck\"\n            ),\n            secondary=events.CfnEndpoint.SecondaryProperty(\n                route=\"route\"\n            )\n        )\n    ),\n\n    # the properties below are optional\n    description=\"description\",\n    replication_config=events.CfnEndpoint.ReplicationConfigProperty(\n        state=\"state\"\n    ),\n    role_arn=\"roleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCfnEndpoint cfnEndpoint = new CfnEndpoint(this, \"MyCfnEndpoint\", new CfnEndpointProps {\n    EventBuses = new [] { new EndpointEventBusProperty {\n        EventBusArn = \"eventBusArn\"\n    } },\n    Name = \"name\",\n    RoutingConfig = new RoutingConfigProperty {\n        FailoverConfig = new FailoverConfigProperty {\n            Primary = new PrimaryProperty {\n                HealthCheck = \"healthCheck\"\n            },\n            Secondary = new SecondaryProperty {\n                Route = \"route\"\n            }\n        }\n    },\n\n    // the properties below are optional\n    Description = \"description\",\n    ReplicationConfig = new ReplicationConfigProperty {\n        State = \"state\"\n    },\n    RoleArn = \"roleArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCfnEndpoint cfnEndpoint = CfnEndpoint.Builder.create(this, \"MyCfnEndpoint\")\n        .eventBuses(List.of(EndpointEventBusProperty.builder()\n                .eventBusArn(\"eventBusArn\")\n                .build()))\n        .name(\"name\")\n        .routingConfig(RoutingConfigProperty.builder()\n                .failoverConfig(FailoverConfigProperty.builder()\n                        .primary(PrimaryProperty.builder()\n                                .healthCheck(\"healthCheck\")\n                                .build())\n                        .secondary(SecondaryProperty.builder()\n                                .route(\"route\")\n                                .build())\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .description(\"description\")\n        .replicationConfig(ReplicationConfigProperty.builder()\n                .state(\"state\")\n                .build())\n        .roleArn(\"roleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncfnEndpoint := events.NewCfnEndpoint(this, jsii.String(\"MyCfnEndpoint\"), &cfnEndpointProps{\n\teventBuses: []interface{}{\n\t\t&endpointEventBusProperty{\n\t\t\teventBusArn: jsii.String(\"eventBusArn\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\troutingConfig: &routingConfigProperty{\n\t\tfailoverConfig: &failoverConfigProperty{\n\t\t\tprimary: &primaryProperty{\n\t\t\t\thealthCheck: jsii.String(\"healthCheck\"),\n\t\t\t},\n\t\t\tsecondary: &secondaryProperty{\n\t\t\t\troute: jsii.String(\"route\"),\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\treplicationConfig: &replicationConfigProperty{\n\t\tstate: jsii.String(\"state\"),\n\t},\n\troleArn: jsii.String(\"roleArn\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst cfnEndpoint = new events.CfnEndpoint(this, 'MyCfnEndpoint', {\n  eventBuses: [{\n    eventBusArn: 'eventBusArn',\n  }],\n  name: 'name',\n  routingConfig: {\n    failoverConfig: {\n      primary: {\n        healthCheck: 'healthCheck',\n      },\n      secondary: {\n        route: 'route',\n      },\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  replicationConfig: {\n    state: 'state',\n  },\n  roleArn: 'roleArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEndpoint",
        "@aws-cdk/aws-events.CfnEndpointProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEndpoint = new events.CfnEndpoint(this, 'MyCfnEndpoint', {\n  eventBuses: [{\n    eventBusArn: 'eventBusArn',\n  }],\n  name: 'name',\n  routingConfig: {\n    failoverConfig: {\n      primary: {\n        healthCheck: 'healthCheck',\n      },\n      secondary: {\n        route: 'route',\n      },\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  replicationConfig: {\n    state: 'state',\n  },\n  roleArn: 'roleArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 7,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "eddee9fc094166305422192de1185075c1c45011fc274fb1a2e2dec763bb7596"
    },
    "a2d184668032f75a658ce618f22173f9010edc7195d8eec3804afe7c8ae2a077": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nendpoint_event_bus_property = events.CfnEndpoint.EndpointEventBusProperty(\n    event_bus_arn=\"eventBusArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nEndpointEventBusProperty endpointEventBusProperty = new EndpointEventBusProperty {\n    EventBusArn = \"eventBusArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nEndpointEventBusProperty endpointEventBusProperty = EndpointEventBusProperty.builder()\n        .eventBusArn(\"eventBusArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nendpointEventBusProperty := &endpointEventBusProperty{\n\teventBusArn: jsii.String(\"eventBusArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst endpointEventBusProperty: events.CfnEndpoint.EndpointEventBusProperty = {\n  eventBusArn: 'eventBusArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEndpoint.EndpointEventBusProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEndpoint.EndpointEventBusProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointEventBusProperty: events.CfnEndpoint.EndpointEventBusProperty = {\n  eventBusArn: 'eventBusArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ae5f54520ad60d0d17b8fdad1759280b1d02182d38d4d6fe6bdbe26e39e88159"
    },
    "5e7eae649bcc77c989173d27556ece4dae86c8c54842d253c18c1b51d1834a34": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nfailover_config_property = events.CfnEndpoint.FailoverConfigProperty(\n    primary=events.CfnEndpoint.PrimaryProperty(\n        health_check=\"healthCheck\"\n    ),\n    secondary=events.CfnEndpoint.SecondaryProperty(\n        route=\"route\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nFailoverConfigProperty failoverConfigProperty = new FailoverConfigProperty {\n    Primary = new PrimaryProperty {\n        HealthCheck = \"healthCheck\"\n    },\n    Secondary = new SecondaryProperty {\n        Route = \"route\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nFailoverConfigProperty failoverConfigProperty = FailoverConfigProperty.builder()\n        .primary(PrimaryProperty.builder()\n                .healthCheck(\"healthCheck\")\n                .build())\n        .secondary(SecondaryProperty.builder()\n                .route(\"route\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nfailoverConfigProperty := &failoverConfigProperty{\n\tprimary: &primaryProperty{\n\t\thealthCheck: jsii.String(\"healthCheck\"),\n\t},\n\tsecondary: &secondaryProperty{\n\t\troute: jsii.String(\"route\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst failoverConfigProperty: events.CfnEndpoint.FailoverConfigProperty = {\n  primary: {\n    healthCheck: 'healthCheck',\n  },\n  secondary: {\n    route: 'route',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEndpoint.FailoverConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEndpoint.FailoverConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst failoverConfigProperty: events.CfnEndpoint.FailoverConfigProperty = {\n  primary: {\n    healthCheck: 'healthCheck',\n  },\n  secondary: {\n    route: 'route',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e317541f6c5400402eedf0f77d1256cf3fc9690d8c7c8b12ac7e40bd0ac260af"
    },
    "6f8c6718a2a0c153f2d8e2b8be14b79c096d0ddc4ca4a6c7dfd56b9e9165b66d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nprimary_property = events.CfnEndpoint.PrimaryProperty(\n    health_check=\"healthCheck\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nPrimaryProperty primaryProperty = new PrimaryProperty {\n    HealthCheck = \"healthCheck\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nPrimaryProperty primaryProperty = PrimaryProperty.builder()\n        .healthCheck(\"healthCheck\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nprimaryProperty := &primaryProperty{\n\thealthCheck: jsii.String(\"healthCheck\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst primaryProperty: events.CfnEndpoint.PrimaryProperty = {\n  healthCheck: 'healthCheck',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEndpoint.PrimaryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEndpoint.PrimaryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst primaryProperty: events.CfnEndpoint.PrimaryProperty = {\n  healthCheck: 'healthCheck',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "85176a42fc19e6ad9010f5bcf7002f67e327eb5256083dd8b2314550fb8d6050"
    },
    "6b810f4792fab8bdeb1ff93661a05f2be3599de8cd86033e6a6b754831d3c8cd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nreplication_config_property = events.CfnEndpoint.ReplicationConfigProperty(\n    state=\"state\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nReplicationConfigProperty replicationConfigProperty = new ReplicationConfigProperty {\n    State = \"state\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nReplicationConfigProperty replicationConfigProperty = ReplicationConfigProperty.builder()\n        .state(\"state\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nreplicationConfigProperty := &replicationConfigProperty{\n\tstate: jsii.String(\"state\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst replicationConfigProperty: events.CfnEndpoint.ReplicationConfigProperty = {\n  state: 'state',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEndpoint.ReplicationConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEndpoint.ReplicationConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst replicationConfigProperty: events.CfnEndpoint.ReplicationConfigProperty = {\n  state: 'state',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c5d25dc4ffa2909eb31c060bdf97416462474a6a66e6d94e69993ca2c184c898"
    },
    "09a03aa6fdd601c60c8a6e595cb143e1aa94d6ec9341d8a2798232a4c987aa45": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nrouting_config_property = events.CfnEndpoint.RoutingConfigProperty(\n    failover_config=events.CfnEndpoint.FailoverConfigProperty(\n        primary=events.CfnEndpoint.PrimaryProperty(\n            health_check=\"healthCheck\"\n        ),\n        secondary=events.CfnEndpoint.SecondaryProperty(\n            route=\"route\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nRoutingConfigProperty routingConfigProperty = new RoutingConfigProperty {\n    FailoverConfig = new FailoverConfigProperty {\n        Primary = new PrimaryProperty {\n            HealthCheck = \"healthCheck\"\n        },\n        Secondary = new SecondaryProperty {\n            Route = \"route\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nRoutingConfigProperty routingConfigProperty = RoutingConfigProperty.builder()\n        .failoverConfig(FailoverConfigProperty.builder()\n                .primary(PrimaryProperty.builder()\n                        .healthCheck(\"healthCheck\")\n                        .build())\n                .secondary(SecondaryProperty.builder()\n                        .route(\"route\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nroutingConfigProperty := &routingConfigProperty{\n\tfailoverConfig: &failoverConfigProperty{\n\t\tprimary: &primaryProperty{\n\t\t\thealthCheck: jsii.String(\"healthCheck\"),\n\t\t},\n\t\tsecondary: &secondaryProperty{\n\t\t\troute: jsii.String(\"route\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst routingConfigProperty: events.CfnEndpoint.RoutingConfigProperty = {\n  failoverConfig: {\n    primary: {\n      healthCheck: 'healthCheck',\n    },\n    secondary: {\n      route: 'route',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEndpoint.RoutingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEndpoint.RoutingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst routingConfigProperty: events.CfnEndpoint.RoutingConfigProperty = {\n  failoverConfig: {\n    primary: {\n      healthCheck: 'healthCheck',\n    },\n    secondary: {\n      route: 'route',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "16fe1f700205cbeea8fa6d7ae9514096a53932caa7cc0b97e66040052d1cf6ca"
    },
    "0cc20095df78c00d5301ee899025aa7f03825e1be11ee25cf8a7a05d96a932fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nsecondary_property = events.CfnEndpoint.SecondaryProperty(\n    route=\"route\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nSecondaryProperty secondaryProperty = new SecondaryProperty {\n    Route = \"route\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nSecondaryProperty secondaryProperty = SecondaryProperty.builder()\n        .route(\"route\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nsecondaryProperty := &secondaryProperty{\n\troute: jsii.String(\"route\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst secondaryProperty: events.CfnEndpoint.SecondaryProperty = {\n  route: 'route',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEndpoint.SecondaryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEndpoint.SecondaryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst secondaryProperty: events.CfnEndpoint.SecondaryProperty = {\n  route: 'route',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "36e4a7dfc522f029ccfe405c865db70307a866582240de4add009fb0ab0d61d5"
    },
    "1509e34ba6a6cbf0090d9e30489a8d5526c9cc8967ca8dae8837d4509ebf3bc7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncfn_endpoint_props = events.CfnEndpointProps(\n    event_buses=[events.CfnEndpoint.EndpointEventBusProperty(\n        event_bus_arn=\"eventBusArn\"\n    )],\n    name=\"name\",\n    routing_config=events.CfnEndpoint.RoutingConfigProperty(\n        failover_config=events.CfnEndpoint.FailoverConfigProperty(\n            primary=events.CfnEndpoint.PrimaryProperty(\n                health_check=\"healthCheck\"\n            ),\n            secondary=events.CfnEndpoint.SecondaryProperty(\n                route=\"route\"\n            )\n        )\n    ),\n\n    # the properties below are optional\n    description=\"description\",\n    replication_config=events.CfnEndpoint.ReplicationConfigProperty(\n        state=\"state\"\n    ),\n    role_arn=\"roleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCfnEndpointProps cfnEndpointProps = new CfnEndpointProps {\n    EventBuses = new [] { new EndpointEventBusProperty {\n        EventBusArn = \"eventBusArn\"\n    } },\n    Name = \"name\",\n    RoutingConfig = new RoutingConfigProperty {\n        FailoverConfig = new FailoverConfigProperty {\n            Primary = new PrimaryProperty {\n                HealthCheck = \"healthCheck\"\n            },\n            Secondary = new SecondaryProperty {\n                Route = \"route\"\n            }\n        }\n    },\n\n    // the properties below are optional\n    Description = \"description\",\n    ReplicationConfig = new ReplicationConfigProperty {\n        State = \"state\"\n    },\n    RoleArn = \"roleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCfnEndpointProps cfnEndpointProps = CfnEndpointProps.builder()\n        .eventBuses(List.of(EndpointEventBusProperty.builder()\n                .eventBusArn(\"eventBusArn\")\n                .build()))\n        .name(\"name\")\n        .routingConfig(RoutingConfigProperty.builder()\n                .failoverConfig(FailoverConfigProperty.builder()\n                        .primary(PrimaryProperty.builder()\n                                .healthCheck(\"healthCheck\")\n                                .build())\n                        .secondary(SecondaryProperty.builder()\n                                .route(\"route\")\n                                .build())\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .description(\"description\")\n        .replicationConfig(ReplicationConfigProperty.builder()\n                .state(\"state\")\n                .build())\n        .roleArn(\"roleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncfnEndpointProps := &cfnEndpointProps{\n\teventBuses: []interface{}{\n\t\t&endpointEventBusProperty{\n\t\t\teventBusArn: jsii.String(\"eventBusArn\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\troutingConfig: &routingConfigProperty{\n\t\tfailoverConfig: &failoverConfigProperty{\n\t\t\tprimary: &primaryProperty{\n\t\t\t\thealthCheck: jsii.String(\"healthCheck\"),\n\t\t\t},\n\t\t\tsecondary: &secondaryProperty{\n\t\t\t\troute: jsii.String(\"route\"),\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\treplicationConfig: &replicationConfigProperty{\n\t\tstate: jsii.String(\"state\"),\n\t},\n\troleArn: jsii.String(\"roleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst cfnEndpointProps: events.CfnEndpointProps = {\n  eventBuses: [{\n    eventBusArn: 'eventBusArn',\n  }],\n  name: 'name',\n  routingConfig: {\n    failoverConfig: {\n      primary: {\n        healthCheck: 'healthCheck',\n      },\n      secondary: {\n        route: 'route',\n      },\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  replicationConfig: {\n    state: 'state',\n  },\n  roleArn: 'roleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEndpointProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEndpointProps: events.CfnEndpointProps = {\n  eventBuses: [{\n    eventBusArn: 'eventBusArn',\n  }],\n  name: 'name',\n  routingConfig: {\n    failoverConfig: {\n      primary: {\n        healthCheck: 'healthCheck',\n      },\n      secondary: {\n        route: 'route',\n      },\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  replicationConfig: {\n    state: 'state',\n  },\n  roleArn: 'roleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 17,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "44ec874d7dc7ed09eaa3a73ff54e9225036c9bcb7a8380c5608cadc8a10d644f"
    },
    "0ebe28c91dae161ee654b3938d0809829bd795e59c454f688c89bc6263782d6c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncfn_event_bus = events.CfnEventBus(self, \"MyCfnEventBus\",\n    name=\"name\",\n\n    # the properties below are optional\n    event_source_name=\"eventSourceName\",\n    tags=[events.CfnEventBus.TagEntryProperty(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCfnEventBus cfnEventBus = new CfnEventBus(this, \"MyCfnEventBus\", new CfnEventBusProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    EventSourceName = \"eventSourceName\",\n    Tags = new [] { new TagEntryProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCfnEventBus cfnEventBus = CfnEventBus.Builder.create(this, \"MyCfnEventBus\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .eventSourceName(\"eventSourceName\")\n        .tags(List.of(TagEntryProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncfnEventBus := events.NewCfnEventBus(this, jsii.String(\"MyCfnEventBus\"), &cfnEventBusProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\teventSourceName: jsii.String(\"eventSourceName\"),\n\ttags: []tagEntryProperty{\n\t\t&tagEntryProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst cfnEventBus = new events.CfnEventBus(this, 'MyCfnEventBus', {\n  name: 'name',\n\n  // the properties below are optional\n  eventSourceName: 'eventSourceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEventBus"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEventBus",
        "@aws-cdk/aws-events.CfnEventBusProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventBus = new events.CfnEventBus(this, 'MyCfnEventBus', {\n  name: 'name',\n\n  // the properties below are optional\n  eventSourceName: 'eventSourceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "d9dbcec0b6072b33e9de9f4a79c7a8261fa65110813795abf4c9e23ad267b8e9"
    },
    "8eb5213aa7faa444ed87276f1b8fcd023f3d823ddafb0fc4543c5780c69e2634": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ntag_entry_property = events.CfnEventBus.TagEntryProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nTagEntryProperty tagEntryProperty = new TagEntryProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nTagEntryProperty tagEntryProperty = TagEntryProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ntagEntryProperty := &tagEntryProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst tagEntryProperty: events.CfnEventBus.TagEntryProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEventBus.TagEntryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEventBus.TagEntryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagEntryProperty: events.CfnEventBus.TagEntryProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "68920f3ac218f7c2113f8bf0c71f392b595a20ff6b1768e2106bdfd53a86e1bd"
    },
    "cda30237377301510f3f46d675f354fa4758f2f5a009f9626b1db98186a42cfb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\n# statement: Any\n\ncfn_event_bus_policy = events.CfnEventBusPolicy(self, \"MyCfnEventBusPolicy\",\n    statement_id=\"statementId\",\n\n    # the properties below are optional\n    action=\"action\",\n    condition=events.CfnEventBusPolicy.ConditionProperty(\n        key=\"key\",\n        type=\"type\",\n        value=\"value\"\n    ),\n    event_bus_name=\"eventBusName\",\n    principal=\"principal\",\n    statement=statement\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nvar statement;\n\nCfnEventBusPolicy cfnEventBusPolicy = new CfnEventBusPolicy(this, \"MyCfnEventBusPolicy\", new CfnEventBusPolicyProps {\n    StatementId = \"statementId\",\n\n    // the properties below are optional\n    Action = \"action\",\n    Condition = new ConditionProperty {\n        Key = \"key\",\n        Type = \"type\",\n        Value = \"value\"\n    },\n    EventBusName = \"eventBusName\",\n    Principal = \"principal\",\n    Statement = statement\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nObject statement;\n\nCfnEventBusPolicy cfnEventBusPolicy = CfnEventBusPolicy.Builder.create(this, \"MyCfnEventBusPolicy\")\n        .statementId(\"statementId\")\n\n        // the properties below are optional\n        .action(\"action\")\n        .condition(ConditionProperty.builder()\n                .key(\"key\")\n                .type(\"type\")\n                .value(\"value\")\n                .build())\n        .eventBusName(\"eventBusName\")\n        .principal(\"principal\")\n        .statement(statement)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nvar statement interface{}\ncfnEventBusPolicy := events.NewCfnEventBusPolicy(this, jsii.String(\"MyCfnEventBusPolicy\"), &cfnEventBusPolicyProps{\n\tstatementId: jsii.String(\"statementId\"),\n\n\t// the properties below are optional\n\taction: jsii.String(\"action\"),\n\tcondition: &conditionProperty{\n\t\tkey: jsii.String(\"key\"),\n\t\ttype: jsii.String(\"type\"),\n\t\tvalue: jsii.String(\"value\"),\n\t},\n\teventBusName: jsii.String(\"eventBusName\"),\n\tprincipal: jsii.String(\"principal\"),\n\tstatement: statement,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const statement: any;\nconst cfnEventBusPolicy = new events.CfnEventBusPolicy(this, 'MyCfnEventBusPolicy', {\n  statementId: 'statementId',\n\n  // the properties below are optional\n  action: 'action',\n  condition: {\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  },\n  eventBusName: 'eventBusName',\n  principal: 'principal',\n  statement: statement,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEventBusPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEventBusPolicy",
        "@aws-cdk/aws-events.CfnEventBusPolicyProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const statement: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventBusPolicy = new events.CfnEventBusPolicy(this, 'MyCfnEventBusPolicy', {\n  statementId: 'statementId',\n\n  // the properties below are optional\n  action: 'action',\n  condition: {\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  },\n  eventBusName: 'eventBusName',\n  principal: 'principal',\n  statement: statement,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 15,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "b6b74dc88185fb9b544acd422cc5f24aa5a87435274d8b42705da90961737fcb"
    },
    "efdef4980c791b63d6dd9bcd3da7640e6020421c4db20c93662a6bce316469d5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncondition_property = events.CfnEventBusPolicy.ConditionProperty(\n    key=\"key\",\n    type=\"type\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nConditionProperty conditionProperty = new ConditionProperty {\n    Key = \"key\",\n    Type = \"type\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nConditionProperty conditionProperty = ConditionProperty.builder()\n        .key(\"key\")\n        .type(\"type\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nconditionProperty := &conditionProperty{\n\tkey: jsii.String(\"key\"),\n\ttype: jsii.String(\"type\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst conditionProperty: events.CfnEventBusPolicy.ConditionProperty = {\n  key: 'key',\n  type: 'type',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEventBusPolicy.ConditionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEventBusPolicy.ConditionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst conditionProperty: events.CfnEventBusPolicy.ConditionProperty = {\n  key: 'key',\n  type: 'type',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5d83ba383057cf0c78af2ce44639a294bd4a7f01dbf3eb1f047c243764650707"
    },
    "d7f4eba2c6079cbf693fbeeea45396dbd8970daa7e555305dd26ceee8efe409d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\n# statement: Any\n\ncfn_event_bus_policy_props = events.CfnEventBusPolicyProps(\n    statement_id=\"statementId\",\n\n    # the properties below are optional\n    action=\"action\",\n    condition=events.CfnEventBusPolicy.ConditionProperty(\n        key=\"key\",\n        type=\"type\",\n        value=\"value\"\n    ),\n    event_bus_name=\"eventBusName\",\n    principal=\"principal\",\n    statement=statement\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nvar statement;\n\nCfnEventBusPolicyProps cfnEventBusPolicyProps = new CfnEventBusPolicyProps {\n    StatementId = \"statementId\",\n\n    // the properties below are optional\n    Action = \"action\",\n    Condition = new ConditionProperty {\n        Key = \"key\",\n        Type = \"type\",\n        Value = \"value\"\n    },\n    EventBusName = \"eventBusName\",\n    Principal = \"principal\",\n    Statement = statement\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nObject statement;\n\nCfnEventBusPolicyProps cfnEventBusPolicyProps = CfnEventBusPolicyProps.builder()\n        .statementId(\"statementId\")\n\n        // the properties below are optional\n        .action(\"action\")\n        .condition(ConditionProperty.builder()\n                .key(\"key\")\n                .type(\"type\")\n                .value(\"value\")\n                .build())\n        .eventBusName(\"eventBusName\")\n        .principal(\"principal\")\n        .statement(statement)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nvar statement interface{}\ncfnEventBusPolicyProps := &cfnEventBusPolicyProps{\n\tstatementId: jsii.String(\"statementId\"),\n\n\t// the properties below are optional\n\taction: jsii.String(\"action\"),\n\tcondition: &conditionProperty{\n\t\tkey: jsii.String(\"key\"),\n\t\ttype: jsii.String(\"type\"),\n\t\tvalue: jsii.String(\"value\"),\n\t},\n\teventBusName: jsii.String(\"eventBusName\"),\n\tprincipal: jsii.String(\"principal\"),\n\tstatement: statement,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const statement: any;\nconst cfnEventBusPolicyProps: events.CfnEventBusPolicyProps = {\n  statementId: 'statementId',\n\n  // the properties below are optional\n  action: 'action',\n  condition: {\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  },\n  eventBusName: 'eventBusName',\n  principal: 'principal',\n  statement: statement,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEventBusPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEventBusPolicyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const statement: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventBusPolicyProps: events.CfnEventBusPolicyProps = {\n  statementId: 'statementId',\n\n  // the properties below are optional\n  action: 'action',\n  condition: {\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  },\n  eventBusName: 'eventBusName',\n  principal: 'principal',\n  statement: statement,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 15,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "b125f8e8c224ebecaaa92d7297488c27f1c941b0676c558c73fc64c30279201a"
    },
    "bc03dcebf3afdb15f2522fc929bb42cc51816dae4dfe2e4b82ed6b2b0207d9a6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncfn_event_bus_props = events.CfnEventBusProps(\n    name=\"name\",\n\n    # the properties below are optional\n    event_source_name=\"eventSourceName\",\n    tags=[events.CfnEventBus.TagEntryProperty(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCfnEventBusProps cfnEventBusProps = new CfnEventBusProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    EventSourceName = \"eventSourceName\",\n    Tags = new [] { new TagEntryProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCfnEventBusProps cfnEventBusProps = CfnEventBusProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .eventSourceName(\"eventSourceName\")\n        .tags(List.of(TagEntryProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncfnEventBusProps := &cfnEventBusProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\teventSourceName: jsii.String(\"eventSourceName\"),\n\ttags: []tagEntryProperty{\n\t\t&tagEntryProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst cfnEventBusProps: events.CfnEventBusProps = {\n  name: 'name',\n\n  // the properties below are optional\n  eventSourceName: 'eventSourceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnEventBusProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnEventBusProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventBusProps: events.CfnEventBusProps = {\n  name: 'name',\n\n  // the properties below are optional\n  eventSourceName: 'eventSourceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f39ef84f2f1cf1128222999e5caa833fbdcc285f160865cf6a8d364143e6d366"
    },
    "2fb7c2a561cf252638050f3b61988aaa25d6f08b2c222dd6ccb0e466c8ca5fba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\n# event_pattern: Any\n\ncfn_rule = events.CfnRule(self, \"MyCfnRule\",\n    description=\"description\",\n    event_bus_name=\"eventBusName\",\n    event_pattern=event_pattern,\n    name=\"name\",\n    role_arn=\"roleArn\",\n    schedule_expression=\"scheduleExpression\",\n    state=\"state\",\n    targets=[events.CfnRule.TargetProperty(\n        arn=\"arn\",\n        id=\"id\",\n\n        # the properties below are optional\n        batch_parameters=events.CfnRule.BatchParametersProperty(\n            job_definition=\"jobDefinition\",\n            job_name=\"jobName\",\n\n            # the properties below are optional\n            array_properties=events.CfnRule.BatchArrayPropertiesProperty(\n                size=123\n            ),\n            retry_strategy=events.CfnRule.BatchRetryStrategyProperty(\n                attempts=123\n            )\n        ),\n        dead_letter_config=events.CfnRule.DeadLetterConfigProperty(\n            arn=\"arn\"\n        ),\n        ecs_parameters=events.CfnRule.EcsParametersProperty(\n            task_definition_arn=\"taskDefinitionArn\",\n\n            # the properties below are optional\n            capacity_provider_strategy=[events.CfnRule.CapacityProviderStrategyItemProperty(\n                capacity_provider=\"capacityProvider\",\n\n                # the properties below are optional\n                base=123,\n                weight=123\n            )],\n            enable_ecs_managed_tags=False,\n            enable_execute_command=False,\n            group=\"group\",\n            launch_type=\"launchType\",\n            network_configuration=events.CfnRule.NetworkConfigurationProperty(\n                aws_vpc_configuration=events.CfnRule.AwsVpcConfigurationProperty(\n                    subnets=[\"subnets\"],\n\n                    # the properties below are optional\n                    assign_public_ip=\"assignPublicIp\",\n                    security_groups=[\"securityGroups\"]\n                )\n            ),\n            placement_constraints=[events.CfnRule.PlacementConstraintProperty(\n                expression=\"expression\",\n                type=\"type\"\n            )],\n            placement_strategies=[events.CfnRule.PlacementStrategyProperty(\n                field=\"field\",\n                type=\"type\"\n            )],\n            platform_version=\"platformVersion\",\n            propagate_tags=\"propagateTags\",\n            reference_id=\"referenceId\",\n            tag_list=[CfnTag(\n                key=\"key\",\n                value=\"value\"\n            )],\n            task_count=123\n        ),\n        http_parameters=events.CfnRule.HttpParametersProperty(\n            header_parameters={\n                \"header_parameters_key\": \"headerParameters\"\n            },\n            path_parameter_values=[\"pathParameterValues\"],\n            query_string_parameters={\n                \"query_string_parameters_key\": \"queryStringParameters\"\n            }\n        ),\n        input=\"input\",\n        input_path=\"inputPath\",\n        input_transformer=events.CfnRule.InputTransformerProperty(\n            input_template=\"inputTemplate\",\n\n            # the properties below are optional\n            input_paths_map={\n                \"input_paths_map_key\": \"inputPathsMap\"\n            }\n        ),\n        kinesis_parameters=events.CfnRule.KinesisParametersProperty(\n            partition_key_path=\"partitionKeyPath\"\n        ),\n        redshift_data_parameters=events.CfnRule.RedshiftDataParametersProperty(\n            database=\"database\",\n            sql=\"sql\",\n\n            # the properties below are optional\n            db_user=\"dbUser\",\n            secret_manager_arn=\"secretManagerArn\",\n            statement_name=\"statementName\",\n            with_event=False\n        ),\n        retry_policy=events.CfnRule.RetryPolicyProperty(\n            maximum_event_age_in_seconds=123,\n            maximum_retry_attempts=123\n        ),\n        role_arn=\"roleArn\",\n        run_command_parameters=events.CfnRule.RunCommandParametersProperty(\n            run_command_targets=[events.CfnRule.RunCommandTargetProperty(\n                key=\"key\",\n                values=[\"values\"]\n            )]\n        ),\n        sage_maker_pipeline_parameters=events.CfnRule.SageMakerPipelineParametersProperty(\n            pipeline_parameter_list=[events.CfnRule.SageMakerPipelineParameterProperty(\n                name=\"name\",\n                value=\"value\"\n            )]\n        ),\n        sqs_parameters=events.CfnRule.SqsParametersProperty(\n            message_group_id=\"messageGroupId\"\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nvar eventPattern;\n\nCfnRule cfnRule = new CfnRule(this, \"MyCfnRule\", new CfnRuleProps {\n    Description = \"description\",\n    EventBusName = \"eventBusName\",\n    EventPattern = eventPattern,\n    Name = \"name\",\n    RoleArn = \"roleArn\",\n    ScheduleExpression = \"scheduleExpression\",\n    State = \"state\",\n    Targets = new [] { new TargetProperty {\n        Arn = \"arn\",\n        Id = \"id\",\n\n        // the properties below are optional\n        BatchParameters = new BatchParametersProperty {\n            JobDefinition = \"jobDefinition\",\n            JobName = \"jobName\",\n\n            // the properties below are optional\n            ArrayProperties = new BatchArrayPropertiesProperty {\n                Size = 123\n            },\n            RetryStrategy = new BatchRetryStrategyProperty {\n                Attempts = 123\n            }\n        },\n        DeadLetterConfig = new DeadLetterConfigProperty {\n            Arn = \"arn\"\n        },\n        EcsParameters = new EcsParametersProperty {\n            TaskDefinitionArn = \"taskDefinitionArn\",\n\n            // the properties below are optional\n            CapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n                CapacityProvider = \"capacityProvider\",\n\n                // the properties below are optional\n                Base = 123,\n                Weight = 123\n            } },\n            EnableEcsManagedTags = false,\n            EnableExecuteCommand = false,\n            Group = \"group\",\n            LaunchType = \"launchType\",\n            NetworkConfiguration = new NetworkConfigurationProperty {\n                AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n                    Subnets = new [] { \"subnets\" },\n\n                    // the properties below are optional\n                    AssignPublicIp = \"assignPublicIp\",\n                    SecurityGroups = new [] { \"securityGroups\" }\n                }\n            },\n            PlacementConstraints = new [] { new PlacementConstraintProperty {\n                Expression = \"expression\",\n                Type = \"type\"\n            } },\n            PlacementStrategies = new [] { new PlacementStrategyProperty {\n                Field = \"field\",\n                Type = \"type\"\n            } },\n            PlatformVersion = \"platformVersion\",\n            PropagateTags = \"propagateTags\",\n            ReferenceId = \"referenceId\",\n            TagList = new [] { new CfnTag {\n                Key = \"key\",\n                Value = \"value\"\n            } },\n            TaskCount = 123\n        },\n        HttpParameters = new HttpParametersProperty {\n            HeaderParameters = new Dictionary<string, string> {\n                { \"headerParametersKey\", \"headerParameters\" }\n            },\n            PathParameterValues = new [] { \"pathParameterValues\" },\n            QueryStringParameters = new Dictionary<string, string> {\n                { \"queryStringParametersKey\", \"queryStringParameters\" }\n            }\n        },\n        Input = \"input\",\n        InputPath = \"inputPath\",\n        InputTransformer = new InputTransformerProperty {\n            InputTemplate = \"inputTemplate\",\n\n            // the properties below are optional\n            InputPathsMap = new Dictionary<string, string> {\n                { \"inputPathsMapKey\", \"inputPathsMap\" }\n            }\n        },\n        KinesisParameters = new KinesisParametersProperty {\n            PartitionKeyPath = \"partitionKeyPath\"\n        },\n        RedshiftDataParameters = new RedshiftDataParametersProperty {\n            Database = \"database\",\n            Sql = \"sql\",\n\n            // the properties below are optional\n            DbUser = \"dbUser\",\n            SecretManagerArn = \"secretManagerArn\",\n            StatementName = \"statementName\",\n            WithEvent = false\n        },\n        RetryPolicy = new RetryPolicyProperty {\n            MaximumEventAgeInSeconds = 123,\n            MaximumRetryAttempts = 123\n        },\n        RoleArn = \"roleArn\",\n        RunCommandParameters = new RunCommandParametersProperty {\n            RunCommandTargets = new [] { new RunCommandTargetProperty {\n                Key = \"key\",\n                Values = new [] { \"values\" }\n            } }\n        },\n        SageMakerPipelineParameters = new SageMakerPipelineParametersProperty {\n            PipelineParameterList = new [] { new SageMakerPipelineParameterProperty {\n                Name = \"name\",\n                Value = \"value\"\n            } }\n        },\n        SqsParameters = new SqsParametersProperty {\n            MessageGroupId = \"messageGroupId\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nObject eventPattern;\n\nCfnRule cfnRule = CfnRule.Builder.create(this, \"MyCfnRule\")\n        .description(\"description\")\n        .eventBusName(\"eventBusName\")\n        .eventPattern(eventPattern)\n        .name(\"name\")\n        .roleArn(\"roleArn\")\n        .scheduleExpression(\"scheduleExpression\")\n        .state(\"state\")\n        .targets(List.of(TargetProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n\n                // the properties below are optional\n                .batchParameters(BatchParametersProperty.builder()\n                        .jobDefinition(\"jobDefinition\")\n                        .jobName(\"jobName\")\n\n                        // the properties below are optional\n                        .arrayProperties(BatchArrayPropertiesProperty.builder()\n                                .size(123)\n                                .build())\n                        .retryStrategy(BatchRetryStrategyProperty.builder()\n                                .attempts(123)\n                                .build())\n                        .build())\n                .deadLetterConfig(DeadLetterConfigProperty.builder()\n                        .arn(\"arn\")\n                        .build())\n                .ecsParameters(EcsParametersProperty.builder()\n                        .taskDefinitionArn(\"taskDefinitionArn\")\n\n                        // the properties below are optional\n                        .capacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                                .capacityProvider(\"capacityProvider\")\n\n                                // the properties below are optional\n                                .base(123)\n                                .weight(123)\n                                .build()))\n                        .enableEcsManagedTags(false)\n                        .enableExecuteCommand(false)\n                        .group(\"group\")\n                        .launchType(\"launchType\")\n                        .networkConfiguration(NetworkConfigurationProperty.builder()\n                                .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                                        .subnets(List.of(\"subnets\"))\n\n                                        // the properties below are optional\n                                        .assignPublicIp(\"assignPublicIp\")\n                                        .securityGroups(List.of(\"securityGroups\"))\n                                        .build())\n                                .build())\n                        .placementConstraints(List.of(PlacementConstraintProperty.builder()\n                                .expression(\"expression\")\n                                .type(\"type\")\n                                .build()))\n                        .placementStrategies(List.of(PlacementStrategyProperty.builder()\n                                .field(\"field\")\n                                .type(\"type\")\n                                .build()))\n                        .platformVersion(\"platformVersion\")\n                        .propagateTags(\"propagateTags\")\n                        .referenceId(\"referenceId\")\n                        .tagList(List.of(CfnTag.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n                                .build()))\n                        .taskCount(123)\n                        .build())\n                .httpParameters(HttpParametersProperty.builder()\n                        .headerParameters(Map.of(\n                                \"headerParametersKey\", \"headerParameters\"))\n                        .pathParameterValues(List.of(\"pathParameterValues\"))\n                        .queryStringParameters(Map.of(\n                                \"queryStringParametersKey\", \"queryStringParameters\"))\n                        .build())\n                .input(\"input\")\n                .inputPath(\"inputPath\")\n                .inputTransformer(InputTransformerProperty.builder()\n                        .inputTemplate(\"inputTemplate\")\n\n                        // the properties below are optional\n                        .inputPathsMap(Map.of(\n                                \"inputPathsMapKey\", \"inputPathsMap\"))\n                        .build())\n                .kinesisParameters(KinesisParametersProperty.builder()\n                        .partitionKeyPath(\"partitionKeyPath\")\n                        .build())\n                .redshiftDataParameters(RedshiftDataParametersProperty.builder()\n                        .database(\"database\")\n                        .sql(\"sql\")\n\n                        // the properties below are optional\n                        .dbUser(\"dbUser\")\n                        .secretManagerArn(\"secretManagerArn\")\n                        .statementName(\"statementName\")\n                        .withEvent(false)\n                        .build())\n                .retryPolicy(RetryPolicyProperty.builder()\n                        .maximumEventAgeInSeconds(123)\n                        .maximumRetryAttempts(123)\n                        .build())\n                .roleArn(\"roleArn\")\n                .runCommandParameters(RunCommandParametersProperty.builder()\n                        .runCommandTargets(List.of(RunCommandTargetProperty.builder()\n                                .key(\"key\")\n                                .values(List.of(\"values\"))\n                                .build()))\n                        .build())\n                .sageMakerPipelineParameters(SageMakerPipelineParametersProperty.builder()\n                        .pipelineParameterList(List.of(SageMakerPipelineParameterProperty.builder()\n                                .name(\"name\")\n                                .value(\"value\")\n                                .build()))\n                        .build())\n                .sqsParameters(SqsParametersProperty.builder()\n                        .messageGroupId(\"messageGroupId\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nvar eventPattern interface{}\ncfnRule := events.NewCfnRule(this, jsii.String(\"MyCfnRule\"), &cfnRuleProps{\n\tdescription: jsii.String(\"description\"),\n\teventBusName: jsii.String(\"eventBusName\"),\n\teventPattern: eventPattern,\n\tname: jsii.String(\"name\"),\n\troleArn: jsii.String(\"roleArn\"),\n\tscheduleExpression: jsii.String(\"scheduleExpression\"),\n\tstate: jsii.String(\"state\"),\n\ttargets: []interface{}{\n\t\t&targetProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tid: jsii.String(\"id\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbatchParameters: &batchParametersProperty{\n\t\t\t\tjobDefinition: jsii.String(\"jobDefinition\"),\n\t\t\t\tjobName: jsii.String(\"jobName\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tarrayProperties: &batchArrayPropertiesProperty{\n\t\t\t\t\tsize: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tretryStrategy: &batchRetryStrategyProperty{\n\t\t\t\t\tattempts: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t\tdeadLetterConfig: &deadLetterConfigProperty{\n\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t},\n\t\t\tecsParameters: &ecsParametersProperty{\n\t\t\t\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tcapacityProviderStrategy: []interface{}{\n\t\t\t\t\t&capacityProviderStrategyItemProperty{\n\t\t\t\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tbase: jsii.Number(123),\n\t\t\t\t\t\tweight: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tenableEcsManagedTags: jsii.Boolean(false),\n\t\t\t\tenableExecuteCommand: jsii.Boolean(false),\n\t\t\t\tgroup: jsii.String(\"group\"),\n\t\t\t\tlaunchType: jsii.String(\"launchType\"),\n\t\t\t\tnetworkConfiguration: &networkConfigurationProperty{\n\t\t\t\t\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\t\t\t\tsubnets: []*string{\n\t\t\t\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\t\t\t\tsecurityGroups: []*string{\n\t\t\t\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplacementConstraints: []interface{}{\n\t\t\t\t\t&placementConstraintProperty{\n\t\t\t\t\t\texpression: jsii.String(\"expression\"),\n\t\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplacementStrategies: []interface{}{\n\t\t\t\t\t&placementStrategyProperty{\n\t\t\t\t\t\tfield: jsii.String(\"field\"),\n\t\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplatformVersion: jsii.String(\"platformVersion\"),\n\t\t\t\tpropagateTags: jsii.String(\"propagateTags\"),\n\t\t\t\treferenceId: jsii.String(\"referenceId\"),\n\t\t\t\ttagList: []interface{}{\n\t\t\t\t\t&cfnTag{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttaskCount: jsii.Number(123),\n\t\t\t},\n\t\t\thttpParameters: &httpParametersProperty{\n\t\t\t\theaderParameters: map[string]*string{\n\t\t\t\t\t\"headerParametersKey\": jsii.String(\"headerParameters\"),\n\t\t\t\t},\n\t\t\t\tpathParameterValues: []*string{\n\t\t\t\t\tjsii.String(\"pathParameterValues\"),\n\t\t\t\t},\n\t\t\t\tqueryStringParameters: map[string]*string{\n\t\t\t\t\t\"queryStringParametersKey\": jsii.String(\"queryStringParameters\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tinput: jsii.String(\"input\"),\n\t\t\tinputPath: jsii.String(\"inputPath\"),\n\t\t\tinputTransformer: &inputTransformerProperty{\n\t\t\t\tinputTemplate: jsii.String(\"inputTemplate\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tinputPathsMap: map[string]*string{\n\t\t\t\t\t\"inputPathsMapKey\": jsii.String(\"inputPathsMap\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tkinesisParameters: &kinesisParametersProperty{\n\t\t\t\tpartitionKeyPath: jsii.String(\"partitionKeyPath\"),\n\t\t\t},\n\t\t\tredshiftDataParameters: &redshiftDataParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\tsql: jsii.String(\"sql\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tdbUser: jsii.String(\"dbUser\"),\n\t\t\t\tsecretManagerArn: jsii.String(\"secretManagerArn\"),\n\t\t\t\tstatementName: jsii.String(\"statementName\"),\n\t\t\t\twithEvent: jsii.Boolean(false),\n\t\t\t},\n\t\t\tretryPolicy: &retryPolicyProperty{\n\t\t\t\tmaximumEventAgeInSeconds: jsii.Number(123),\n\t\t\t\tmaximumRetryAttempts: jsii.Number(123),\n\t\t\t},\n\t\t\troleArn: jsii.String(\"roleArn\"),\n\t\t\trunCommandParameters: &runCommandParametersProperty{\n\t\t\t\trunCommandTargets: []interface{}{\n\t\t\t\t\t&runCommandTargetProperty{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalues: []*string{\n\t\t\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tsageMakerPipelineParameters: &sageMakerPipelineParametersProperty{\n\t\t\t\tpipelineParameterList: []interface{}{\n\t\t\t\t\t&sageMakerPipelineParameterProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tsqsParameters: &sqsParametersProperty{\n\t\t\t\tmessageGroupId: jsii.String(\"messageGroupId\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const eventPattern: any;\nconst cfnRule = new events.CfnRule(this, 'MyCfnRule', /* all optional props */ {\n  description: 'description',\n  eventBusName: 'eventBusName',\n  eventPattern: eventPattern,\n  name: 'name',\n  roleArn: 'roleArn',\n  scheduleExpression: 'scheduleExpression',\n  state: 'state',\n  targets: [{\n    arn: 'arn',\n    id: 'id',\n\n    // the properties below are optional\n    batchParameters: {\n      jobDefinition: 'jobDefinition',\n      jobName: 'jobName',\n\n      // the properties below are optional\n      arrayProperties: {\n        size: 123,\n      },\n      retryStrategy: {\n        attempts: 123,\n      },\n    },\n    deadLetterConfig: {\n      arn: 'arn',\n    },\n    ecsParameters: {\n      taskDefinitionArn: 'taskDefinitionArn',\n\n      // the properties below are optional\n      capacityProviderStrategy: [{\n        capacityProvider: 'capacityProvider',\n\n        // the properties below are optional\n        base: 123,\n        weight: 123,\n      }],\n      enableEcsManagedTags: false,\n      enableExecuteCommand: false,\n      group: 'group',\n      launchType: 'launchType',\n      networkConfiguration: {\n        awsVpcConfiguration: {\n          subnets: ['subnets'],\n\n          // the properties below are optional\n          assignPublicIp: 'assignPublicIp',\n          securityGroups: ['securityGroups'],\n        },\n      },\n      placementConstraints: [{\n        expression: 'expression',\n        type: 'type',\n      }],\n      placementStrategies: [{\n        field: 'field',\n        type: 'type',\n      }],\n      platformVersion: 'platformVersion',\n      propagateTags: 'propagateTags',\n      referenceId: 'referenceId',\n      tagList: [{\n        key: 'key',\n        value: 'value',\n      }],\n      taskCount: 123,\n    },\n    httpParameters: {\n      headerParameters: {\n        headerParametersKey: 'headerParameters',\n      },\n      pathParameterValues: ['pathParameterValues'],\n      queryStringParameters: {\n        queryStringParametersKey: 'queryStringParameters',\n      },\n    },\n    input: 'input',\n    inputPath: 'inputPath',\n    inputTransformer: {\n      inputTemplate: 'inputTemplate',\n\n      // the properties below are optional\n      inputPathsMap: {\n        inputPathsMapKey: 'inputPathsMap',\n      },\n    },\n    kinesisParameters: {\n      partitionKeyPath: 'partitionKeyPath',\n    },\n    redshiftDataParameters: {\n      database: 'database',\n      sql: 'sql',\n\n      // the properties below are optional\n      dbUser: 'dbUser',\n      secretManagerArn: 'secretManagerArn',\n      statementName: 'statementName',\n      withEvent: false,\n    },\n    retryPolicy: {\n      maximumEventAgeInSeconds: 123,\n      maximumRetryAttempts: 123,\n    },\n    roleArn: 'roleArn',\n    runCommandParameters: {\n      runCommandTargets: [{\n        key: 'key',\n        values: ['values'],\n      }],\n    },\n    sageMakerPipelineParameters: {\n      pipelineParameterList: [{\n        name: 'name',\n        value: 'value',\n      }],\n    },\n    sqsParameters: {\n      messageGroupId: 'messageGroupId',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule",
        "@aws-cdk/aws-events.CfnRuleProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const eventPattern: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRule = new events.CfnRule(this, 'MyCfnRule', /* all optional props */ {\n  description: 'description',\n  eventBusName: 'eventBusName',\n  eventPattern: eventPattern,\n  name: 'name',\n  roleArn: 'roleArn',\n  scheduleExpression: 'scheduleExpression',\n  state: 'state',\n  targets: [{\n    arn: 'arn',\n    id: 'id',\n\n    // the properties below are optional\n    batchParameters: {\n      jobDefinition: 'jobDefinition',\n      jobName: 'jobName',\n\n      // the properties below are optional\n      arrayProperties: {\n        size: 123,\n      },\n      retryStrategy: {\n        attempts: 123,\n      },\n    },\n    deadLetterConfig: {\n      arn: 'arn',\n    },\n    ecsParameters: {\n      taskDefinitionArn: 'taskDefinitionArn',\n\n      // the properties below are optional\n      capacityProviderStrategy: [{\n        capacityProvider: 'capacityProvider',\n\n        // the properties below are optional\n        base: 123,\n        weight: 123,\n      }],\n      enableEcsManagedTags: false,\n      enableExecuteCommand: false,\n      group: 'group',\n      launchType: 'launchType',\n      networkConfiguration: {\n        awsVpcConfiguration: {\n          subnets: ['subnets'],\n\n          // the properties below are optional\n          assignPublicIp: 'assignPublicIp',\n          securityGroups: ['securityGroups'],\n        },\n      },\n      placementConstraints: [{\n        expression: 'expression',\n        type: 'type',\n      }],\n      placementStrategies: [{\n        field: 'field',\n        type: 'type',\n      }],\n      platformVersion: 'platformVersion',\n      propagateTags: 'propagateTags',\n      referenceId: 'referenceId',\n      tagList: [{\n        key: 'key',\n        value: 'value',\n      }],\n      taskCount: 123,\n    },\n    httpParameters: {\n      headerParameters: {\n        headerParametersKey: 'headerParameters',\n      },\n      pathParameterValues: ['pathParameterValues'],\n      queryStringParameters: {\n        queryStringParametersKey: 'queryStringParameters',\n      },\n    },\n    input: 'input',\n    inputPath: 'inputPath',\n    inputTransformer: {\n      inputTemplate: 'inputTemplate',\n\n      // the properties below are optional\n      inputPathsMap: {\n        inputPathsMapKey: 'inputPathsMap',\n      },\n    },\n    kinesisParameters: {\n      partitionKeyPath: 'partitionKeyPath',\n    },\n    redshiftDataParameters: {\n      database: 'database',\n      sql: 'sql',\n\n      // the properties below are optional\n      dbUser: 'dbUser',\n      secretManagerArn: 'secretManagerArn',\n      statementName: 'statementName',\n      withEvent: false,\n    },\n    retryPolicy: {\n      maximumEventAgeInSeconds: 123,\n      maximumRetryAttempts: 123,\n    },\n    roleArn: 'roleArn',\n    runCommandParameters: {\n      runCommandTargets: [{\n        key: 'key',\n        values: ['values'],\n      }],\n    },\n    sageMakerPipelineParameters: {\n      pipelineParameterList: [{\n        name: 'name',\n        value: 'value',\n      }],\n    },\n    sqsParameters: {\n      messageGroupId: 'messageGroupId',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 48,
        "75": 88,
        "91": 3,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 11,
        "193": 26,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 82,
        "290": 1
      },
      "fqnsFingerprint": "debdf76ee7bdbaffe93f1f06d532cec84a5e6b575565a49479ec1fcacbb9760c"
    },
    "e3128fd5f141996e40ca51a07fa517c302351a8b641ef3329a1e718df8d5b21b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\naws_vpc_configuration_property = events.CfnRule.AwsVpcConfigurationProperty(\n    subnets=[\"subnets\"],\n\n    # the properties below are optional\n    assign_public_ip=\"assignPublicIp\",\n    security_groups=[\"securityGroups\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nAwsVpcConfigurationProperty awsVpcConfigurationProperty = new AwsVpcConfigurationProperty {\n    Subnets = new [] { \"subnets\" },\n\n    // the properties below are optional\n    AssignPublicIp = \"assignPublicIp\",\n    SecurityGroups = new [] { \"securityGroups\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nAwsVpcConfigurationProperty awsVpcConfigurationProperty = AwsVpcConfigurationProperty.builder()\n        .subnets(List.of(\"subnets\"))\n\n        // the properties below are optional\n        .assignPublicIp(\"assignPublicIp\")\n        .securityGroups(List.of(\"securityGroups\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nawsVpcConfigurationProperty := &awsVpcConfigurationProperty{\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\n\t// the properties below are optional\n\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst awsVpcConfigurationProperty: events.CfnRule.AwsVpcConfigurationProperty = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  assignPublicIp: 'assignPublicIp',\n  securityGroups: ['securityGroups'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.AwsVpcConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.AwsVpcConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsVpcConfigurationProperty: events.CfnRule.AwsVpcConfigurationProperty = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  assignPublicIp: 'assignPublicIp',\n  securityGroups: ['securityGroups'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "26314cc4533925e7e7514544a9177c4ebe1c03447c923d0379a968846b4eb4f2"
    },
    "919a8dbeec790f1ae74157bdc0a3d93a6a6ebfc287831684d7fa07d521123132": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nbatch_array_properties_property = events.CfnRule.BatchArrayPropertiesProperty(\n    size=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nBatchArrayPropertiesProperty batchArrayPropertiesProperty = new BatchArrayPropertiesProperty {\n    Size = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nBatchArrayPropertiesProperty batchArrayPropertiesProperty = BatchArrayPropertiesProperty.builder()\n        .size(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nbatchArrayPropertiesProperty := &batchArrayPropertiesProperty{\n\tsize: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst batchArrayPropertiesProperty: events.CfnRule.BatchArrayPropertiesProperty = {\n  size: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.BatchArrayPropertiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.BatchArrayPropertiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst batchArrayPropertiesProperty: events.CfnRule.BatchArrayPropertiesProperty = {\n  size: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "87b47a361cfa9a0e55c35dabd50b6d75a5e4d93dfaadd53e490a6bcbf9ce71f1"
    },
    "4018f6a6536a94c4f62b1f271e1065a9ed3fff73fac291bec88b47a8d59003dc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nbatch_parameters_property = events.CfnRule.BatchParametersProperty(\n    job_definition=\"jobDefinition\",\n    job_name=\"jobName\",\n\n    # the properties below are optional\n    array_properties=events.CfnRule.BatchArrayPropertiesProperty(\n        size=123\n    ),\n    retry_strategy=events.CfnRule.BatchRetryStrategyProperty(\n        attempts=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nBatchParametersProperty batchParametersProperty = new BatchParametersProperty {\n    JobDefinition = \"jobDefinition\",\n    JobName = \"jobName\",\n\n    // the properties below are optional\n    ArrayProperties = new BatchArrayPropertiesProperty {\n        Size = 123\n    },\n    RetryStrategy = new BatchRetryStrategyProperty {\n        Attempts = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nBatchParametersProperty batchParametersProperty = BatchParametersProperty.builder()\n        .jobDefinition(\"jobDefinition\")\n        .jobName(\"jobName\")\n\n        // the properties below are optional\n        .arrayProperties(BatchArrayPropertiesProperty.builder()\n                .size(123)\n                .build())\n        .retryStrategy(BatchRetryStrategyProperty.builder()\n                .attempts(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nbatchParametersProperty := &batchParametersProperty{\n\tjobDefinition: jsii.String(\"jobDefinition\"),\n\tjobName: jsii.String(\"jobName\"),\n\n\t// the properties below are optional\n\tarrayProperties: &batchArrayPropertiesProperty{\n\t\tsize: jsii.Number(123),\n\t},\n\tretryStrategy: &batchRetryStrategyProperty{\n\t\tattempts: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst batchParametersProperty: events.CfnRule.BatchParametersProperty = {\n  jobDefinition: 'jobDefinition',\n  jobName: 'jobName',\n\n  // the properties below are optional\n  arrayProperties: {\n    size: 123,\n  },\n  retryStrategy: {\n    attempts: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.BatchParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.BatchParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst batchParametersProperty: events.CfnRule.BatchParametersProperty = {\n  jobDefinition: 'jobDefinition',\n  jobName: 'jobName',\n\n  // the properties below are optional\n  arrayProperties: {\n    size: 123,\n  },\n  retryStrategy: {\n    attempts: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 11,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "3d9ca04d654572cabb591ad436a08f3181146d4abe8572dc180bb0d98f7dcf35"
    },
    "5d73e2f0df262b2093529fc88492023bbc9a2a3c1c7713577e7d9c4df690e7bb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nbatch_retry_strategy_property = events.CfnRule.BatchRetryStrategyProperty(\n    attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nBatchRetryStrategyProperty batchRetryStrategyProperty = new BatchRetryStrategyProperty {\n    Attempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nBatchRetryStrategyProperty batchRetryStrategyProperty = BatchRetryStrategyProperty.builder()\n        .attempts(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nbatchRetryStrategyProperty := &batchRetryStrategyProperty{\n\tattempts: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst batchRetryStrategyProperty: events.CfnRule.BatchRetryStrategyProperty = {\n  attempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.BatchRetryStrategyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.BatchRetryStrategyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst batchRetryStrategyProperty: events.CfnRule.BatchRetryStrategyProperty = {\n  attempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "35cf2bbac247d4b61786318ec73a4eb08809c701ef0f5ee0d02ea45965cedcf5"
    },
    "55bfdd587aaaa49e61541603553ce56b45bca85d50b086466fedbd2738a37d03": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ncapacity_provider_strategy_item_property = events.CfnRule.CapacityProviderStrategyItemProperty(\n    capacity_provider=\"capacityProvider\",\n\n    # the properties below are optional\n    base=123,\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nCapacityProviderStrategyItemProperty capacityProviderStrategyItemProperty = new CapacityProviderStrategyItemProperty {\n    CapacityProvider = \"capacityProvider\",\n\n    // the properties below are optional\n    Base = 123,\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nCapacityProviderStrategyItemProperty capacityProviderStrategyItemProperty = CapacityProviderStrategyItemProperty.builder()\n        .capacityProvider(\"capacityProvider\")\n\n        // the properties below are optional\n        .base(123)\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ncapacityProviderStrategyItemProperty := &capacityProviderStrategyItemProperty{\n\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t// the properties below are optional\n\tbase: jsii.Number(123),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst capacityProviderStrategyItemProperty: events.CfnRule.CapacityProviderStrategyItemProperty = {\n  capacityProvider: 'capacityProvider',\n\n  // the properties below are optional\n  base: 123,\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.CapacityProviderStrategyItemProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.CapacityProviderStrategyItemProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityProviderStrategyItemProperty: events.CfnRule.CapacityProviderStrategyItemProperty = {\n  capacityProvider: 'capacityProvider',\n\n  // the properties below are optional\n  base: 123,\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "685db41f3e2ac051a870236172ebe44beabc42ba0f1cbd9e8b2dee1d97f5fbd2"
    },
    "4f460617442b24704a8bfdffce0052075b71b24b20a49de52589a300a2449891": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ndead_letter_config_property = events.CfnRule.DeadLetterConfigProperty(\n    arn=\"arn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nDeadLetterConfigProperty deadLetterConfigProperty = new DeadLetterConfigProperty {\n    Arn = \"arn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nDeadLetterConfigProperty deadLetterConfigProperty = DeadLetterConfigProperty.builder()\n        .arn(\"arn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ndeadLetterConfigProperty := &deadLetterConfigProperty{\n\tarn: jsii.String(\"arn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst deadLetterConfigProperty: events.CfnRule.DeadLetterConfigProperty = {\n  arn: 'arn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.DeadLetterConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.DeadLetterConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deadLetterConfigProperty: events.CfnRule.DeadLetterConfigProperty = {\n  arn: 'arn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c409d38644ecce9bc13c25944fdac8a61d5aecb7d78a3f3e15fa015bb2ec3376"
    },
    "ee6880b87e0c05cdcc895901f48f665c5c74e98312da23adc1abb1c49f95678a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\necs_parameters_property = events.CfnRule.EcsParametersProperty(\n    task_definition_arn=\"taskDefinitionArn\",\n\n    # the properties below are optional\n    capacity_provider_strategy=[events.CfnRule.CapacityProviderStrategyItemProperty(\n        capacity_provider=\"capacityProvider\",\n\n        # the properties below are optional\n        base=123,\n        weight=123\n    )],\n    enable_ecs_managed_tags=False,\n    enable_execute_command=False,\n    group=\"group\",\n    launch_type=\"launchType\",\n    network_configuration=events.CfnRule.NetworkConfigurationProperty(\n        aws_vpc_configuration=events.CfnRule.AwsVpcConfigurationProperty(\n            subnets=[\"subnets\"],\n\n            # the properties below are optional\n            assign_public_ip=\"assignPublicIp\",\n            security_groups=[\"securityGroups\"]\n        )\n    ),\n    placement_constraints=[events.CfnRule.PlacementConstraintProperty(\n        expression=\"expression\",\n        type=\"type\"\n    )],\n    placement_strategies=[events.CfnRule.PlacementStrategyProperty(\n        field=\"field\",\n        type=\"type\"\n    )],\n    platform_version=\"platformVersion\",\n    propagate_tags=\"propagateTags\",\n    reference_id=\"referenceId\",\n    tag_list=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    task_count=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nEcsParametersProperty ecsParametersProperty = new EcsParametersProperty {\n    TaskDefinitionArn = \"taskDefinitionArn\",\n\n    // the properties below are optional\n    CapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n        CapacityProvider = \"capacityProvider\",\n\n        // the properties below are optional\n        Base = 123,\n        Weight = 123\n    } },\n    EnableEcsManagedTags = false,\n    EnableExecuteCommand = false,\n    Group = \"group\",\n    LaunchType = \"launchType\",\n    NetworkConfiguration = new NetworkConfigurationProperty {\n        AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n            Subnets = new [] { \"subnets\" },\n\n            // the properties below are optional\n            AssignPublicIp = \"assignPublicIp\",\n            SecurityGroups = new [] { \"securityGroups\" }\n        }\n    },\n    PlacementConstraints = new [] { new PlacementConstraintProperty {\n        Expression = \"expression\",\n        Type = \"type\"\n    } },\n    PlacementStrategies = new [] { new PlacementStrategyProperty {\n        Field = \"field\",\n        Type = \"type\"\n    } },\n    PlatformVersion = \"platformVersion\",\n    PropagateTags = \"propagateTags\",\n    ReferenceId = \"referenceId\",\n    TagList = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TaskCount = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nEcsParametersProperty ecsParametersProperty = EcsParametersProperty.builder()\n        .taskDefinitionArn(\"taskDefinitionArn\")\n\n        // the properties below are optional\n        .capacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                .capacityProvider(\"capacityProvider\")\n\n                // the properties below are optional\n                .base(123)\n                .weight(123)\n                .build()))\n        .enableEcsManagedTags(false)\n        .enableExecuteCommand(false)\n        .group(\"group\")\n        .launchType(\"launchType\")\n        .networkConfiguration(NetworkConfigurationProperty.builder()\n                .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                        .subnets(List.of(\"subnets\"))\n\n                        // the properties below are optional\n                        .assignPublicIp(\"assignPublicIp\")\n                        .securityGroups(List.of(\"securityGroups\"))\n                        .build())\n                .build())\n        .placementConstraints(List.of(PlacementConstraintProperty.builder()\n                .expression(\"expression\")\n                .type(\"type\")\n                .build()))\n        .placementStrategies(List.of(PlacementStrategyProperty.builder()\n                .field(\"field\")\n                .type(\"type\")\n                .build()))\n        .platformVersion(\"platformVersion\")\n        .propagateTags(\"propagateTags\")\n        .referenceId(\"referenceId\")\n        .tagList(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .taskCount(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\necsParametersProperty := &ecsParametersProperty{\n\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t// the properties below are optional\n\tcapacityProviderStrategy: []interface{}{\n\t\t&capacityProviderStrategyItemProperty{\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbase: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tenableEcsManagedTags: jsii.Boolean(false),\n\tenableExecuteCommand: jsii.Boolean(false),\n\tgroup: jsii.String(\"group\"),\n\tlaunchType: jsii.String(\"launchType\"),\n\tnetworkConfiguration: &networkConfigurationProperty{\n\t\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\tsubnets: []*string{\n\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\tsecurityGroups: []*string{\n\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t},\n\t\t},\n\t},\n\tplacementConstraints: []interface{}{\n\t\t&placementConstraintProperty{\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tplacementStrategies: []interface{}{\n\t\t&placementStrategyProperty{\n\t\t\tfield: jsii.String(\"field\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tplatformVersion: jsii.String(\"platformVersion\"),\n\tpropagateTags: jsii.String(\"propagateTags\"),\n\treferenceId: jsii.String(\"referenceId\"),\n\ttagList: []interface{}{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttaskCount: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst ecsParametersProperty: events.CfnRule.EcsParametersProperty = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  capacityProviderStrategy: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  enableEcsManagedTags: false,\n  enableExecuteCommand: false,\n  group: 'group',\n  launchType: 'launchType',\n  networkConfiguration: {\n    awsVpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  placementConstraints: [{\n    expression: 'expression',\n    type: 'type',\n  }],\n  placementStrategies: [{\n    field: 'field',\n    type: 'type',\n  }],\n  platformVersion: 'platformVersion',\n  propagateTags: 'propagateTags',\n  referenceId: 'referenceId',\n  tagList: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskCount: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.EcsParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.EcsParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecsParametersProperty: events.CfnRule.EcsParametersProperty = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  capacityProviderStrategy: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  enableEcsManagedTags: false,\n  enableExecuteCommand: false,\n  group: 'group',\n  launchType: 'launchType',\n  networkConfiguration: {\n    awsVpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  placementConstraints: [{\n    expression: 'expression',\n    type: 'type',\n  }],\n  placementStrategies: [{\n    field: 'field',\n    type: 'type',\n  }],\n  platformVersion: 'platformVersion',\n  propagateTags: 'propagateTags',\n  referenceId: 'referenceId',\n  tagList: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskCount: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 17,
        "75": 32,
        "91": 2,
        "153": 2,
        "169": 1,
        "192": 6,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 27,
        "290": 1
      },
      "fqnsFingerprint": "af6b1c0fa5175366b0d41558b7c3dbe56119abb1c0792f60b6d261ab7384cb76"
    },
    "da368c0b8a94543a9311744185d938fb6e0468f23f35550b2abca77855e92b5f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nhttp_parameters_property = events.CfnRule.HttpParametersProperty(\n    header_parameters={\n        \"header_parameters_key\": \"headerParameters\"\n    },\n    path_parameter_values=[\"pathParameterValues\"],\n    query_string_parameters={\n        \"query_string_parameters_key\": \"queryStringParameters\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nHttpParametersProperty httpParametersProperty = new HttpParametersProperty {\n    HeaderParameters = new Dictionary<string, string> {\n        { \"headerParametersKey\", \"headerParameters\" }\n    },\n    PathParameterValues = new [] { \"pathParameterValues\" },\n    QueryStringParameters = new Dictionary<string, string> {\n        { \"queryStringParametersKey\", \"queryStringParameters\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nHttpParametersProperty httpParametersProperty = HttpParametersProperty.builder()\n        .headerParameters(Map.of(\n                \"headerParametersKey\", \"headerParameters\"))\n        .pathParameterValues(List.of(\"pathParameterValues\"))\n        .queryStringParameters(Map.of(\n                \"queryStringParametersKey\", \"queryStringParameters\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nhttpParametersProperty := &httpParametersProperty{\n\theaderParameters: map[string]*string{\n\t\t\"headerParametersKey\": jsii.String(\"headerParameters\"),\n\t},\n\tpathParameterValues: []*string{\n\t\tjsii.String(\"pathParameterValues\"),\n\t},\n\tqueryStringParameters: map[string]*string{\n\t\t\"queryStringParametersKey\": jsii.String(\"queryStringParameters\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst httpParametersProperty: events.CfnRule.HttpParametersProperty = {\n  headerParameters: {\n    headerParametersKey: 'headerParameters',\n  },\n  pathParameterValues: ['pathParameterValues'],\n  queryStringParameters: {\n    queryStringParametersKey: 'queryStringParameters',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.HttpParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.HttpParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpParametersProperty: events.CfnRule.HttpParametersProperty = {\n  headerParameters: {\n    headerParametersKey: 'headerParameters',\n  },\n  pathParameterValues: ['pathParameterValues'],\n  queryStringParameters: {\n    queryStringParametersKey: 'queryStringParameters',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c9968566254671e593ecc66f06283ffe36dbcaaba4c422171f6edb105ac2f0f7"
    },
    "1d0c10c3b3e56ab719fe41f0b60506dfff3235f404df5dc597f0d786bd9ed203": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ninput_transformer_property = events.CfnRule.InputTransformerProperty(\n    input_template=\"inputTemplate\",\n\n    # the properties below are optional\n    input_paths_map={\n        \"input_paths_map_key\": \"inputPathsMap\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nInputTransformerProperty inputTransformerProperty = new InputTransformerProperty {\n    InputTemplate = \"inputTemplate\",\n\n    // the properties below are optional\n    InputPathsMap = new Dictionary<string, string> {\n        { \"inputPathsMapKey\", \"inputPathsMap\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nInputTransformerProperty inputTransformerProperty = InputTransformerProperty.builder()\n        .inputTemplate(\"inputTemplate\")\n\n        // the properties below are optional\n        .inputPathsMap(Map.of(\n                \"inputPathsMapKey\", \"inputPathsMap\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ninputTransformerProperty := &inputTransformerProperty{\n\tinputTemplate: jsii.String(\"inputTemplate\"),\n\n\t// the properties below are optional\n\tinputPathsMap: map[string]*string{\n\t\t\"inputPathsMapKey\": jsii.String(\"inputPathsMap\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst inputTransformerProperty: events.CfnRule.InputTransformerProperty = {\n  inputTemplate: 'inputTemplate',\n\n  // the properties below are optional\n  inputPathsMap: {\n    inputPathsMapKey: 'inputPathsMap',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.InputTransformerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.InputTransformerProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst inputTransformerProperty: events.CfnRule.InputTransformerProperty = {\n  inputTemplate: 'inputTemplate',\n\n  // the properties below are optional\n  inputPathsMap: {\n    inputPathsMapKey: 'inputPathsMap',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "615603f1001fc0b5a3e30e90fd28f311f41a28c27c1abd739fa9f2ac07fb8887"
    },
    "1edbaf5bc87becaff42e23fd2b0316bd6c2afd02e62e9b6c13bf6b2b87b48d26": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nkinesis_parameters_property = events.CfnRule.KinesisParametersProperty(\n    partition_key_path=\"partitionKeyPath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nKinesisParametersProperty kinesisParametersProperty = new KinesisParametersProperty {\n    PartitionKeyPath = \"partitionKeyPath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nKinesisParametersProperty kinesisParametersProperty = KinesisParametersProperty.builder()\n        .partitionKeyPath(\"partitionKeyPath\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nkinesisParametersProperty := &kinesisParametersProperty{\n\tpartitionKeyPath: jsii.String(\"partitionKeyPath\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst kinesisParametersProperty: events.CfnRule.KinesisParametersProperty = {\n  partitionKeyPath: 'partitionKeyPath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.KinesisParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.KinesisParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kinesisParametersProperty: events.CfnRule.KinesisParametersProperty = {\n  partitionKeyPath: 'partitionKeyPath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e19fc29be2432cae693858af092c81beaf97f03c8ef2f315ec078a5fb7d83ade"
    },
    "e8878852cfd075c4534f5eef9a5dc6bd8962240ae9f7210e088097c0a48eb51b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nnetwork_configuration_property = events.CfnRule.NetworkConfigurationProperty(\n    aws_vpc_configuration=events.CfnRule.AwsVpcConfigurationProperty(\n        subnets=[\"subnets\"],\n\n        # the properties below are optional\n        assign_public_ip=\"assignPublicIp\",\n        security_groups=[\"securityGroups\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nNetworkConfigurationProperty networkConfigurationProperty = new NetworkConfigurationProperty {\n    AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n        Subnets = new [] { \"subnets\" },\n\n        // the properties below are optional\n        AssignPublicIp = \"assignPublicIp\",\n        SecurityGroups = new [] { \"securityGroups\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nNetworkConfigurationProperty networkConfigurationProperty = NetworkConfigurationProperty.builder()\n        .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                .subnets(List.of(\"subnets\"))\n\n                // the properties below are optional\n                .assignPublicIp(\"assignPublicIp\")\n                .securityGroups(List.of(\"securityGroups\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nnetworkConfigurationProperty := &networkConfigurationProperty{\n\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\tsubnets: []*string{\n\t\t\tjsii.String(\"subnets\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\tsecurityGroups: []*string{\n\t\t\tjsii.String(\"securityGroups\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst networkConfigurationProperty: events.CfnRule.NetworkConfigurationProperty = {\n  awsVpcConfiguration: {\n    subnets: ['subnets'],\n\n    // the properties below are optional\n    assignPublicIp: 'assignPublicIp',\n    securityGroups: ['securityGroups'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.NetworkConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.NetworkConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkConfigurationProperty: events.CfnRule.NetworkConfigurationProperty = {\n  awsVpcConfiguration: {\n    subnets: ['subnets'],\n\n    // the properties below are optional\n    assignPublicIp: 'assignPublicIp',\n    securityGroups: ['securityGroups'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d127cf656b9c8d970ad3444191e9cc7069beec362a8b219e5805bf04dc97bf9c"
    },
    "dad3018920909856bfd72e3bcd81b25639987d3696d43a01f90b9b90707efa90": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nplacement_constraint_property = events.CfnRule.PlacementConstraintProperty(\n    expression=\"expression\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nPlacementConstraintProperty placementConstraintProperty = new PlacementConstraintProperty {\n    Expression = \"expression\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nPlacementConstraintProperty placementConstraintProperty = PlacementConstraintProperty.builder()\n        .expression(\"expression\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nplacementConstraintProperty := &placementConstraintProperty{\n\texpression: jsii.String(\"expression\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst placementConstraintProperty: events.CfnRule.PlacementConstraintProperty = {\n  expression: 'expression',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.PlacementConstraintProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.PlacementConstraintProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst placementConstraintProperty: events.CfnRule.PlacementConstraintProperty = {\n  expression: 'expression',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2c8c711f8a56208473ba247b5a8ac98853e5280320ad10bf7811edb7d4c1da5d"
    },
    "bc315f786413cd604f5e4a75566d2247ed89b55fd631b801db5657054173d610": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nplacement_strategy_property = events.CfnRule.PlacementStrategyProperty(\n    field=\"field\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nPlacementStrategyProperty placementStrategyProperty = new PlacementStrategyProperty {\n    Field = \"field\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nPlacementStrategyProperty placementStrategyProperty = PlacementStrategyProperty.builder()\n        .field(\"field\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nplacementStrategyProperty := &placementStrategyProperty{\n\tfield: jsii.String(\"field\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst placementStrategyProperty: events.CfnRule.PlacementStrategyProperty = {\n  field: 'field',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.PlacementStrategyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.PlacementStrategyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst placementStrategyProperty: events.CfnRule.PlacementStrategyProperty = {\n  field: 'field',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "84c8365f5cce97f0b97282e3633f83e8125937323708508750ac856494775735"
    },
    "ee33e3a8185606180b8533055f6b984ec3c60668f63f2d741c65872567766a58": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nredshift_data_parameters_property = events.CfnRule.RedshiftDataParametersProperty(\n    database=\"database\",\n    sql=\"sql\",\n\n    # the properties below are optional\n    db_user=\"dbUser\",\n    secret_manager_arn=\"secretManagerArn\",\n    statement_name=\"statementName\",\n    with_event=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nRedshiftDataParametersProperty redshiftDataParametersProperty = new RedshiftDataParametersProperty {\n    Database = \"database\",\n    Sql = \"sql\",\n\n    // the properties below are optional\n    DbUser = \"dbUser\",\n    SecretManagerArn = \"secretManagerArn\",\n    StatementName = \"statementName\",\n    WithEvent = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nRedshiftDataParametersProperty redshiftDataParametersProperty = RedshiftDataParametersProperty.builder()\n        .database(\"database\")\n        .sql(\"sql\")\n\n        // the properties below are optional\n        .dbUser(\"dbUser\")\n        .secretManagerArn(\"secretManagerArn\")\n        .statementName(\"statementName\")\n        .withEvent(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nredshiftDataParametersProperty := &redshiftDataParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\tsql: jsii.String(\"sql\"),\n\n\t// the properties below are optional\n\tdbUser: jsii.String(\"dbUser\"),\n\tsecretManagerArn: jsii.String(\"secretManagerArn\"),\n\tstatementName: jsii.String(\"statementName\"),\n\twithEvent: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst redshiftDataParametersProperty: events.CfnRule.RedshiftDataParametersProperty = {\n  database: 'database',\n  sql: 'sql',\n\n  // the properties below are optional\n  dbUser: 'dbUser',\n  secretManagerArn: 'secretManagerArn',\n  statementName: 'statementName',\n  withEvent: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.RedshiftDataParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.RedshiftDataParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst redshiftDataParametersProperty: events.CfnRule.RedshiftDataParametersProperty = {\n  database: 'database',\n  sql: 'sql',\n\n  // the properties below are optional\n  dbUser: 'dbUser',\n  secretManagerArn: 'secretManagerArn',\n  statementName: 'statementName',\n  withEvent: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "7ead48560ca0da19c4d8826108ac8b64b1ea2d334200e6fefe9e84649beb4220"
    },
    "68942c9ac332601802eb86aed113507729417887c72e8098929f6ed7453d02c9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nretry_policy_property = events.CfnRule.RetryPolicyProperty(\n    maximum_event_age_in_seconds=123,\n    maximum_retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nRetryPolicyProperty retryPolicyProperty = new RetryPolicyProperty {\n    MaximumEventAgeInSeconds = 123,\n    MaximumRetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nRetryPolicyProperty retryPolicyProperty = RetryPolicyProperty.builder()\n        .maximumEventAgeInSeconds(123)\n        .maximumRetryAttempts(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nretryPolicyProperty := &retryPolicyProperty{\n\tmaximumEventAgeInSeconds: jsii.Number(123),\n\tmaximumRetryAttempts: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst retryPolicyProperty: events.CfnRule.RetryPolicyProperty = {\n  maximumEventAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.RetryPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.RetryPolicyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst retryPolicyProperty: events.CfnRule.RetryPolicyProperty = {\n  maximumEventAgeInSeconds: 123,\n  maximumRetryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "781457f0d69fe30ad674ae37c7928004d137e605b8282e171efaf22a9150572e"
    },
    "efedeb2eaafa01829963a1a9a26eeb95cab95cb30589160be373bee78a6233ee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nrun_command_parameters_property = events.CfnRule.RunCommandParametersProperty(\n    run_command_targets=[events.CfnRule.RunCommandTargetProperty(\n        key=\"key\",\n        values=[\"values\"]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nRunCommandParametersProperty runCommandParametersProperty = new RunCommandParametersProperty {\n    RunCommandTargets = new [] { new RunCommandTargetProperty {\n        Key = \"key\",\n        Values = new [] { \"values\" }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nRunCommandParametersProperty runCommandParametersProperty = RunCommandParametersProperty.builder()\n        .runCommandTargets(List.of(RunCommandTargetProperty.builder()\n                .key(\"key\")\n                .values(List.of(\"values\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nrunCommandParametersProperty := &runCommandParametersProperty{\n\trunCommandTargets: []interface{}{\n\t\t&runCommandTargetProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalues: []*string{\n\t\t\t\tjsii.String(\"values\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst runCommandParametersProperty: events.CfnRule.RunCommandParametersProperty = {\n  runCommandTargets: [{\n    key: 'key',\n    values: ['values'],\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.RunCommandParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.RunCommandParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runCommandParametersProperty: events.CfnRule.RunCommandParametersProperty = {\n  runCommandTargets: [{\n    key: 'key',\n    values: ['values'],\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6cc04d2969a6d9ca05cc758ceb2aa39e35f6a87418fcd8c604c841f874e755d0"
    },
    "b8eb8c49d93018bac2027a82c51698007335c276b26a9f70288c967509312c34": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nrun_command_target_property = events.CfnRule.RunCommandTargetProperty(\n    key=\"key\",\n    values=[\"values\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nRunCommandTargetProperty runCommandTargetProperty = new RunCommandTargetProperty {\n    Key = \"key\",\n    Values = new [] { \"values\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nRunCommandTargetProperty runCommandTargetProperty = RunCommandTargetProperty.builder()\n        .key(\"key\")\n        .values(List.of(\"values\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nrunCommandTargetProperty := &runCommandTargetProperty{\n\tkey: jsii.String(\"key\"),\n\tvalues: []*string{\n\t\tjsii.String(\"values\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst runCommandTargetProperty: events.CfnRule.RunCommandTargetProperty = {\n  key: 'key',\n  values: ['values'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.RunCommandTargetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.RunCommandTargetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runCommandTargetProperty: events.CfnRule.RunCommandTargetProperty = {\n  key: 'key',\n  values: ['values'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1fc4e2c25eddc251fe9f0644bdbb5de0bc7337e9867396b408ccd7b30caa35b0"
    },
    "940ebba9b6125fe2f60d9f1dbc882908da92052b3131b803fc736f0d9ed7b499": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nsage_maker_pipeline_parameter_property = events.CfnRule.SageMakerPipelineParameterProperty(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nSageMakerPipelineParameterProperty sageMakerPipelineParameterProperty = new SageMakerPipelineParameterProperty {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nSageMakerPipelineParameterProperty sageMakerPipelineParameterProperty = SageMakerPipelineParameterProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nsageMakerPipelineParameterProperty := &sageMakerPipelineParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst sageMakerPipelineParameterProperty: events.CfnRule.SageMakerPipelineParameterProperty = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.SageMakerPipelineParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.SageMakerPipelineParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sageMakerPipelineParameterProperty: events.CfnRule.SageMakerPipelineParameterProperty = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d54675ccd6445383261953a499f76acfa64555c03959d00f9cdbcfc47a1f70d0"
    },
    "ca63fea9ee5c20fefa1d7b1fcea89fe10052f430bbeb1753f933f8e3c40423e2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nsage_maker_pipeline_parameters_property = events.CfnRule.SageMakerPipelineParametersProperty(\n    pipeline_parameter_list=[events.CfnRule.SageMakerPipelineParameterProperty(\n        name=\"name\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nSageMakerPipelineParametersProperty sageMakerPipelineParametersProperty = new SageMakerPipelineParametersProperty {\n    PipelineParameterList = new [] { new SageMakerPipelineParameterProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nSageMakerPipelineParametersProperty sageMakerPipelineParametersProperty = SageMakerPipelineParametersProperty.builder()\n        .pipelineParameterList(List.of(SageMakerPipelineParameterProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nsageMakerPipelineParametersProperty := &sageMakerPipelineParametersProperty{\n\tpipelineParameterList: []interface{}{\n\t\t&sageMakerPipelineParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst sageMakerPipelineParametersProperty: events.CfnRule.SageMakerPipelineParametersProperty = {\n  pipelineParameterList: [{\n    name: 'name',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.SageMakerPipelineParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.SageMakerPipelineParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sageMakerPipelineParametersProperty: events.CfnRule.SageMakerPipelineParametersProperty = {\n  pipelineParameterList: [{\n    name: 'name',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "10946d30d1fb7d983f2c8ef23de4c65fe371bb4ea0ef93d887cc25720cdc8869"
    },
    "335a2d5dcbe0a6c662b5fba35eb79c659229604702c88bc81063e275ff3f9457": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nsqs_parameters_property = events.CfnRule.SqsParametersProperty(\n    message_group_id=\"messageGroupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nSqsParametersProperty sqsParametersProperty = new SqsParametersProperty {\n    MessageGroupId = \"messageGroupId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nSqsParametersProperty sqsParametersProperty = SqsParametersProperty.builder()\n        .messageGroupId(\"messageGroupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nsqsParametersProperty := &sqsParametersProperty{\n\tmessageGroupId: jsii.String(\"messageGroupId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst sqsParametersProperty: events.CfnRule.SqsParametersProperty = {\n  messageGroupId: 'messageGroupId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.SqsParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.SqsParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sqsParametersProperty: events.CfnRule.SqsParametersProperty = {\n  messageGroupId: 'messageGroupId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7952bcba111ccc2d9da758060a9386b7270b0a4c77874360f28a423cb52351c6"
    },
    "da759f37fa42cfcd57db58c86966ef730eaa29447ceb69b83590493659ebb72f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ntag_property = events.CfnRule.TagProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nTagProperty tagProperty = new TagProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nTagProperty tagProperty = TagProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ntagProperty := &tagProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst tagProperty: events.CfnRule.TagProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.TagProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.TagProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagProperty: events.CfnRule.TagProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "87d2d5a8f236a7c2a75a71cd6568d319b052635a018263d16c26ca3cdee46d2d"
    },
    "6029741b8b2a7d76298957de97ae390f9ac8d1065f28bbd3a9647a4ee78d4fd1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\ntarget_property = events.CfnRule.TargetProperty(\n    arn=\"arn\",\n    id=\"id\",\n\n    # the properties below are optional\n    batch_parameters=events.CfnRule.BatchParametersProperty(\n        job_definition=\"jobDefinition\",\n        job_name=\"jobName\",\n\n        # the properties below are optional\n        array_properties=events.CfnRule.BatchArrayPropertiesProperty(\n            size=123\n        ),\n        retry_strategy=events.CfnRule.BatchRetryStrategyProperty(\n            attempts=123\n        )\n    ),\n    dead_letter_config=events.CfnRule.DeadLetterConfigProperty(\n        arn=\"arn\"\n    ),\n    ecs_parameters=events.CfnRule.EcsParametersProperty(\n        task_definition_arn=\"taskDefinitionArn\",\n\n        # the properties below are optional\n        capacity_provider_strategy=[events.CfnRule.CapacityProviderStrategyItemProperty(\n            capacity_provider=\"capacityProvider\",\n\n            # the properties below are optional\n            base=123,\n            weight=123\n        )],\n        enable_ecs_managed_tags=False,\n        enable_execute_command=False,\n        group=\"group\",\n        launch_type=\"launchType\",\n        network_configuration=events.CfnRule.NetworkConfigurationProperty(\n            aws_vpc_configuration=events.CfnRule.AwsVpcConfigurationProperty(\n                subnets=[\"subnets\"],\n\n                # the properties below are optional\n                assign_public_ip=\"assignPublicIp\",\n                security_groups=[\"securityGroups\"]\n            )\n        ),\n        placement_constraints=[events.CfnRule.PlacementConstraintProperty(\n            expression=\"expression\",\n            type=\"type\"\n        )],\n        placement_strategies=[events.CfnRule.PlacementStrategyProperty(\n            field=\"field\",\n            type=\"type\"\n        )],\n        platform_version=\"platformVersion\",\n        propagate_tags=\"propagateTags\",\n        reference_id=\"referenceId\",\n        tag_list=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )],\n        task_count=123\n    ),\n    http_parameters=events.CfnRule.HttpParametersProperty(\n        header_parameters={\n            \"header_parameters_key\": \"headerParameters\"\n        },\n        path_parameter_values=[\"pathParameterValues\"],\n        query_string_parameters={\n            \"query_string_parameters_key\": \"queryStringParameters\"\n        }\n    ),\n    input=\"input\",\n    input_path=\"inputPath\",\n    input_transformer=events.CfnRule.InputTransformerProperty(\n        input_template=\"inputTemplate\",\n\n        # the properties below are optional\n        input_paths_map={\n            \"input_paths_map_key\": \"inputPathsMap\"\n        }\n    ),\n    kinesis_parameters=events.CfnRule.KinesisParametersProperty(\n        partition_key_path=\"partitionKeyPath\"\n    ),\n    redshift_data_parameters=events.CfnRule.RedshiftDataParametersProperty(\n        database=\"database\",\n        sql=\"sql\",\n\n        # the properties below are optional\n        db_user=\"dbUser\",\n        secret_manager_arn=\"secretManagerArn\",\n        statement_name=\"statementName\",\n        with_event=False\n    ),\n    retry_policy=events.CfnRule.RetryPolicyProperty(\n        maximum_event_age_in_seconds=123,\n        maximum_retry_attempts=123\n    ),\n    role_arn=\"roleArn\",\n    run_command_parameters=events.CfnRule.RunCommandParametersProperty(\n        run_command_targets=[events.CfnRule.RunCommandTargetProperty(\n            key=\"key\",\n            values=[\"values\"]\n        )]\n    ),\n    sage_maker_pipeline_parameters=events.CfnRule.SageMakerPipelineParametersProperty(\n        pipeline_parameter_list=[events.CfnRule.SageMakerPipelineParameterProperty(\n            name=\"name\",\n            value=\"value\"\n        )]\n    ),\n    sqs_parameters=events.CfnRule.SqsParametersProperty(\n        message_group_id=\"messageGroupId\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nTargetProperty targetProperty = new TargetProperty {\n    Arn = \"arn\",\n    Id = \"id\",\n\n    // the properties below are optional\n    BatchParameters = new BatchParametersProperty {\n        JobDefinition = \"jobDefinition\",\n        JobName = \"jobName\",\n\n        // the properties below are optional\n        ArrayProperties = new BatchArrayPropertiesProperty {\n            Size = 123\n        },\n        RetryStrategy = new BatchRetryStrategyProperty {\n            Attempts = 123\n        }\n    },\n    DeadLetterConfig = new DeadLetterConfigProperty {\n        Arn = \"arn\"\n    },\n    EcsParameters = new EcsParametersProperty {\n        TaskDefinitionArn = \"taskDefinitionArn\",\n\n        // the properties below are optional\n        CapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n            CapacityProvider = \"capacityProvider\",\n\n            // the properties below are optional\n            Base = 123,\n            Weight = 123\n        } },\n        EnableEcsManagedTags = false,\n        EnableExecuteCommand = false,\n        Group = \"group\",\n        LaunchType = \"launchType\",\n        NetworkConfiguration = new NetworkConfigurationProperty {\n            AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n                Subnets = new [] { \"subnets\" },\n\n                // the properties below are optional\n                AssignPublicIp = \"assignPublicIp\",\n                SecurityGroups = new [] { \"securityGroups\" }\n            }\n        },\n        PlacementConstraints = new [] { new PlacementConstraintProperty {\n            Expression = \"expression\",\n            Type = \"type\"\n        } },\n        PlacementStrategies = new [] { new PlacementStrategyProperty {\n            Field = \"field\",\n            Type = \"type\"\n        } },\n        PlatformVersion = \"platformVersion\",\n        PropagateTags = \"propagateTags\",\n        ReferenceId = \"referenceId\",\n        TagList = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        TaskCount = 123\n    },\n    HttpParameters = new HttpParametersProperty {\n        HeaderParameters = new Dictionary<string, string> {\n            { \"headerParametersKey\", \"headerParameters\" }\n        },\n        PathParameterValues = new [] { \"pathParameterValues\" },\n        QueryStringParameters = new Dictionary<string, string> {\n            { \"queryStringParametersKey\", \"queryStringParameters\" }\n        }\n    },\n    Input = \"input\",\n    InputPath = \"inputPath\",\n    InputTransformer = new InputTransformerProperty {\n        InputTemplate = \"inputTemplate\",\n\n        // the properties below are optional\n        InputPathsMap = new Dictionary<string, string> {\n            { \"inputPathsMapKey\", \"inputPathsMap\" }\n        }\n    },\n    KinesisParameters = new KinesisParametersProperty {\n        PartitionKeyPath = \"partitionKeyPath\"\n    },\n    RedshiftDataParameters = new RedshiftDataParametersProperty {\n        Database = \"database\",\n        Sql = \"sql\",\n\n        // the properties below are optional\n        DbUser = \"dbUser\",\n        SecretManagerArn = \"secretManagerArn\",\n        StatementName = \"statementName\",\n        WithEvent = false\n    },\n    RetryPolicy = new RetryPolicyProperty {\n        MaximumEventAgeInSeconds = 123,\n        MaximumRetryAttempts = 123\n    },\n    RoleArn = \"roleArn\",\n    RunCommandParameters = new RunCommandParametersProperty {\n        RunCommandTargets = new [] { new RunCommandTargetProperty {\n            Key = \"key\",\n            Values = new [] { \"values\" }\n        } }\n    },\n    SageMakerPipelineParameters = new SageMakerPipelineParametersProperty {\n        PipelineParameterList = new [] { new SageMakerPipelineParameterProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } }\n    },\n    SqsParameters = new SqsParametersProperty {\n        MessageGroupId = \"messageGroupId\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nTargetProperty targetProperty = TargetProperty.builder()\n        .arn(\"arn\")\n        .id(\"id\")\n\n        // the properties below are optional\n        .batchParameters(BatchParametersProperty.builder()\n                .jobDefinition(\"jobDefinition\")\n                .jobName(\"jobName\")\n\n                // the properties below are optional\n                .arrayProperties(BatchArrayPropertiesProperty.builder()\n                        .size(123)\n                        .build())\n                .retryStrategy(BatchRetryStrategyProperty.builder()\n                        .attempts(123)\n                        .build())\n                .build())\n        .deadLetterConfig(DeadLetterConfigProperty.builder()\n                .arn(\"arn\")\n                .build())\n        .ecsParameters(EcsParametersProperty.builder()\n                .taskDefinitionArn(\"taskDefinitionArn\")\n\n                // the properties below are optional\n                .capacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                        .capacityProvider(\"capacityProvider\")\n\n                        // the properties below are optional\n                        .base(123)\n                        .weight(123)\n                        .build()))\n                .enableEcsManagedTags(false)\n                .enableExecuteCommand(false)\n                .group(\"group\")\n                .launchType(\"launchType\")\n                .networkConfiguration(NetworkConfigurationProperty.builder()\n                        .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                                .subnets(List.of(\"subnets\"))\n\n                                // the properties below are optional\n                                .assignPublicIp(\"assignPublicIp\")\n                                .securityGroups(List.of(\"securityGroups\"))\n                                .build())\n                        .build())\n                .placementConstraints(List.of(PlacementConstraintProperty.builder()\n                        .expression(\"expression\")\n                        .type(\"type\")\n                        .build()))\n                .placementStrategies(List.of(PlacementStrategyProperty.builder()\n                        .field(\"field\")\n                        .type(\"type\")\n                        .build()))\n                .platformVersion(\"platformVersion\")\n                .propagateTags(\"propagateTags\")\n                .referenceId(\"referenceId\")\n                .tagList(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .taskCount(123)\n                .build())\n        .httpParameters(HttpParametersProperty.builder()\n                .headerParameters(Map.of(\n                        \"headerParametersKey\", \"headerParameters\"))\n                .pathParameterValues(List.of(\"pathParameterValues\"))\n                .queryStringParameters(Map.of(\n                        \"queryStringParametersKey\", \"queryStringParameters\"))\n                .build())\n        .input(\"input\")\n        .inputPath(\"inputPath\")\n        .inputTransformer(InputTransformerProperty.builder()\n                .inputTemplate(\"inputTemplate\")\n\n                // the properties below are optional\n                .inputPathsMap(Map.of(\n                        \"inputPathsMapKey\", \"inputPathsMap\"))\n                .build())\n        .kinesisParameters(KinesisParametersProperty.builder()\n                .partitionKeyPath(\"partitionKeyPath\")\n                .build())\n        .redshiftDataParameters(RedshiftDataParametersProperty.builder()\n                .database(\"database\")\n                .sql(\"sql\")\n\n                // the properties below are optional\n                .dbUser(\"dbUser\")\n                .secretManagerArn(\"secretManagerArn\")\n                .statementName(\"statementName\")\n                .withEvent(false)\n                .build())\n        .retryPolicy(RetryPolicyProperty.builder()\n                .maximumEventAgeInSeconds(123)\n                .maximumRetryAttempts(123)\n                .build())\n        .roleArn(\"roleArn\")\n        .runCommandParameters(RunCommandParametersProperty.builder()\n                .runCommandTargets(List.of(RunCommandTargetProperty.builder()\n                        .key(\"key\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .build())\n        .sageMakerPipelineParameters(SageMakerPipelineParametersProperty.builder()\n                .pipelineParameterList(List.of(SageMakerPipelineParameterProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .build())\n        .sqsParameters(SqsParametersProperty.builder()\n                .messageGroupId(\"messageGroupId\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\ntargetProperty := &targetProperty{\n\tarn: jsii.String(\"arn\"),\n\tid: jsii.String(\"id\"),\n\n\t// the properties below are optional\n\tbatchParameters: &batchParametersProperty{\n\t\tjobDefinition: jsii.String(\"jobDefinition\"),\n\t\tjobName: jsii.String(\"jobName\"),\n\n\t\t// the properties below are optional\n\t\tarrayProperties: &batchArrayPropertiesProperty{\n\t\t\tsize: jsii.Number(123),\n\t\t},\n\t\tretryStrategy: &batchRetryStrategyProperty{\n\t\t\tattempts: jsii.Number(123),\n\t\t},\n\t},\n\tdeadLetterConfig: &deadLetterConfigProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t},\n\tecsParameters: &ecsParametersProperty{\n\t\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t\t// the properties below are optional\n\t\tcapacityProviderStrategy: []interface{}{\n\t\t\t&capacityProviderStrategyItemProperty{\n\t\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tbase: jsii.Number(123),\n\t\t\t\tweight: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tenableEcsManagedTags: jsii.Boolean(false),\n\t\tenableExecuteCommand: jsii.Boolean(false),\n\t\tgroup: jsii.String(\"group\"),\n\t\tlaunchType: jsii.String(\"launchType\"),\n\t\tnetworkConfiguration: &networkConfigurationProperty{\n\t\t\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\t\tsubnets: []*string{\n\t\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t\t},\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\t\tsecurityGroups: []*string{\n\t\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tplacementConstraints: []interface{}{\n\t\t\t&placementConstraintProperty{\n\t\t\t\texpression: jsii.String(\"expression\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t\tplacementStrategies: []interface{}{\n\t\t\t&placementStrategyProperty{\n\t\t\t\tfield: jsii.String(\"field\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t\tplatformVersion: jsii.String(\"platformVersion\"),\n\t\tpropagateTags: jsii.String(\"propagateTags\"),\n\t\treferenceId: jsii.String(\"referenceId\"),\n\t\ttagList: []interface{}{\n\t\t\t&cfnTag{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\ttaskCount: jsii.Number(123),\n\t},\n\thttpParameters: &httpParametersProperty{\n\t\theaderParameters: map[string]*string{\n\t\t\t\"headerParametersKey\": jsii.String(\"headerParameters\"),\n\t\t},\n\t\tpathParameterValues: []*string{\n\t\t\tjsii.String(\"pathParameterValues\"),\n\t\t},\n\t\tqueryStringParameters: map[string]*string{\n\t\t\t\"queryStringParametersKey\": jsii.String(\"queryStringParameters\"),\n\t\t},\n\t},\n\tinput: jsii.String(\"input\"),\n\tinputPath: jsii.String(\"inputPath\"),\n\tinputTransformer: &inputTransformerProperty{\n\t\tinputTemplate: jsii.String(\"inputTemplate\"),\n\n\t\t// the properties below are optional\n\t\tinputPathsMap: map[string]*string{\n\t\t\t\"inputPathsMapKey\": jsii.String(\"inputPathsMap\"),\n\t\t},\n\t},\n\tkinesisParameters: &kinesisParametersProperty{\n\t\tpartitionKeyPath: jsii.String(\"partitionKeyPath\"),\n\t},\n\tredshiftDataParameters: &redshiftDataParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\tsql: jsii.String(\"sql\"),\n\n\t\t// the properties below are optional\n\t\tdbUser: jsii.String(\"dbUser\"),\n\t\tsecretManagerArn: jsii.String(\"secretManagerArn\"),\n\t\tstatementName: jsii.String(\"statementName\"),\n\t\twithEvent: jsii.Boolean(false),\n\t},\n\tretryPolicy: &retryPolicyProperty{\n\t\tmaximumEventAgeInSeconds: jsii.Number(123),\n\t\tmaximumRetryAttempts: jsii.Number(123),\n\t},\n\troleArn: jsii.String(\"roleArn\"),\n\trunCommandParameters: &runCommandParametersProperty{\n\t\trunCommandTargets: []interface{}{\n\t\t\t&runCommandTargetProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tsageMakerPipelineParameters: &sageMakerPipelineParametersProperty{\n\t\tpipelineParameterList: []interface{}{\n\t\t\t&sageMakerPipelineParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t},\n\tsqsParameters: &sqsParametersProperty{\n\t\tmessageGroupId: jsii.String(\"messageGroupId\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst targetProperty: events.CfnRule.TargetProperty = {\n  arn: 'arn',\n  id: 'id',\n\n  // the properties below are optional\n  batchParameters: {\n    jobDefinition: 'jobDefinition',\n    jobName: 'jobName',\n\n    // the properties below are optional\n    arrayProperties: {\n      size: 123,\n    },\n    retryStrategy: {\n      attempts: 123,\n    },\n  },\n  deadLetterConfig: {\n    arn: 'arn',\n  },\n  ecsParameters: {\n    taskDefinitionArn: 'taskDefinitionArn',\n\n    // the properties below are optional\n    capacityProviderStrategy: [{\n      capacityProvider: 'capacityProvider',\n\n      // the properties below are optional\n      base: 123,\n      weight: 123,\n    }],\n    enableEcsManagedTags: false,\n    enableExecuteCommand: false,\n    group: 'group',\n    launchType: 'launchType',\n    networkConfiguration: {\n      awsVpcConfiguration: {\n        subnets: ['subnets'],\n\n        // the properties below are optional\n        assignPublicIp: 'assignPublicIp',\n        securityGroups: ['securityGroups'],\n      },\n    },\n    placementConstraints: [{\n      expression: 'expression',\n      type: 'type',\n    }],\n    placementStrategies: [{\n      field: 'field',\n      type: 'type',\n    }],\n    platformVersion: 'platformVersion',\n    propagateTags: 'propagateTags',\n    referenceId: 'referenceId',\n    tagList: [{\n      key: 'key',\n      value: 'value',\n    }],\n    taskCount: 123,\n  },\n  httpParameters: {\n    headerParameters: {\n      headerParametersKey: 'headerParameters',\n    },\n    pathParameterValues: ['pathParameterValues'],\n    queryStringParameters: {\n      queryStringParametersKey: 'queryStringParameters',\n    },\n  },\n  input: 'input',\n  inputPath: 'inputPath',\n  inputTransformer: {\n    inputTemplate: 'inputTemplate',\n\n    // the properties below are optional\n    inputPathsMap: {\n      inputPathsMapKey: 'inputPathsMap',\n    },\n  },\n  kinesisParameters: {\n    partitionKeyPath: 'partitionKeyPath',\n  },\n  redshiftDataParameters: {\n    database: 'database',\n    sql: 'sql',\n\n    // the properties below are optional\n    dbUser: 'dbUser',\n    secretManagerArn: 'secretManagerArn',\n    statementName: 'statementName',\n    withEvent: false,\n  },\n  retryPolicy: {\n    maximumEventAgeInSeconds: 123,\n    maximumRetryAttempts: 123,\n  },\n  roleArn: 'roleArn',\n  runCommandParameters: {\n    runCommandTargets: [{\n      key: 'key',\n      values: ['values'],\n    }],\n  },\n  sageMakerPipelineParameters: {\n    pipelineParameterList: [{\n      name: 'name',\n      value: 'value',\n    }],\n  },\n  sqsParameters: {\n    messageGroupId: 'messageGroupId',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRule.TargetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.TargetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst targetProperty: events.CfnRule.TargetProperty = {\n  arn: 'arn',\n  id: 'id',\n\n  // the properties below are optional\n  batchParameters: {\n    jobDefinition: 'jobDefinition',\n    jobName: 'jobName',\n\n    // the properties below are optional\n    arrayProperties: {\n      size: 123,\n    },\n    retryStrategy: {\n      attempts: 123,\n    },\n  },\n  deadLetterConfig: {\n    arn: 'arn',\n  },\n  ecsParameters: {\n    taskDefinitionArn: 'taskDefinitionArn',\n\n    // the properties below are optional\n    capacityProviderStrategy: [{\n      capacityProvider: 'capacityProvider',\n\n      // the properties below are optional\n      base: 123,\n      weight: 123,\n    }],\n    enableEcsManagedTags: false,\n    enableExecuteCommand: false,\n    group: 'group',\n    launchType: 'launchType',\n    networkConfiguration: {\n      awsVpcConfiguration: {\n        subnets: ['subnets'],\n\n        // the properties below are optional\n        assignPublicIp: 'assignPublicIp',\n        securityGroups: ['securityGroups'],\n      },\n    },\n    placementConstraints: [{\n      expression: 'expression',\n      type: 'type',\n    }],\n    placementStrategies: [{\n      field: 'field',\n      type: 'type',\n    }],\n    platformVersion: 'platformVersion',\n    propagateTags: 'propagateTags',\n    referenceId: 'referenceId',\n    tagList: [{\n      key: 'key',\n      value: 'value',\n    }],\n    taskCount: 123,\n  },\n  httpParameters: {\n    headerParameters: {\n      headerParametersKey: 'headerParameters',\n    },\n    pathParameterValues: ['pathParameterValues'],\n    queryStringParameters: {\n      queryStringParametersKey: 'queryStringParameters',\n    },\n  },\n  input: 'input',\n  inputPath: 'inputPath',\n  inputTransformer: {\n    inputTemplate: 'inputTemplate',\n\n    // the properties below are optional\n    inputPathsMap: {\n      inputPathsMapKey: 'inputPathsMap',\n    },\n  },\n  kinesisParameters: {\n    partitionKeyPath: 'partitionKeyPath',\n  },\n  redshiftDataParameters: {\n    database: 'database',\n    sql: 'sql',\n\n    // the properties below are optional\n    dbUser: 'dbUser',\n    secretManagerArn: 'secretManagerArn',\n    statementName: 'statementName',\n    withEvent: false,\n  },\n  retryPolicy: {\n    maximumEventAgeInSeconds: 123,\n    maximumRetryAttempts: 123,\n  },\n  roleArn: 'roleArn',\n  runCommandParameters: {\n    runCommandTargets: [{\n      key: 'key',\n      values: ['values'],\n    }],\n  },\n  sageMakerPipelineParameters: {\n    pipelineParameterList: [{\n      name: 'name',\n      value: 'value',\n    }],\n  },\n  sqsParameters: {\n    messageGroupId: 'messageGroupId',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 41,
        "75": 79,
        "91": 3,
        "153": 2,
        "169": 1,
        "192": 10,
        "193": 25,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 74,
        "290": 1
      },
      "fqnsFingerprint": "cfab75c9ff752b47d8ac201ef7fbc160911d96c7fbf6fceb7765b333788dc156"
    },
    "e551228d068937c0c51fb43012e81f1f15b95bb8533ce66bf98ae2ff14ee5d95": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\n# event_pattern: Any\n\ncfn_rule_props = events.CfnRuleProps(\n    description=\"description\",\n    event_bus_name=\"eventBusName\",\n    event_pattern=event_pattern,\n    name=\"name\",\n    role_arn=\"roleArn\",\n    schedule_expression=\"scheduleExpression\",\n    state=\"state\",\n    targets=[events.CfnRule.TargetProperty(\n        arn=\"arn\",\n        id=\"id\",\n\n        # the properties below are optional\n        batch_parameters=events.CfnRule.BatchParametersProperty(\n            job_definition=\"jobDefinition\",\n            job_name=\"jobName\",\n\n            # the properties below are optional\n            array_properties=events.CfnRule.BatchArrayPropertiesProperty(\n                size=123\n            ),\n            retry_strategy=events.CfnRule.BatchRetryStrategyProperty(\n                attempts=123\n            )\n        ),\n        dead_letter_config=events.CfnRule.DeadLetterConfigProperty(\n            arn=\"arn\"\n        ),\n        ecs_parameters=events.CfnRule.EcsParametersProperty(\n            task_definition_arn=\"taskDefinitionArn\",\n\n            # the properties below are optional\n            capacity_provider_strategy=[events.CfnRule.CapacityProviderStrategyItemProperty(\n                capacity_provider=\"capacityProvider\",\n\n                # the properties below are optional\n                base=123,\n                weight=123\n            )],\n            enable_ecs_managed_tags=False,\n            enable_execute_command=False,\n            group=\"group\",\n            launch_type=\"launchType\",\n            network_configuration=events.CfnRule.NetworkConfigurationProperty(\n                aws_vpc_configuration=events.CfnRule.AwsVpcConfigurationProperty(\n                    subnets=[\"subnets\"],\n\n                    # the properties below are optional\n                    assign_public_ip=\"assignPublicIp\",\n                    security_groups=[\"securityGroups\"]\n                )\n            ),\n            placement_constraints=[events.CfnRule.PlacementConstraintProperty(\n                expression=\"expression\",\n                type=\"type\"\n            )],\n            placement_strategies=[events.CfnRule.PlacementStrategyProperty(\n                field=\"field\",\n                type=\"type\"\n            )],\n            platform_version=\"platformVersion\",\n            propagate_tags=\"propagateTags\",\n            reference_id=\"referenceId\",\n            tag_list=[CfnTag(\n                key=\"key\",\n                value=\"value\"\n            )],\n            task_count=123\n        ),\n        http_parameters=events.CfnRule.HttpParametersProperty(\n            header_parameters={\n                \"header_parameters_key\": \"headerParameters\"\n            },\n            path_parameter_values=[\"pathParameterValues\"],\n            query_string_parameters={\n                \"query_string_parameters_key\": \"queryStringParameters\"\n            }\n        ),\n        input=\"input\",\n        input_path=\"inputPath\",\n        input_transformer=events.CfnRule.InputTransformerProperty(\n            input_template=\"inputTemplate\",\n\n            # the properties below are optional\n            input_paths_map={\n                \"input_paths_map_key\": \"inputPathsMap\"\n            }\n        ),\n        kinesis_parameters=events.CfnRule.KinesisParametersProperty(\n            partition_key_path=\"partitionKeyPath\"\n        ),\n        redshift_data_parameters=events.CfnRule.RedshiftDataParametersProperty(\n            database=\"database\",\n            sql=\"sql\",\n\n            # the properties below are optional\n            db_user=\"dbUser\",\n            secret_manager_arn=\"secretManagerArn\",\n            statement_name=\"statementName\",\n            with_event=False\n        ),\n        retry_policy=events.CfnRule.RetryPolicyProperty(\n            maximum_event_age_in_seconds=123,\n            maximum_retry_attempts=123\n        ),\n        role_arn=\"roleArn\",\n        run_command_parameters=events.CfnRule.RunCommandParametersProperty(\n            run_command_targets=[events.CfnRule.RunCommandTargetProperty(\n                key=\"key\",\n                values=[\"values\"]\n            )]\n        ),\n        sage_maker_pipeline_parameters=events.CfnRule.SageMakerPipelineParametersProperty(\n            pipeline_parameter_list=[events.CfnRule.SageMakerPipelineParameterProperty(\n                name=\"name\",\n                value=\"value\"\n            )]\n        ),\n        sqs_parameters=events.CfnRule.SqsParametersProperty(\n            message_group_id=\"messageGroupId\"\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nvar eventPattern;\n\nCfnRuleProps cfnRuleProps = new CfnRuleProps {\n    Description = \"description\",\n    EventBusName = \"eventBusName\",\n    EventPattern = eventPattern,\n    Name = \"name\",\n    RoleArn = \"roleArn\",\n    ScheduleExpression = \"scheduleExpression\",\n    State = \"state\",\n    Targets = new [] { new TargetProperty {\n        Arn = \"arn\",\n        Id = \"id\",\n\n        // the properties below are optional\n        BatchParameters = new BatchParametersProperty {\n            JobDefinition = \"jobDefinition\",\n            JobName = \"jobName\",\n\n            // the properties below are optional\n            ArrayProperties = new BatchArrayPropertiesProperty {\n                Size = 123\n            },\n            RetryStrategy = new BatchRetryStrategyProperty {\n                Attempts = 123\n            }\n        },\n        DeadLetterConfig = new DeadLetterConfigProperty {\n            Arn = \"arn\"\n        },\n        EcsParameters = new EcsParametersProperty {\n            TaskDefinitionArn = \"taskDefinitionArn\",\n\n            // the properties below are optional\n            CapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n                CapacityProvider = \"capacityProvider\",\n\n                // the properties below are optional\n                Base = 123,\n                Weight = 123\n            } },\n            EnableEcsManagedTags = false,\n            EnableExecuteCommand = false,\n            Group = \"group\",\n            LaunchType = \"launchType\",\n            NetworkConfiguration = new NetworkConfigurationProperty {\n                AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n                    Subnets = new [] { \"subnets\" },\n\n                    // the properties below are optional\n                    AssignPublicIp = \"assignPublicIp\",\n                    SecurityGroups = new [] { \"securityGroups\" }\n                }\n            },\n            PlacementConstraints = new [] { new PlacementConstraintProperty {\n                Expression = \"expression\",\n                Type = \"type\"\n            } },\n            PlacementStrategies = new [] { new PlacementStrategyProperty {\n                Field = \"field\",\n                Type = \"type\"\n            } },\n            PlatformVersion = \"platformVersion\",\n            PropagateTags = \"propagateTags\",\n            ReferenceId = \"referenceId\",\n            TagList = new [] { new CfnTag {\n                Key = \"key\",\n                Value = \"value\"\n            } },\n            TaskCount = 123\n        },\n        HttpParameters = new HttpParametersProperty {\n            HeaderParameters = new Dictionary<string, string> {\n                { \"headerParametersKey\", \"headerParameters\" }\n            },\n            PathParameterValues = new [] { \"pathParameterValues\" },\n            QueryStringParameters = new Dictionary<string, string> {\n                { \"queryStringParametersKey\", \"queryStringParameters\" }\n            }\n        },\n        Input = \"input\",\n        InputPath = \"inputPath\",\n        InputTransformer = new InputTransformerProperty {\n            InputTemplate = \"inputTemplate\",\n\n            // the properties below are optional\n            InputPathsMap = new Dictionary<string, string> {\n                { \"inputPathsMapKey\", \"inputPathsMap\" }\n            }\n        },\n        KinesisParameters = new KinesisParametersProperty {\n            PartitionKeyPath = \"partitionKeyPath\"\n        },\n        RedshiftDataParameters = new RedshiftDataParametersProperty {\n            Database = \"database\",\n            Sql = \"sql\",\n\n            // the properties below are optional\n            DbUser = \"dbUser\",\n            SecretManagerArn = \"secretManagerArn\",\n            StatementName = \"statementName\",\n            WithEvent = false\n        },\n        RetryPolicy = new RetryPolicyProperty {\n            MaximumEventAgeInSeconds = 123,\n            MaximumRetryAttempts = 123\n        },\n        RoleArn = \"roleArn\",\n        RunCommandParameters = new RunCommandParametersProperty {\n            RunCommandTargets = new [] { new RunCommandTargetProperty {\n                Key = \"key\",\n                Values = new [] { \"values\" }\n            } }\n        },\n        SageMakerPipelineParameters = new SageMakerPipelineParametersProperty {\n            PipelineParameterList = new [] { new SageMakerPipelineParameterProperty {\n                Name = \"name\",\n                Value = \"value\"\n            } }\n        },\n        SqsParameters = new SqsParametersProperty {\n            MessageGroupId = \"messageGroupId\"\n        }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nObject eventPattern;\n\nCfnRuleProps cfnRuleProps = CfnRuleProps.builder()\n        .description(\"description\")\n        .eventBusName(\"eventBusName\")\n        .eventPattern(eventPattern)\n        .name(\"name\")\n        .roleArn(\"roleArn\")\n        .scheduleExpression(\"scheduleExpression\")\n        .state(\"state\")\n        .targets(List.of(TargetProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n\n                // the properties below are optional\n                .batchParameters(BatchParametersProperty.builder()\n                        .jobDefinition(\"jobDefinition\")\n                        .jobName(\"jobName\")\n\n                        // the properties below are optional\n                        .arrayProperties(BatchArrayPropertiesProperty.builder()\n                                .size(123)\n                                .build())\n                        .retryStrategy(BatchRetryStrategyProperty.builder()\n                                .attempts(123)\n                                .build())\n                        .build())\n                .deadLetterConfig(DeadLetterConfigProperty.builder()\n                        .arn(\"arn\")\n                        .build())\n                .ecsParameters(EcsParametersProperty.builder()\n                        .taskDefinitionArn(\"taskDefinitionArn\")\n\n                        // the properties below are optional\n                        .capacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                                .capacityProvider(\"capacityProvider\")\n\n                                // the properties below are optional\n                                .base(123)\n                                .weight(123)\n                                .build()))\n                        .enableEcsManagedTags(false)\n                        .enableExecuteCommand(false)\n                        .group(\"group\")\n                        .launchType(\"launchType\")\n                        .networkConfiguration(NetworkConfigurationProperty.builder()\n                                .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                                        .subnets(List.of(\"subnets\"))\n\n                                        // the properties below are optional\n                                        .assignPublicIp(\"assignPublicIp\")\n                                        .securityGroups(List.of(\"securityGroups\"))\n                                        .build())\n                                .build())\n                        .placementConstraints(List.of(PlacementConstraintProperty.builder()\n                                .expression(\"expression\")\n                                .type(\"type\")\n                                .build()))\n                        .placementStrategies(List.of(PlacementStrategyProperty.builder()\n                                .field(\"field\")\n                                .type(\"type\")\n                                .build()))\n                        .platformVersion(\"platformVersion\")\n                        .propagateTags(\"propagateTags\")\n                        .referenceId(\"referenceId\")\n                        .tagList(List.of(CfnTag.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n                                .build()))\n                        .taskCount(123)\n                        .build())\n                .httpParameters(HttpParametersProperty.builder()\n                        .headerParameters(Map.of(\n                                \"headerParametersKey\", \"headerParameters\"))\n                        .pathParameterValues(List.of(\"pathParameterValues\"))\n                        .queryStringParameters(Map.of(\n                                \"queryStringParametersKey\", \"queryStringParameters\"))\n                        .build())\n                .input(\"input\")\n                .inputPath(\"inputPath\")\n                .inputTransformer(InputTransformerProperty.builder()\n                        .inputTemplate(\"inputTemplate\")\n\n                        // the properties below are optional\n                        .inputPathsMap(Map.of(\n                                \"inputPathsMapKey\", \"inputPathsMap\"))\n                        .build())\n                .kinesisParameters(KinesisParametersProperty.builder()\n                        .partitionKeyPath(\"partitionKeyPath\")\n                        .build())\n                .redshiftDataParameters(RedshiftDataParametersProperty.builder()\n                        .database(\"database\")\n                        .sql(\"sql\")\n\n                        // the properties below are optional\n                        .dbUser(\"dbUser\")\n                        .secretManagerArn(\"secretManagerArn\")\n                        .statementName(\"statementName\")\n                        .withEvent(false)\n                        .build())\n                .retryPolicy(RetryPolicyProperty.builder()\n                        .maximumEventAgeInSeconds(123)\n                        .maximumRetryAttempts(123)\n                        .build())\n                .roleArn(\"roleArn\")\n                .runCommandParameters(RunCommandParametersProperty.builder()\n                        .runCommandTargets(List.of(RunCommandTargetProperty.builder()\n                                .key(\"key\")\n                                .values(List.of(\"values\"))\n                                .build()))\n                        .build())\n                .sageMakerPipelineParameters(SageMakerPipelineParametersProperty.builder()\n                        .pipelineParameterList(List.of(SageMakerPipelineParameterProperty.builder()\n                                .name(\"name\")\n                                .value(\"value\")\n                                .build()))\n                        .build())\n                .sqsParameters(SqsParametersProperty.builder()\n                        .messageGroupId(\"messageGroupId\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nvar eventPattern interface{}\ncfnRuleProps := &cfnRuleProps{\n\tdescription: jsii.String(\"description\"),\n\teventBusName: jsii.String(\"eventBusName\"),\n\teventPattern: eventPattern,\n\tname: jsii.String(\"name\"),\n\troleArn: jsii.String(\"roleArn\"),\n\tscheduleExpression: jsii.String(\"scheduleExpression\"),\n\tstate: jsii.String(\"state\"),\n\ttargets: []interface{}{\n\t\t&targetProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tid: jsii.String(\"id\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbatchParameters: &batchParametersProperty{\n\t\t\t\tjobDefinition: jsii.String(\"jobDefinition\"),\n\t\t\t\tjobName: jsii.String(\"jobName\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tarrayProperties: &batchArrayPropertiesProperty{\n\t\t\t\t\tsize: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tretryStrategy: &batchRetryStrategyProperty{\n\t\t\t\t\tattempts: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t\tdeadLetterConfig: &deadLetterConfigProperty{\n\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t},\n\t\t\tecsParameters: &ecsParametersProperty{\n\t\t\t\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tcapacityProviderStrategy: []interface{}{\n\t\t\t\t\t&capacityProviderStrategyItemProperty{\n\t\t\t\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tbase: jsii.Number(123),\n\t\t\t\t\t\tweight: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tenableEcsManagedTags: jsii.Boolean(false),\n\t\t\t\tenableExecuteCommand: jsii.Boolean(false),\n\t\t\t\tgroup: jsii.String(\"group\"),\n\t\t\t\tlaunchType: jsii.String(\"launchType\"),\n\t\t\t\tnetworkConfiguration: &networkConfigurationProperty{\n\t\t\t\t\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\t\t\t\tsubnets: []*string{\n\t\t\t\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\t\t\t\tsecurityGroups: []*string{\n\t\t\t\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplacementConstraints: []interface{}{\n\t\t\t\t\t&placementConstraintProperty{\n\t\t\t\t\t\texpression: jsii.String(\"expression\"),\n\t\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplacementStrategies: []interface{}{\n\t\t\t\t\t&placementStrategyProperty{\n\t\t\t\t\t\tfield: jsii.String(\"field\"),\n\t\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplatformVersion: jsii.String(\"platformVersion\"),\n\t\t\t\tpropagateTags: jsii.String(\"propagateTags\"),\n\t\t\t\treferenceId: jsii.String(\"referenceId\"),\n\t\t\t\ttagList: []interface{}{\n\t\t\t\t\t&cfnTag{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttaskCount: jsii.Number(123),\n\t\t\t},\n\t\t\thttpParameters: &httpParametersProperty{\n\t\t\t\theaderParameters: map[string]*string{\n\t\t\t\t\t\"headerParametersKey\": jsii.String(\"headerParameters\"),\n\t\t\t\t},\n\t\t\t\tpathParameterValues: []*string{\n\t\t\t\t\tjsii.String(\"pathParameterValues\"),\n\t\t\t\t},\n\t\t\t\tqueryStringParameters: map[string]*string{\n\t\t\t\t\t\"queryStringParametersKey\": jsii.String(\"queryStringParameters\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tinput: jsii.String(\"input\"),\n\t\t\tinputPath: jsii.String(\"inputPath\"),\n\t\t\tinputTransformer: &inputTransformerProperty{\n\t\t\t\tinputTemplate: jsii.String(\"inputTemplate\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tinputPathsMap: map[string]*string{\n\t\t\t\t\t\"inputPathsMapKey\": jsii.String(\"inputPathsMap\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tkinesisParameters: &kinesisParametersProperty{\n\t\t\t\tpartitionKeyPath: jsii.String(\"partitionKeyPath\"),\n\t\t\t},\n\t\t\tredshiftDataParameters: &redshiftDataParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\tsql: jsii.String(\"sql\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tdbUser: jsii.String(\"dbUser\"),\n\t\t\t\tsecretManagerArn: jsii.String(\"secretManagerArn\"),\n\t\t\t\tstatementName: jsii.String(\"statementName\"),\n\t\t\t\twithEvent: jsii.Boolean(false),\n\t\t\t},\n\t\t\tretryPolicy: &retryPolicyProperty{\n\t\t\t\tmaximumEventAgeInSeconds: jsii.Number(123),\n\t\t\t\tmaximumRetryAttempts: jsii.Number(123),\n\t\t\t},\n\t\t\troleArn: jsii.String(\"roleArn\"),\n\t\t\trunCommandParameters: &runCommandParametersProperty{\n\t\t\t\trunCommandTargets: []interface{}{\n\t\t\t\t\t&runCommandTargetProperty{\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\tvalues: []*string{\n\t\t\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tsageMakerPipelineParameters: &sageMakerPipelineParametersProperty{\n\t\t\t\tpipelineParameterList: []interface{}{\n\t\t\t\t\t&sageMakerPipelineParameterProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tsqsParameters: &sqsParametersProperty{\n\t\t\t\tmessageGroupId: jsii.String(\"messageGroupId\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const eventPattern: any;\nconst cfnRuleProps: events.CfnRuleProps = {\n  description: 'description',\n  eventBusName: 'eventBusName',\n  eventPattern: eventPattern,\n  name: 'name',\n  roleArn: 'roleArn',\n  scheduleExpression: 'scheduleExpression',\n  state: 'state',\n  targets: [{\n    arn: 'arn',\n    id: 'id',\n\n    // the properties below are optional\n    batchParameters: {\n      jobDefinition: 'jobDefinition',\n      jobName: 'jobName',\n\n      // the properties below are optional\n      arrayProperties: {\n        size: 123,\n      },\n      retryStrategy: {\n        attempts: 123,\n      },\n    },\n    deadLetterConfig: {\n      arn: 'arn',\n    },\n    ecsParameters: {\n      taskDefinitionArn: 'taskDefinitionArn',\n\n      // the properties below are optional\n      capacityProviderStrategy: [{\n        capacityProvider: 'capacityProvider',\n\n        // the properties below are optional\n        base: 123,\n        weight: 123,\n      }],\n      enableEcsManagedTags: false,\n      enableExecuteCommand: false,\n      group: 'group',\n      launchType: 'launchType',\n      networkConfiguration: {\n        awsVpcConfiguration: {\n          subnets: ['subnets'],\n\n          // the properties below are optional\n          assignPublicIp: 'assignPublicIp',\n          securityGroups: ['securityGroups'],\n        },\n      },\n      placementConstraints: [{\n        expression: 'expression',\n        type: 'type',\n      }],\n      placementStrategies: [{\n        field: 'field',\n        type: 'type',\n      }],\n      platformVersion: 'platformVersion',\n      propagateTags: 'propagateTags',\n      referenceId: 'referenceId',\n      tagList: [{\n        key: 'key',\n        value: 'value',\n      }],\n      taskCount: 123,\n    },\n    httpParameters: {\n      headerParameters: {\n        headerParametersKey: 'headerParameters',\n      },\n      pathParameterValues: ['pathParameterValues'],\n      queryStringParameters: {\n        queryStringParametersKey: 'queryStringParameters',\n      },\n    },\n    input: 'input',\n    inputPath: 'inputPath',\n    inputTransformer: {\n      inputTemplate: 'inputTemplate',\n\n      // the properties below are optional\n      inputPathsMap: {\n        inputPathsMapKey: 'inputPathsMap',\n      },\n    },\n    kinesisParameters: {\n      partitionKeyPath: 'partitionKeyPath',\n    },\n    redshiftDataParameters: {\n      database: 'database',\n      sql: 'sql',\n\n      // the properties below are optional\n      dbUser: 'dbUser',\n      secretManagerArn: 'secretManagerArn',\n      statementName: 'statementName',\n      withEvent: false,\n    },\n    retryPolicy: {\n      maximumEventAgeInSeconds: 123,\n      maximumRetryAttempts: 123,\n    },\n    roleArn: 'roleArn',\n    runCommandParameters: {\n      runCommandTargets: [{\n        key: 'key',\n        values: ['values'],\n      }],\n    },\n    sageMakerPipelineParameters: {\n      pipelineParameterList: [{\n        name: 'name',\n        value: 'value',\n      }],\n    },\n    sqsParameters: {\n      messageGroupId: 'messageGroupId',\n    },\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CfnRuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRuleProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const eventPattern: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRuleProps: events.CfnRuleProps = {\n  description: 'description',\n  eventBusName: 'eventBusName',\n  eventPattern: eventPattern,\n  name: 'name',\n  roleArn: 'roleArn',\n  scheduleExpression: 'scheduleExpression',\n  state: 'state',\n  targets: [{\n    arn: 'arn',\n    id: 'id',\n\n    // the properties below are optional\n    batchParameters: {\n      jobDefinition: 'jobDefinition',\n      jobName: 'jobName',\n\n      // the properties below are optional\n      arrayProperties: {\n        size: 123,\n      },\n      retryStrategy: {\n        attempts: 123,\n      },\n    },\n    deadLetterConfig: {\n      arn: 'arn',\n    },\n    ecsParameters: {\n      taskDefinitionArn: 'taskDefinitionArn',\n\n      // the properties below are optional\n      capacityProviderStrategy: [{\n        capacityProvider: 'capacityProvider',\n\n        // the properties below are optional\n        base: 123,\n        weight: 123,\n      }],\n      enableEcsManagedTags: false,\n      enableExecuteCommand: false,\n      group: 'group',\n      launchType: 'launchType',\n      networkConfiguration: {\n        awsVpcConfiguration: {\n          subnets: ['subnets'],\n\n          // the properties below are optional\n          assignPublicIp: 'assignPublicIp',\n          securityGroups: ['securityGroups'],\n        },\n      },\n      placementConstraints: [{\n        expression: 'expression',\n        type: 'type',\n      }],\n      placementStrategies: [{\n        field: 'field',\n        type: 'type',\n      }],\n      platformVersion: 'platformVersion',\n      propagateTags: 'propagateTags',\n      referenceId: 'referenceId',\n      tagList: [{\n        key: 'key',\n        value: 'value',\n      }],\n      taskCount: 123,\n    },\n    httpParameters: {\n      headerParameters: {\n        headerParametersKey: 'headerParameters',\n      },\n      pathParameterValues: ['pathParameterValues'],\n      queryStringParameters: {\n        queryStringParametersKey: 'queryStringParameters',\n      },\n    },\n    input: 'input',\n    inputPath: 'inputPath',\n    inputTransformer: {\n      inputTemplate: 'inputTemplate',\n\n      // the properties below are optional\n      inputPathsMap: {\n        inputPathsMapKey: 'inputPathsMap',\n      },\n    },\n    kinesisParameters: {\n      partitionKeyPath: 'partitionKeyPath',\n    },\n    redshiftDataParameters: {\n      database: 'database',\n      sql: 'sql',\n\n      // the properties below are optional\n      dbUser: 'dbUser',\n      secretManagerArn: 'secretManagerArn',\n      statementName: 'statementName',\n      withEvent: false,\n    },\n    retryPolicy: {\n      maximumEventAgeInSeconds: 123,\n      maximumRetryAttempts: 123,\n    },\n    roleArn: 'roleArn',\n    runCommandParameters: {\n      runCommandTargets: [{\n        key: 'key',\n        values: ['values'],\n      }],\n    },\n    sageMakerPipelineParameters: {\n      pipelineParameterList: [{\n        name: 'name',\n        value: 'value',\n      }],\n    },\n    sqsParameters: {\n      messageGroupId: 'messageGroupId',\n    },\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 47,
        "75": 88,
        "91": 3,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 11,
        "193": 26,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 82,
        "290": 1
      },
      "fqnsFingerprint": "ac21993ce1db23ce8b9db225135d45295d8ceeeec786bde085ae221b8af592fe"
    },
    "9c86e6b9f579294c2d7fba43cd894ed31b9ec0b7f4c2ec848f672f6898ac0213": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), secretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.Connection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d2c56457bed24a5a332230dfd2303263bf2a0e23e167544d086fc2ba69a24328"
    },
    "2ceb2c1726756402d1d55aed1ee3ddd4ae9ccc7d9c95036795948a845841724a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nconnection_attributes = events.ConnectionAttributes(\n    connection_arn=\"connectionArn\",\n    connection_name=\"connectionName\",\n    connection_secret_arn=\"connectionSecretArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nConnectionAttributes connectionAttributes = new ConnectionAttributes {\n    ConnectionArn = \"connectionArn\",\n    ConnectionName = \"connectionName\",\n    ConnectionSecretArn = \"connectionSecretArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nConnectionAttributes connectionAttributes = ConnectionAttributes.builder()\n        .connectionArn(\"connectionArn\")\n        .connectionName(\"connectionName\")\n        .connectionSecretArn(\"connectionSecretArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nconnectionAttributes := &connectionAttributes{\n\tconnectionArn: jsii.String(\"connectionArn\"),\n\tconnectionName: jsii.String(\"connectionName\"),\n\tconnectionSecretArn: jsii.String(\"connectionSecretArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst connectionAttributes: events.ConnectionAttributes = {\n  connectionArn: 'connectionArn',\n  connectionName: 'connectionName',\n  connectionSecretArn: 'connectionSecretArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.ConnectionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.ConnectionAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connectionAttributes: events.ConnectionAttributes = {\n  connectionArn: 'connectionArn',\n  connectionName: 'connectionName',\n  connectionSecretArn: 'connectionSecretArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4905c8da8a974badcf6900589c5d1e77990b4c25d0b30786eeeba6244297eeeb"
    },
    "284328f9f3b745f00f97398ccba130c465880e76f4bff0a68556e8f19bd62ac8": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), secretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.ConnectionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d2c56457bed24a5a332230dfd2303263bf2a0e23e167544d086fc2ba69a24328"
    },
    "47d3dbb61e522cf657115dc4d4e2684819fc0f49974817a4090892e137d3d54f": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as targets\n\n# fn: lambda.Function\n\nrule = events.Rule(self, \"Schedule Rule\",\n    schedule=events.Schedule.cron(minute=\"0\", hour=\"4\")\n)\nrule.add_target(targets.LambdaFunction(fn))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\n\nFunction fn;\n\nRule rule = new Rule(this, \"Schedule Rule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" })\n});\nrule.AddTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nFunction fn;\n\nRule rule = Rule.Builder.create(this, \"Schedule Rule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .build();\nrule.addTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"import targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\n\nvar fn function\nrule := events.NewRule(this, jsii.String(\"Schedule Rule\"), &ruleProps{\n\tschedule: events.schedule.cron(&cronOptions{\n\t\tminute: jsii.String(\"0\"),\n\t\thour: jsii.String(\"4\"),\n\t}),\n})\nrule.addTarget(targets.NewLambdaFunction(fn))",
          "version": "1"
        },
        "$": {
          "source": "import * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CronOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bb9949ac2d494c400c63a448b398bb4aba680b25a2a9499f382001679ef7467c"
    },
    "01c3942e14f924ae6347ed1810bccb1f8ef643c5ec532dbf3ffba192cb3febca": {
      "translations": {
        "python": {
          "source": "bus = events.EventBus(self, \"bus\",\n    event_bus_name=\"MyCustomEventBus\"\n)\n\nbus.archive(\"MyArchive\",\n    archive_name=\"MyCustomEventBusArchive\",\n    description=\"MyCustomerEventBus Archive\",\n    event_pattern=events.EventPattern(\n        account=[Stack.of(self).account]\n    ),\n    retention=Duration.days(365)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EventBus bus = new EventBus(this, \"bus\", new EventBusProps {\n    EventBusName = \"MyCustomEventBus\"\n});\n\nbus.Archive(\"MyArchive\", new BaseArchiveProps {\n    ArchiveName = \"MyCustomEventBusArchive\",\n    Description = \"MyCustomerEventBus Archive\",\n    EventPattern = new EventPattern {\n        Account = new [] { Stack.Of(this).Account }\n    },\n    Retention = Duration.Days(365)\n});",
          "version": "1"
        },
        "java": {
          "source": "EventBus bus = EventBus.Builder.create(this, \"bus\")\n        .eventBusName(\"MyCustomEventBus\")\n        .build();\n\nbus.archive(\"MyArchive\", BaseArchiveProps.builder()\n        .archiveName(\"MyCustomEventBusArchive\")\n        .description(\"MyCustomerEventBus Archive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(Stack.of(this).getAccount()))\n                .build())\n        .retention(Duration.days(365))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "bus := events.NewEventBus(this, jsii.String(\"bus\"), &eventBusProps{\n\teventBusName: jsii.String(\"MyCustomEventBus\"),\n})\n\nbus.archive(jsii.String(\"MyArchive\"), &baseArchiveProps{\n\tarchiveName: jsii.String(\"MyCustomEventBusArchive\"),\n\tdescription: jsii.String(\"MyCustomerEventBus Archive\"),\n\teventPattern: &eventPattern{\n\t\taccount: []*string{\n\t\t\t*stack.of(this).account,\n\t\t},\n\t},\n\tretention: duration.days(jsii.Number(365)),\n})",
          "version": "1"
        },
        "$": {
          "source": "const bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.EventBus"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.BaseArchiveProps",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "8a370448c8850f9d3bf4b97e19e578ded327b3a3770acbff3aee6834ce814a3f"
    },
    "d1b7f4b59eb308ed3ce5345797efa65eb0e39fd220c50e9307439fbb4f0b906d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nevent_bus_attributes = events.EventBusAttributes(\n    event_bus_arn=\"eventBusArn\",\n    event_bus_name=\"eventBusName\",\n    event_bus_policy=\"eventBusPolicy\",\n\n    # the properties below are optional\n    event_source_name=\"eventSourceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nEventBusAttributes eventBusAttributes = new EventBusAttributes {\n    EventBusArn = \"eventBusArn\",\n    EventBusName = \"eventBusName\",\n    EventBusPolicy = \"eventBusPolicy\",\n\n    // the properties below are optional\n    EventSourceName = \"eventSourceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nEventBusAttributes eventBusAttributes = EventBusAttributes.builder()\n        .eventBusArn(\"eventBusArn\")\n        .eventBusName(\"eventBusName\")\n        .eventBusPolicy(\"eventBusPolicy\")\n\n        // the properties below are optional\n        .eventSourceName(\"eventSourceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\neventBusAttributes := &eventBusAttributes{\n\teventBusArn: jsii.String(\"eventBusArn\"),\n\teventBusName: jsii.String(\"eventBusName\"),\n\teventBusPolicy: jsii.String(\"eventBusPolicy\"),\n\n\t// the properties below are optional\n\teventSourceName: jsii.String(\"eventSourceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst eventBusAttributes: events.EventBusAttributes = {\n  eventBusArn: 'eventBusArn',\n  eventBusName: 'eventBusName',\n  eventBusPolicy: 'eventBusPolicy',\n\n  // the properties below are optional\n  eventSourceName: 'eventSourceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.EventBusAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.EventBusAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventBusAttributes: events.EventBusAttributes = {\n  eventBusArn: 'eventBusArn',\n  eventBusName: 'eventBusName',\n  eventBusPolicy: 'eventBusPolicy',\n\n  // the properties below are optional\n  eventSourceName: 'eventSourceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b98c40cf4ca6c2300305823f9b89d8eb7223a47c96178ea4943061490b159f04"
    },
    "804ed44f6e80f96fdc2f0c88bed86c1268ef5d06059432201ac44935040375d8": {
      "translations": {
        "python": {
          "source": "bus = events.EventBus(self, \"bus\",\n    event_bus_name=\"MyCustomEventBus\"\n)\n\nbus.archive(\"MyArchive\",\n    archive_name=\"MyCustomEventBusArchive\",\n    description=\"MyCustomerEventBus Archive\",\n    event_pattern=events.EventPattern(\n        account=[Stack.of(self).account]\n    ),\n    retention=Duration.days(365)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EventBus bus = new EventBus(this, \"bus\", new EventBusProps {\n    EventBusName = \"MyCustomEventBus\"\n});\n\nbus.Archive(\"MyArchive\", new BaseArchiveProps {\n    ArchiveName = \"MyCustomEventBusArchive\",\n    Description = \"MyCustomerEventBus Archive\",\n    EventPattern = new EventPattern {\n        Account = new [] { Stack.Of(this).Account }\n    },\n    Retention = Duration.Days(365)\n});",
          "version": "1"
        },
        "java": {
          "source": "EventBus bus = EventBus.Builder.create(this, \"bus\")\n        .eventBusName(\"MyCustomEventBus\")\n        .build();\n\nbus.archive(\"MyArchive\", BaseArchiveProps.builder()\n        .archiveName(\"MyCustomEventBusArchive\")\n        .description(\"MyCustomerEventBus Archive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(Stack.of(this).getAccount()))\n                .build())\n        .retention(Duration.days(365))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "bus := events.NewEventBus(this, jsii.String(\"bus\"), &eventBusProps{\n\teventBusName: jsii.String(\"MyCustomEventBus\"),\n})\n\nbus.archive(jsii.String(\"MyArchive\"), &baseArchiveProps{\n\tarchiveName: jsii.String(\"MyCustomEventBusArchive\"),\n\tdescription: jsii.String(\"MyCustomerEventBus Archive\"),\n\teventPattern: &eventPattern{\n\t\taccount: []*string{\n\t\t\t*stack.of(this).account,\n\t\t},\n\t},\n\tretention: duration.days(jsii.Number(365)),\n})",
          "version": "1"
        },
        "$": {
          "source": "const bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.EventBusProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.BaseArchiveProps",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "8a370448c8850f9d3bf4b97e19e578ded327b3a3770acbff3aee6834ce814a3f"
    },
    "d70b1feb5e6164126b34a995afe6975c1f20117679b58ee6652b99cb7a639b5c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_12_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = handler.toString()\")),\n})\n\nrule := events.NewRule(this, jsii.String(\"rule\"), &ruleProps{\n\teventPattern: &eventPattern{\n\t\tsource: []*string{\n\t\t\tjsii.String(\"aws.ec2\"),\n\t\t},\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule.addTarget(targets.NewLambdaFunction(fn, &lambdaFunctionProps{\n\tdeadLetterQueue: queue,\n\t // Optional: add a dead letter queue\n\tmaxEventAge: cdk.duration.hours(jsii.Number(2)),\n\t // Optional: set the maxEventAge retry policy\n\tretryAttempts: jsii.Number(2),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.EventPattern"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "610e51f39d782338a255d81dd2223de7c11ffa2050507fe086b8ef7d356709ea"
    },
    "793c9804b74ba2a740138b630d3fcb50fc9521ff50876fab4d047b6c5ed41b69": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.core as cdk\n\n# secret_value: cdk.SecretValue\n\nhttp_parameter = events.HttpParameter.from_secret(secret_value)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK;\n\nSecretValue secretValue;\nHttpParameter httpParameter = HttpParameter.FromSecret(secretValue);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.core.*;\n\nSecretValue secretValue;\n\nHttpParameter httpParameter = HttpParameter.fromSecret(secretValue);",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar secretValue secretValue\nhttpParameter := events.httpParameter.fromSecret(secretValue)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\nconst httpParameter = events.HttpParameter.fromSecret(secretValue);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.HttpParameter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.HttpParameter",
        "@aws-cdk/aws-events.HttpParameter#fromSecret",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpParameter = events.HttpParameter.fromSecret(secretValue);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "353e794b7cb7186f704aa287654e98e9cb0c0e947305f57b37df55a92d2b10a3"
    },
    "2b648730e8f03986d9e2714fc2611229211b9038b26ff00a1841b1df159fd50a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.core as cdk\n\n# http_parameter: events.HttpParameter\n# secret_value: cdk.SecretValue\n\no_auth_authorization_props = events.OAuthAuthorizationProps(\n    authorization_endpoint=\"authorizationEndpoint\",\n    client_id=\"clientId\",\n    client_secret=secret_value,\n    http_method=events.HttpMethod.POST,\n\n    # the properties below are optional\n    body_parameters={\n        \"body_parameters_key\": http_parameter\n    },\n    header_parameters={\n        \"header_parameters_key\": http_parameter\n    },\n    query_string_parameters={\n        \"query_string_parameters_key\": http_parameter\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK;\n\nHttpParameter httpParameter;\nSecretValue secretValue;\nOAuthAuthorizationProps oAuthAuthorizationProps = new OAuthAuthorizationProps {\n    AuthorizationEndpoint = \"authorizationEndpoint\",\n    ClientId = \"clientId\",\n    ClientSecret = secretValue,\n    HttpMethod = HttpMethod.POST,\n\n    // the properties below are optional\n    BodyParameters = new Dictionary<string, HttpParameter> {\n        { \"bodyParametersKey\", httpParameter }\n    },\n    HeaderParameters = new Dictionary<string, HttpParameter> {\n        { \"headerParametersKey\", httpParameter }\n    },\n    QueryStringParameters = new Dictionary<string, HttpParameter> {\n        { \"queryStringParametersKey\", httpParameter }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.core.*;\n\nHttpParameter httpParameter;\nSecretValue secretValue;\n\nOAuthAuthorizationProps oAuthAuthorizationProps = OAuthAuthorizationProps.builder()\n        .authorizationEndpoint(\"authorizationEndpoint\")\n        .clientId(\"clientId\")\n        .clientSecret(secretValue)\n        .httpMethod(HttpMethod.POST)\n\n        // the properties below are optional\n        .bodyParameters(Map.of(\n                \"bodyParametersKey\", httpParameter))\n        .headerParameters(Map.of(\n                \"headerParametersKey\", httpParameter))\n        .queryStringParameters(Map.of(\n                \"queryStringParametersKey\", httpParameter))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar httpParameter httpParameter\nvar secretValue secretValue\noAuthAuthorizationProps := &oAuthAuthorizationProps{\n\tauthorizationEndpoint: jsii.String(\"authorizationEndpoint\"),\n\tclientId: jsii.String(\"clientId\"),\n\tclientSecret: secretValue,\n\thttpMethod: events.httpMethod_POST,\n\n\t// the properties below are optional\n\tbodyParameters: map[string]*httpParameter{\n\t\t\"bodyParametersKey\": httpParameter,\n\t},\n\theaderParameters: map[string]*httpParameter{\n\t\t\"headerParametersKey\": httpParameter,\n\t},\n\tqueryStringParameters: map[string]*httpParameter{\n\t\t\"queryStringParametersKey\": httpParameter,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const httpParameter: events.HttpParameter;\ndeclare const secretValue: cdk.SecretValue;\nconst oAuthAuthorizationProps: events.OAuthAuthorizationProps = {\n  authorizationEndpoint: 'authorizationEndpoint',\n  clientId: 'clientId',\n  clientSecret: secretValue,\n  httpMethod: events.HttpMethod.POST,\n\n  // the properties below are optional\n  bodyParameters: {\n    bodyParametersKey: httpParameter,\n  },\n  headerParameters: {\n    headerParametersKey: httpParameter,\n  },\n  queryStringParameters: {\n    queryStringParametersKey: httpParameter,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.OAuthAuthorizationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.HttpMethod",
        "@aws-cdk/aws-events.HttpMethod#POST",
        "@aws-cdk/aws-events.HttpParameter",
        "@aws-cdk/aws-events.OAuthAuthorizationProps",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const httpParameter: events.HttpParameter;\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst oAuthAuthorizationProps: events.OAuthAuthorizationProps = {\n  authorizationEndpoint: 'authorizationEndpoint',\n  clientId: 'clientId',\n  clientSecret: secretValue,\n  httpMethod: events.HttpMethod.POST,\n\n  // the properties below are optional\n  bodyParameters: {\n    bodyParametersKey: httpParameter,\n  },\n  headerParameters: {\n    headerParametersKey: httpParameter,\n  },\n  queryStringParameters: {\n    queryStringParametersKey: httpParameter,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 28,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "2eb14365de37ff9c9968ae4c457bcc0be8f68ccc3763e911fa8acc862e80e400"
    },
    "7031ed8bb06b68d311404c92b048dd4a3b14c74195a54269a1117147e6767013": {
      "translations": {
        "python": {
          "source": "# Lambda function containing logic that evaluates compliance with the rule.\neval_compliance_fn = lambda_.Function(self, \"CustomFunction\",\n    code=lambda_.AssetCode.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\n# A custom rule that runs on configuration changes of EC2 instances\ncustom_rule = config.CustomRule(self, \"Custom\",\n    configuration_changes=True,\n    lambda_function=eval_compliance_fn,\n    rule_scope=config.RuleScope.from_resource(config.ResourceType.EC2_INSTANCE)\n)\n\n# A rule to detect stack drifts\ndrift_rule = config.CloudFormationStackDriftDetectionCheck(self, \"Drift\")\n\n# Topic to which compliance notification events will be published\ncompliance_topic = sns.Topic(self, \"ComplianceTopic\")\n\n# Send notification on compliance change events\ndrift_rule.on_compliance_change(\"ComplianceChange\",\n    target=targets.SnsTopic(compliance_topic)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Lambda function containing logic that evaluates compliance with the rule.\nFunction evalComplianceFn = new Function(this, \"CustomFunction\", new FunctionProps {\n    Code = AssetCode.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\n// A custom rule that runs on configuration changes of EC2 instances\nCustomRule customRule = new CustomRule(this, \"Custom\", new CustomRuleProps {\n    ConfigurationChanges = true,\n    LambdaFunction = evalComplianceFn,\n    RuleScope = RuleScope.FromResource(ResourceType.EC2_INSTANCE)\n});\n\n// A rule to detect stack drifts\nCloudFormationStackDriftDetectionCheck driftRule = new CloudFormationStackDriftDetectionCheck(this, \"Drift\");\n\n// Topic to which compliance notification events will be published\nTopic complianceTopic = new Topic(this, \"ComplianceTopic\");\n\n// Send notification on compliance change events\ndriftRule.OnComplianceChange(\"ComplianceChange\", new OnEventOptions {\n    Target = new SnsTopic(complianceTopic)\n});",
          "version": "1"
        },
        "java": {
          "source": "// Lambda function containing logic that evaluates compliance with the rule.\nFunction evalComplianceFn = Function.Builder.create(this, \"CustomFunction\")\n        .code(AssetCode.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\n// A custom rule that runs on configuration changes of EC2 instances\nCustomRule customRule = CustomRule.Builder.create(this, \"Custom\")\n        .configurationChanges(true)\n        .lambdaFunction(evalComplianceFn)\n        .ruleScope(RuleScope.fromResource(ResourceType.EC2_INSTANCE))\n        .build();\n\n// A rule to detect stack drifts\nCloudFormationStackDriftDetectionCheck driftRule = new CloudFormationStackDriftDetectionCheck(this, \"Drift\");\n\n// Topic to which compliance notification events will be published\nTopic complianceTopic = new Topic(this, \"ComplianceTopic\");\n\n// Send notification on compliance change events\ndriftRule.onComplianceChange(\"ComplianceChange\", OnEventOptions.builder()\n        .target(new SnsTopic(complianceTopic))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Lambda function containing logic that evaluates compliance with the rule.\nevalComplianceFn := lambda.NewFunction(this, jsii.String(\"CustomFunction\"), &functionProps{\n\tcode: lambda.assetCode.fromInline(jsii.String(\"exports.handler = (event) => console.log(event);\")),\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_12_X(),\n})\n\n// A custom rule that runs on configuration changes of EC2 instances\ncustomRule := config.NewCustomRule(this, jsii.String(\"Custom\"), &customRuleProps{\n\tconfigurationChanges: jsii.Boolean(true),\n\tlambdaFunction: evalComplianceFn,\n\truleScope: config.ruleScope.fromResource(config.resourceType_EC2_INSTANCE()),\n})\n\n// A rule to detect stack drifts\ndriftRule := config.NewCloudFormationStackDriftDetectionCheck(this, jsii.String(\"Drift\"))\n\n// Topic to which compliance notification events will be published\ncomplianceTopic := sns.NewTopic(this, jsii.String(\"ComplianceTopic\"))\n\n// Send notification on compliance change events\ndriftRule.onComplianceChange(jsii.String(\"ComplianceChange\"), &onEventOptions{\n\ttarget: targets.NewSnsTopic(complianceTopic),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Lambda function containing logic that evaluates compliance with the rule.\nconst evalComplianceFn = new lambda.Function(this, 'CustomFunction', {\n  code: lambda.AssetCode.fromInline('exports.handler = (event) => console.log(event);'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n\n// A custom rule that runs on configuration changes of EC2 instances\nconst customRule = new config.CustomRule(this, 'Custom', {\n  configurationChanges: true,\n  lambdaFunction: evalComplianceFn,\n  ruleScope: config.RuleScope.fromResource(config.ResourceType.EC2_INSTANCE),\n});\n\n// A rule to detect stack drifts\nconst driftRule = new config.CloudFormationStackDriftDetectionCheck(this, 'Drift');\n\n// Topic to which compliance notification events will be published\nconst complianceTopic = new sns.Topic(this, 'ComplianceTopic');\n\n// Send notification on compliance change events\ndriftRule.onComplianceChange('ComplianceChange', {\n  target: new targets.SnsTopic(complianceTopic),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.OnEventOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-config.CloudFormationStackDriftDetectionCheck",
        "@aws-cdk/aws-config.CustomRule",
        "@aws-cdk/aws-config.CustomRuleProps",
        "@aws-cdk/aws-config.ResourceType",
        "@aws-cdk/aws-config.ResourceType#EC2_INSTANCE",
        "@aws-cdk/aws-config.RuleScope",
        "@aws-cdk/aws-config.RuleScope#fromResource",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as config from '@aws-cdk/aws-config';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Lambda function containing logic that evaluates compliance with the rule.\nconst evalComplianceFn = new lambda.Function(this, 'CustomFunction', {\n  code: lambda.AssetCode.fromInline('exports.handler = (event) => console.log(event);'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n\n// A custom rule that runs on configuration changes of EC2 instances\nconst customRule = new config.CustomRule(this, 'Custom', {\n  configurationChanges: true,\n  lambdaFunction: evalComplianceFn,\n  ruleScope: config.RuleScope.fromResource(config.ResourceType.EC2_INSTANCE),\n});\n\n// A rule to detect stack drifts\nconst driftRule = new config.CloudFormationStackDriftDetectionCheck(this, 'Drift');\n\n// Topic to which compliance notification events will be published\nconst complianceTopic = new sns.Topic(this, 'ComplianceTopic');\n\n// Send notification on compliance change events\ndriftRule.onComplianceChange('ComplianceChange', {\n  target: new targets.SnsTopic(complianceTopic),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 37,
        "104": 4,
        "106": 1,
        "193": 3,
        "194": 14,
        "196": 3,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "28baf933c8e56f55c4809f9baac5686868bcbabf5cf01d1615eb4297e51e7ca3"
    },
    "34f066f4b900c44c7a1b2bafa3efa6ef014273136415e853e3b6ddc13e3cce1b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_12_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = handler.toString()\")),\n})\n\nrule := events.NewRule(this, jsii.String(\"rule\"), &ruleProps{\n\teventPattern: &eventPattern{\n\t\tsource: []*string{\n\t\t\tjsii.String(\"aws.ec2\"),\n\t\t},\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule.addTarget(targets.NewLambdaFunction(fn, &lambdaFunctionProps{\n\tdeadLetterQueue: queue,\n\t // Optional: add a dead letter queue\n\tmaxEventAge: cdk.duration.hours(jsii.Number(2)),\n\t // Optional: set the maxEventAge retry policy\n\tretryAttempts: jsii.Number(2),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.Rule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "610e51f39d782338a255d81dd2223de7c11ffa2050507fe086b8ef7d356709ea"
    },
    "dbded07a460f5dd5718c155a750926e48aab9012edfc4589660a59cca9f5c0a8": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), secretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.RuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d2c56457bed24a5a332230dfd2303263bf2a0e23e167544d086fc2ba69a24328"
    },
    "e5297a1ca5e26e389e2a23559a83b53b82dc8aff2fbd0003656fc60b37b6f89a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# construct: cdk.Construct\n# role: iam.Role\n# rule_target_input: events.RuleTargetInput\n\nrule_target_config = events.RuleTargetConfig(\n    arn=\"arn\",\n\n    # the properties below are optional\n    batch_parameters=events.CfnRule.BatchParametersProperty(\n        job_definition=\"jobDefinition\",\n        job_name=\"jobName\",\n\n        # the properties below are optional\n        array_properties=events.CfnRule.BatchArrayPropertiesProperty(\n            size=123\n        ),\n        retry_strategy=events.CfnRule.BatchRetryStrategyProperty(\n            attempts=123\n        )\n    ),\n    dead_letter_config=events.CfnRule.DeadLetterConfigProperty(\n        arn=\"arn\"\n    ),\n    ecs_parameters=events.CfnRule.EcsParametersProperty(\n        task_definition_arn=\"taskDefinitionArn\",\n\n        # the properties below are optional\n        capacity_provider_strategy=[events.CfnRule.CapacityProviderStrategyItemProperty(\n            capacity_provider=\"capacityProvider\",\n\n            # the properties below are optional\n            base=123,\n            weight=123\n        )],\n        enable_ecs_managed_tags=False,\n        enable_execute_command=False,\n        group=\"group\",\n        launch_type=\"launchType\",\n        network_configuration=events.CfnRule.NetworkConfigurationProperty(\n            aws_vpc_configuration=events.CfnRule.AwsVpcConfigurationProperty(\n                subnets=[\"subnets\"],\n\n                # the properties below are optional\n                assign_public_ip=\"assignPublicIp\",\n                security_groups=[\"securityGroups\"]\n            )\n        ),\n        placement_constraints=[events.CfnRule.PlacementConstraintProperty(\n            expression=\"expression\",\n            type=\"type\"\n        )],\n        placement_strategies=[events.CfnRule.PlacementStrategyProperty(\n            field=\"field\",\n            type=\"type\"\n        )],\n        platform_version=\"platformVersion\",\n        propagate_tags=\"propagateTags\",\n        reference_id=\"referenceId\",\n        tag_list=[cdk.CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )],\n        task_count=123\n    ),\n    http_parameters=events.CfnRule.HttpParametersProperty(\n        header_parameters={\n            \"header_parameters_key\": \"headerParameters\"\n        },\n        path_parameter_values=[\"pathParameterValues\"],\n        query_string_parameters={\n            \"query_string_parameters_key\": \"queryStringParameters\"\n        }\n    ),\n    id=\"id\",\n    input=rule_target_input,\n    kinesis_parameters=events.CfnRule.KinesisParametersProperty(\n        partition_key_path=\"partitionKeyPath\"\n    ),\n    retry_policy=events.CfnRule.RetryPolicyProperty(\n        maximum_event_age_in_seconds=123,\n        maximum_retry_attempts=123\n    ),\n    role=role,\n    run_command_parameters=events.CfnRule.RunCommandParametersProperty(\n        run_command_targets=[events.CfnRule.RunCommandTargetProperty(\n            key=\"key\",\n            values=[\"values\"]\n        )]\n    ),\n    sqs_parameters=events.CfnRule.SqsParametersProperty(\n        message_group_id=\"messageGroupId\"\n    ),\n    target_resource=construct\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nConstruct construct;\nRole role;\nRuleTargetInput ruleTargetInput;\nRuleTargetConfig ruleTargetConfig = new RuleTargetConfig {\n    Arn = \"arn\",\n\n    // the properties below are optional\n    BatchParameters = new BatchParametersProperty {\n        JobDefinition = \"jobDefinition\",\n        JobName = \"jobName\",\n\n        // the properties below are optional\n        ArrayProperties = new BatchArrayPropertiesProperty {\n            Size = 123\n        },\n        RetryStrategy = new BatchRetryStrategyProperty {\n            Attempts = 123\n        }\n    },\n    DeadLetterConfig = new DeadLetterConfigProperty {\n        Arn = \"arn\"\n    },\n    EcsParameters = new EcsParametersProperty {\n        TaskDefinitionArn = \"taskDefinitionArn\",\n\n        // the properties below are optional\n        CapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n            CapacityProvider = \"capacityProvider\",\n\n            // the properties below are optional\n            Base = 123,\n            Weight = 123\n        } },\n        EnableEcsManagedTags = false,\n        EnableExecuteCommand = false,\n        Group = \"group\",\n        LaunchType = \"launchType\",\n        NetworkConfiguration = new NetworkConfigurationProperty {\n            AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n                Subnets = new [] { \"subnets\" },\n\n                // the properties below are optional\n                AssignPublicIp = \"assignPublicIp\",\n                SecurityGroups = new [] { \"securityGroups\" }\n            }\n        },\n        PlacementConstraints = new [] { new PlacementConstraintProperty {\n            Expression = \"expression\",\n            Type = \"type\"\n        } },\n        PlacementStrategies = new [] { new PlacementStrategyProperty {\n            Field = \"field\",\n            Type = \"type\"\n        } },\n        PlatformVersion = \"platformVersion\",\n        PropagateTags = \"propagateTags\",\n        ReferenceId = \"referenceId\",\n        TagList = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        TaskCount = 123\n    },\n    HttpParameters = new HttpParametersProperty {\n        HeaderParameters = new Dictionary<string, string> {\n            { \"headerParametersKey\", \"headerParameters\" }\n        },\n        PathParameterValues = new [] { \"pathParameterValues\" },\n        QueryStringParameters = new Dictionary<string, string> {\n            { \"queryStringParametersKey\", \"queryStringParameters\" }\n        }\n    },\n    Id = \"id\",\n    Input = ruleTargetInput,\n    KinesisParameters = new KinesisParametersProperty {\n        PartitionKeyPath = \"partitionKeyPath\"\n    },\n    RetryPolicy = new RetryPolicyProperty {\n        MaximumEventAgeInSeconds = 123,\n        MaximumRetryAttempts = 123\n    },\n    Role = role,\n    RunCommandParameters = new RunCommandParametersProperty {\n        RunCommandTargets = new [] { new RunCommandTargetProperty {\n            Key = \"key\",\n            Values = new [] { \"values\" }\n        } }\n    },\n    SqsParameters = new SqsParametersProperty {\n        MessageGroupId = \"messageGroupId\"\n    },\n    TargetResource = construct\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nConstruct construct;\nRole role;\nRuleTargetInput ruleTargetInput;\n\nRuleTargetConfig ruleTargetConfig = RuleTargetConfig.builder()\n        .arn(\"arn\")\n\n        // the properties below are optional\n        .batchParameters(BatchParametersProperty.builder()\n                .jobDefinition(\"jobDefinition\")\n                .jobName(\"jobName\")\n\n                // the properties below are optional\n                .arrayProperties(BatchArrayPropertiesProperty.builder()\n                        .size(123)\n                        .build())\n                .retryStrategy(BatchRetryStrategyProperty.builder()\n                        .attempts(123)\n                        .build())\n                .build())\n        .deadLetterConfig(DeadLetterConfigProperty.builder()\n                .arn(\"arn\")\n                .build())\n        .ecsParameters(EcsParametersProperty.builder()\n                .taskDefinitionArn(\"taskDefinitionArn\")\n\n                // the properties below are optional\n                .capacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                        .capacityProvider(\"capacityProvider\")\n\n                        // the properties below are optional\n                        .base(123)\n                        .weight(123)\n                        .build()))\n                .enableEcsManagedTags(false)\n                .enableExecuteCommand(false)\n                .group(\"group\")\n                .launchType(\"launchType\")\n                .networkConfiguration(NetworkConfigurationProperty.builder()\n                        .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                                .subnets(List.of(\"subnets\"))\n\n                                // the properties below are optional\n                                .assignPublicIp(\"assignPublicIp\")\n                                .securityGroups(List.of(\"securityGroups\"))\n                                .build())\n                        .build())\n                .placementConstraints(List.of(PlacementConstraintProperty.builder()\n                        .expression(\"expression\")\n                        .type(\"type\")\n                        .build()))\n                .placementStrategies(List.of(PlacementStrategyProperty.builder()\n                        .field(\"field\")\n                        .type(\"type\")\n                        .build()))\n                .platformVersion(\"platformVersion\")\n                .propagateTags(\"propagateTags\")\n                .referenceId(\"referenceId\")\n                .tagList(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .taskCount(123)\n                .build())\n        .httpParameters(HttpParametersProperty.builder()\n                .headerParameters(Map.of(\n                        \"headerParametersKey\", \"headerParameters\"))\n                .pathParameterValues(List.of(\"pathParameterValues\"))\n                .queryStringParameters(Map.of(\n                        \"queryStringParametersKey\", \"queryStringParameters\"))\n                .build())\n        .id(\"id\")\n        .input(ruleTargetInput)\n        .kinesisParameters(KinesisParametersProperty.builder()\n                .partitionKeyPath(\"partitionKeyPath\")\n                .build())\n        .retryPolicy(RetryPolicyProperty.builder()\n                .maximumEventAgeInSeconds(123)\n                .maximumRetryAttempts(123)\n                .build())\n        .role(role)\n        .runCommandParameters(RunCommandParametersProperty.builder()\n                .runCommandTargets(List.of(RunCommandTargetProperty.builder()\n                        .key(\"key\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .build())\n        .sqsParameters(SqsParametersProperty.builder()\n                .messageGroupId(\"messageGroupId\")\n                .build())\n        .targetResource(construct)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar construct construct\nvar role role\nvar ruleTargetInput ruleTargetInput\nruleTargetConfig := &ruleTargetConfig{\n\tarn: jsii.String(\"arn\"),\n\n\t// the properties below are optional\n\tbatchParameters: &batchParametersProperty{\n\t\tjobDefinition: jsii.String(\"jobDefinition\"),\n\t\tjobName: jsii.String(\"jobName\"),\n\n\t\t// the properties below are optional\n\t\tarrayProperties: &batchArrayPropertiesProperty{\n\t\t\tsize: jsii.Number(123),\n\t\t},\n\t\tretryStrategy: &batchRetryStrategyProperty{\n\t\t\tattempts: jsii.Number(123),\n\t\t},\n\t},\n\tdeadLetterConfig: &deadLetterConfigProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t},\n\tecsParameters: &ecsParametersProperty{\n\t\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t\t// the properties below are optional\n\t\tcapacityProviderStrategy: []interface{}{\n\t\t\t&capacityProviderStrategyItemProperty{\n\t\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tbase: jsii.Number(123),\n\t\t\t\tweight: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tenableEcsManagedTags: jsii.Boolean(false),\n\t\tenableExecuteCommand: jsii.Boolean(false),\n\t\tgroup: jsii.String(\"group\"),\n\t\tlaunchType: jsii.String(\"launchType\"),\n\t\tnetworkConfiguration: &networkConfigurationProperty{\n\t\t\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\t\tsubnets: []*string{\n\t\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t\t},\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\t\tsecurityGroups: []*string{\n\t\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tplacementConstraints: []interface{}{\n\t\t\t&placementConstraintProperty{\n\t\t\t\texpression: jsii.String(\"expression\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t\tplacementStrategies: []interface{}{\n\t\t\t&placementStrategyProperty{\n\t\t\t\tfield: jsii.String(\"field\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t\tplatformVersion: jsii.String(\"platformVersion\"),\n\t\tpropagateTags: jsii.String(\"propagateTags\"),\n\t\treferenceId: jsii.String(\"referenceId\"),\n\t\ttagList: []interface{}{\n\t\t\t&cfnTag{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\ttaskCount: jsii.Number(123),\n\t},\n\thttpParameters: &httpParametersProperty{\n\t\theaderParameters: map[string]*string{\n\t\t\t\"headerParametersKey\": jsii.String(\"headerParameters\"),\n\t\t},\n\t\tpathParameterValues: []*string{\n\t\t\tjsii.String(\"pathParameterValues\"),\n\t\t},\n\t\tqueryStringParameters: map[string]*string{\n\t\t\t\"queryStringParametersKey\": jsii.String(\"queryStringParameters\"),\n\t\t},\n\t},\n\tid: jsii.String(\"id\"),\n\tinput: ruleTargetInput,\n\tkinesisParameters: &kinesisParametersProperty{\n\t\tpartitionKeyPath: jsii.String(\"partitionKeyPath\"),\n\t},\n\tretryPolicy: &retryPolicyProperty{\n\t\tmaximumEventAgeInSeconds: jsii.Number(123),\n\t\tmaximumRetryAttempts: jsii.Number(123),\n\t},\n\trole: role,\n\trunCommandParameters: &runCommandParametersProperty{\n\t\trunCommandTargets: []interface{}{\n\t\t\t&runCommandTargetProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tsqsParameters: &sqsParametersProperty{\n\t\tmessageGroupId: jsii.String(\"messageGroupId\"),\n\t},\n\ttargetResource: construct,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const construct: cdk.Construct;\ndeclare const role: iam.Role;\ndeclare const ruleTargetInput: events.RuleTargetInput;\nconst ruleTargetConfig: events.RuleTargetConfig = {\n  arn: 'arn',\n\n  // the properties below are optional\n  batchParameters: {\n    jobDefinition: 'jobDefinition',\n    jobName: 'jobName',\n\n    // the properties below are optional\n    arrayProperties: {\n      size: 123,\n    },\n    retryStrategy: {\n      attempts: 123,\n    },\n  },\n  deadLetterConfig: {\n    arn: 'arn',\n  },\n  ecsParameters: {\n    taskDefinitionArn: 'taskDefinitionArn',\n\n    // the properties below are optional\n    capacityProviderStrategy: [{\n      capacityProvider: 'capacityProvider',\n\n      // the properties below are optional\n      base: 123,\n      weight: 123,\n    }],\n    enableEcsManagedTags: false,\n    enableExecuteCommand: false,\n    group: 'group',\n    launchType: 'launchType',\n    networkConfiguration: {\n      awsVpcConfiguration: {\n        subnets: ['subnets'],\n\n        // the properties below are optional\n        assignPublicIp: 'assignPublicIp',\n        securityGroups: ['securityGroups'],\n      },\n    },\n    placementConstraints: [{\n      expression: 'expression',\n      type: 'type',\n    }],\n    placementStrategies: [{\n      field: 'field',\n      type: 'type',\n    }],\n    platformVersion: 'platformVersion',\n    propagateTags: 'propagateTags',\n    referenceId: 'referenceId',\n    tagList: [{\n      key: 'key',\n      value: 'value',\n    }],\n    taskCount: 123,\n  },\n  httpParameters: {\n    headerParameters: {\n      headerParametersKey: 'headerParameters',\n    },\n    pathParameterValues: ['pathParameterValues'],\n    queryStringParameters: {\n      queryStringParametersKey: 'queryStringParameters',\n    },\n  },\n  id: 'id',\n  input: ruleTargetInput,\n  kinesisParameters: {\n    partitionKeyPath: 'partitionKeyPath',\n  },\n  retryPolicy: {\n    maximumEventAgeInSeconds: 123,\n    maximumRetryAttempts: 123,\n  },\n  role: role,\n  runCommandParameters: {\n    runCommandTargets: [{\n      key: 'key',\n      values: ['values'],\n    }],\n  },\n  sqsParameters: {\n    messageGroupId: 'messageGroupId',\n  },\n  targetResource: construct,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.RuleTargetConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.CfnRule.BatchParametersProperty",
        "@aws-cdk/aws-events.CfnRule.DeadLetterConfigProperty",
        "@aws-cdk/aws-events.CfnRule.EcsParametersProperty",
        "@aws-cdk/aws-events.CfnRule.HttpParametersProperty",
        "@aws-cdk/aws-events.CfnRule.KinesisParametersProperty",
        "@aws-cdk/aws-events.CfnRule.RetryPolicyProperty",
        "@aws-cdk/aws-events.CfnRule.RunCommandParametersProperty",
        "@aws-cdk/aws-events.CfnRule.SqsParametersProperty",
        "@aws-cdk/aws-events.RuleTargetConfig",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const construct: cdk.Construct;\ndeclare const role: iam.Role;\ndeclare const ruleTargetInput: events.RuleTargetInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ruleTargetConfig: events.RuleTargetConfig = {\n  arn: 'arn',\n\n  // the properties below are optional\n  batchParameters: {\n    jobDefinition: 'jobDefinition',\n    jobName: 'jobName',\n\n    // the properties below are optional\n    arrayProperties: {\n      size: 123,\n    },\n    retryStrategy: {\n      attempts: 123,\n    },\n  },\n  deadLetterConfig: {\n    arn: 'arn',\n  },\n  ecsParameters: {\n    taskDefinitionArn: 'taskDefinitionArn',\n\n    // the properties below are optional\n    capacityProviderStrategy: [{\n      capacityProvider: 'capacityProvider',\n\n      // the properties below are optional\n      base: 123,\n      weight: 123,\n    }],\n    enableEcsManagedTags: false,\n    enableExecuteCommand: false,\n    group: 'group',\n    launchType: 'launchType',\n    networkConfiguration: {\n      awsVpcConfiguration: {\n        subnets: ['subnets'],\n\n        // the properties below are optional\n        assignPublicIp: 'assignPublicIp',\n        securityGroups: ['securityGroups'],\n      },\n    },\n    placementConstraints: [{\n      expression: 'expression',\n      type: 'type',\n    }],\n    placementStrategies: [{\n      field: 'field',\n      type: 'type',\n    }],\n    platformVersion: 'platformVersion',\n    propagateTags: 'propagateTags',\n    referenceId: 'referenceId',\n    tagList: [{\n      key: 'key',\n      value: 'value',\n    }],\n    taskCount: 123,\n  },\n  httpParameters: {\n    headerParameters: {\n      headerParametersKey: 'headerParameters',\n    },\n    pathParameterValues: ['pathParameterValues'],\n    queryStringParameters: {\n      queryStringParametersKey: 'queryStringParameters',\n    },\n  },\n  id: 'id',\n  input: ruleTargetInput,\n  kinesisParameters: {\n    partitionKeyPath: 'partitionKeyPath',\n  },\n  retryPolicy: {\n    maximumEventAgeInSeconds: 123,\n    maximumRetryAttempts: 123,\n  },\n  role: role,\n  runCommandParameters: {\n    runCommandTargets: [{\n      key: 'key',\n      values: ['values'],\n    }],\n  },\n  sqsParameters: {\n    messageGroupId: 'messageGroupId',\n  },\n  targetResource: construct,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 31,
        "75": 77,
        "91": 2,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 9,
        "193": 20,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 59,
        "290": 1
      },
      "fqnsFingerprint": "9db2211f548a0868096ea5d098934388ae6fa52034e068c9424af8531016b02b"
    },
    "11d5e511ef5f7e859fe55d7aecaf5dd6a7ef436232ad0ed92451a194351876d7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"SM\",\n    definition=sfn.Wait(self, \"Hello\", time=sfn.WaitTime.duration(cdk.Duration.seconds(10)))\n)\n\nrule.add_target(targets.SfnStateMachine(state_machine,\n    input=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    dead_letter_queue=dlq,\n    role=role\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"events.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"SM\", new StateMachineProps {\n    Definition = new Wait(this, \"Hello\", new WaitProps { Time = WaitTime.Duration(Duration.Seconds(10)) })\n});\n\nrule.AddTarget(new SfnStateMachine(stateMachine, new SfnStateMachineProps {\n    Input = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    DeadLetterQueue = dlq,\n    Role = role\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"events.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"SM\")\n        .definition(Wait.Builder.create(this, \"Hello\").time(WaitTime.duration(Duration.seconds(10))).build())\n        .build();\n\nrule.addTarget(SfnStateMachine.Builder.create(stateMachine)\n        .input(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .deadLetterQueue(dlq)\n        .role(role)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import sfn \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n})\n\ndlq := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\nrole := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"events.amazonaws.com\")),\n})\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"SM\"), &stateMachineProps{\n\tdefinition: sfn.NewWait(this, jsii.String(\"Hello\"), &waitProps{\n\t\ttime: sfn.waitTime.duration(cdk.*duration.seconds(jsii.Number(10))),\n\t}),\n})\n\nrule.addTarget(targets.NewSfnStateMachine(stateMachine, &sfnStateMachineProps{\n\tinput: events.ruleTargetInput.fromObject(map[string]*string{\n\t\t\"SomeParam\": jsii.String(\"SomeValue\"),\n\t}),\n\tdeadLetterQueue: dlq,\n\trole: role,\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) })\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n  role: role\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.RuleTargetInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SfnStateMachine",
        "@aws-cdk/aws-events-targets.SfnStateMachineProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#duration",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) })\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n  role: role\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 48,
        "104": 5,
        "193": 6,
        "194": 18,
        "196": 6,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "036871d5d33ea7eb403b491d2ba13cb45550f42ab0148bc41d52ca1c997fd684"
    },
    "c6dcded4a7a92f4a94051a3744aba4f517a7eceb7e60d081cebdcae1e17e11f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\n\nrule_target_input_properties = events.RuleTargetInputProperties(\n    input=\"input\",\n    input_path=\"inputPath\",\n    input_paths_map={\n        \"input_paths_map_key\": \"inputPathsMap\"\n    },\n    input_template=\"inputTemplate\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\n\nRuleTargetInputProperties ruleTargetInputProperties = new RuleTargetInputProperties {\n    Input = \"input\",\n    InputPath = \"inputPath\",\n    InputPathsMap = new Dictionary<string, string> {\n        { \"inputPathsMapKey\", \"inputPathsMap\" }\n    },\n    InputTemplate = \"inputTemplate\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\n\nRuleTargetInputProperties ruleTargetInputProperties = RuleTargetInputProperties.builder()\n        .input(\"input\")\n        .inputPath(\"inputPath\")\n        .inputPathsMap(Map.of(\n                \"inputPathsMapKey\", \"inputPathsMap\"))\n        .inputTemplate(\"inputTemplate\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\nruleTargetInputProperties := &ruleTargetInputProperties{\n\tinput: jsii.String(\"input\"),\n\tinputPath: jsii.String(\"inputPath\"),\n\tinputPathsMap: map[string]*string{\n\t\t\"inputPathsMapKey\": jsii.String(\"inputPathsMap\"),\n\t},\n\tinputTemplate: jsii.String(\"inputTemplate\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nconst ruleTargetInputProperties: events.RuleTargetInputProperties = {\n  input: 'input',\n  inputPath: 'inputPath',\n  inputPathsMap: {\n    inputPathsMapKey: 'inputPathsMap',\n  },\n  inputTemplate: 'inputTemplate',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.RuleTargetInputProperties"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.RuleTargetInputProperties"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ruleTargetInputProperties: events.RuleTargetInputProperties = {\n  input: 'input',\n  inputPath: 'inputPath',\n  inputPathsMap: {\n    inputPathsMapKey: 'inputPathsMap',\n  },\n  inputTemplate: 'inputTemplate',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "93becb82b26f8caee98df55f55886dde35020dcd54684544a7332e01e4b61f40"
    },
    "eee0d8ba118c50d9f8633cea1b62a6d03bcfcdf4fba248a9797a09c212aa7f28": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), secretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.Schedule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d2c56457bed24a5a332230dfd2303263bf2a0e23e167544d086fc2ba69a24328"
    }
  }
}
