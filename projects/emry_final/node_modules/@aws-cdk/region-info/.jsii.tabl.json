{
  "version": "2",
  "toolVersion": "1.57.0",
  "snippets": {
    "5734a31089241ec7ba6bf5346086285ab04d4a69540970c2191a8315f25c3053": {
      "translations": {
        "python": {
          "source": "# Get the information for \"eu-west-1\":\nregion = region_info.RegionInfo.get(\"eu-west-1\")\n\n# Access attributes:\nregion.s3_static_website_endpoint # s3-website-eu-west-1.amazonaws.com\nregion.service_principal(\"logs.amazonaws.com\")",
          "version": "2"
        },
        "csharp": {
          "source": "// Get the information for \"eu-west-1\":\nRegionInfo region = RegionInfo.Get(\"eu-west-1\");\n\n// Access attributes:\nregion.S3StaticWebsiteEndpoint; // s3-website-eu-west-1.amazonaws.com\nregion.ServicePrincipal(\"logs.amazonaws.com\");",
          "version": "1"
        },
        "java": {
          "source": "// Get the information for \"eu-west-1\":\nRegionInfo region = RegionInfo.get(\"eu-west-1\");\n\n// Access attributes:\nregion.getS3StaticWebsiteEndpoint(); // s3-website-eu-west-1.amazonaws.com\nregion.servicePrincipal(\"logs.amazonaws.com\");",
          "version": "1"
        },
        "go": {
          "source": "// Get the information for \"eu-west-1\":\nregion := regionInfo.regionInfo.get(jsii.String(\"eu-west-1\"))\n\n// Access attributes:\nregion.s3StaticWebsiteEndpoint // s3-website-eu-west-1.amazonaws.com\nregion.servicePrincipal(jsii.String(\"logs.amazonaws.com\"))",
          "version": "1"
        },
        "$": {
          "source": "// Get the information for \"eu-west-1\":\nconst region = regionInfo.RegionInfo.get('eu-west-1');\n\n// Access attributes:\nregion.s3StaticWebsiteEndpoint; // s3-website-eu-west-1.amazonaws.com\nregion.servicePrincipal('logs.amazonaws.com'); // logs.eu-west-1.amazonaws.com",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/region-info"
        },
        "field": {
          "field": "markdown",
          "line": 24
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/region-info.RegionInfo",
        "@aws-cdk/region-info.RegionInfo#get",
        "@aws-cdk/region-info.RegionInfo#servicePrincipal"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as regionInfo from '@aws-cdk/region-info';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Get the information for \"eu-west-1\":\nconst region = regionInfo.RegionInfo.get('eu-west-1');\n\n// Access attributes:\nregion.s3StaticWebsiteEndpoint; // s3-website-eu-west-1.amazonaws.com\nregion.servicePrincipal('logs.amazonaws.com');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "194": 4,
        "196": 2,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "97ec6b3ee5dcd55ca63753f03b0a23616036e346c91ff93309e28737431af21d"
    },
    "a282d7c98c5154d04d8082b122a1463a9ca4d1786c793a21e207e019348bcc23": {
      "translations": {
        "python": {
          "source": "code_deploy_principal = region_info.Fact.find(\"us-east-1\", region_info.FactName.service_principal(\"codedeploy.amazonaws.com\"))\n# => codedeploy.us-east-1.amazonaws.com\n\nstatic_website = region_info.Fact.find(\"ap-northeast-1\", region_info.FactName.S3_STATIC_WEBSITE_ENDPOINT)",
          "version": "2"
        },
        "csharp": {
          "source": "string? codeDeployPrincipal = Fact.Find(\"us-east-1\", FactName.ServicePrincipal(\"codedeploy.amazonaws.com\"));\n// => codedeploy.us-east-1.amazonaws.com\n\nstring? staticWebsite = Fact.Find(\"ap-northeast-1\", FactName.S3_STATIC_WEBSITE_ENDPOINT);",
          "version": "1"
        },
        "java": {
          "source": "String codeDeployPrincipal = Fact.find(\"us-east-1\", FactName.servicePrincipal(\"codedeploy.amazonaws.com\"));\n// => codedeploy.us-east-1.amazonaws.com\n\nString staticWebsite = Fact.find(\"ap-northeast-1\", FactName.S3_STATIC_WEBSITE_ENDPOINT);",
          "version": "1"
        },
        "go": {
          "source": "codeDeployPrincipal := regionInfo.fact.find(jsii.String(\"us-east-1\"), regionInfo.factName.servicePrincipal(jsii.String(\"codedeploy.amazonaws.com\")))\n// => codedeploy.us-east-1.amazonaws.com\n\nstaticWebsite := regionInfo.fact.find(jsii.String(\"ap-northeast-1\"), regionInfo.factName_S3_STATIC_WEBSITE_ENDPOINT())",
          "version": "1"
        },
        "$": {
          "source": "const codeDeployPrincipal = regionInfo.Fact.find('us-east-1', regionInfo.FactName.servicePrincipal('codedeploy.amazonaws.com'));\n// => codedeploy.us-east-1.amazonaws.com\n\nconst staticWebsite = regionInfo.Fact.find('ap-northeast-1', regionInfo.FactName.S3_STATIC_WEBSITE_ENDPOINT);\n// => s3-website-ap-northeast-1.amazonaws.com",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/region-info"
        },
        "field": {
          "field": "markdown",
          "line": 44
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/region-info.Fact",
        "@aws-cdk/region-info.Fact#find",
        "@aws-cdk/region-info.FactName",
        "@aws-cdk/region-info.FactName#S3_STATIC_WEBSITE_ENDPOINT",
        "@aws-cdk/region-info.FactName#servicePrincipal"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as regionInfo from '@aws-cdk/region-info';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst codeDeployPrincipal = regionInfo.Fact.find('us-east-1', regionInfo.FactName.servicePrincipal('codedeploy.amazonaws.com'));\n// => codedeploy.us-east-1.amazonaws.com\n\nconst staticWebsite = regionInfo.Fact.find('ap-northeast-1', regionInfo.FactName.S3_STATIC_WEBSITE_ENDPOINT);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "194": 8,
        "196": 3,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "5797746405d6bb24589edbf736a0149091e139d518240b022a77ab4ec5990586"
    },
    "2c9418054469c3215eea1288654bfc92ba2295f70a3549c963fce24d24a4cc29": {
      "translations": {
        "python": {
          "source": "class MyFact(region_info.IFact):\n\nregion_info.Fact.register(MyFact())",
          "version": "2"
        },
        "csharp": {
          "source": "class MyFact : IFact\n{\n    public readonly void Region = \"bermuda-triangle-1\";\n    public readonly void Name = FactName.ServicePrincipal(\"s3.amazonaws.com\");\n    public readonly void Value = \"s3-website.bermuda-triangle-1.nowhere.com\";\n}\n\nFact.Register(new MyFact());",
          "version": "1"
        },
        "java": {
          "source": "public class MyFact implements IFact {\n    public final Object region;\n    public final Object name;\n    public final Object value;\n}\n\nFact.register(new MyFact());",
          "version": "1"
        },
        "go": {
          "source": "type myFact struct {\n\tregion\n\tname\n\tvalue\n}\n\nregionInfo.fact.register(NewMyFact())",
          "version": "1"
        },
        "$": {
          "source": "class MyFact implements regionInfo.IFact {\n  public readonly region = 'bermuda-triangle-1';\n  public readonly name = regionInfo.FactName.servicePrincipal('s3.amazonaws.com');\n  public readonly value = 's3-website.bermuda-triangle-1.nowhere.com';\n}\n\nregionInfo.Fact.register(new MyFact());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/region-info"
        },
        "field": {
          "field": "markdown",
          "line": 58
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/region-info.Fact",
        "@aws-cdk/region-info.Fact#register",
        "@aws-cdk/region-info.FactName",
        "@aws-cdk/region-info.FactName#servicePrincipal",
        "@aws-cdk/region-info.IFact"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as regionInfo from '@aws-cdk/region-info';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyFact implements regionInfo.IFact {\n  public readonly region = 'bermuda-triangle-1';\n  public readonly name = regionInfo.FactName.servicePrincipal('s3.amazonaws.com');\n  public readonly value = 's3-website.bermuda-triangle-1.nowhere.com';\n}\n\nregionInfo.Fact.register(new MyFact());\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "119": 3,
        "138": 3,
        "159": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "216": 1,
        "226": 1,
        "245": 1,
        "279": 1
      },
      "fqnsFingerprint": "f7a4615e2ac6e78afbe7ca6a095da6e38f88c322ffc3b4e1bbf33546903cd228"
    },
    "b28a6dffa259fdcfc0f39522cce521f3e25b32d48ec152d55f9c1d22e6241d3e": {
      "translations": {
        "python": {
          "source": "class MyFact(region_info.IFact):\n\nregion_info.Fact.register(MyFact(), True)",
          "version": "2"
        },
        "csharp": {
          "source": "class MyFact : IFact\n{\n    public readonly void Region = \"us-east-1\";\n    public readonly void Name = FactName.ServicePrincipal(\"service.amazonaws.com\");\n    public readonly void Value = \"the-correct-principal.amazonaws.com\";\n}\n\nFact.Register(new MyFact(), true);",
          "version": "1"
        },
        "java": {
          "source": "public class MyFact implements IFact {\n    public final Object region;\n    public final Object name;\n    public final Object value;\n}\n\nFact.register(new MyFact(), true);",
          "version": "1"
        },
        "go": {
          "source": "type myFact struct {\n\tregion\n\tname\n\tvalue\n}\n\nregionInfo.fact.register(NewMyFact(), jsii.Boolean(true))",
          "version": "1"
        },
        "$": {
          "source": "class MyFact implements regionInfo.IFact {\n  public readonly region = 'us-east-1';\n  public readonly name = regionInfo.FactName.servicePrincipal('service.amazonaws.com');\n  public readonly value = 'the-correct-principal.amazonaws.com';\n}\n\nregionInfo.Fact.register(new MyFact(), true /* Allow overriding information */);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/region-info"
        },
        "field": {
          "field": "markdown",
          "line": 74
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/region-info.Fact",
        "@aws-cdk/region-info.Fact#register",
        "@aws-cdk/region-info.FactName",
        "@aws-cdk/region-info.FactName#servicePrincipal",
        "@aws-cdk/region-info.IFact"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as regionInfo from '@aws-cdk/region-info';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyFact implements regionInfo.IFact {\n  public readonly region = 'us-east-1';\n  public readonly name = regionInfo.FactName.servicePrincipal('service.amazonaws.com');\n  public readonly value = 'the-correct-principal.amazonaws.com';\n}\n\nregionInfo.Fact.register(new MyFact(), true /* Allow overriding information */);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "106": 1,
        "119": 3,
        "138": 3,
        "159": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "216": 1,
        "226": 1,
        "245": 1,
        "279": 1
      },
      "fqnsFingerprint": "f7a4615e2ac6e78afbe7ca6a095da6e38f88c322ffc3b4e1bbf33546903cd228"
    },
    "1e7225b55e6d93d1fe22965126f2a2863a40b15738193388de5926107f7c92f9": {
      "translations": {
        "python": {
          "source": "class MyFact(region_info.IFact):\n\nregion_info.Fact.register(MyFact())",
          "version": "2"
        },
        "csharp": {
          "source": "class MyFact : IFact\n{\n    public readonly void Region = \"bermuda-triangle-1\";\n    public readonly void Name = FactName.ServicePrincipal(\"s3.amazonaws.com\");\n    public readonly void Value = \"s3-website.bermuda-triangle-1.nowhere.com\";\n}\n\nFact.Register(new MyFact());",
          "version": "1"
        },
        "java": {
          "source": "public class MyFact implements IFact {\n    public final Object region;\n    public final Object name;\n    public final Object value;\n}\n\nFact.register(new MyFact());",
          "version": "1"
        },
        "go": {
          "source": "type myFact struct {\n\tregion\n\tname\n\tvalue\n}\n\nregionInfo.fact.register(NewMyFact())",
          "version": "1"
        },
        "$": {
          "source": "class MyFact implements regionInfo.IFact {\n  public readonly region = 'bermuda-triangle-1';\n  public readonly name = regionInfo.FactName.servicePrincipal('s3.amazonaws.com');\n  public readonly value = 's3-website.bermuda-triangle-1.nowhere.com';\n}\n\nregionInfo.Fact.register(new MyFact());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/region-info.Fact"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/region-info.Fact",
        "@aws-cdk/region-info.Fact#register",
        "@aws-cdk/region-info.FactName",
        "@aws-cdk/region-info.FactName#servicePrincipal",
        "@aws-cdk/region-info.IFact"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as regionInfo from '@aws-cdk/region-info';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyFact implements regionInfo.IFact {\n  public readonly region = 'bermuda-triangle-1';\n  public readonly name = regionInfo.FactName.servicePrincipal('s3.amazonaws.com');\n  public readonly value = 's3-website.bermuda-triangle-1.nowhere.com';\n}\n\nregionInfo.Fact.register(new MyFact());\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "119": 3,
        "138": 3,
        "159": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "216": 1,
        "226": 1,
        "245": 1,
        "279": 1
      },
      "fqnsFingerprint": "f7a4615e2ac6e78afbe7ca6a095da6e38f88c322ffc3b4e1bbf33546903cd228"
    },
    "7e41d76957d60b415d149e62e925ab70177482fd56fa1c1a0483efd35b91e28c": {
      "translations": {
        "python": {
          "source": "class MyFact(region_info.IFact):\n\nregion_info.Fact.register(MyFact())",
          "version": "2"
        },
        "csharp": {
          "source": "class MyFact : IFact\n{\n    public readonly void Region = \"bermuda-triangle-1\";\n    public readonly void Name = FactName.ServicePrincipal(\"s3.amazonaws.com\");\n    public readonly void Value = \"s3-website.bermuda-triangle-1.nowhere.com\";\n}\n\nFact.Register(new MyFact());",
          "version": "1"
        },
        "java": {
          "source": "public class MyFact implements IFact {\n    public final Object region;\n    public final Object name;\n    public final Object value;\n}\n\nFact.register(new MyFact());",
          "version": "1"
        },
        "go": {
          "source": "type myFact struct {\n\tregion\n\tname\n\tvalue\n}\n\nregionInfo.fact.register(NewMyFact())",
          "version": "1"
        },
        "$": {
          "source": "class MyFact implements regionInfo.IFact {\n  public readonly region = 'bermuda-triangle-1';\n  public readonly name = regionInfo.FactName.servicePrincipal('s3.amazonaws.com');\n  public readonly value = 's3-website.bermuda-triangle-1.nowhere.com';\n}\n\nregionInfo.Fact.register(new MyFact());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/region-info.FactName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/region-info.Fact",
        "@aws-cdk/region-info.Fact#register",
        "@aws-cdk/region-info.FactName",
        "@aws-cdk/region-info.FactName#servicePrincipal",
        "@aws-cdk/region-info.IFact"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as regionInfo from '@aws-cdk/region-info';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyFact implements regionInfo.IFact {\n  public readonly region = 'bermuda-triangle-1';\n  public readonly name = regionInfo.FactName.servicePrincipal('s3.amazonaws.com');\n  public readonly value = 's3-website.bermuda-triangle-1.nowhere.com';\n}\n\nregionInfo.Fact.register(new MyFact());\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "119": 3,
        "138": 3,
        "159": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "216": 1,
        "226": 1,
        "245": 1,
        "279": 1
      },
      "fqnsFingerprint": "f7a4615e2ac6e78afbe7ca6a095da6e38f88c322ffc3b4e1bbf33546903cd228"
    },
    "246a1e22770a1de1a26823c85aa2a2f0c6751cc96dab238e41e5d91cd3c311b0": {
      "translations": {
        "python": {
          "source": "# Get the information for \"eu-west-1\":\nregion = region_info.RegionInfo.get(\"eu-west-1\")\n\n# Access attributes:\nregion.s3_static_website_endpoint # s3-website-eu-west-1.amazonaws.com\nregion.service_principal(\"logs.amazonaws.com\")",
          "version": "2"
        },
        "csharp": {
          "source": "// Get the information for \"eu-west-1\":\nRegionInfo region = RegionInfo.Get(\"eu-west-1\");\n\n// Access attributes:\nregion.S3StaticWebsiteEndpoint; // s3-website-eu-west-1.amazonaws.com\nregion.ServicePrincipal(\"logs.amazonaws.com\");",
          "version": "1"
        },
        "java": {
          "source": "// Get the information for \"eu-west-1\":\nRegionInfo region = RegionInfo.get(\"eu-west-1\");\n\n// Access attributes:\nregion.getS3StaticWebsiteEndpoint(); // s3-website-eu-west-1.amazonaws.com\nregion.servicePrincipal(\"logs.amazonaws.com\");",
          "version": "1"
        },
        "go": {
          "source": "// Get the information for \"eu-west-1\":\nregion := regionInfo.regionInfo.get(jsii.String(\"eu-west-1\"))\n\n// Access attributes:\nregion.s3StaticWebsiteEndpoint // s3-website-eu-west-1.amazonaws.com\nregion.servicePrincipal(jsii.String(\"logs.amazonaws.com\"))",
          "version": "1"
        },
        "$": {
          "source": "// Get the information for \"eu-west-1\":\nconst region = regionInfo.RegionInfo.get('eu-west-1');\n\n// Access attributes:\nregion.s3StaticWebsiteEndpoint; // s3-website-eu-west-1.amazonaws.com\nregion.servicePrincipal('logs.amazonaws.com'); // logs.eu-west-1.amazonaws.com",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/region-info.RegionInfo"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/region-info.RegionInfo",
        "@aws-cdk/region-info.RegionInfo#get",
        "@aws-cdk/region-info.RegionInfo#servicePrincipal"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as regionInfo from '@aws-cdk/region-info';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Get the information for \"eu-west-1\":\nconst region = regionInfo.RegionInfo.get('eu-west-1');\n\n// Access attributes:\nregion.s3StaticWebsiteEndpoint; // s3-website-eu-west-1.amazonaws.com\nregion.servicePrincipal('logs.amazonaws.com');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "194": 4,
        "196": 2,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "97ec6b3ee5dcd55ca63753f03b0a23616036e346c91ff93309e28737431af21d"
    }
  }
}
