{
  "version": "2",
  "toolVersion": "1.57.0",
  "snippets": {
    "315735d1693d812dfd0333750428ccd9306d9e3c0bc5f43a44847d625a5fb101": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 18
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "f6559e6055f2a6ad38e9b138059bf914edc588ce7042134135cc0ae54d41a123": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"VPC\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\");",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"VPC\"))",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'VPC');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 28
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'VPC');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "f193e678fc7a5b69a581eb61acead7e04f710cd6e47ec8799890ef03500965db"
    },
    "2e3ae8d1968eabb0da7fb8ae64bb7af3bbc34f2a0cc6c8c9cf239d8b1fb14240": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.ISOLATED,\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    Subnets = new SubnetSelection {\n        SubnetType = SubnetType.ISOLATED,\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        .subnets(SubnetSelection.builder()\n                .subnetType(SubnetType.ISOLATED)\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nec2.NewInterfaceVpcEndpoint(this, jsii.String(\"VPC Endpoint\"), &interfaceVpcEndpointProps{\n\tvpc: vpc,\n\tservice: ec2.NewInterfaceVpcEndpointService(jsii.String(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\"), jsii.Number(443)),\n\tsubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"us-east-1a\"),\n\t\t\tjsii.String(\"us-east-1c\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  subnets: {\n    subnetType: ec2.SubnetType.ISOLATED,\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 127
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  subnets: {\n    subnetType: ec2.SubnetType.ISOLATED,\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "40b6304aab7660ec12ee78f1799d217a25fea50f977ede38f3d3b89055357f4a"
    },
    "588a14e5d7502891374f9804f5274fe0b80352b5ef5926b7b542c2c629e18ab8": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# subnet1: ec2.Subnet\n# subnet2: ec2.Subnet\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    subnets=ec2.SubnetSelection(\n        subnets=[subnet1, subnet2]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSubnet subnet1;\nSubnet subnet2;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    Subnets = new SubnetSelection {\n        Subnets = new [] { subnet1, subnet2 }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSubnet subnet1;\nSubnet subnet2;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        .subnets(SubnetSelection.builder()\n                .subnets(List.of(subnet1, subnet2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar subnet1 subnet\nvar subnet2 subnet\n\nec2.NewInterfaceVpcEndpoint(this, jsii.String(\"VPC Endpoint\"), &interfaceVpcEndpointProps{\n\tvpc: vpc,\n\tservice: ec2.NewInterfaceVpcEndpointService(jsii.String(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\"), jsii.Number(443)),\n\tsubnets: &subnetSelection{\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet1,\n\t\t\tsubnet2,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const subnet1: ec2.Subnet;\ndeclare const subnet2: ec2.Subnet;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  subnets: {\n    subnets: [subnet1, subnet2]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 142
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const subnet1: ec2.Subnet;\ndeclare const subnet2: ec2.Subnet;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  subnets: {\n    subnets: [subnet1, subnet2]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 19,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9100872ba4e916fe16d1281ceeba9234452cd6f44e213c524206066977c58c3e"
    },
    "7212379b5f48f5edb962458ad8e4680f15d069c65b40f290c5c5ec98dd8a931a": {
      "translations": {
        "python": {
          "source": "# Configure the `natGatewayProvider` when defining a Vpc\nnat_gateway_provider = ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.small\")\n)\n\nvpc = ec2.Vpc(self, \"MyVpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # The 'natGateways' parameter now controls the number of NAT instances\n    nat_gateways=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.small\")\n});\n\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    NatGatewayProvider = natGatewayProvider,\n\n    // The 'natGateways' parameter now controls the number of NAT instances\n    NatGateways = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .build());\n\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .natGatewayProvider(natGatewayProvider)\n\n        // The 'natGateways' parameter now controls the number of NAT instances\n        .natGateways(2)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nnatGatewayProvider := ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.small\")),\n})\n\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tnatGatewayProvider: natGatewayProvider,\n\n\t// The 'natGateways' parameter now controls the number of NAT instances\n\tnatGateways: jsii.Number(2),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 194
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.Environment",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:enable-lookups\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nclass NatInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });\n    /// !hide\n\n    Array.isArray(vpc);\n    Array.isArray(natGatewayProvider.configuredGateways);\n  }\n}\n\nconst app = new cdk.App();\nnew NatInstanceStack(app, 'aws-cdk-vpc-nat-instances', {\n  env: {\n    account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n  },\n});\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "47200eef6d144ecb2ed17059b40899591147fa0495bd9b08d6e7e580043c7f58"
    },
    "dc158d4dfaf7d25ca9ba0ba4cd9fe158874354e95a9073363e9d926badfb58d9": {
      "translations": {
        "python": {
          "source": "# instance_type: ec2.InstanceType\n\n\nprovider = ec2.NatProvider.instance(\n    instance_type=instance_type,\n    default_allowed_traffic=ec2.NatTrafficDirection.OUTBOUND_ONLY\n)\nec2.Vpc(self, \"TheVPC\",\n    nat_gateway_provider=provider\n)\nprovider.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/8\"), ec2.Port.tcp(80))",
          "version": "2"
        },
        "csharp": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = instanceType,\n    DefaultAllowedTraffic = NatTrafficDirection.OUTBOUND_ONLY\n});\nnew Vpc(this, \"TheVPC\", new VpcProps {\n    NatGatewayProvider = provider\n});\nprovider.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/8\"), Port.Tcp(80));",
          "version": "1"
        },
        "java": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(instanceType)\n        .defaultAllowedTraffic(NatTrafficDirection.OUTBOUND_ONLY)\n        .build());\nVpc.Builder.create(this, \"TheVPC\")\n        .natGatewayProvider(provider)\n        .build();\nprovider.connections.allowFrom(Peer.ipv4(\"1.2.3.4/8\"), Port.tcp(80));",
          "version": "1"
        },
        "go": {
          "source": "var instanceType instanceType\n\nprovider := ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: instanceType,\n\tdefaultAllowedTraffic: ec2.natTrafficDirection_OUTBOUND_ONLY,\n})\nec2.NewVpc(this, jsii.String(\"TheVPC\"), &vpcProps{\n\tnatGatewayProvider: provider,\n})\nprovider.connections.allowFrom(ec2.peer.ipv4(jsii.String(\"1.2.3.4/8\")), ec2.port.tcp(jsii.Number(80)))",
          "version": "1"
        },
        "$": {
          "source": "declare const instanceType: ec2.InstanceType;\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  defaultAllowedTraffic: ec2.NatTrafficDirection.OUTBOUND_ONLY,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 218
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.NatTrafficDirection",
        "@aws-cdk/aws-ec2.NatTrafficDirection#OUTBOUND_ONLY",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  defaultAllowedTraffic: ec2.NatTrafficDirection.OUTBOUND_ONLY,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "52cff934f9b32aac8cfc0232c4caedd0f25d08dba0c724e1ec42e6be7a1f7dd4"
    },
    "d134a2f1a7cb94dec56e7cdfb3f7604719a956858b152ad5278e555ecd52d38a": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"TheVPC\",\n    # 'cidr' configures the IP range and size of the entire VPC.\n    # The IP space will be divided over the configured subnets.\n    cidr=\"10.0.0.0/21\",\n\n    # 'maxAzs' configures the maximum number of availability zones to use\n    max_azs=3,\n\n    # 'subnetConfiguration' specifies the \"subnet groups\" to create.\n    # Every subnet group will have a subnet for each AZ, so this\n    # configuration will create `3 groups × 3 AZs = 9` subnets.\n    subnet_configuration=[ec2.SubnetConfiguration(\n        # 'subnetType' controls Internet access, as described above.\n        subnet_type=ec2.SubnetType.PUBLIC,\n\n        # 'name' is used to name this particular subnet group. You will have to\n        # use the name for subnet selection if you have more than one subnet\n        # group of the same type.\n        name=\"Ingress\",\n\n        # 'cidrMask' specifies the IP addresses in the range of of individual\n        # subnets in the group. Each of the subnets in this group will contain\n        # `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n        # usable IP addresses.\n        #\n        # If 'cidrMask' is left out the available address space is evenly\n        # divided across the remaining subnet groups.\n        cidr_mask=24\n    ), ec2.SubnetConfiguration(\n        cidr_mask=24,\n        name=\"Application\",\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ), ec2.SubnetConfiguration(\n        cidr_mask=28,\n        name=\"Database\",\n        subnet_type=ec2.SubnetType.PRIVATE_ISOLATED,\n\n        # 'reserved' can be used to reserve IP address space. No resources will\n        # be created for this subnet, but the IP range will be kept available for\n        # future creation of this subnet, or even for future subdivision.\n        reserved=True\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"TheVPC\", new VpcProps {\n    // 'cidr' configures the IP range and size of the entire VPC.\n    // The IP space will be divided over the configured subnets.\n    Cidr = \"10.0.0.0/21\",\n\n    // 'maxAzs' configures the maximum number of availability zones to use\n    MaxAzs = 3,\n\n    // 'subnetConfiguration' specifies the \"subnet groups\" to create.\n    // Every subnet group will have a subnet for each AZ, so this\n    // configuration will create `3 groups × 3 AZs = 9` subnets.\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        // 'subnetType' controls Internet access, as described above.\n        SubnetType = SubnetType.PUBLIC,\n\n        // 'name' is used to name this particular subnet group. You will have to\n        // use the name for subnet selection if you have more than one subnet\n        // group of the same type.\n        Name = \"Ingress\",\n\n        // 'cidrMask' specifies the IP addresses in the range of of individual\n        // subnets in the group. Each of the subnets in this group will contain\n        // `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n        // usable IP addresses.\n        //\n        // If 'cidrMask' is left out the available address space is evenly\n        // divided across the remaining subnet groups.\n        CidrMask = 24\n    }, new SubnetConfiguration {\n        CidrMask = 24,\n        Name = \"Application\",\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }, new SubnetConfiguration {\n        CidrMask = 28,\n        Name = \"Database\",\n        SubnetType = SubnetType.PRIVATE_ISOLATED,\n\n        // 'reserved' can be used to reserve IP address space. No resources will\n        // be created for this subnet, but the IP range will be kept available for\n        // future creation of this subnet, or even for future subdivision.\n        Reserved = true\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"TheVPC\")\n        // 'cidr' configures the IP range and size of the entire VPC.\n        // The IP space will be divided over the configured subnets.\n        .cidr(\"10.0.0.0/21\")\n\n        // 'maxAzs' configures the maximum number of availability zones to use\n        .maxAzs(3)\n\n        // 'subnetConfiguration' specifies the \"subnet groups\" to create.\n        // Every subnet group will have a subnet for each AZ, so this\n        // configuration will create `3 groups × 3 AZs = 9` subnets.\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                // 'subnetType' controls Internet access, as described above.\n                .subnetType(SubnetType.PUBLIC)\n\n                // 'name' is used to name this particular subnet group. You will have to\n                // use the name for subnet selection if you have more than one subnet\n                // group of the same type.\n                .name(\"Ingress\")\n\n                // 'cidrMask' specifies the IP addresses in the range of of individual\n                // subnets in the group. Each of the subnets in this group will contain\n                // `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n                // usable IP addresses.\n                //\n                // If 'cidrMask' is left out the available address space is evenly\n                // divided across the remaining subnet groups.\n                .cidrMask(24)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(24)\n                .name(\"Application\")\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(28)\n                .name(\"Database\")\n                .subnetType(SubnetType.PRIVATE_ISOLATED)\n\n                // 'reserved' can be used to reserve IP address space. No resources will\n                // be created for this subnet, but the IP range will be kept available for\n                // future creation of this subnet, or even for future subdivision.\n                .reserved(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"TheVPC\"), &vpcProps{\n\t// 'cidr' configures the IP range and size of the entire VPC.\n\t// The IP space will be divided over the configured subnets.\n\tcidr: jsii.String(\"10.0.0.0/21\"),\n\n\t// 'maxAzs' configures the maximum number of availability zones to use\n\tmaxAzs: jsii.Number(3),\n\n\t// 'subnetConfiguration' specifies the \"subnet groups\" to create.\n\t// Every subnet group will have a subnet for each AZ, so this\n\t// configuration will create `3 groups × 3 AZs = 9` subnets.\n\tsubnetConfiguration: []subnetConfiguration{\n\t\t&subnetConfiguration{\n\t\t\t// 'subnetType' controls Internet access, as described above.\n\t\t\tsubnetType: ec2.subnetType_PUBLIC,\n\n\t\t\t// 'name' is used to name this particular subnet group. You will have to\n\t\t\t// use the name for subnet selection if you have more than one subnet\n\t\t\t// group of the same type.\n\t\t\tname: jsii.String(\"Ingress\"),\n\n\t\t\t// 'cidrMask' specifies the IP addresses in the range of of individual\n\t\t\t// subnets in the group. Each of the subnets in this group will contain\n\t\t\t// `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n\t\t\t// usable IP addresses.\n\t\t\t//\n\t\t\t// If 'cidrMask' is left out the available address space is evenly\n\t\t\t// divided across the remaining subnet groups.\n\t\t\tcidrMask: jsii.Number(24),\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(24),\n\t\t\tname: jsii.String(\"Application\"),\n\t\t\tsubnetType: ec2.*subnetType_PRIVATE_WITH_NAT,\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(28),\n\t\t\tname: jsii.String(\"Database\"),\n\t\t\tsubnetType: ec2.*subnetType_PRIVATE_ISOLATED,\n\n\t\t\t// 'reserved' can be used to reserve IP address space. No resources will\n\t\t\t// be created for this subnet, but the IP range will be kept available for\n\t\t\t// future creation of this subnet, or even for future subdivision.\n\t\t\treserved: jsii.Boolean(true),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'TheVPC', {\n  // 'cidr' configures the IP range and size of the entire VPC.\n  // The IP space will be divided over the configured subnets.\n  cidr: '10.0.0.0/21',\n\n  // 'maxAzs' configures the maximum number of availability zones to use\n  maxAzs: 3,\n\n  // 'subnetConfiguration' specifies the \"subnet groups\" to create.\n  // Every subnet group will have a subnet for each AZ, so this\n  // configuration will create `3 groups × 3 AZs = 9` subnets.\n  subnetConfiguration: [\n    {\n      // 'subnetType' controls Internet access, as described above.\n      subnetType: ec2.SubnetType.PUBLIC,\n\n      // 'name' is used to name this particular subnet group. You will have to\n      // use the name for subnet selection if you have more than one subnet\n      // group of the same type.\n      name: 'Ingress',\n\n      // 'cidrMask' specifies the IP addresses in the range of of individual\n      // subnets in the group. Each of the subnets in this group will contain\n      // `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n      // usable IP addresses.\n      //\n      // If 'cidrMask' is left out the available address space is evenly\n      // divided across the remaining subnet groups.\n      cidrMask: 24,\n    },\n    {\n      cidrMask: 24,\n      name: 'Application',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n    },\n    {\n      cidrMask: 28,\n      name: 'Database',\n      subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n\n      // 'reserved' can be used to reserve IP address space. No resources will\n      // be created for this subnet, but the IP range will be kept available for\n      // future creation of this subnet, or even for future subdivision.\n      reserved: true\n    }\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 239
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'TheVPC', {\n  // 'cidr' configures the IP range and size of the entire VPC.\n  // The IP space will be divided over the configured subnets.\n  cidr: '10.0.0.0/21',\n\n  // 'maxAzs' configures the maximum number of availability zones to use\n  maxAzs: 3,\n\n  // 'subnetConfiguration' specifies the \"subnet groups\" to create.\n  // Every subnet group will have a subnet for each AZ, so this\n  // configuration will create `3 groups × 3 AZs = 9` subnets.\n  subnetConfiguration: [\n    {\n      // 'subnetType' controls Internet access, as described above.\n      subnetType: ec2.SubnetType.PUBLIC,\n\n      // 'name' is used to name this particular subnet group. You will have to\n      // use the name for subnet selection if you have more than one subnet\n      // group of the same type.\n      name: 'Ingress',\n\n      // 'cidrMask' specifies the IP addresses in the range of of individual\n      // subnets in the group. Each of the subnets in this group will contain\n      // `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n      // usable IP addresses.\n      //\n      // If 'cidrMask' is left out the available address space is evenly\n      // divided across the remaining subnet groups.\n      cidrMask: 24,\n    },\n    {\n      cidrMask: 24,\n      name: 'Application',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n    },\n    {\n      cidrMask: 28,\n      name: 'Database',\n      subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n\n      // 'reserved' can be used to reserve IP address space. No resources will\n      // be created for this subnet, but the IP range will be kept available for\n      // future creation of this subnet, or even for future subdivision.\n      reserved: true\n    }\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 13
      },
      "fqnsFingerprint": "672c51ae22a875add34d415d546a92a2345303c4d2ac875b808af37e3b7ef2c0"
    },
    "1f9ed901a4afb53e26001663021a3b25218f6e2e6d5e6938bc3c5141449eb1f4": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nigw_id = vpc.internet_gateway_id",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nstring? igwId = vpc.InternetGatewayId;",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nString igwId = vpc.getInternetGatewayId();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nigwId := vpc.internetGatewayId",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst igwId = vpc.internetGatewayId;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 311
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc#internetGatewayId"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst igwId = vpc.internetGatewayId;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "18691b606fdcf7817ebb941179fc4c0fd7f56c4de09d9b72bfd93881f922d93a"
    },
    "d81e4f2360aad46fcc2dfc4126897751e46c4213797db79bf650644ca427df8c": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"VPC\",\n    subnet_configuration=[ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.PUBLIC,\n        name=\"Public\"\n    ), ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.ISOLATED,\n        name=\"Isolated\"\n    )]\n)\n\n(vpc.isolated_subnets[0]).add_route(\"StaticRoute\",\n    router_id=vpc.internet_gateway_id,\n    router_type=ec2.RouterType.GATEWAY,\n    destination_cidr_block=\"8.8.8.8/32\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\", new VpcProps {\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        SubnetType = SubnetType.PUBLIC,\n        Name = \"Public\"\n    }, new SubnetConfiguration {\n        SubnetType = SubnetType.ISOLATED,\n        Name = \"Isolated\"\n    } }\n});\n\n((Subnet)vpc.IsolatedSubnets[0]).AddRoute(\"StaticRoute\", new AddRouteOptions {\n    RouterId = vpc.InternetGatewayId,\n    RouterType = RouterType.GATEWAY,\n    DestinationCidrBlock = \"8.8.8.8/32\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"VPC\")\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .name(\"Public\")\n                .build(), SubnetConfiguration.builder()\n                .subnetType(SubnetType.ISOLATED)\n                .name(\"Isolated\")\n                .build()))\n        .build();\n\n((Subnet)vpc.isolatedSubnets[0]).addRoute(\"StaticRoute\", AddRouteOptions.builder()\n        .routerId(vpc.getInternetGatewayId())\n        .routerType(RouterType.GATEWAY)\n        .destinationCidrBlock(\"8.8.8.8/32\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tsubnetConfiguration: []subnetConfiguration{\n\t\t&subnetConfiguration{\n\t\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t\t\tname: jsii.String(\"Public\"),\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tsubnetType: ec2.*subnetType_ISOLATED,\n\t\t\tname: jsii.String(\"Isolated\"),\n\t\t},\n\t},\n})\n\n(vpc.isolatedSubnets[0].(subnet)).addRoute(jsii.String(\"StaticRoute\"), &addRouteOptions{\n\trouterId: vpc.internetGatewayId,\n\trouterType: ec2.routerType_GATEWAY,\n\tdestinationCidrBlock: jsii.String(\"8.8.8.8/32\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 334
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AddRouteOptions",
        "@aws-cdk/aws-ec2.RouterType",
        "@aws-cdk/aws-ec2.RouterType#GATEWAY",
        "@aws-cdk/aws-ec2.Subnet#addRoute",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#internetGatewayId",
        "@aws-cdk/aws-ec2.Vpc#isolatedSubnets",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 10,
        "195": 1,
        "196": 1,
        "197": 1,
        "200": 1,
        "217": 1,
        "218": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "c0dece50f85513d8ffd53d3c5e0214b0717c27a75490a255ffd9577f2fbfa36f"
    },
    "39bbef2d58b757b8e8bd7337a2620ba5ec2faad296800cbf4148b26592cd1238": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"TheVPC\",\n    nat_gateways=1,\n    subnet_configuration=[ec2.SubnetConfiguration(\n        cidr_mask=26,\n        name=\"Public\",\n        subnet_type=ec2.SubnetType.PUBLIC\n    ), ec2.SubnetConfiguration(\n        cidr_mask=26,\n        name=\"Application1\",\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ), ec2.SubnetConfiguration(\n        cidr_mask=26,\n        name=\"Application2\",\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT,\n        reserved=True\n    ), ec2.SubnetConfiguration(\n        cidr_mask=27,\n        name=\"Database\",\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"TheVPC\", new VpcProps {\n    NatGateways = 1,\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        CidrMask = 26,\n        Name = \"Public\",\n        SubnetType = SubnetType.PUBLIC\n    }, new SubnetConfiguration {\n        CidrMask = 26,\n        Name = \"Application1\",\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }, new SubnetConfiguration {\n        CidrMask = 26,\n        Name = \"Application2\",\n        SubnetType = SubnetType.PRIVATE_WITH_NAT,\n        Reserved = true\n    }, new SubnetConfiguration {\n        CidrMask = 27,\n        Name = \"Database\",\n        SubnetType = SubnetType.ISOLATED\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"TheVPC\")\n        .natGateways(1)\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .cidrMask(26)\n                .name(\"Public\")\n                .subnetType(SubnetType.PUBLIC)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(26)\n                .name(\"Application1\")\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(26)\n                .name(\"Application2\")\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .reserved(true)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(27)\n                .name(\"Database\")\n                .subnetType(SubnetType.ISOLATED)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"TheVPC\"), &vpcProps{\n\tnatGateways: jsii.Number(1),\n\tsubnetConfiguration: []subnetConfiguration{\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(26),\n\t\t\tname: jsii.String(\"Public\"),\n\t\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(26),\n\t\t\tname: jsii.String(\"Application1\"),\n\t\t\tsubnetType: ec2.*subnetType_PRIVATE_WITH_NAT,\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(26),\n\t\t\tname: jsii.String(\"Application2\"),\n\t\t\tsubnetType: ec2.*subnetType_PRIVATE_WITH_NAT,\n\t\t\treserved: jsii.Boolean(true),\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(27),\n\t\t\tname: jsii.String(\"Database\"),\n\t\t\tsubnetType: ec2.*subnetType_ISOLATED,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'TheVPC', {\n  natGateways: 1,\n  subnetConfiguration: [\n    {\n      cidrMask: 26,\n      name: 'Public',\n      subnetType: ec2.SubnetType.PUBLIC,\n    },\n    {\n      cidrMask: 26,\n      name: 'Application1',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n    },\n    {\n      cidrMask: 26,\n      name: 'Application2',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n      reserved: true,   // <---- This subnet group is reserved\n    },\n    {\n      cidrMask: 27,\n      name: 'Database',\n      subnetType: ec2.SubnetType.ISOLATED,\n    }\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 364
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'TheVPC', {\n  natGateways: 1,\n  subnetConfiguration: [\n    {\n      cidrMask: 26,\n      name: 'Public',\n      subnetType: ec2.SubnetType.PUBLIC,\n    },\n    {\n      cidrMask: 26,\n      name: 'Application1',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n    },\n    {\n      cidrMask: 26,\n      name: 'Application2',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n      reserved: true,   // <---- This subnet group is reserved\n    },\n    {\n      cidrMask: 27,\n      name: 'Database',\n      subnetType: ec2.SubnetType.ISOLATED,\n    }\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 5,
        "75": 30,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 15
      },
      "fqnsFingerprint": "305f63eca9e0c3f624c69d79040572271ad9a0b9290e156e4ca804e08690fc1c"
    },
    "f34f16b79a4670850c77544fb996fd8754e0be8bcc57f489bea3ca7e6d9e8163": {
      "translations": {
        "python": {
          "source": "#\n# Stack1 creates the VPC\n#\nclass Stack1(cdk.Stack):\n\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        self.vpc = ec2.Vpc(self, \"VPC\")\n\n#\n# Stack2 consumes the VPC\n#\nclass Stack2(cdk.Stack):\n    def __init__(self, scope, id, *, vpc, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, vpc=vpc, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        # Pass the VPC to a construct that needs it\n        ConstructThatTakesAVpc(self, \"Construct\",\n            vpc=vpc\n        )\n\nstack1 = Stack1(app, \"Stack1\")\nstack2 = Stack2(app, \"Stack2\",\n    vpc=stack1.vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "/**\n * Stack1 creates the VPC\n */\nclass Stack1 : Stack\n{\n    public Vpc Vpc { get; }\n\n    public Stack1(App scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        Vpc = new Vpc(this, \"VPC\");\n    }\n}\n\nclass Stack2Props : StackProps\n{\n    public IVpc Vpc { get; set; }\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 : Stack\n{\n    public Stack2(App scope, string id, Stack2Props props) : base(scope, id, props)\n    {\n\n        // Pass the VPC to a construct that needs it\n        // Pass the VPC to a construct that needs it\n        new ConstructThatTakesAVpc(this, \"Construct\", new ConstructThatTakesAVpcProps {\n            Vpc = props.Vpc\n        });\n    }\n}\n\nStack1 stack1 = new Stack1(app, \"Stack1\");\nStack2 stack2 = new Stack2(app, \"Stack2\", new Stack2Props {\n    Vpc = stack1.Vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "/**\n * Stack1 creates the VPC\n */\npublic class Stack1 extends Stack {\n    public final Vpc vpc;\n\n    public Stack1(App scope, String id) {\n        this(scope, id, null);\n    }\n\n    public Stack1(App scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        this.vpc = new Vpc(this, \"VPC\");\n    }\n}\n\npublic class Stack2Props extends StackProps {\n    private IVpc vpc;\n    public IVpc getVpc() {\n        return this.vpc;\n    }\n    public Stack2Props vpc(IVpc vpc) {\n        this.vpc = vpc;\n        return this;\n    }\n}\n\n/**\n * Stack2 consumes the VPC\n */\npublic class Stack2 extends Stack {\n    public Stack2(App scope, String id, Stack2Props props) {\n        super(scope, id, props);\n\n        // Pass the VPC to a construct that needs it\n        // Pass the VPC to a construct that needs it\n        new ConstructThatTakesAVpc(this, \"Construct\", new ConstructThatTakesAVpcProps()\n                .vpc(props.getVpc())\n                );\n    }\n}\n\nStack1 stack1 = new Stack1(app, \"Stack1\");\nStack2 stack2 = new Stack2(app, \"Stack2\", new Stack2Props()\n        .vpc(stack1.getVpc())\n        );",
          "version": "1"
        },
        "go": {
          "source": "/**\n * Stack1 creates the VPC\n */\ntype stack1 struct {\n\tstack\n\tvpc vpc\n}\n\nfunc newStack1(scope app, id *string, props stackProps) *stack1 {\n\tthis := &stack1{}\n\tcdk.NewStack_Override(this, scope, id, props)\n\n\tthis.vpc = ec2.NewVpc(this, jsii.String(\"VPC\"))\n\treturn this\n}\n\ntype stack2Props struct {\n\tstackProps\n\tvpc *iVpc\n}\n\n/**\n * Stack2 consumes the VPC\n */\ntype stack2 struct {\n\tstack\n}\n\nfunc newStack2(scope app, id *string, props stack2Props) *stack2 {\n\tthis := &stack2{}\n\tcdk.NewStack_Override(this, scope, id, props)\n\n\t// Pass the VPC to a construct that needs it\n\t// Pass the VPC to a construct that needs it\n\tNewConstructThatTakesAVpc(this, jsii.String(\"Construct\"), &constructThatTakesAVpcProps{\n\t\tvpc: props.vpc,\n\t})\n\treturn this\n}\n\nstack1 := NewStack1(app, jsii.String(\"Stack1\"))\nstack2 := NewStack2(app, jsii.String(\"Stack2\"), &stack2Props{\n\tvpc: stack1.vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "/**\n * Stack1 creates the VPC\n */\nclass Stack1 extends cdk.Stack {\n  public readonly vpc: ec2.Vpc;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    this.vpc = new ec2.Vpc(this, 'VPC');\n  }\n}\n\ninterface Stack2Props extends cdk.StackProps {\n  vpc: ec2.IVpc;\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: Stack2Props) {\n    super(scope, id, props);\n\n    // Pass the VPC to a construct that needs it\n    new ConstructThatTakesAVpc(this, 'Construct', {\n      vpc: props.vpc,\n    });\n  }\n}\n\nconst stack1 = new Stack1(app, 'Stack1');\nconst stack2 = new Stack2(app, 'Stack2', {\n  vpc: stack1.vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 404
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ *\nimport * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\nimport * as ec2 from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nconst app = new cdk.App();\n\ninterface ConstructThatTakesAVpcProps {\n  vpc: ec2.IVpc;\n}\n\nclass ConstructThatTakesAVpc extends Construct {\n  constructor(scope: constructs.Construct, id: string, _props: ConstructThatTakesAVpcProps) {\n    super(scope, id);\n\n    // new ec2.CfnInstance(this, 'Instance', {\n    //   subnetId: props.vpc.privateSubnets[0].subnetId,\n    //   imageId: new ec2.AmazonLinuxImage().getImage(this).imageId,\n    // });\n  }\n}\n\n/// !show\n/**\n * Stack1 creates the VPC\n */\nclass Stack1 extends cdk.Stack {\n  public readonly vpc: ec2.Vpc;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    this.vpc = new ec2.Vpc(this, 'VPC');\n  }\n}\n\ninterface Stack2Props extends cdk.StackProps {\n  vpc: ec2.IVpc;\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: Stack2Props) {\n    super(scope, id, props);\n\n    // Pass the VPC to a construct that needs it\n    new ConstructThatTakesAVpc(this, 'Construct', {\n      vpc: props.vpc,\n    });\n  }\n}\n\nconst stack1 = new Stack1(app, 'Stack1');\nconst stack2 = new Stack2(app, 'Stack2', {\n  vpc: stack1.vpc,\n});\n/// !hide\n\nArray.isArray(stack2);\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 4,
        "57": 1,
        "62": 1,
        "75": 50,
        "102": 2,
        "104": 3,
        "119": 1,
        "138": 1,
        "143": 2,
        "153": 5,
        "156": 6,
        "158": 1,
        "159": 1,
        "162": 2,
        "169": 6,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 4,
        "209": 1,
        "216": 3,
        "223": 2,
        "225": 2,
        "226": 4,
        "242": 2,
        "243": 2,
        "245": 2,
        "246": 1,
        "279": 3,
        "281": 2
      },
      "fqnsFingerprint": "bb6bda517ca2991dc773c68f96184212dae1a30e69383aef0b45ea501fce963d"
    },
    "a7d95e48ea956d22dbd7642769bbb954a5d736b82c09575710f8d95ac0eb5cc7": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(stack, \"VPC\",\n    # This imports the default VPC but you can also\n    # specify a 'vpcName' or 'tags'.\n    is_default=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(stack, \"VPC\", new VpcLookupOptions {\n    // This imports the default VPC but you can also\n    // specify a 'vpcName' or 'tags'.\n    IsDefault = true\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(stack, \"VPC\", VpcLookupOptions.builder()\n        // This imports the default VPC but you can also\n        // specify a 'vpcName' or 'tags'.\n        .isDefault(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(stack, jsii.String(\"VPC\"), &vpcLookupOptions{\n\t// This imports the default VPC but you can also\n\t// specify a 'vpcName' or 'tags'.\n\tisDefault: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(stack, 'VPC', {\n  // This imports the default VPC but you can also\n  // specify a 'vpcName' or 'tags'.\n  isDefault: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 462
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/core.Environment",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ * pragma:enable-lookups\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\n// we associate this stack with an explicit environment since this is required by the\n// environmental context provider used in `fromLookup`. CDK_INTEG_XXX are set\n// when producing the .expected file and CDK_DEFAULT_XXX is passed in through from\n// the CLI in actual deployment.\nconst env = {\n  account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n  region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n};\n\nconst stack = new cdk.Stack(app, 'aws-cdk-ec2-import', { env });\n\n/// !show\nconst vpc = ec2.Vpc.fromLookup(stack, 'VPC', {\n  // This imports the default VPC but you can also\n  // specify a 'vpcName' or 'tags'.\n  isDefault: true,\n});\n/// !hide\n\n// The only thing in this library that takes a VPC as an argument :)\nnew ec2.SecurityGroup(stack, 'SecurityGroup', {\n  vpc,\n});\n\n// Try subnet selection\nnew cdk.CfnOutput(stack, 'PublicSubnets', { value: 'ids:' + vpc.publicSubnets.map(s => s.subnetId).join(',') });\nnew cdk.CfnOutput(stack, 'PrivateSubnets', { value: 'ids:' + vpc.privateSubnets.map(s => s.subnetId).join(',') });\n\n// Route table IDs\nnew cdk.CfnOutput(stack, 'PublicRouteTables', { value: 'ids: ' + vpc.publicSubnets.map(s => s.routeTable.routeTableId).join(', ') });\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "89705f6fdfbbea352405d7d30c4f63ddef2edada6343c5fd52b46e0965a8d8d5"
    },
    "e81f573a4c3095fde187f763928ddaca2c77c74e31e1a62681917bec304f2cb0": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_vpc_attributes(self, \"VPC\",\n    vpc_id=\"vpc-1234\",\n    availability_zones=[\"us-east-1a\", \"us-east-1b\"],\n\n    # Either pass literals for all IDs\n    public_subnet_ids=[\"s-12345\", \"s-67890\"],\n\n    # OR: import a list of known length\n    private_subnet_ids=Fn.import_list_value(\"PrivateSubnetIds\", 2),\n\n    # OR: split an imported string to a list of known length\n    isolated_subnet_ids=Fn.split(\",\", ssm.StringParameter.value_for_string_parameter(self, \"MyParameter\"), 2)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromVpcAttributes(this, \"VPC\", new VpcAttributes {\n    VpcId = \"vpc-1234\",\n    AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1b\" },\n\n    // Either pass literals for all IDs\n    PublicSubnetIds = new [] { \"s-12345\", \"s-67890\" },\n\n    // OR: import a list of known length\n    PrivateSubnetIds = Fn.ImportListValue(\"PrivateSubnetIds\", 2),\n\n    // OR: split an imported string to a list of known length\n    IsolatedSubnetIds = Fn.Split(\",\", StringParameter.ValueForStringParameter(this, \"MyParameter\"), 2)\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromVpcAttributes(this, \"VPC\", VpcAttributes.builder()\n        .vpcId(\"vpc-1234\")\n        .availabilityZones(List.of(\"us-east-1a\", \"us-east-1b\"))\n\n        // Either pass literals for all IDs\n        .publicSubnetIds(List.of(\"s-12345\", \"s-67890\"))\n\n        // OR: import a list of known length\n        .privateSubnetIds(Fn.importListValue(\"PrivateSubnetIds\", 2))\n\n        // OR: split an imported string to a list of known length\n        .isolatedSubnetIds(Fn.split(\",\", StringParameter.valueForStringParameter(this, \"MyParameter\"), 2))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromVpcAttributes(this, jsii.String(\"VPC\"), &vpcAttributes{\n\tvpcId: jsii.String(\"vpc-1234\"),\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"us-east-1a\"),\n\t\tjsii.String(\"us-east-1b\"),\n\t},\n\n\t// Either pass literals for all IDs\n\tpublicSubnetIds: []*string{\n\t\tjsii.String(\"s-12345\"),\n\t\tjsii.String(\"s-67890\"),\n\t},\n\n\t// OR: import a list of known length\n\tprivateSubnetIds: fn.importListValue(jsii.String(\"PrivateSubnetIds\"), jsii.Number(2)),\n\n\t// OR: split an imported string to a list of known length\n\tisolatedSubnetIds: *fn.split(jsii.String(\",\"), ssm.stringParameter.valueForStringParameter(this, jsii.String(\"MyParameter\")), jsii.Number(2)),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {\n  vpcId: 'vpc-1234',\n  availabilityZones: ['us-east-1a', 'us-east-1b'],\n\n  // Either pass literals for all IDs\n  publicSubnetIds: ['s-12345', 's-67890'],\n\n  // OR: import a list of known length\n  privateSubnetIds: Fn.importListValue('PrivateSubnetIds', 2),\n\n  // OR: split an imported string to a list of known length\n  isolatedSubnetIds: Fn.split(',', ssm.StringParameter.valueForStringParameter(this, `MyParameter`), 2),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 484
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromVpcAttributes",
        "@aws-cdk/aws-ec2.VpcAttributes",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameter#valueForStringParameter",
        "@aws-cdk/core.Fn#importListValue",
        "@aws-cdk/core.Fn#split",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {\n  vpcId: 'vpc-1234',\n  availabilityZones: ['us-east-1a', 'us-east-1b'],\n\n  // Either pass literals for all IDs\n  publicSubnetIds: ['s-12345', 's-67890'],\n\n  // OR: import a list of known length\n  privateSubnetIds: Fn.importListValue('PrivateSubnetIds', 2),\n\n  // OR: split an imported string to a list of known length\n  isolatedSubnetIds: Fn.split(',', ssm.StringParameter.valueForStringParameter(this, `MyParameter`), 2),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "14": 1,
        "75": 16,
        "104": 2,
        "192": 2,
        "193": 1,
        "194": 6,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "0083befd0616fe1eba633993eda8be833195c435dc0c67e841616ff252e6ad4d"
    },
    "38bb306141205c793c2abe25cf460205d5c5c62430a37922d2608c5b53f57b95": {
      "translations": {
        "python": {
          "source": "my_security_group = ec2.SecurityGroup(self, \"SecurityGroup\",\n    vpc=vpc,\n    description=\"Allow ssh access to ec2 instances\",\n    allow_all_outbound=True\n)\nmy_security_group.add_ingress_rule(ec2.Peer.any_ipv4(), ec2.Port.tcp(22), \"allow ssh access from the world\")",
          "version": "2"
        },
        "csharp": {
          "source": "SecurityGroup mySecurityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps {\n    Vpc = vpc,\n    Description = \"Allow ssh access to ec2 instances\",\n    AllowAllOutbound = true\n});\nmySecurityGroup.AddIngressRule(Peer.AnyIpv4(), Port.Tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "java": {
          "source": "SecurityGroup mySecurityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\")\n        .vpc(vpc)\n        .description(\"Allow ssh access to ec2 instances\")\n        .allowAllOutbound(true)\n        .build();\nmySecurityGroup.addIngressRule(Peer.anyIpv4(), Port.tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "go": {
          "source": "mySecurityGroup := ec2.NewSecurityGroup(this, jsii.String(\"SecurityGroup\"), &securityGroupProps{\n\tvpc: vpc,\n\tdescription: jsii.String(\"Allow ssh access to ec2 instances\"),\n\tallowAllOutbound: jsii.Boolean(true),\n})\nmySecurityGroup.addIngressRule(ec2.peer.anyIpv4(), ec2.port.tcp(jsii.Number(22)), jsii.String(\"allow ssh access from the world\"))",
          "version": "1"
        },
        "$": {
          "source": "const mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true   // Can be set to false\n});\nmySecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 512
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#anyIpv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#addIngressRule",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true   // Can be set to false\n});\nmySecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "0785ca365090d586c3aca14f66138ed45802310d68932393b61052d1a81621d6"
    },
    "7b45a4d3cfde842c301f6e42a8c7680393d3a53b8cae5747eb934516489c6ab9": {
      "translations": {
        "python": {
          "source": "# load_balancer: elbv2.ApplicationLoadBalancer\n# app_fleet: autoscaling.AutoScalingGroup\n# db_fleet: autoscaling.AutoScalingGroup\n\n\n# Allow connections from anywhere\nload_balancer.connections.allow_from_any_ipv4(ec2.Port.tcp(443), \"Allow inbound HTTPS\")\n\n# The same, but an explicit IP address\nload_balancer.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/32\"), ec2.Port.tcp(443), \"Allow inbound HTTPS\")\n\n# Allow connection between AutoScalingGroups\napp_fleet.connections.allow_to(db_fleet, ec2.Port.tcp(443), \"App can call database\")",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer loadBalancer;\nAutoScalingGroup appFleet;\nAutoScalingGroup dbFleet;\n\n\n// Allow connections from anywhere\nloadBalancer.Connections.AllowFromAnyIpv4(Port.Tcp(443), \"Allow inbound HTTPS\");\n\n// The same, but an explicit IP address\nloadBalancer.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/32\"), Port.Tcp(443), \"Allow inbound HTTPS\");\n\n// Allow connection between AutoScalingGroups\nappFleet.Connections.AllowTo(dbFleet, Port.Tcp(443), \"App can call database\");",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer loadBalancer;\nAutoScalingGroup appFleet;\nAutoScalingGroup dbFleet;\n\n\n// Allow connections from anywhere\nloadBalancer.connections.allowFromAnyIpv4(Port.tcp(443), \"Allow inbound HTTPS\");\n\n// The same, but an explicit IP address\nloadBalancer.connections.allowFrom(Peer.ipv4(\"1.2.3.4/32\"), Port.tcp(443), \"Allow inbound HTTPS\");\n\n// Allow connection between AutoScalingGroups\nappFleet.connections.allowTo(dbFleet, Port.tcp(443), \"App can call database\");",
          "version": "1"
        },
        "go": {
          "source": "var loadBalancer applicationLoadBalancer\nvar appFleet autoScalingGroup\nvar dbFleet autoScalingGroup\n\n// Allow connections from anywhere\nloadBalancer.connections.allowFromAnyIpv4(ec2.port.tcp(jsii.Number(443)), jsii.String(\"Allow inbound HTTPS\"))\n\n// The same, but an explicit IP address\nloadBalancer.connections.allowFrom(ec2.peer.ipv4(jsii.String(\"1.2.3.4/32\")), ec2.port.tcp(jsii.Number(443)), jsii.String(\"Allow inbound HTTPS\"))\n\n// Allow connection between AutoScalingGroups\nappFleet.connections.allowTo(dbFleet, ec2.port.tcp(jsii.Number(443)), jsii.String(\"App can call database\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const loadBalancer: elbv2.ApplicationLoadBalancer;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const dbFleet: autoscaling.AutoScalingGroup;\n\n// Allow connections from anywhere\nloadBalancer.connections.allowFromAnyIpv4(ec2.Port.tcp(443), 'Allow inbound HTTPS');\n\n// The same, but an explicit IP address\nloadBalancer.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/32'), ec2.Port.tcp(443), 'Allow inbound HTTPS');\n\n// Allow connection between AutoScalingGroups\nappFleet.connections.allowTo(dbFleet, ec2.Port.tcp(443), 'App can call database');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 530
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.Connections#allowFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#connections"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const loadBalancer: elbv2.ApplicationLoadBalancer;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const dbFleet: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Allow connections from anywhere\nloadBalancer.connections.allowFromAnyIpv4(ec2.Port.tcp(443), 'Allow inbound HTTPS');\n\n// The same, but an explicit IP address\nloadBalancer.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/32'), ec2.Port.tcp(443), 'Allow inbound HTTPS');\n\n// Allow connection between AutoScalingGroups\nappFleet.connections.allowTo(dbFleet, ec2.Port.tcp(443), 'App can call database');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 31,
        "130": 3,
        "153": 3,
        "169": 3,
        "194": 14,
        "196": 7,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "2ea2792b7c11f8aea538ccb1314a159c78f1f4b4781617d87564db2fb5c5df95"
    },
    "4b7c8d74b821f0422f52f15e2c9eb7f31a59cd765d31b41ed0deb2aba3e86bd8": {
      "translations": {
        "python": {
          "source": "# app_fleet: autoscaling.AutoScalingGroup\n# db_fleet: autoscaling.AutoScalingGroup\n\n\n# Simple connection peers\npeer = ec2.Peer.ipv4(\"10.0.0.0/16\")\npeer = ec2.Peer.any_ipv4()\npeer = ec2.Peer.ipv6(\"::0/0\")\npeer = ec2.Peer.any_ipv6()\npeer = ec2.Peer.prefix_list(\"pl-12345\")\napp_fleet.connections.allow_to(peer, ec2.Port.tcp(443), \"Allow outbound HTTPS\")",
          "version": "2"
        },
        "csharp": {
          "source": "AutoScalingGroup appFleet;\nAutoScalingGroup dbFleet;\n\n\n// Simple connection peers\nIPeer peer = Peer.Ipv4(\"10.0.0.0/16\");\npeer = Peer.AnyIpv4();\npeer = Peer.Ipv6(\"::0/0\");\npeer = Peer.AnyIpv6();\npeer = Peer.PrefixList(\"pl-12345\");\nappFleet.Connections.AllowTo(peer, Port.Tcp(443), \"Allow outbound HTTPS\");",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup appFleet;\nAutoScalingGroup dbFleet;\n\n\n// Simple connection peers\nIPeer peer = Peer.ipv4(\"10.0.0.0/16\");\npeer = Peer.anyIpv4();\npeer = Peer.ipv6(\"::0/0\");\npeer = Peer.anyIpv6();\npeer = Peer.prefixList(\"pl-12345\");\nappFleet.connections.allowTo(peer, Port.tcp(443), \"Allow outbound HTTPS\");",
          "version": "1"
        },
        "go": {
          "source": "var appFleet autoScalingGroup\nvar dbFleet autoScalingGroup\n\n// Simple connection peers\npeer := ec2.peer.ipv4(jsii.String(\"10.0.0.0/16\"))\npeer = ec2.peer.anyIpv4()\npeer = ec2.peer.ipv6(jsii.String(\"::0/0\"))\npeer = ec2.peer.anyIpv6()\npeer = ec2.peer.prefixList(jsii.String(\"pl-12345\"))\nappFleet.connections.allowTo(peer, ec2.port.tcp(jsii.Number(443)), jsii.String(\"Allow outbound HTTPS\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const dbFleet: autoscaling.AutoScalingGroup;\n\n// Simple connection peers\nlet peer = ec2.Peer.ipv4('10.0.0.0/16');\npeer = ec2.Peer.anyIpv4();\npeer = ec2.Peer.ipv6('::0/0');\npeer = ec2.Peer.anyIpv6();\npeer = ec2.Peer.prefixList('pl-12345');\nappFleet.connections.allowTo(peer, ec2.Port.tcp(443), 'Allow outbound HTTPS');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 549
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#anyIpv4",
        "@aws-cdk/aws-ec2.Peer#anyIpv6",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Peer#ipv6",
        "@aws-cdk/aws-ec2.Peer#prefixList",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const dbFleet: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Simple connection peers\nlet peer = ec2.Peer.ipv4('10.0.0.0/16');\npeer = ec2.Peer.anyIpv4();\npeer = ec2.Peer.ipv6('::0/0');\npeer = ec2.Peer.anyIpv6();\npeer = ec2.Peer.prefixList('pl-12345');\nappFleet.connections.allowTo(peer, ec2.Port.tcp(443), 'Allow outbound HTTPS');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "62": 4,
        "75": 33,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 14,
        "196": 7,
        "209": 4,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "2200a7409072c711efa79a7fd5f08eaa4cd23ec74cfa6e274f169947b2e527d7"
    },
    "dbd3a0818c9247d02aa19e29722fcc43ea7d86466b059d4aa5d94216184a22ab": {
      "translations": {
        "python": {
          "source": "# fleet1: autoscaling.AutoScalingGroup\n# fleet2: autoscaling.AutoScalingGroup\n# app_fleet: autoscaling.AutoScalingGroup\n\n\n# These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allow_to(fleet2, ec2.Port.tcp(80), \"Allow between fleets\")\n\napp_fleet.connections.allow_from_any_ipv4(ec2.Port.tcp(80), \"Allow from load balancer\")",
          "version": "2"
        },
        "csharp": {
          "source": "AutoScalingGroup fleet1;\nAutoScalingGroup fleet2;\nAutoScalingGroup appFleet;\n\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.Connections.AllowTo(fleet2, Port.Tcp(80), \"Allow between fleets\");\n\nappFleet.Connections.AllowFromAnyIpv4(Port.Tcp(80), \"Allow from load balancer\");",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup fleet1;\nAutoScalingGroup fleet2;\nAutoScalingGroup appFleet;\n\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allowTo(fleet2, Port.tcp(80), \"Allow between fleets\");\n\nappFleet.connections.allowFromAnyIpv4(Port.tcp(80), \"Allow from load balancer\");",
          "version": "1"
        },
        "go": {
          "source": "var fleet1 autoScalingGroup\nvar fleet2 autoScalingGroup\nvar appFleet autoScalingGroup\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allowTo(fleet2, ec2.port.tcp(jsii.Number(80)), jsii.String(\"Allow between fleets\"))\n\nappFleet.connections.allowFromAnyIpv4(ec2.port.tcp(jsii.Number(80)), jsii.String(\"Allow from load balancer\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const fleet1: autoscaling.AutoScalingGroup;\ndeclare const fleet2: autoscaling.AutoScalingGroup;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allowTo(fleet2, ec2.Port.tcp(80), 'Allow between fleets');\n\nappFleet.connections.allowFromAnyIpv4(ec2.Port.tcp(80), 'Allow from load balancer');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 564
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fleet1: autoscaling.AutoScalingGroup;\ndeclare const fleet2: autoscaling.AutoScalingGroup;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allowTo(fleet2, ec2.Port.tcp(80), 'Allow between fleets');\n\nappFleet.connections.allowFromAnyIpv4(ec2.Port.tcp(80), 'Allow from load balancer');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 22,
        "130": 3,
        "153": 3,
        "169": 3,
        "194": 8,
        "196": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "a3a88a9e834d9187dcfed1d53916eeefc7fa1c837c7fbda91efd109c17745a4b"
    },
    "3a1f8f8e376a6d61dc2a259db0ed7c0c37447cd2bdd62f1aaf9b3cc93cc2135a": {
      "translations": {
        "python": {
          "source": "ec2.Port.tcp(80)\nec2.Port.tcp_range(60000, 65535)\nec2.Port.all_tcp()\nec2.Port.all_traffic()",
          "version": "2"
        },
        "csharp": {
          "source": "Port.Tcp(80);\nPort.TcpRange(60000, 65535);\nPort.AllTcp();\nPort.AllTraffic();",
          "version": "1"
        },
        "java": {
          "source": "Port.tcp(80);\nPort.tcpRange(60000, 65535);\nPort.allTcp();\nPort.allTraffic();",
          "version": "1"
        },
        "go": {
          "source": "ec2.port.tcp(jsii.Number(80))\nec2.port.tcpRange(jsii.Number(60000), jsii.Number(65535))\nec2.port.allTcp()\nec2.port.allTraffic()",
          "version": "1"
        },
        "$": {
          "source": "ec2.Port.tcp(80)\nec2.Port.tcpRange(60000, 65535)\nec2.Port.allTcp()\nec2.Port.allTraffic()",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 580
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#allTcp",
        "@aws-cdk/aws-ec2.Port#allTraffic",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Port#tcpRange"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nec2.Port.tcp(80)\nec2.Port.tcpRange(60000, 65535)\nec2.Port.allTcp()\nec2.Port.allTraffic()\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "75": 12,
        "194": 8,
        "196": 4,
        "226": 4
      },
      "fqnsFingerprint": "9ca737912b70e8820a908f2ffc1ed705e6dc758af9fba3b3936d2996fc1468d8"
    },
    "a93baab3e8b3c461fde8b0ea6b40b5501aed59735962809564d9bff1dd8615d7": {
      "translations": {
        "python": {
          "source": "# listener: elbv2.ApplicationListener\n# app_fleet: autoscaling.AutoScalingGroup\n# rds_database: rds.DatabaseCluster\n\n\n# Port implicit in listener\nlistener.connections.allow_default_port_from_any_ipv4(\"Allow public\")\n\n# Port implicit in peer\napp_fleet.connections.allow_default_port_to(rds_database, \"Fleet can access database\")",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nAutoScalingGroup appFleet;\nDatabaseCluster rdsDatabase;\n\n\n// Port implicit in listener\nlistener.Connections.AllowDefaultPortFromAnyIpv4(\"Allow public\");\n\n// Port implicit in peer\nappFleet.Connections.AllowDefaultPortTo(rdsDatabase, \"Fleet can access database\");",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nAutoScalingGroup appFleet;\nDatabaseCluster rdsDatabase;\n\n\n// Port implicit in listener\nlistener.connections.allowDefaultPortFromAnyIpv4(\"Allow public\");\n\n// Port implicit in peer\nappFleet.connections.allowDefaultPortTo(rdsDatabase, \"Fleet can access database\");",
          "version": "1"
        },
        "go": {
          "source": "var listener applicationListener\nvar appFleet autoScalingGroup\nvar rdsDatabase databaseCluster\n\n// Port implicit in listener\nlistener.connections.allowDefaultPortFromAnyIpv4(jsii.String(\"Allow public\"))\n\n// Port implicit in peer\nappFleet.connections.allowDefaultPortTo(rdsDatabase, jsii.String(\"Fleet can access database\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const rdsDatabase: rds.DatabaseCluster;\n\n// Port implicit in listener\nlistener.connections.allowDefaultPortFromAnyIpv4('Allow public');\n\n// Port implicit in peer\nappFleet.connections.allowDefaultPortTo(rdsDatabase, 'Fleet can access database');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 602
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#connections"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const rdsDatabase: rds.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Port implicit in listener\nlistener.connections.allowDefaultPortFromAnyIpv4('Allow public');\n\n// Port implicit in peer\nappFleet.connections.allowDefaultPortTo(rdsDatabase, 'Fleet can access database');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "130": 3,
        "153": 3,
        "169": 3,
        "194": 4,
        "196": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "1d6e3dae22190c872ede6bdd83458795663f8876e3acaed6dc34a11f65968270"
    },
    "6614b4373fe1cea4df8367ae2ae9cefce720330cb7ebcdc6affd16c58198f52c": {
      "translations": {
        "python": {
          "source": "my_security_group_without_inline_rules = ec2.SecurityGroup(self, \"SecurityGroup\",\n    vpc=vpc,\n    description=\"Allow ssh access to ec2 instances\",\n    allow_all_outbound=True,\n    disable_inline_rules=True\n)\n# This will add the rule as an external cloud formation construct\nmy_security_group_without_inline_rules.add_ingress_rule(ec2.Peer.any_ipv4(), ec2.Port.tcp(22), \"allow ssh access from the world\")",
          "version": "2"
        },
        "csharp": {
          "source": "SecurityGroup mySecurityGroupWithoutInlineRules = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps {\n    Vpc = vpc,\n    Description = \"Allow ssh access to ec2 instances\",\n    AllowAllOutbound = true,\n    DisableInlineRules = true\n});\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.AddIngressRule(Peer.AnyIpv4(), Port.Tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "java": {
          "source": "SecurityGroup mySecurityGroupWithoutInlineRules = SecurityGroup.Builder.create(this, \"SecurityGroup\")\n        .vpc(vpc)\n        .description(\"Allow ssh access to ec2 instances\")\n        .allowAllOutbound(true)\n        .disableInlineRules(true)\n        .build();\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.addIngressRule(Peer.anyIpv4(), Port.tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "go": {
          "source": "mySecurityGroupWithoutInlineRules := ec2.NewSecurityGroup(this, jsii.String(\"SecurityGroup\"), &securityGroupProps{\n\tvpc: vpc,\n\tdescription: jsii.String(\"Allow ssh access to ec2 instances\"),\n\tallowAllOutbound: jsii.Boolean(true),\n\tdisableInlineRules: jsii.Boolean(true),\n})\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.addIngressRule(ec2.peer.anyIpv4(), ec2.port.tcp(jsii.Number(22)), jsii.String(\"allow ssh access from the world\"))",
          "version": "1"
        },
        "$": {
          "source": "const mySecurityGroupWithoutInlineRules = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true,\n  disableInlineRules: true\n});\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 624
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#anyIpv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#addIngressRule",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst mySecurityGroupWithoutInlineRules = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true,\n  disableInlineRules: true\n});\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 15,
        "104": 1,
        "106": 2,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1
      },
      "fqnsFingerprint": "0785ca365090d586c3aca14f66138ed45802310d68932393b61052d1a81621d6"
    },
    "45b5d8e54123c45bebc3e9fa444444df8df41ca67fb44f760fab38d39acd858c": {
      "translations": {
        "python": {
          "source": "sg = ec2.SecurityGroup.from_security_group_id(self, \"SecurityGroupImport\", \"sg-1234\",\n    allow_all_outbound=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISecurityGroup sg = SecurityGroup.FromSecurityGroupId(this, \"SecurityGroupImport\", \"sg-1234\", new SecurityGroupImportOptions {\n    AllowAllOutbound = true\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup sg = SecurityGroup.fromSecurityGroupId(this, \"SecurityGroupImport\", \"sg-1234\", SecurityGroupImportOptions.builder()\n        .allowAllOutbound(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "sg := ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"SecurityGroupImport\"), jsii.String(\"sg-1234\"), &securityGroupImportOptions{\n\tallowAllOutbound: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const sg = ec2.SecurityGroup.fromSecurityGroupId(this, 'SecurityGroupImport', 'sg-1234', {\n  allowAllOutbound: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 639
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sg = ec2.SecurityGroup.fromSecurityGroupId(this, 'SecurityGroupImport', 'sg-1234', {\n  allowAllOutbound: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "cecb318f92a7fab80ee2a930ecbd7a2400add8bb1ac041f751ae9662a8432100"
    },
    "ef7b91b27870f1c3e7dcbbf69733891aee00256b5d00b974df7783bd3144f0c3": {
      "translations": {
        "python": {
          "source": "sg = ec2.SecurityGroup.from_lookup_by_name(self, \"SecurityGroupLookup\", \"security-group-name\", vpc)",
          "version": "2"
        },
        "csharp": {
          "source": "ISecurityGroup sg = SecurityGroup.FromLookupByName(this, \"SecurityGroupLookup\", \"security-group-name\", vpc);",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup sg = SecurityGroup.fromLookupByName(this, \"SecurityGroupLookup\", \"security-group-name\", vpc);",
          "version": "1"
        },
        "go": {
          "source": "sg := ec2.securityGroup.fromLookupByName(this, jsii.String(\"SecurityGroupLookup\"), jsii.String(\"security-group-name\"), vpc)",
          "version": "1"
        },
        "$": {
          "source": "const sg = ec2.SecurityGroup.fromLookupByName(this, 'SecurityGroupLookup', 'security-group-name', vpc);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 647
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromLookupByName",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sg = ec2.SecurityGroup.fromLookupByName(this, 'SecurityGroupLookup', 'security-group-name', vpc);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "a159b560863bb726a9f107da04a1190713731f213368f8a03c7544eeb387ffdb"
    },
    "2f4a17bff185591c565bc46ae6c8e8d1278c10908bd429b392a5c31b9bdba2a7": {
      "translations": {
        "python": {
          "source": "sg = ec2.SecurityGroup.from_lookup_by_id(self, \"SecurityGroupLookup\", \"sg-1234\")",
          "version": "2"
        },
        "csharp": {
          "source": "ISecurityGroup sg = SecurityGroup.FromLookupById(this, \"SecurityGroupLookup\", \"sg-1234\");",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup sg = SecurityGroup.fromLookupById(this, \"SecurityGroupLookup\", \"sg-1234\");",
          "version": "1"
        },
        "go": {
          "source": "sg := ec2.securityGroup.fromLookupById(this, jsii.String(\"SecurityGroupLookup\"), jsii.String(\"sg-1234\"))",
          "version": "1"
        },
        "$": {
          "source": "const sg = ec2.SecurityGroup.fromLookupById(this, 'SecurityGroupLookup', 'sg-1234');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 653
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromLookupById",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sg = ec2.SecurityGroup.fromLookupById(this, 'SecurityGroupLookup', 'sg-1234');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "a0c3ef4ab998ea589cd2c5bec889f28f0d986b3717cc8ed8d579482b4669f53c"
    },
    "bed41813c00c53f502c6ff8a6af6c1b369c3a4c986e6052918518248917a6e03": {
      "translations": {
        "python": {
          "source": "# Stack 1\n# stack1: Stack\n# stack2: Stack\n\n\nsg1 = ec2.SecurityGroup(stack1, \"SG1\",\n    allow_all_outbound=False,  # if this is `true` then no egress rule will be created\n    vpc=vpc\n)\n\n# Stack 2\nsg2 = ec2.SecurityGroup(stack2, \"SG2\",\n    allow_all_outbound=False,  # if this is `true` then no egress rule will be created\n    vpc=vpc\n)\n\n# `connections.allowTo` on `sg1` since we want the\n# rules to be created in Stack1\nsg1.connections.allow_to(sg2, ec2.Port.tcp(3333))",
          "version": "2"
        },
        "csharp": {
          "source": "// Stack 1\nStack stack1;\nStack stack2;\n\n\nSecurityGroup sg1 = new SecurityGroup(stack1, \"SG1\", new SecurityGroupProps {\n    AllowAllOutbound = false,  // if this is `true` then no egress rule will be created\n    Vpc = vpc\n});\n\n// Stack 2\nSecurityGroup sg2 = new SecurityGroup(stack2, \"SG2\", new SecurityGroupProps {\n    AllowAllOutbound = false,  // if this is `true` then no egress rule will be created\n    Vpc = vpc\n});\n\n// `connections.allowTo` on `sg1` since we want the\n// rules to be created in Stack1\nsg1.Connections.AllowTo(sg2, Port.Tcp(3333));",
          "version": "1"
        },
        "java": {
          "source": "// Stack 1\nStack stack1;\nStack stack2;\n\n\nSecurityGroup sg1 = SecurityGroup.Builder.create(stack1, \"SG1\")\n        .allowAllOutbound(false) // if this is `true` then no egress rule will be created\n        .vpc(vpc)\n        .build();\n\n// Stack 2\nSecurityGroup sg2 = SecurityGroup.Builder.create(stack2, \"SG2\")\n        .allowAllOutbound(false) // if this is `true` then no egress rule will be created\n        .vpc(vpc)\n        .build();\n\n// `connections.allowTo` on `sg1` since we want the\n// rules to be created in Stack1\nsg1.connections.allowTo(sg2, Port.tcp(3333));",
          "version": "1"
        },
        "go": {
          "source": "// Stack 1\nvar stack1 stack\nvar stack2 stack\n\nsg1 := ec2.NewSecurityGroup(stack1, jsii.String(\"SG1\"), &securityGroupProps{\n\tallowAllOutbound: jsii.Boolean(false),\n\t // if this is `true` then no egress rule will be created\n\tvpc: vpc,\n})\n\n// Stack 2\nsg2 := ec2.NewSecurityGroup(stack2, jsii.String(\"SG2\"), &securityGroupProps{\n\tallowAllOutbound: jsii.Boolean(false),\n\t // if this is `true` then no egress rule will be created\n\tvpc: vpc,\n})\n\n// `connections.allowTo` on `sg1` since we want the\n// rules to be created in Stack1\nsg1.connections.allowTo(sg2, ec2.port.tcp(jsii.Number(3333)))",
          "version": "1"
        },
        "$": {
          "source": "// Stack 1\ndeclare const stack1: Stack;\ndeclare const stack2: Stack;\n\nconst sg1 = new ec2.SecurityGroup(stack1, 'SG1', {\n  allowAllOutbound: false, // if this is `true` then no egress rule will be created\n  vpc,\n});\n\n// Stack 2\nconst sg2 = new ec2.SecurityGroup(stack2, 'SG2', {\n  allowAllOutbound: false, // if this is `true` then no egress rule will be created\n  vpc,\n});\n\n\n// `connections.allowTo` on `sg1` since we want the\n// rules to be created in Stack1\nsg1.connections.allowTo(sg2, ec2.Port.tcp(3333));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 673
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Stack 1\ndeclare const stack1: Stack;\ndeclare const stack2: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst sg1 = new ec2.SecurityGroup(stack1, 'SG1', {\n  allowAllOutbound: false, // if this is `true` then no egress rule will be created\n  vpc,\n});\n\n// Stack 2\nconst sg2 = new ec2.SecurityGroup(stack2, 'SG2', {\n  allowAllOutbound: false, // if this is `true` then no egress rule will be created\n  vpc,\n});\n\n\n// `connections.allowTo` on `sg1` since we want the\n// rules to be created in Stack1\nsg1.connections.allowTo(sg2, ec2.Port.tcp(3333));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 23,
        "91": 2,
        "130": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "670d2a668998dcdb12f51370b8cc8672311d529bd823828428d157f93a5a9b1f"
    },
    "f1e4de378372f03134b4e651c6b4b655bf11c45de7c26dec61e715f2ce49d634": {
      "translations": {
        "python": {
          "source": "# Stack 1\n# stack1: Stack\n# stack2: Stack\n\n\nsg1 = ec2.SecurityGroup(stack1, \"SG1\",\n    allow_all_outbound=False,  # if this is `true` then no egress rule will be created\n    vpc=vpc\n)\n\n# Stack 2\nsg2 = ec2.SecurityGroup(stack2, \"SG2\",\n    allow_all_outbound=False,  # if this is `true` then no egress rule will be created\n    vpc=vpc\n)\n\n# `connections.allowFrom` on `sg2` since we want the\n# rules to be created in Stack2\nsg2.connections.allow_from(sg1, ec2.Port.tcp(3333))",
          "version": "2"
        },
        "csharp": {
          "source": "// Stack 1\nStack stack1;\nStack stack2;\n\n\nSecurityGroup sg1 = new SecurityGroup(stack1, \"SG1\", new SecurityGroupProps {\n    AllowAllOutbound = false,  // if this is `true` then no egress rule will be created\n    Vpc = vpc\n});\n\n// Stack 2\nSecurityGroup sg2 = new SecurityGroup(stack2, \"SG2\", new SecurityGroupProps {\n    AllowAllOutbound = false,  // if this is `true` then no egress rule will be created\n    Vpc = vpc\n});\n\n// `connections.allowFrom` on `sg2` since we want the\n// rules to be created in Stack2\nsg2.Connections.AllowFrom(sg1, Port.Tcp(3333));",
          "version": "1"
        },
        "java": {
          "source": "// Stack 1\nStack stack1;\nStack stack2;\n\n\nSecurityGroup sg1 = SecurityGroup.Builder.create(stack1, \"SG1\")\n        .allowAllOutbound(false) // if this is `true` then no egress rule will be created\n        .vpc(vpc)\n        .build();\n\n// Stack 2\nSecurityGroup sg2 = SecurityGroup.Builder.create(stack2, \"SG2\")\n        .allowAllOutbound(false) // if this is `true` then no egress rule will be created\n        .vpc(vpc)\n        .build();\n\n// `connections.allowFrom` on `sg2` since we want the\n// rules to be created in Stack2\nsg2.connections.allowFrom(sg1, Port.tcp(3333));",
          "version": "1"
        },
        "go": {
          "source": "// Stack 1\nvar stack1 stack\nvar stack2 stack\n\nsg1 := ec2.NewSecurityGroup(stack1, jsii.String(\"SG1\"), &securityGroupProps{\n\tallowAllOutbound: jsii.Boolean(false),\n\t // if this is `true` then no egress rule will be created\n\tvpc: vpc,\n})\n\n// Stack 2\nsg2 := ec2.NewSecurityGroup(stack2, jsii.String(\"SG2\"), &securityGroupProps{\n\tallowAllOutbound: jsii.Boolean(false),\n\t // if this is `true` then no egress rule will be created\n\tvpc: vpc,\n})\n\n// `connections.allowFrom` on `sg2` since we want the\n// rules to be created in Stack2\nsg2.connections.allowFrom(sg1, ec2.port.tcp(jsii.Number(3333)))",
          "version": "1"
        },
        "$": {
          "source": "// Stack 1\ndeclare const stack1: Stack;\ndeclare const stack2: Stack;\n\nconst sg1 = new ec2.SecurityGroup(stack1, 'SG1', {\n  allowAllOutbound: false, // if this is `true` then no egress rule will be created\n  vpc,\n});\n\n// Stack 2\nconst sg2 = new ec2.SecurityGroup(stack2, 'SG2', {\n  allowAllOutbound: false, // if this is `true` then no egress rule will be created\n  vpc,\n});\n\n\n// `connections.allowFrom` on `sg2` since we want the\n// rules to be created in Stack2\nsg2.connections.allowFrom(sg1, ec2.Port.tcp(3333));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 701
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Stack 1\ndeclare const stack1: Stack;\ndeclare const stack2: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst sg1 = new ec2.SecurityGroup(stack1, 'SG1', {\n  allowAllOutbound: false, // if this is `true` then no egress rule will be created\n  vpc,\n});\n\n// Stack 2\nconst sg2 = new ec2.SecurityGroup(stack2, 'SG2', {\n  allowAllOutbound: false, // if this is `true` then no egress rule will be created\n  vpc,\n});\n\n\n// `connections.allowFrom` on `sg2` since we want the\n// rules to be created in Stack2\nsg2.connections.allowFrom(sg1, ec2.Port.tcp(3333));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 23,
        "91": 2,
        "130": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "d86c51c7632bd35906e6f03b945498ef1ad00b2b737ef4bfdf4a32b8a13f7f08"
    },
    "3f59e1ffc824411f23988f4f15eeb8b14e38ead0a81570e98fdcd66b450a22d7": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 734
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    },
    "576d20a2ddf300de16a4eddffff812bcd9c5ea302a173b727918e1105b4a10e8": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"MyVpc\",\n    vpn_connections={\n        \"dynamic\": ec2.VpnConnectionOptions( # Dynamic routing (BGP)\n            ip=\"1.2.3.4\"),\n        \"static\": ec2.VpnConnectionOptions( # Static routing\n            ip=\"4.5.6.7\",\n            static_routes=[\"192.168.10.0/24\", \"192.168.20.0/24\"\n            ])\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    VpnConnections = new Dictionary<string, VpnConnectionOptions> {\n        { \"dynamic\", new VpnConnectionOptions {  // Dynamic routing (BGP)\n            Ip = \"1.2.3.4\" } },\n        { \"static\", new VpnConnectionOptions {  // Static routing\n            Ip = \"4.5.6.7\",\n            StaticRoutes = new [] { \"192.168.10.0/24\", \"192.168.20.0/24\" } } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .vpnConnections(Map.of(\n                \"dynamic\", VpnConnectionOptions.builder() // Dynamic routing (BGP)\n                        .ip(\"1.2.3.4\").build(),\n                \"static\", VpnConnectionOptions.builder() // Static routing\n                        .ip(\"4.5.6.7\")\n                        .staticRoutes(List.of(\"192.168.10.0/24\", \"192.168.20.0/24\")).build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tvpnConnections: map[string]vpnConnectionOptions{\n\t\t\"dynamic\": &vpnConnectionOptions{\n\t\t\t // Dynamic routing (BGP)\n\t\t\t\"ip\": jsii.String(\"1.2.3.4\"),\n\t\t},\n\t\t\"static\": &vpnConnectionOptions{\n\t\t\t // Static routing\n\t\t\t\"ip\": jsii.String(\"4.5.6.7\"),\n\t\t\t\"staticRoutes\": []*string{\n\t\t\t\tjsii.String(\"192.168.10.0/24\"),\n\t\t\t\tjsii.String(\"192.168.20.0/24\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnConnections: {\n    dynamic: { // Dynamic routing (BGP)\n      ip: '1.2.3.4'\n    },\n    static: { // Static routing\n      ip: '4.5.6.7',\n      staticRoutes: [\n        '192.168.10.0/24',\n        '192.168.20.0/24'\n      ]\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 794
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ec2.VpnConnectionOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnConnections: {\n    dynamic: { // Dynamic routing (BGP)\n      ip: '1.2.3.4'\n    },\n    static: { // Static routing\n      ip: '4.5.6.7',\n      staticRoutes: [\n        '192.168.10.0/24',\n        '192.168.20.0/24'\n      ]\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "47479064a5422c7120a9e1a2f3af4f8df164aa0773f6cfdd70ec88780c9a2d51"
    },
    "048dbdb788df298666d4c1ed4acd6fc3238aa38cfe9632df51be0c41cb7f1b1a": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"MyVpc\",\n    vpn_gateway=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    VpnGateway = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .vpnGateway(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tvpnGateway: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnGateway: true\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 813
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnGateway: true\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "2d50df467b6cef7206d75fe0ee4bcfb2d940db662e268ac064bef29729318c25"
    },
    "0d9bb239cf5eb10373b5fe12d9a497362e19fc02a168b571a251deef3135eb43": {
      "translations": {
        "python": {
          "source": "vpc.add_vpn_connection(\"Dynamic\",\n    ip=\"1.2.3.4\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "vpc.AddVpnConnection(\"Dynamic\", new VpnConnectionOptions {\n    Ip = \"1.2.3.4\"\n});",
          "version": "1"
        },
        "java": {
          "source": "vpc.addVpnConnection(\"Dynamic\", VpnConnectionOptions.builder()\n        .ip(\"1.2.3.4\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc.addVpnConnection(jsii.String(\"Dynamic\"), &vpnConnectionOptions{\n\tip: jsii.String(\"1.2.3.4\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 821
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpnConnectionOptions"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nvpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "193": 1,
        "194": 1,
        "196": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "5676db38e98317e6c412cec456407a62f613f99b0e5e8cee486c5568d81f9688"
    },
    "f4145bf5a8a25230fd1154f77da001af44cde0844572c31e2d3008b717264628": {
      "translations": {
        "python": {
          "source": "# Across all tunnels in the account/region\nall_data_out = ec2.VpnConnection.metric_all_tunnel_data_out()\n\n# For a specific vpn connection\nvpn_connection = vpc.add_vpn_connection(\"Dynamic\",\n    ip=\"1.2.3.4\"\n)\nstate = vpn_connection.metric_tunnel_state()",
          "version": "2"
        },
        "csharp": {
          "source": "// Across all tunnels in the account/region\nMetric allDataOut = VpnConnection.MetricAllTunnelDataOut();\n\n// For a specific vpn connection\nVpnConnection vpnConnection = vpc.AddVpnConnection(\"Dynamic\", new VpnConnectionOptions {\n    Ip = \"1.2.3.4\"\n});\nMetric state = vpnConnection.MetricTunnelState();",
          "version": "1"
        },
        "java": {
          "source": "// Across all tunnels in the account/region\nMetric allDataOut = VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nVpnConnection vpnConnection = vpc.addVpnConnection(\"Dynamic\", VpnConnectionOptions.builder()\n        .ip(\"1.2.3.4\")\n        .build());\nMetric state = vpnConnection.metricTunnelState();",
          "version": "1"
        },
        "go": {
          "source": "// Across all tunnels in the account/region\nallDataOut := ec2.vpnConnection.metricAllTunnelDataOut()\n\n// For a specific vpn connection\nvpnConnection := vpc.addVpnConnection(jsii.String(\"Dynamic\"), &vpnConnectionOptions{\n\tip: jsii.String(\"1.2.3.4\"),\n})\nstate := vpnConnection.metricTunnelState()",
          "version": "1"
        },
        "$": {
          "source": "// Across all tunnels in the account/region\nconst allDataOut = ec2.VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nconst vpnConnection = vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\nconst state = vpnConnection.metricTunnelState();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 833
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-ec2.VpnConnection",
        "@aws-cdk/aws-ec2.VpnConnection#metricAllTunnelDataOut",
        "@aws-cdk/aws-ec2.VpnConnectionOptions"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\n// Across all tunnels in the account/region\nconst allDataOut = ec2.VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nconst vpnConnection = vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\nconst state = vpnConnection.metricTunnelState();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "193": 1,
        "194": 4,
        "196": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "e3f0f68b09fd9c20f8a027bfaa0b29b4a0a0f820f18ce6d423b1b19fcf9949a1"
    },
    "f6e24b88e8d822f5752e714d63ee67db42d308daa0ce55b026839cd6b9ffb804": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Add gateway endpoints when creating the VPC\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tgatewayEndpoints: map[string]gatewayVpcEndpointOptions{\n\t\t\"S3\": &gatewayVpcEndpointOptions{\n\t\t\t\"service\": ec2.GatewayVpcEndpointAwsService_S3(),\n\t\t},\n\t},\n})\n\n// Alternatively gateway endpoints can be added on the VPC\ndynamoDbEndpoint := vpc.addGatewayEndpoint(jsii.String(\"DynamoDbEndpoint\"), &gatewayVpcEndpointOptions{\n\tservice: ec2.gatewayVpcEndpointAwsService_DYNAMODB(),\n})\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\niam.NewPolicyStatement(&policyStatementProps{\n\t // Restrict to listing and describing tables\n\tprincipals: []iPrincipal{\n\t\tiam.NewAnyPrincipal(),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"dynamodb:DescribeTable\"),\n\t\tjsii.String(\"dynamodb:ListTables\"),\n\t},\n\tresources: []*string{\n\t\tjsii.String(\"*\"),\n\t},\n}))\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(jsii.String(\"EcrDockerEndpoint\"), &interfaceVpcEndpointOptions{\n\tservice: ec2.interfaceVpcEndpointAwsService_ECR_DOCKER(),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 850
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "f2f9dbba26ca3fc2a8da6ba310517358a9df46cb03efe72ee9b3dd66e97d3842"
    },
    "096c6d476a6c32741770c6de0b7a689fbb20f86d279c179256af17e0e318d760": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nec2.NewInterfaceVpcEndpoint(this, jsii.String(\"VPC Endpoint\"), &interfaceVpcEndpointProps{\n\tvpc: vpc,\n\tservice: ec2.NewInterfaceVpcEndpointService(jsii.String(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\"), jsii.Number(443)),\n\t// Choose which availability zones to place the VPC endpoint in, based on\n\t// available AZs\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"us-east-1a\"),\n\t\t\tjsii.String(\"us-east-1c\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 886
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9100872ba4e916fe16d1281ceeba9234452cd6f44e213c524206066977c58c3e"
    },
    "5534739902ef3642be683bca82b89eee91c7a638c56cef246f076bd01e8e99cb": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    lookup_supported_azs=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    LookupSupportedAzs = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .lookupSupportedAzs(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nec2.NewInterfaceVpcEndpoint(this, jsii.String(\"VPC Endpoint\"), &interfaceVpcEndpointProps{\n\tvpc: vpc,\n\tservice: ec2.NewInterfaceVpcEndpointService(jsii.String(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\"), jsii.Number(443)),\n\t// Choose which availability zones to place the VPC endpoint in, based on\n\t// available AZs\n\tlookupSupportedAzs: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  lookupSupportedAzs: true\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 905
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  lookupSupportedAzs: true\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 10,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "23731b56b2d4d4c11a9dc045ad08225aeb6ef82ee410adecbab99ca426adc11e"
    },
    "93aabcab3cfc2975beaea130327a8be14aae36f66e693ce57f2e4a6a5d305431": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointAwsService.KEYSPACES\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = InterfaceVpcEndpointAwsService.KEYSPACES\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(InterfaceVpcEndpointAwsService.KEYSPACES)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nec2.NewInterfaceVpcEndpoint(this, jsii.String(\"VPC Endpoint\"), &interfaceVpcEndpointProps{\n\tvpc: vpc,\n\tservice: ec2.interfaceVpcEndpointAwsService_KEYSPACES(),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: ec2.InterfaceVpcEndpointAwsService.KEYSPACES,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 921
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#KEYSPACES",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: ec2.InterfaceVpcEndpointAwsService.KEYSPACES,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "01c2cfd72c5c60c300a3fa114faf7d31dde19e7d7c117b2f906cc0fb61fd17af"
    },
    "8b832ee0ce3275c0c5a52dc020b39fcf09065e3d36a6097c7ddc54f2657b7280": {
      "translations": {
        "python": {
          "source": "# my_endpoint: ec2.InterfaceVpcEndpoint\n\n\nmy_endpoint.connections.allow_default_port_from_any_ipv4()",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceVpcEndpoint myEndpoint;\n\n\nmyEndpoint.Connections.AllowDefaultPortFromAnyIpv4();",
          "version": "1"
        },
        "java": {
          "source": "InterfaceVpcEndpoint myEndpoint;\n\n\nmyEndpoint.connections.allowDefaultPortFromAnyIpv4();",
          "version": "1"
        },
        "go": {
          "source": "var myEndpoint interfaceVpcEndpoint\n\nmyEndpoint.connections.allowDefaultPortFromAnyIpv4()",
          "version": "1"
        },
        "$": {
          "source": "declare const myEndpoint: ec2.InterfaceVpcEndpoint;\n\nmyEndpoint.connections.allowDefaultPortFromAnyIpv4();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 937
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint#connections"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myEndpoint: ec2.InterfaceVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmyEndpoint.connections.allowDefaultPortFromAnyIpv4();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "af4567ff87c576ea5e7f2ff803ee95a40b892f6053b5f8532acbda661b511b20"
    },
    "f689ceee1f1e839b96153db02907dbde62417336f34916fef98be3058f32683a": {
      "translations": {
        "python": {
          "source": "# network_load_balancer1: elbv2.NetworkLoadBalancer\n# network_load_balancer2: elbv2.NetworkLoadBalancer\n\n\nec2.VpcEndpointService(self, \"EndpointService\",\n    vpc_endpoint_service_load_balancers=[network_load_balancer1, network_load_balancer2],\n    acceptance_required=True,\n    allowed_principals=[iam.ArnPrincipal(\"arn:aws:iam::123456789012:root\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nnew VpcEndpointService(this, \"EndpointService\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { networkLoadBalancer1, networkLoadBalancer2 },\n    AcceptanceRequired = true,\n    AllowedPrincipals = new [] { new ArnPrincipal(\"arn:aws:iam::123456789012:root\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nVpcEndpointService.Builder.create(this, \"EndpointService\")\n        .vpcEndpointServiceLoadBalancers(List.of(networkLoadBalancer1, networkLoadBalancer2))\n        .acceptanceRequired(true)\n        .allowedPrincipals(List.of(new ArnPrincipal(\"arn:aws:iam::123456789012:root\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var networkLoadBalancer1 networkLoadBalancer\nvar networkLoadBalancer2 networkLoadBalancer\n\nec2.NewVpcEndpointService(this, jsii.String(\"EndpointService\"), &vpcEndpointServiceProps{\n\tvpcEndpointServiceLoadBalancers: []iVpcEndpointServiceLoadBalancer{\n\t\tnetworkLoadBalancer1,\n\t\tnetworkLoadBalancer2,\n\t},\n\tacceptanceRequired: jsii.Boolean(true),\n\tallowedPrincipals: []arnPrincipal{\n\t\tiam.NewArnPrincipal(jsii.String(\"arn:aws:iam::123456789012:root\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 949
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-iam.ArnPrincipal",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "217df103b1608c2006e3875bd15ea87432079d0f44794235e163617cf8c9e93b"
    },
    "0c889c751d999fa1a59aff978ac8bffe310924b5f060393467caab5dad4eaaaf": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_route53 import HostedZone, VpcEndpointServiceDomainName\n# zone: HostedZone\n# vpces: ec2.VpcEndpointService\n\n\nVpcEndpointServiceDomainName(self, \"EndpointDomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nnew VpcEndpointServiceDomainName(this, \"EndpointDomain\", new VpcEndpointServiceDomainNameProps {\n    EndpointService = vpces,\n    DomainName = \"my-stuff.aws-cdk.dev\",\n    PublicHostedZone = zone\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.HostedZone;\nimport software.amazon.awscdk.services.route53.VpcEndpointServiceDomainName;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nVpcEndpointServiceDomainName.Builder.create(this, \"EndpointDomain\")\n        .endpointService(vpces)\n        .domainName(\"my-stuff.aws-cdk.dev\")\n        .publicHostedZone(zone)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkawsroute53 \"github.com/aws-samples/dummy/awscdkawsroute53\"type HostedZone awscdkawsroute53.HostedZone\ntype VpcEndpointServiceDomainName awscdkawsroute53.VpcEndpointServiceDomainName\nvar zone hostedZone\nvar vpces vpcEndpointService\n\nNewVpcEndpointServiceDomainName(this, jsii.String(\"EndpointDomain\"), &vpcEndpointServiceDomainNameProps{\n\tendpointService: vpces,\n\tdomainName: jsii.String(\"my-stuff.aws-cdk.dev\"),\n\tpublicHostedZone: zone,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 963
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpcEndpointService",
        "@aws-cdk/aws-route53.IPublicHostedZone",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainName",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "130": 2,
        "153": 1,
        "169": 2,
        "193": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "756f4b946587326915bcb12cdab0a4fbc13b6c36d73bc0dcacb57b867d4bda03"
    },
    "49e768404635257c5280c0ed49583fd72e70467719e6777a3d03e2f0750eb620": {
      "translations": {
        "python": {
          "source": "vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    # Mutual authentication\n    client_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id\",\n    # User-based authentication\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    // Mutual authentication\n    ClientCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id\",\n    // User-based authentication\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider)\n});",
          "version": "1"
        },
        "java": {
          "source": "vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        // Mutual authentication\n        .clientCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id\")\n        // User-based authentication\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\t// Mutual authentication\n\tclientCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id\"),\n\t// User-based authentication\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n})",
          "version": "1"
        },
        "$": {
          "source": "vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  // Mutual authentication\n  clientCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id',\n  // User-based authentication\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 987
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nvpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  // Mutual authentication\n  clientCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id',\n  // User-based authentication\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "193": 1,
        "194": 3,
        "196": 2,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "eb0e101106cbc19fc1c597d0e9ee0de9e84a98967aec677a761f86d4eb404382"
    },
    "e01e80210cc88cbe0e570469a8af61fec8cfaf5c86793ac7344a606b2b08b5fa": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "endpoint := vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n\tauthorizeAllUsersToVpcCidr: jsii.Boolean(false),\n})\n\nendpoint.addAuthorizationRule(jsii.String(\"Rule\"), &clientVpnAuthorizationRuleOptions{\n\tcidr: jsii.String(\"10.0.10.0/32\"),\n\tgroupId: jsii.String(\"group-id\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1012
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "0156f3186a7e24a15f2785981fbbbe6987714064ff2d8ab4d33846a0d089ab36"
    },
    "0f92107c2c71a61182cd35529a0a730fbea319bd6973b04357e0b3893b34aae6": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider)\n)\n\n# Client-to-client access\nendpoint.add_route(\"Route\",\n    cidr=\"10.100.0.0/16\",\n    target=ec2.ClientVpnRouteTarget.local()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider)\n});\n\n// Client-to-client access\nendpoint.AddRoute(\"Route\", new ClientVpnRouteOptions {\n    Cidr = \"10.100.0.0/16\",\n    Target = ClientVpnRouteTarget.Local()\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .build());\n\n// Client-to-client access\nendpoint.addRoute(\"Route\", ClientVpnRouteOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .target(ClientVpnRouteTarget.local())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "endpoint := vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n})\n\n// Client-to-client access\nendpoint.addRoute(jsii.String(\"Route\"), &clientVpnRouteOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\ttarget: ec2.clientVpnRouteTarget.local(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1028
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addRoute",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget#local",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 17,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "4373e8618890c0ec9e163529e0d7ca52f16951f6700d94d12997d3017a3d586c"
    },
    "52e7924d06d183f621401431930186dc21e449f4da22797e07319d9021e7b950": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n\n\n# AWS Linux\nec2.Instance(self, \"Instance1\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage()\n)\n\n# AWS Linux 2\nec2.Instance(self, \"Instance2\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage(\n        generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n    )\n)\n\n# AWS Linux 2 with kernel 5.x\nec2.Instance(self, \"Instance3\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage(\n        generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n        kernel=ec2.AmazonLinuxKernel.KERNEL5_X\n    )\n)\n\n# AWS Linux 2022\nec2.Instance(self, \"Instance4\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage(\n        generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2022\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\n\n\n// AWS Linux\n// AWS Linux\nnew Instance(this, \"Instance1\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage()\n});\n\n// AWS Linux 2\n// AWS Linux 2\nnew Instance(this, \"Instance2\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage(new AmazonLinuxImageProps {\n        Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n    })\n});\n\n// AWS Linux 2 with kernel 5.x\n// AWS Linux 2 with kernel 5.x\nnew Instance(this, \"Instance3\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage(new AmazonLinuxImageProps {\n        Generation = AmazonLinuxGeneration.AMAZON_LINUX_2,\n        Kernel = AmazonLinuxKernel.KERNEL5_X\n    })\n});\n\n// AWS Linux 2022\n// AWS Linux 2022\nnew Instance(this, \"Instance4\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage(new AmazonLinuxImageProps {\n        Generation = AmazonLinuxGeneration.AMAZON_LINUX_2022\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\n\n\n// AWS Linux\n// AWS Linux\nInstance.Builder.create(this, \"Instance1\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(new AmazonLinuxImage())\n        .build();\n\n// AWS Linux 2\n// AWS Linux 2\nInstance.Builder.create(this, \"Instance2\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(AmazonLinuxImage.Builder.create()\n                .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                .build())\n        .build();\n\n// AWS Linux 2 with kernel 5.x\n// AWS Linux 2 with kernel 5.x\nInstance.Builder.create(this, \"Instance3\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(AmazonLinuxImage.Builder.create()\n                .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                .kernel(AmazonLinuxKernel.KERNEL5_X)\n                .build())\n        .build();\n\n// AWS Linux 2022\n// AWS Linux 2022\nInstance.Builder.create(this, \"Instance4\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(AmazonLinuxImage.Builder.create()\n                .generation(AmazonLinuxGeneration.AMAZON_LINUX_2022)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\n\n// AWS Linux\n// AWS Linux\nec2.NewInstance(this, jsii.String(\"Instance1\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(),\n})\n\n// AWS Linux 2\n// AWS Linux 2\nec2.NewInstance(this, jsii.String(\"Instance2\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\t\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX_2,\n\t}),\n})\n\n// AWS Linux 2 with kernel 5.x\n// AWS Linux 2 with kernel 5.x\nec2.NewInstance(this, jsii.String(\"Instance3\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\t\tgeneration: ec2.*amazonLinuxGeneration_AMAZON_LINUX_2,\n\t\tkernel: ec2.amazonLinuxKernel_KERNEL5_X,\n\t}),\n})\n\n// AWS Linux 2022\n// AWS Linux 2022\nec2.NewInstance(this, jsii.String(\"Instance4\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\t\tgeneration: ec2.*amazonLinuxGeneration_AMAZON_LINUX_2022,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\n\n// AWS Linux\nnew ec2.Instance(this, 'Instance1', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage(),\n});\n\n// AWS Linux 2\nnew ec2.Instance(this, 'Instance2', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n  }),\n});\n\n// AWS Linux 2 with kernel 5.x\nnew ec2.Instance(this, 'Instance3', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    kernel: ec2.AmazonLinuxKernel.KERNEL5_X,\n  }),\n});\n\n// AWS Linux 2022\nnew ec2.Instance(this, 'Instance4', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2022,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1050
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2022",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxKernel",
        "@aws-cdk/aws-ec2.AmazonLinuxKernel#KERNEL5_X",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// AWS Linux\nnew ec2.Instance(this, 'Instance1', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage(),\n});\n\n// AWS Linux 2\nnew ec2.Instance(this, 'Instance2', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n  }),\n});\n\n// AWS Linux 2 with kernel 5.x\nnew ec2.Instance(this, 'Instance3', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    kernel: ec2.AmazonLinuxKernel.KERNEL5_X,\n  }),\n});\n\n// AWS Linux 2022\nnew ec2.Instance(this, 'Instance4', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2022,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 50,
        "104": 4,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 7,
        "194": 16,
        "197": 8,
        "225": 2,
        "226": 4,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 8,
        "290": 1
      },
      "fqnsFingerprint": "652223447479399c6a93203ba5533722d422b08ade0f618cdd546e2bc1d2713a"
    },
    "39d64cc5dabdf53f46c2eb07b4be04b70ef7fc40deb2357139234d16b07bfd33": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// Showing the most complex setup, if you have simpler requirements\n\t// you can use `CloudFormationInit.fromElements()`.\n\tinit: ec2.cloudFormationInit.fromConfigSets(&configSetProps{\n\t\tconfigSets: map[string][]*string{\n\t\t\t// Applies the configs below in this order\n\t\t\t\"default\": []*string{\n\t\t\t\tjsii.String(\"yumPreinstall\"),\n\t\t\t\tjsii.String(\"config\"),\n\t\t\t},\n\t\t},\n\t\tconfigs: map[string]initConfig{\n\t\t\t\"yumPreinstall\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitPackage.yum(jsii.String(\"git\")),\n\t\t\t}),\n\t\t\t\"config\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitFile.fromObject(jsii.String(\"/etc/stack.json\"), map[string]interface{}{\n\t\t\t\t\t\"stackId\": *stack.of(this).stackId,\n\t\t\t\t\t\"stackName\": *stack.of(this).stackName,\n\t\t\t\t\t\"region\": *stack.of(this).region,\n\t\t\t\t}),\n\t\t\t\tec2.InitGroup.fromName(jsii.String(\"my-group\")),\n\t\t\t\tec2.InitUser.fromName(jsii.String(\"my-user\")),\n\t\t\t\tec2.InitPackage.rpm(jsii.String(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")),\n\t\t\t}),\n\t\t},\n\t}),\n\tinitOptions: &applyCloudFormationInitOptions{\n\t\t// Optional, which configsets to activate (['default'] by default)\n\t\tconfigSets: []*string{\n\t\t\tjsii.String(\"default\"),\n\t\t},\n\n\t\t// Optional, how long the installation is expected to take (5 minutes by default)\n\t\ttimeout: duration.minutes(jsii.Number(30)),\n\n\t\t// Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeUrl: jsii.Boolean(true),\n\n\t\t// Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeRole: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1101
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e09877ee77c7133a1ded3fbcac431c014557be3ac85f628eb43b417156d12366"
    },
    "15a9db68f9cee341daee5187a575489e3cdea109ab0cc92c25bd055f6e391042": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1162
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "f24037cb1da4053a5fe705e2dc058f0ff91722cebb6b019328f49a3778fa0b89": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\", vpc=vpc)",
          "version": "2"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps { Vpc = vpc });",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\").vpc(vpc).build();",
          "version": "1"
        },
        "go": {
          "source": "host := ec2.NewBastionHostLinux(this, jsii.String(\"BastionHost\"), &bastionHostLinuxProps{\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', { vpc });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1184
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.IVpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', { vpc });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "282": 1
      },
      "fqnsFingerprint": "e104216349c62d0884441f88712a122b313ad21e7fab10e9233abf9692cefdc1"
    },
    "516753d2283eeea869a0c8d1b824a1e1d1c45bcd3e179468853468100491ab84": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\nhost.allow_ssh_access_from(ec2.Peer.ipv4(\"1.2.3.4/32\"))",
          "version": "2"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\nhost.AllowSshAccessFrom(Peer.Ipv4(\"1.2.3.4/32\"));",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build();\nhost.allowSshAccessFrom(Peer.ipv4(\"1.2.3.4/32\"));",
          "version": "1"
        },
        "go": {
          "source": "host := ec2.NewBastionHostLinux(this, jsii.String(\"BastionHost\"), &bastionHostLinuxProps{\n\tvpc: vpc,\n\tsubnetSelection: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\nhost.allowSshAccessFrom(ec2.peer.ipv4(jsii.String(\"1.2.3.4/32\")))",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PUBLIC },\n});\nhost.allowSshAccessFrom(ec2.Peer.ipv4('1.2.3.4/32'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1190
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinux#allowSshAccessFrom",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PUBLIC },\n});\nhost.allowSshAccessFrom(ec2.Peer.ipv4('1.2.3.4/32'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "7e431bc2dc73d57218bcb232e551450d9e2226f829f09871539aab4c8cbe0ecc"
    },
    "9d48ef35aeb3a8c6b96447bbea78b1ddc981b090d5ffeea4185c5e6805c9c656": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "host := ec2.NewBastionHostLinux(this, jsii.String(\"BastionHost\"), &bastionHostLinuxProps{\n\tvpc: vpc,\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"EBSBastionHost\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(10), &ebsDeviceOptions{\n\t\t\t\tencrypted: jsii.Boolean(true),\n\t\t\t}),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1203
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "03454ad0bbec338997a56a0ad76eca2348841701fcd0c65e155140df3bd8e281"
    },
    "38a1766c02cb2b1b91a6dd8c2dfd7f017921f51ff3740ed7ce686c8ee054339b": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.BlockDevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.BlockDeviceVolume.ebs(50)\n    ), ec2.BlockDevice(\n        device_name=\"/dev/sdm\",\n        volume=ec2.BlockDeviceVolume.ebs(100)\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"/dev/sda1\",\n        Volume = BlockDeviceVolume.Ebs(50)\n    }, new BlockDevice {\n        DeviceName = \"/dev/sdm\",\n        Volume = BlockDeviceVolume.Ebs(100)\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"/dev/sda1\")\n                .volume(BlockDeviceVolume.ebs(50))\n                .build(), BlockDevice.builder()\n                .deviceName(\"/dev/sdm\")\n                .volume(BlockDeviceVolume.ebs(100))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// ...\n\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sda1\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(50)),\n\t\t},\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sdm\"),\n\t\t\tvolume: ec2.*blockDeviceVolume.ebs(jsii.Number(100)),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1221
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62a8c742c24849e1e99019c80132de13323c25d4f04e2ef136549bfaf1e84bf6"
    },
    "7dc5e6f4cecaf6348c5fcb30ea4da8aa8ca3ae9645d7dd417770d235808296a7": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_kms import Key\n\n# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nkms_key = Key(self, \"KmsKey\")\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.BlockDevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.BlockDeviceVolume.ebs(50,\n            encrypted=True,\n            kms_key=kms_key\n        )\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KMS;\n\nVpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"/dev/sda1\",\n        Volume = BlockDeviceVolume.Ebs(50, new EbsDeviceOptions {\n            Encrypted = true,\n            KmsKey = kmsKey\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kms.Key;\n\nVpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"/dev/sda1\")\n                .volume(BlockDeviceVolume.ebs(50, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .kmsKey(kmsKey)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkawskms \"github.com/aws-samples/dummy/awscdkawskms\"type Key awscdkawskms.Key\n\nvar vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nkmsKey := NewKey(this, jsii.String(\"KmsKey\"))\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// ...\n\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sda1\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(50), &ebsDeviceOptions{\n\t\t\t\tencrypted: jsii.Boolean(true),\n\t\t\t\tkmsKey: kmsKey,\n\t\t\t}),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { Key } from '@aws-cdk/aws-kms';\n\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nconst kmsKey = new Key(this, 'KmsKey')\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50, {\n        encrypted: true,\n        kmsKey: kmsKey,\n      }),\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1249
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Key } from '@aws-cdk/aws-kms';\n\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst kmsKey = new Key(this, 'KmsKey')\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50, {\n        encrypted: true,\n        kmsKey: kmsKey,\n      }),\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 26,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "58db96fb86b8b41371858f4c4b4e09d09c7125da40a985c6b98cd63c39374af5"
    },
    "72c59996bbe799490530108e08396e9542575174571f081cbd8469c4457a8f33": {
      "translations": {
        "python": {
          "source": "# instance: ec2.Instance\n# role: iam.Role\n\n\nvolume = ec2.Volume(self, \"Volume\",\n    availability_zone=\"us-west-2a\",\n    size=Size.gibibytes(500),\n    encrypted=True\n)\n\nvolume.grant_attach_volume(role, [instance])",
          "version": "2"
        },
        "csharp": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = new Volume(this, \"Volume\", new VolumeProps {\n    AvailabilityZone = \"us-west-2a\",\n    Size = Size.Gibibytes(500),\n    Encrypted = true\n});\n\nvolume.GrantAttachVolume(role, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = Volume.Builder.create(this, \"Volume\")\n        .availabilityZone(\"us-west-2a\")\n        .size(Size.gibibytes(500))\n        .encrypted(true)\n        .build();\n\nvolume.grantAttachVolume(role, List.of(instance));",
          "version": "1"
        },
        "go": {
          "source": "var instance instance\nvar role role\n\nvolume := ec2.NewVolume(this, jsii.String(\"Volume\"), &volumeProps{\n\tavailabilityZone: jsii.String(\"us-west-2a\"),\n\tsize: size.gibibytes(jsii.Number(500)),\n\tencrypted: jsii.Boolean(true),\n})\n\nvolume.grantAttachVolume(role, []iInstance{\n\tinstance,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1286
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Volume",
        "@aws-cdk/aws-ec2.VolumeProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5870b82ddce091122d41ff84a3a5fdc3f245394683d47180a4b2c3d65d3051bd"
    },
    "f07076dd3fec04c0ff4cc15220b7a2f12a190c1fc5abcd27c1076a762def9c1b": {
      "translations": {
        "python": {
          "source": "# instance: ec2.Instance\n# volume: ec2.Volume\n\n\nattach_grant = volume.grant_attach_volume_by_resource_tag(instance.grant_principal, [instance])\ndetach_grant = volume.grant_detach_volume_by_resource_tag(instance.grant_principal, [instance])",
          "version": "2"
        },
        "csharp": {
          "source": "Instance instance;\nVolume volume;\n\n\nGrant attachGrant = volume.GrantAttachVolumeByResourceTag(instance.GrantPrincipal, new [] { instance });\nGrant detachGrant = volume.GrantDetachVolumeByResourceTag(instance.GrantPrincipal, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nVolume volume;\n\n\nGrant attachGrant = volume.grantAttachVolumeByResourceTag(instance.getGrantPrincipal(), List.of(instance));\nGrant detachGrant = volume.grantDetachVolumeByResourceTag(instance.getGrantPrincipal(), List.of(instance));",
          "version": "1"
        },
        "go": {
          "source": "var instance instance\nvar volume volume\n\nattachGrant := volume.grantAttachVolumeByResourceTag(instance.grantPrincipal, []construct{\n\tinstance,\n})\ndetachGrant := volume.grantDetachVolumeByResourceTag(instance.grantPrincipal, []construct{\n\tinstance,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n\nconst attachGrant = volume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst detachGrant = volume.grantDetachVolumeByResourceTag(instance.grantPrincipal, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1304
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Instance#grantPrincipal",
        "@aws-cdk/aws-iam.Grant",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst attachGrant = volume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst detachGrant = volume.grantDetachVolumeByResourceTag(instance.grantPrincipal, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "194": 4,
        "196": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "4412e7a916ca37a775babf35a2e7b52f211bfd6f3f4cb782b2a625a451114443"
    },
    "e6894d9afca35dc36ed528d22ed1c853532f1658e6f580d24b6048adc3f526dd": {
      "translations": {
        "python": {
          "source": "# instance: ec2.Instance\n# volume: ec2.Volume\n\n\nvolume.grant_attach_volume_by_resource_tag(instance.grant_principal, [instance])\ntarget_device = \"/dev/xvdz\"\ninstance.user_data.add_commands(\"TOKEN=$(curl -SsfX PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\")\", \"INSTANCE_ID=$(curl -SsfH \\\"X-aws-ec2-metadata-token: $TOKEN\\\" http://169.254.169.254/latest/meta-data/instance-id)\", f\"aws --region {Stack.of(this).region} ec2 attach-volume --volume-id {volume.volumeId} --instance-id $INSTANCE_ID --device {targetDevice}\", f\"while ! test -e {targetDevice}; do sleep 1; done\")",
          "version": "2"
        },
        "csharp": {
          "source": "Instance instance;\nVolume volume;\n\n\nvolume.GrantAttachVolumeByResourceTag(instance.GrantPrincipal, new [] { instance });\nstring targetDevice = \"/dev/xvdz\";\ninstance.UserData.AddCommands(\"TOKEN=$(curl -SsfX PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\")\", \"INSTANCE_ID=$(curl -SsfH \\\"X-aws-ec2-metadata-token: $TOKEN\\\" http://169.254.169.254/latest/meta-data/instance-id)\", $\"aws --region {Stack.of(this).region} ec2 attach-volume --volume-id {volume.volumeId} --instance-id $INSTANCE_ID --device {targetDevice}\", $\"while ! test -e {targetDevice}; do sleep 1; done\");",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nVolume volume;\n\n\nvolume.grantAttachVolumeByResourceTag(instance.getGrantPrincipal(), List.of(instance));\nString targetDevice = \"/dev/xvdz\";\ninstance.userData.addCommands(\"TOKEN=$(curl -SsfX PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\")\", \"INSTANCE_ID=$(curl -SsfH \\\"X-aws-ec2-metadata-token: $TOKEN\\\" http://169.254.169.254/latest/meta-data/instance-id)\", String.format(\"aws --region %s ec2 attach-volume --volume-id %s --instance-id $INSTANCE_ID --device %s\", Stack.of(this).getRegion(), volume.getVolumeId(), targetDevice), String.format(\"while ! test -e %s; do sleep 1; done\", targetDevice));",
          "version": "1"
        },
        "go": {
          "source": "var instance instance\nvar volume volume\n\nvolume.grantAttachVolumeByResourceTag(instance.grantPrincipal, []construct{\n\tinstance,\n})\ntargetDevice := \"/dev/xvdz\"\ninstance.userData.addCommands(jsii.String(\"TOKEN=$(curl -SsfX PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\")\"), jsii.String(\"INSTANCE_ID=$(curl -SsfH \\\"X-aws-ec2-metadata-token: $TOKEN\\\" http://169.254.169.254/latest/meta-data/instance-id)\"),\n// Attach the volume to /dev/xvdz\nfmt.Sprintf(\"aws --region %v ec2 attach-volume --volume-id %v --instance-id $INSTANCE_ID --device %v\", stack.of(this).region, volume.volumeId, targetDevice),\n// Wait until the volume has attached\nfmt.Sprintf(\"while ! test -e %v; do sleep 1; done\", targetDevice))",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n\nvolume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst targetDevice = '/dev/xvdz';\ninstance.userData.addCommands(\n  // Retrieve token for accessing EC2 instance metadata (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html)\n  `TOKEN=$(curl -SsfX PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")`,\n  // Retrieve the instance Id of the current EC2 instance\n  `INSTANCE_ID=$(curl -SsfH \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id)`,\n  // Attach the volume to /dev/xvdz\n  `aws --region ${Stack.of(this).region} ec2 attach-volume --volume-id ${volume.volumeId} --instance-id $INSTANCE_ID --device ${targetDevice}`,\n  // Wait until the volume has attached\n  `while ! test -e ${targetDevice}; do sleep 1; done`\n  // The volume will now be mounted. You may have to add additional code to format the volume if it has not been prepared.\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1321
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Instance#grantPrincipal",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nvolume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst targetDevice = '/dev/xvdz';\ninstance.userData.addCommands(\n  // Retrieve token for accessing EC2 instance metadata (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html)\n  `TOKEN=$(curl -SsfX PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")`,\n  // Retrieve the instance Id of the current EC2 instance\n  `INSTANCE_ID=$(curl -SsfH \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id)`,\n  // Attach the volume to /dev/xvdz\n  `aws --region ${Stack.of(this).region} ec2 attach-volume --volume-id ${volume.volumeId} --instance-id $INSTANCE_ID --device ${targetDevice}`,\n  // Wait until the volume has attached\n  `while ! test -e ${targetDevice}; do sleep 1; done`\n  // The volume will now be mounted. You may have to add additional code to format the volume if it has not been prepared.\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 2,
        "15": 2,
        "16": 2,
        "17": 2,
        "75": 22,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "194": 7,
        "196": 3,
        "211": 2,
        "221": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "057b9974de718044975fc0e55a9769f184a42ca181c27049249fb6522c2c1243"
    },
    "60a17e93a87e11b613cc6af71fd722c0dc72161371bc85588f67ee732f380564": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    machine_image=machine_image,\n    instance_type=instance_type,\n    propagate_tags_to_volume_on_creation=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    MachineImage = machineImage,\n    InstanceType = instanceType,\n    PropagateTagsToVolumeOnCreation = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .machineImage(machineImage)\n        .instanceType(instanceType)\n        .propagateTagsToVolumeOnCreation(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tmachineImage: machineImage,\n\tinstanceType: instanceType,\n\tpropagateTagsToVolumeOnCreation: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "  declare const vpc: ec2.Vpc;\n  declare const instanceType: ec2.InstanceType;\n  declare const machineImage: ec2.IMachineImage;\n\n  new ec2.Instance(this, 'Instance', {\n    vpc,\n    machineImage,\n    instanceType,\n    propagateTagsToVolumeOnCreation: true,\n  });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1344
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n  declare const vpc: ec2.Vpc;\n  declare const instanceType: ec2.InstanceType;\n  declare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n  new ec2.Instance(this, 'Instance', {\n    vpc,\n    machineImage,\n    instanceType,\n    propagateTagsToVolumeOnCreation: true,\n  });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "1dbc89cb5066836c15e3551c63c00e326141690ede830dd35f6f01f5e52bbe5e"
    },
    "f0d69225e3e515b742ee1edbfde5b3b861b5f8c6849a45556b28d28f27ff77f5": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    require_imdsv2=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    RequireImdsv2 = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .requireImdsv2(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// ...\n\n\trequireImdsv2: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  requireImdsv2: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1367
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  requireImdsv2: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "1dbc89cb5066836c15e3551c63c00e326141690ede830dd35f6f01f5e52bbe5e"
    },
    "a51e3e1393500bc84ce2fe35c664360c9dd12caaadd60cda14447da06d83d13a": {
      "translations": {
        "python": {
          "source": "aspect = ec2.InstanceRequireImdsv2Aspect()\nAspects.of(self).add(aspect)",
          "version": "2"
        },
        "csharp": {
          "source": "InstanceRequireImdsv2Aspect aspect = new InstanceRequireImdsv2Aspect();\nAspects.Of(this).Add(aspect);",
          "version": "1"
        },
        "java": {
          "source": "InstanceRequireImdsv2Aspect aspect = new InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);",
          "version": "1"
        },
        "go": {
          "source": "aspect := ec2.NewInstanceRequireImdsv2Aspect()\naspects.of(this).add(aspect)",
          "version": "1"
        },
        "$": {
          "source": "const aspect = new ec2.InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1388
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceRequireImdsv2Aspect",
        "@aws-cdk/core.Aspects#add",
        "@aws-cdk/core.Aspects#of",
        "@aws-cdk/core.IAspect",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst aspect = new ec2.InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "606ef34fecf9169354d00ceb09fb7481800af4172fd59c7db3948bfae42837e9"
    },
    "f1ab259ce0d91bc629cf6089f8e642799be5ad29d07c99c14083db3cfba72d77": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nec2.NewFlowLog(this, jsii.String(\"FlowLog\"), &flowLogProps{\n\tresourceType: ec2.flowLogResourceType.fromVpc(vpc),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc)\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1401
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc)\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d4767cccb80540c8b02f65ef4d7ee1484020df1bb1e221c2005b5c6d0d510202"
    },
    "2666df47cc83cb9ef061e8b4c650fb079d5939715f25c1b09a800e62b0cd9fbf": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\n\nvpc.add_flow_log(\"FlowLog\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.AddFlowLog(\"FlowLog\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.addFlowLog(\"FlowLog\");",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"Vpc\"))\n\nvpc.addFlowLog(jsii.String(\"FlowLog\"))",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLog');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1411
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLog');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "f193e678fc7a5b69a581eb61acead7e04f710cd6e47ec8799890ef03500965db"
    },
    "813da24b9412f68d82efff7bafda39b59d1a9531bcb277813010f75d48c72522": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\n\nvpc.add_flow_log(\"FlowLogS3\",\n    destination=ec2.FlowLogDestination.to_s3()\n)\n\nvpc.add_flow_log(\"FlowLogCloudWatch\",\n    traffic_type=ec2.FlowLogTrafficType.REJECT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.AddFlowLog(\"FlowLogS3\", new FlowLogOptions {\n    Destination = FlowLogDestination.ToS3()\n});\n\nvpc.AddFlowLog(\"FlowLogCloudWatch\", new FlowLogOptions {\n    TrafficType = FlowLogTrafficType.REJECT\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.addFlowLog(\"FlowLogS3\", FlowLogOptions.builder()\n        .destination(FlowLogDestination.toS3())\n        .build());\n\nvpc.addFlowLog(\"FlowLogCloudWatch\", FlowLogOptions.builder()\n        .trafficType(FlowLogTrafficType.REJECT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"Vpc\"))\n\nvpc.addFlowLog(jsii.String(\"FlowLogS3\"), &flowLogOptions{\n\tdestination: ec2.flowLogDestination.toS3(),\n})\n\nvpc.addFlowLog(jsii.String(\"FlowLogCloudWatch\"), &flowLogOptions{\n\ttrafficType: ec2.flowLogTrafficType_REJECT,\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1419
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toS3",
        "@aws-cdk/aws-ec2.FlowLogOptions",
        "@aws-cdk/aws-ec2.FlowLogTrafficType",
        "@aws-cdk/aws-ec2.FlowLogTrafficType#REJECT",
        "@aws-cdk/aws-ec2.Vpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b6da036125d677b39d7a3f85fa728bd579b3101821863f753c93fcd6afc8d1c3"
    },
    "6a50b35245cec582a4f1aca4fcd341d3b112f42587b9ce5766b90661a768f2f1": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyCustomLogGroup\"))\n\nrole := iam.NewRole(this, jsii.String(\"MyCustomRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"vpc-flow-logs.amazonaws.com\")),\n})\n\nec2.NewFlowLog(this, jsii.String(\"FlowLog\"), &flowLogProps{\n\tresourceType: ec2.flowLogResourceType.fromVpc(vpc),\n\tdestination: ec2.flowLogDestination.toCloudWatchLogs(logGroup, role),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1439
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8f628d6d42526bb9d4553494a8bb8fe99ccbf02698d035755c4b0de4a84136e1"
    },
    "f1c3ad55aab56a3044c63cd28fef50dadb9ae5827b4ce56af3b984bf23ddde9d": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nbucket = s3.Bucket(self, \"MyCustomBucket\")\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_s3(bucket)\n)\n\nec2.FlowLog(self, \"FlowLogWithKeyPrefix\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_s3(bucket, \"prefix/\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nBucket bucket = new Bucket(this, \"MyCustomBucket\");\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToS3(bucket)\n});\n\nnew FlowLog(this, \"FlowLogWithKeyPrefix\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToS3(bucket, \"prefix/\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nBucket bucket = new Bucket(this, \"MyCustomBucket\");\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toS3(bucket))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLogWithKeyPrefix\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toS3(bucket, \"prefix/\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nbucket := s3.NewBucket(this, jsii.String(\"MyCustomBucket\"))\n\nec2.NewFlowLog(this, jsii.String(\"FlowLog\"), &flowLogProps{\n\tresourceType: ec2.flowLogResourceType.fromVpc(vpc),\n\tdestination: ec2.flowLogDestination.toS3(bucket),\n})\n\nec2.NewFlowLog(this, jsii.String(\"FlowLogWithKeyPrefix\"), &flowLogProps{\n\tresourceType: ec2.*flowLogResourceType.fromVpc(vpc),\n\tdestination: ec2.*flowLogDestination.toS3(bucket, jsii.String(\"prefix/\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst bucket = new s3.Bucket(this, 'MyCustomBucket');\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toS3(bucket)\n});\n\nnew ec2.FlowLog(this, 'FlowLogWithKeyPrefix', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toS3(bucket, 'prefix/')\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1456
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toS3",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst bucket = new s3.Bucket(this, 'MyCustomBucket');\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toS3(bucket)\n});\n\nnew ec2.FlowLog(this, 'FlowLogWithKeyPrefix', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toS3(bucket, 'prefix/')\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 30,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d9bb219a577b33d0c78cef6dcac24496dc02ef29a87172d16c3fbdc453b872e9"
    },
    "aa453638bc453a1fd4350a73d249de1efbc3e0b7dacfac649135da6da9c05d37": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_s3_assets import Asset\n\n# instance: ec2.Instance\n\n\nasset = Asset(self, \"Asset\",\n    path=\"./configure.sh\"\n)\n\nlocal_path = instance.user_data.add_s3_download_command(\n    bucket=asset.bucket,\n    bucket_key=asset.s3_object_key,\n    region=\"us-east-1\"\n)\ninstance.user_data.add_execute_file_command(\n    file_path=local_path,\n    arguments=\"--verbose -y\"\n)\nasset.grant_read(instance.role)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nInstance instance;\n\n\nAsset asset = new Asset(this, \"Asset\", new AssetProps {\n    Path = \"./configure.sh\"\n});\n\nstring localPath = instance.UserData.AddS3DownloadCommand(new S3DownloadOptions {\n    Bucket = asset.Bucket,\n    BucketKey = asset.S3ObjectKey,\n    Region = \"us-east-1\"\n});\ninstance.UserData.AddExecuteFileCommand(new ExecuteFileOptions {\n    FilePath = localPath,\n    Arguments = \"--verbose -y\"\n});\nasset.GrantRead(instance.Role);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.Asset;\n\nInstance instance;\n\n\nAsset asset = Asset.Builder.create(this, \"Asset\")\n        .path(\"./configure.sh\")\n        .build();\n\nString localPath = instance.userData.addS3DownloadCommand(S3DownloadOptions.builder()\n        .bucket(asset.getBucket())\n        .bucketKey(asset.getS3ObjectKey())\n        .region(\"us-east-1\")\n        .build());\ninstance.userData.addExecuteFileCommand(ExecuteFileOptions.builder()\n        .filePath(localPath)\n        .arguments(\"--verbose -y\")\n        .build());\nasset.grantRead(instance.getRole());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkawss3assets \"github.com/aws-samples/dummy/awscdkawss3assets\"type Asset awscdkawss3assets.Asset\n\nvar instance instance\n\nasset := NewAsset(this, jsii.String(\"Asset\"), &assetProps{\n\tpath: jsii.String(\"./configure.sh\"),\n})\n\nlocalPath := instance.userData.addS3DownloadCommand(&s3DownloadOptions{\n\tbucket: asset.bucket,\n\tbucketKey: asset.s3ObjectKey,\n\tregion: jsii.String(\"us-east-1\"),\n})\ninstance.userData.addExecuteFileCommand(&executeFileOptions{\n\tfilePath: localPath,\n\targuments: jsii.String(\"--verbose -y\"),\n})\nasset.grantRead(instance.role)",
          "version": "1"
        },
        "$": {
          "source": "import { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1479
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ExecuteFileOptions",
        "@aws-cdk/aws-ec2.Instance#role",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.S3DownloadOptions",
        "@aws-cdk/aws-ec2.UserData#addExecuteFileCommand",
        "@aws-cdk/aws-ec2.UserData#addS3DownloadCommand",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.Asset#bucket",
        "@aws-cdk/aws-s3-assets.Asset#grantRead",
        "@aws-cdk/aws-s3-assets.Asset#s3ObjectKey",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "44fcc62eff0f5b60562b4e6eeff95e4d8404569f22eca6029f80e4db19728d4c"
    },
    "59a7ee93c59d03e6fc21c5a6923b25c408615d0f84f171f1ebafb74714ae0e76": {
      "translations": {
        "python": {
          "source": "boot_hook_conf = ec2.UserData.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.UserData.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\")\n\nmultipart_user_data = ec2.MultipartUserData()\n# The docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# Execute the rest of setup\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(setup_commands))\n\nec2.LaunchTemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UserData bootHookConf = UserData.ForLinux();\nbootHookConf.AddCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.ForLinux();\nsetupCommands.AddCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.AddPart(MultipartBody.FromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.AddPart(MultipartBody.FromUserData(setupCommands));\n\nnew LaunchTemplate(this, \"\", new LaunchTemplateProps {\n    UserData = multipartUserData,\n    BlockDevices = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserData bootHookConf = UserData.forLinux();\nbootHookConf.addCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.forLinux();\nsetupCommands.addCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(MultipartBody.fromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.addPart(MultipartBody.fromUserData(setupCommands));\n\nLaunchTemplate.Builder.create(this, \"\")\n        .userData(multipartUserData)\n        .blockDevices(List.of())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "bootHookConf := ec2.userData.forLinux()\nbootHookConf.addCommands(jsii.String(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\"))\n\nsetupCommands := ec2.userData.forLinux()\nsetupCommands.addCommands(jsii.String(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\"))\n\nmultipartUserData := ec2.NewMultipartUserData()\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.multipartBody.fromUserData(bootHookConf, jsii.String(\"text/cloud-boothook; charset=\\\"us-ascii\\\"\")))\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.multipartBody.fromUserData(setupCommands))\n\nec2.NewLaunchTemplate(this, jsii.String(\"\"), &launchTemplateProps{\n\tuserData: multipartUserData,\n\tblockDevices: []blockDevice{\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1520
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 32,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 14,
        "196": 8,
        "197": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "0dfa818b7cd80d44018159f4a0ac32318eeac68898ba108ba6245dce83a5c4ae"
    },
    "933eb7c2c20a765cfb8142b86af37eb0be72cf5c0a0ab8f2aaa2757675c08c96": {
      "translations": {
        "python": {
          "source": "multipart_user_data = ec2.MultipartUserData()\ncommands_user_data = ec2.UserData.for_linux()\nmultipart_user_data.add_user_data_part(commands_user_data, ec2.MultipartBody.SHELL_SCRIPT, True)\n\n# Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipart_user_data.add_commands(\"touch /root/multi.txt\")\ncommands_user_data.add_commands(\"touch /root/userdata.txt\")",
          "version": "2"
        },
        "csharp": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.ForLinux();\nmultipartUserData.AddUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.AddCommands(\"touch /root/multi.txt\");\ncommandsUserData.AddCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "java": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(\"touch /root/multi.txt\");\ncommandsUserData.addCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "go": {
          "source": "multipartUserData := ec2.NewMultipartUserData()\ncommandsUserData := ec2.userData.forLinux()\nmultipartUserData.addUserDataPart(commandsUserData, ec2.multipartBody_SHELL_SCRIPT(), jsii.Boolean(true))\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(jsii.String(\"touch /root/multi.txt\"))\ncommandsUserData.addCommands(jsii.String(\"touch /root/userdata.txt\"))",
          "version": "1"
        },
        "$": {
          "source": "const multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1550
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#SHELL_SCRIPT",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addCommands",
        "@aws-cdk/aws-ec2.MultipartUserData#addUserDataPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "106": 1,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "866b0cc018c530d1bb1bbccdd52239ee64b2957bbc050fa2a1315bf771624932"
    },
    "00e5605020c0f0545af466e0c0f7f224d1ef23241a637238b74e3d731332ea37": {
      "translations": {
        "python": {
          "source": "# Supply all properties\nsubnet1 = ec2.Subnet.from_subnet_attributes(self, \"SubnetFromAttributes\",\n    subnet_id=\"s-1234\",\n    availability_zone=\"pub-az-4465\",\n    route_table_id=\"rt-145\"\n)\n\n# Supply only subnet id\nsubnet2 = ec2.Subnet.from_subnet_id(self, \"SubnetFromId\", \"s-1234\")",
          "version": "2"
        },
        "csharp": {
          "source": "// Supply all properties\nISubnet subnet1 = Subnet.FromSubnetAttributes(this, \"SubnetFromAttributes\", new SubnetAttributes {\n    SubnetId = \"s-1234\",\n    AvailabilityZone = \"pub-az-4465\",\n    RouteTableId = \"rt-145\"\n});\n\n// Supply only subnet id\nISubnet subnet2 = Subnet.FromSubnetId(this, \"SubnetFromId\", \"s-1234\");",
          "version": "1"
        },
        "java": {
          "source": "// Supply all properties\nISubnet subnet1 = Subnet.fromSubnetAttributes(this, \"SubnetFromAttributes\", SubnetAttributes.builder()\n        .subnetId(\"s-1234\")\n        .availabilityZone(\"pub-az-4465\")\n        .routeTableId(\"rt-145\")\n        .build());\n\n// Supply only subnet id\nISubnet subnet2 = Subnet.fromSubnetId(this, \"SubnetFromId\", \"s-1234\");",
          "version": "1"
        },
        "go": {
          "source": "// Supply all properties\nsubnet1 := ec2.subnet.fromSubnetAttributes(this, jsii.String(\"SubnetFromAttributes\"), &subnetAttributes{\n\tsubnetId: jsii.String(\"s-1234\"),\n\tavailabilityZone: jsii.String(\"pub-az-4465\"),\n\trouteTableId: jsii.String(\"rt-145\"),\n})\n\n// Supply only subnet id\nsubnet2 := ec2.subnet.fromSubnetId(this, jsii.String(\"SubnetFromId\"), jsii.String(\"s-1234\"))",
          "version": "1"
        },
        "$": {
          "source": "// Supply all properties\nconst subnet1 = ec2.Subnet.fromSubnetAttributes(this, 'SubnetFromAttributes', {\n  subnetId: 's-1234',\n  availabilityZone: 'pub-az-4465',\n  routeTableId: 'rt-145'\n});\n\n// Supply only subnet id\nconst subnet2 = ec2.Subnet.fromSubnetId(this, 'SubnetFromId', 's-1234');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1572
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISubnet",
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetAttributes",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Supply all properties\nconst subnet1 = ec2.Subnet.fromSubnetAttributes(this, 'SubnetFromAttributes', {\n  subnetId: 's-1234',\n  availabilityZone: 'pub-az-4465',\n  routeTableId: 'rt-145'\n});\n\n// Supply only subnet id\nconst subnet2 = ec2.Subnet.fromSubnetId(this, 'SubnetFromId', 's-1234');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "6dd4bf896ce6fea3aa7ddde8ac1aedb06c7483d03b9e999bb83909bff54e9a9c"
    },
    "86455c4606d2cd74529306dfe922a82feaccb1604e8fad247f8bd3600d0d0a38": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ntemplate = ec2.LaunchTemplate(self, \"LaunchTemplate\",\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    security_group=ec2.SecurityGroup(self, \"LaunchTemplateSG\",\n        vpc=vpc\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = new LaunchTemplate(this, \"LaunchTemplate\", new LaunchTemplateProps {\n    MachineImage = MachineImage.LatestAmazonLinux(),\n    SecurityGroup = new SecurityGroup(this, \"LaunchTemplateSG\", new SecurityGroupProps {\n        Vpc = vpc\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = LaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .machineImage(MachineImage.latestAmazonLinux())\n        .securityGroup(SecurityGroup.Builder.create(this, \"LaunchTemplateSG\")\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ntemplate := ec2.NewLaunchTemplate(this, jsii.String(\"LaunchTemplate\"), &launchTemplateProps{\n\tmachineImage: ec2.machineImage.latestAmazonLinux(),\n\tsecurityGroup: ec2.NewSecurityGroup(this, jsii.String(\"LaunchTemplateSG\"), &securityGroupProps{\n\t\tvpc: vpc,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1594
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ab10bfe5d20c8a881b863eb1e6f4063a6015f3f41b73bb95e2a38c69da0d971b"
    },
    "7e20d5b16aeb74628e7d1c26aa3b66ba4b7f93981512b4001fe6bf3f15d56e15": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n\n\nec2.Instance(self, \"Instance1\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage(),\n    detailed_monitoring=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\n\n\nnew Instance(this, \"Instance1\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage(),\n    DetailedMonitoring = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\n\n\nInstance.Builder.create(this, \"Instance1\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(new AmazonLinuxImage())\n        .detailedMonitoring(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\n\nec2.NewInstance(this, jsii.String(\"Instance1\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(),\n\tdetailedMonitoring: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\n\nnew ec2.Instance(this, 'Instance1', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage(),\n  detailedMonitoring: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1609
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance1', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage(),\n  detailedMonitoring: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "3538f2dd0bebfdc8a8f5ea920f6d7bfc738106be89f9319b16adbeb046819179"
    },
    "8c48f58b16e848348a85a8eaba04b5921daa217f47cf85c677a67e5b24ead9fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nacl_cidr = ec2.AclCidr.any_ipv4()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclCidr aclCidr = AclCidr.AnyIpv4();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclCidr aclCidr = AclCidr.anyIpv4();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\naclCidr := ec2.aclCidr.anyIpv4()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst aclCidr = ec2.AclCidr.anyIpv4();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AclCidr"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclCidr",
        "@aws-cdk/aws-ec2.AclCidr#anyIpv4"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aclCidr = ec2.AclCidr.anyIpv4();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "252379e3c5630379a733e2609b71da578828ffb1d0abc21b7fef8a17a9f1c394"
    },
    "3889f0b1b061783530b2e7bd486e4b4eb2f8b9b0f3b791ac6c451685b8bd6173": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nacl_cidr_config = ec2.AclCidrConfig(\n    cidr_block=\"cidrBlock\",\n    ipv6_cidr_block=\"ipv6CidrBlock\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclCidrConfig aclCidrConfig = new AclCidrConfig {\n    CidrBlock = \"cidrBlock\",\n    Ipv6CidrBlock = \"ipv6CidrBlock\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclCidrConfig aclCidrConfig = AclCidrConfig.builder()\n        .cidrBlock(\"cidrBlock\")\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\naclCidrConfig := &aclCidrConfig{\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst aclCidrConfig: ec2.AclCidrConfig = {\n  cidrBlock: 'cidrBlock',\n  ipv6CidrBlock: 'ipv6CidrBlock',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AclCidrConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclCidrConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aclCidrConfig: ec2.AclCidrConfig = {\n  cidrBlock: 'cidrBlock',\n  ipv6CidrBlock: 'ipv6CidrBlock',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d85e5b9c69e155398ad0c8e3ffce02121ced503d4a875836e71f57c463b784fd"
    },
    "23369ef2a1aa7460f54cb483dc39fa0a0c7b606b74342a3b04f72ad14defc477": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nacl_icmp = ec2.AclIcmp(\n    code=123,\n    type=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclIcmp aclIcmp = new AclIcmp {\n    Code = 123,\n    Type = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclIcmp aclIcmp = AclIcmp.builder()\n        .code(123)\n        .type(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\naclIcmp := &aclIcmp{\n\tcode: jsii.Number(123),\n\ttype: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst aclIcmp: ec2.AclIcmp = {\n  code: 123,\n  type: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AclIcmp"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclIcmp"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aclIcmp: ec2.AclIcmp = {\n  code: 123,\n  type: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "453f5223a2b097dae35519da75f28b84478c324695676a9ad52e7041792adb82"
    },
    "030a8b7a6cdbd817a79541c467ef284fac5f51f248410e2b7771a75fd4374cbd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nacl_port_range = ec2.AclPortRange(\n    from=123,\n    to=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclPortRange aclPortRange = new AclPortRange {\n    From = 123,\n    To = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclPortRange aclPortRange = AclPortRange.builder()\n        .from(123)\n        .to(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\naclPortRange := &aclPortRange{\n\tfrom: jsii.Number(123),\n\tto: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst aclPortRange: ec2.AclPortRange = {\n  from: 123,\n  to: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AclPortRange"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclPortRange"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aclPortRange: ec2.AclPortRange = {\n  from: 123,\n  to: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f65bc96563a6fe08f973f1fd033c77aefa4135b7761aa2df503a39318df651f6"
    },
    "170f258164bdbcac18b8577cf9427368f211f0bde2f76f9e22cb01e01ff5bbb9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nacl_traffic = ec2.AclTraffic.all_traffic()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclTraffic aclTraffic = AclTraffic.AllTraffic();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclTraffic aclTraffic = AclTraffic.allTraffic();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\naclTraffic := ec2.aclTraffic.allTraffic()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst aclTraffic = ec2.AclTraffic.allTraffic();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AclTraffic"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclTraffic",
        "@aws-cdk/aws-ec2.AclTraffic#allTraffic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aclTraffic = ec2.AclTraffic.allTraffic();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "7fc387967019051eada7f57e426b4fc9f959f19195903a4a6f9b50dc79730b0c"
    },
    "1c4133676bad40047710e8b6bfb3f637b364d5502118d307d51cb2a1b91beab2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nacl_traffic_config = ec2.AclTrafficConfig(\n    protocol=123,\n\n    # the properties below are optional\n    icmp=ec2.AclIcmp(\n        code=123,\n        type=123\n    ),\n    port_range=ec2.AclPortRange(\n        from=123,\n        to=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclTrafficConfig aclTrafficConfig = new AclTrafficConfig {\n    Protocol = 123,\n\n    // the properties below are optional\n    Icmp = new AclIcmp {\n        Code = 123,\n        Type = 123\n    },\n    PortRange = new AclPortRange {\n        From = 123,\n        To = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclTrafficConfig aclTrafficConfig = AclTrafficConfig.builder()\n        .protocol(123)\n\n        // the properties below are optional\n        .icmp(AclIcmp.builder()\n                .code(123)\n                .type(123)\n                .build())\n        .portRange(AclPortRange.builder()\n                .from(123)\n                .to(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\naclTrafficConfig := &aclTrafficConfig{\n\tprotocol: jsii.Number(123),\n\n\t// the properties below are optional\n\ticmp: &aclIcmp{\n\t\tcode: jsii.Number(123),\n\t\ttype: jsii.Number(123),\n\t},\n\tportRange: &aclPortRange{\n\t\tfrom: jsii.Number(123),\n\t\tto: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst aclTrafficConfig: ec2.AclTrafficConfig = {\n  protocol: 123,\n\n  // the properties below are optional\n  icmp: {\n    code: 123,\n    type: 123,\n  },\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AclTrafficConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclIcmp",
        "@aws-cdk/aws-ec2.AclPortRange",
        "@aws-cdk/aws-ec2.AclTrafficConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aclTrafficConfig: ec2.AclTrafficConfig = {\n  protocol: 123,\n\n  // the properties below are optional\n  icmp: {\n    code: 123,\n    type: 123,\n  },\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 5,
        "10": 1,
        "75": 11,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "ba7f6966cae51e292d70d9b7a5c616fe1acceae8a69c6ecc3731d4f13861e485"
    },
    "44df5c2bfb58c9a1365cf6dcdc134a31bfafba2c447ecaeaf4f5bb07c41ce399": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"VPC\",\n    subnet_configuration=[ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.PUBLIC,\n        name=\"Public\"\n    ), ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.ISOLATED,\n        name=\"Isolated\"\n    )]\n)\n\n(vpc.isolated_subnets[0]).add_route(\"StaticRoute\",\n    router_id=vpc.internet_gateway_id,\n    router_type=ec2.RouterType.GATEWAY,\n    destination_cidr_block=\"8.8.8.8/32\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\", new VpcProps {\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        SubnetType = SubnetType.PUBLIC,\n        Name = \"Public\"\n    }, new SubnetConfiguration {\n        SubnetType = SubnetType.ISOLATED,\n        Name = \"Isolated\"\n    } }\n});\n\n((Subnet)vpc.IsolatedSubnets[0]).AddRoute(\"StaticRoute\", new AddRouteOptions {\n    RouterId = vpc.InternetGatewayId,\n    RouterType = RouterType.GATEWAY,\n    DestinationCidrBlock = \"8.8.8.8/32\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"VPC\")\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .name(\"Public\")\n                .build(), SubnetConfiguration.builder()\n                .subnetType(SubnetType.ISOLATED)\n                .name(\"Isolated\")\n                .build()))\n        .build();\n\n((Subnet)vpc.isolatedSubnets[0]).addRoute(\"StaticRoute\", AddRouteOptions.builder()\n        .routerId(vpc.getInternetGatewayId())\n        .routerType(RouterType.GATEWAY)\n        .destinationCidrBlock(\"8.8.8.8/32\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tsubnetConfiguration: []subnetConfiguration{\n\t\t&subnetConfiguration{\n\t\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t\t\tname: jsii.String(\"Public\"),\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tsubnetType: ec2.*subnetType_ISOLATED,\n\t\t\tname: jsii.String(\"Isolated\"),\n\t\t},\n\t},\n})\n\n(vpc.isolatedSubnets[0].(subnet)).addRoute(jsii.String(\"StaticRoute\"), &addRouteOptions{\n\trouterId: vpc.internetGatewayId,\n\trouterType: ec2.routerType_GATEWAY,\n\tdestinationCidrBlock: jsii.String(\"8.8.8.8/32\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AddRouteOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AddRouteOptions",
        "@aws-cdk/aws-ec2.RouterType",
        "@aws-cdk/aws-ec2.RouterType#GATEWAY",
        "@aws-cdk/aws-ec2.Subnet#addRoute",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#internetGatewayId",
        "@aws-cdk/aws-ec2.Vpc#isolatedSubnets",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 10,
        "195": 1,
        "196": 1,
        "197": 1,
        "200": 1,
        "217": 1,
        "218": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "c0dece50f85513d8ffd53d3c5e0214b0717c27a75490a255ffd9577f2fbfa36f"
    },
    "c219aa5f5434cd4da0c80049556d9859f0865fecca1acdcc439692ad1a8d9ebe": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxCpuType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    },
    "72f5496de68b2c655a39e56c24c8bcd527a15c55dbb4f397cf1d5ffd9d7184b4": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxEdition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    },
    "1a16365142c350a42e1eff4f573a84c76e49b79d5e640cd185a95cd5f97945e3": {
      "translations": {
        "python": {
          "source": "# Pick a Windows edition to use\nwindows = ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.AmazonLinuxImage(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\n\nlinux = ec2.GenericLinuxImage({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = new AmazonLinuxImage(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = AmazonLinuxImage.Builder.create()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .build();\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick a Windows edition to use\nwindows := ec2.NewWindowsImage(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nlinux := ec2.NewGenericLinuxImage(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxGeneration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.WindowsImage",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\n\n/// !show\n// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 28,
        "193": 2,
        "194": 13,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6
      },
      "fqnsFingerprint": "9a2c1598b6c15067ddbb0d3570f9e62b88067d3c8cd1575d3dcfccb5dabb0d95"
    },
    "bd04092def936101cbe348229c81c0f8e74d12cfed3111b2bd58b2a326fff4bd": {
      "translations": {
        "python": {
          "source": "# Pick a Windows edition to use\nwindows = ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.AmazonLinuxImage(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\n\nlinux = ec2.GenericLinuxImage({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = new AmazonLinuxImage(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = AmazonLinuxImage.Builder.create()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .build();\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick a Windows edition to use\nwindows := ec2.NewWindowsImage(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nlinux := ec2.NewGenericLinuxImage(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.WindowsImage",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\n\n/// !show\n// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 28,
        "193": 2,
        "194": 13,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6
      },
      "fqnsFingerprint": "9a2c1598b6c15067ddbb0d3570f9e62b88067d3c8cd1575d3dcfccb5dabb0d95"
    },
    "8ab41569b588871754d5c0c5c9a3fafa6aa571701989a33a7e2332b3e0e94300": {
      "translations": {
        "python": {
          "source": "sg = ec2.SecurityGroup.from_security_group_id(self, \"FsxSecurityGroup\", \"{SECURITY-GROUP-ID}\")\nfs = fsx.LustreFileSystem.from_lustre_file_system_attributes(self, \"FsxLustreFileSystem\",\n    dns_name=\"{FILE-SYSTEM-DNS-NAME}\",\n    file_system_id=\"{FILE-SYSTEM-ID}\",\n    security_group=sg\n)\n\nvpc = ec2.Vpc.from_vpc_attributes(self, \"Vpc\",\n    availability_zones=[\"us-west-2a\", \"us-west-2b\"],\n    public_subnet_ids=[\"{US-WEST-2A-SUBNET-ID}\", \"{US-WEST-2B-SUBNET-ID}\"],\n    vpc_id=\"{VPC-ID}\"\n)\n\ninst = ec2.Instance(self, \"inst\",\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n    machine_image=ec2.AmazonLinuxImage(\n        generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n    ),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    )\n)\n\nfs.connections.allow_default_port_from(inst)",
          "version": "2"
        },
        "csharp": {
          "source": "ISecurityGroup sg = SecurityGroup.FromSecurityGroupId(this, \"FsxSecurityGroup\", \"{SECURITY-GROUP-ID}\");\nIFileSystem fs = LustreFileSystem.FromLustreFileSystemAttributes(this, \"FsxLustreFileSystem\", new FileSystemAttributes {\n    DnsName = \"{FILE-SYSTEM-DNS-NAME}\",\n    FileSystemId = \"{FILE-SYSTEM-ID}\",\n    SecurityGroup = sg\n});\n\nIVpc vpc = Vpc.FromVpcAttributes(this, \"Vpc\", new VpcAttributes {\n    AvailabilityZones = new [] { \"us-west-2a\", \"us-west-2b\" },\n    PublicSubnetIds = new [] { \"{US-WEST-2A-SUBNET-ID}\", \"{US-WEST-2B-SUBNET-ID}\" },\n    VpcId = \"{VPC-ID}\"\n});\n\nInstance inst = new Instance(this, \"inst\", new InstanceProps {\n    InstanceType = InstanceType.Of(InstanceClass.T2, InstanceSize.LARGE),\n    MachineImage = new AmazonLinuxImage(new AmazonLinuxImageProps {\n        Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n    }),\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    }\n});\n\nfs.Connections.AllowDefaultPortFrom(inst);",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup sg = SecurityGroup.fromSecurityGroupId(this, \"FsxSecurityGroup\", \"{SECURITY-GROUP-ID}\");\nIFileSystem fs = LustreFileSystem.fromLustreFileSystemAttributes(this, \"FsxLustreFileSystem\", FileSystemAttributes.builder()\n        .dnsName(\"{FILE-SYSTEM-DNS-NAME}\")\n        .fileSystemId(\"{FILE-SYSTEM-ID}\")\n        .securityGroup(sg)\n        .build());\n\nIVpc vpc = Vpc.fromVpcAttributes(this, \"Vpc\", VpcAttributes.builder()\n        .availabilityZones(List.of(\"us-west-2a\", \"us-west-2b\"))\n        .publicSubnetIds(List.of(\"{US-WEST-2A-SUBNET-ID}\", \"{US-WEST-2B-SUBNET-ID}\"))\n        .vpcId(\"{VPC-ID}\")\n        .build());\n\nInstance inst = Instance.Builder.create(this, \"inst\")\n        .instanceType(InstanceType.of(InstanceClass.T2, InstanceSize.LARGE))\n        .machineImage(AmazonLinuxImage.Builder.create()\n                .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                .build())\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .build();\n\nfs.connections.allowDefaultPortFrom(inst);",
          "version": "1"
        },
        "go": {
          "source": "sg := ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"FsxSecurityGroup\"), jsii.String(\"{SECURITY-GROUP-ID}\"))\nfs := fsx.lustreFileSystem.fromLustreFileSystemAttributes(this, jsii.String(\"FsxLustreFileSystem\"), &fileSystemAttributes{\n\tdnsName: jsii.String(\"{FILE-SYSTEM-DNS-NAME}\"),\n\tfileSystemId: jsii.String(\"{FILE-SYSTEM-ID}\"),\n\tsecurityGroup: sg,\n})\n\nvpc := ec2.vpc.fromVpcAttributes(this, jsii.String(\"Vpc\"), &vpcAttributes{\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"us-west-2a\"),\n\t\tjsii.String(\"us-west-2b\"),\n\t},\n\tpublicSubnetIds: []*string{\n\t\tjsii.String(\"{US-WEST-2A-SUBNET-ID}\"),\n\t\tjsii.String(\"{US-WEST-2B-SUBNET-ID}\"),\n\t},\n\tvpcId: jsii.String(\"{VPC-ID}\"),\n})\n\ninst := ec2.NewInstance(this, jsii.String(\"inst\"), &instanceProps{\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_T2, ec2.instanceSize_LARGE),\n\tmachineImage: ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\t\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX_2,\n\t}),\n\tvpc: vpc,\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\nfs.connections.allowDefaultPortFrom(inst)",
          "version": "1"
        },
        "$": {
          "source": "const sg = ec2.SecurityGroup.fromSecurityGroupId(this, 'FsxSecurityGroup', '{SECURITY-GROUP-ID}');\nconst fs = fsx.LustreFileSystem.fromLustreFileSystemAttributes(this, 'FsxLustreFileSystem', {\n  dnsName: '{FILE-SYSTEM-DNS-NAME}',\n  fileSystemId: '{FILE-SYSTEM-ID}',\n  securityGroup: sg,\n});\n\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'Vpc', {\n  availabilityZones: ['us-west-2a', 'us-west-2b'],\n  publicSubnetIds: ['{US-WEST-2A-SUBNET-ID}', '{US-WEST-2B-SUBNET-ID}'],\n  vpcId: '{VPC-ID}',\n});\n\nconst inst = new ec2.Instance(this, 'inst', {\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n  }),\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n});\n\nfs.connections.allowDefaultPortFrom(inst);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IConnectable#connections",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#T2",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromVpcAttributes",
        "@aws-cdk/aws-ec2.VpcAttributes",
        "@aws-cdk/aws-fsx.FileSystemAttributes",
        "@aws-cdk/aws-fsx.IFileSystem",
        "@aws-cdk/aws-fsx.LustreFileSystem",
        "@aws-cdk/aws-fsx.LustreFileSystem#fromLustreFileSystemAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as fsx from '@aws-cdk/aws-fsx';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sg = ec2.SecurityGroup.fromSecurityGroupId(this, 'FsxSecurityGroup', '{SECURITY-GROUP-ID}');\nconst fs = fsx.LustreFileSystem.fromLustreFileSystemAttributes(this, 'FsxLustreFileSystem', {\n  dnsName: '{FILE-SYSTEM-DNS-NAME}',\n  fileSystemId: '{FILE-SYSTEM-ID}',\n  securityGroup: sg,\n});\n\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'Vpc', {\n  availabilityZones: ['us-west-2a', 'us-west-2b'],\n  publicSubnetIds: ['{US-WEST-2A-SUBNET-ID}', '{US-WEST-2B-SUBNET-ID}'],\n  vpcId: '{VPC-ID}',\n});\n\nconst inst = new ec2.Instance(this, 'inst', {\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n  }),\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n});\n\nfs.connections.allowDefaultPortFrom(inst);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 12,
        "75": 49,
        "104": 4,
        "192": 2,
        "193": 5,
        "194": 20,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 1
      },
      "fqnsFingerprint": "d9cbe81093922caa9a75368f9b14b001e46b2de01051c64b1076900e6ba0ef67"
    },
    "b80beaf0c86f777bd46bdf268ae3657df300487d3831d436bb280daed3d16547": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n\n\n# AWS Linux\nec2.Instance(self, \"Instance1\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage()\n)\n\n# AWS Linux 2\nec2.Instance(self, \"Instance2\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage(\n        generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n    )\n)\n\n# AWS Linux 2 with kernel 5.x\nec2.Instance(self, \"Instance3\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage(\n        generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n        kernel=ec2.AmazonLinuxKernel.KERNEL5_X\n    )\n)\n\n# AWS Linux 2022\nec2.Instance(self, \"Instance4\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.AmazonLinuxImage(\n        generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2022\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\n\n\n// AWS Linux\n// AWS Linux\nnew Instance(this, \"Instance1\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage()\n});\n\n// AWS Linux 2\n// AWS Linux 2\nnew Instance(this, \"Instance2\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage(new AmazonLinuxImageProps {\n        Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n    })\n});\n\n// AWS Linux 2 with kernel 5.x\n// AWS Linux 2 with kernel 5.x\nnew Instance(this, \"Instance3\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage(new AmazonLinuxImageProps {\n        Generation = AmazonLinuxGeneration.AMAZON_LINUX_2,\n        Kernel = AmazonLinuxKernel.KERNEL5_X\n    })\n});\n\n// AWS Linux 2022\n// AWS Linux 2022\nnew Instance(this, \"Instance4\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = new AmazonLinuxImage(new AmazonLinuxImageProps {\n        Generation = AmazonLinuxGeneration.AMAZON_LINUX_2022\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\n\n\n// AWS Linux\n// AWS Linux\nInstance.Builder.create(this, \"Instance1\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(new AmazonLinuxImage())\n        .build();\n\n// AWS Linux 2\n// AWS Linux 2\nInstance.Builder.create(this, \"Instance2\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(AmazonLinuxImage.Builder.create()\n                .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                .build())\n        .build();\n\n// AWS Linux 2 with kernel 5.x\n// AWS Linux 2 with kernel 5.x\nInstance.Builder.create(this, \"Instance3\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(AmazonLinuxImage.Builder.create()\n                .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                .kernel(AmazonLinuxKernel.KERNEL5_X)\n                .build())\n        .build();\n\n// AWS Linux 2022\n// AWS Linux 2022\nInstance.Builder.create(this, \"Instance4\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(AmazonLinuxImage.Builder.create()\n                .generation(AmazonLinuxGeneration.AMAZON_LINUX_2022)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\n\n// AWS Linux\n// AWS Linux\nec2.NewInstance(this, jsii.String(\"Instance1\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(),\n})\n\n// AWS Linux 2\n// AWS Linux 2\nec2.NewInstance(this, jsii.String(\"Instance2\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\t\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX_2,\n\t}),\n})\n\n// AWS Linux 2 with kernel 5.x\n// AWS Linux 2 with kernel 5.x\nec2.NewInstance(this, jsii.String(\"Instance3\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\t\tgeneration: ec2.*amazonLinuxGeneration_AMAZON_LINUX_2,\n\t\tkernel: ec2.amazonLinuxKernel_KERNEL5_X,\n\t}),\n})\n\n// AWS Linux 2022\n// AWS Linux 2022\nec2.NewInstance(this, jsii.String(\"Instance4\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\t\tgeneration: ec2.*amazonLinuxGeneration_AMAZON_LINUX_2022,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\n\n// AWS Linux\nnew ec2.Instance(this, 'Instance1', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage(),\n});\n\n// AWS Linux 2\nnew ec2.Instance(this, 'Instance2', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n  }),\n});\n\n// AWS Linux 2 with kernel 5.x\nnew ec2.Instance(this, 'Instance3', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    kernel: ec2.AmazonLinuxKernel.KERNEL5_X,\n  }),\n});\n\n// AWS Linux 2022\nnew ec2.Instance(this, 'Instance4', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2022,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxKernel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2022",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxKernel",
        "@aws-cdk/aws-ec2.AmazonLinuxKernel#KERNEL5_X",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// AWS Linux\nnew ec2.Instance(this, 'Instance1', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage(),\n});\n\n// AWS Linux 2\nnew ec2.Instance(this, 'Instance2', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n  }),\n});\n\n// AWS Linux 2 with kernel 5.x\nnew ec2.Instance(this, 'Instance3', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    kernel: ec2.AmazonLinuxKernel.KERNEL5_X,\n  }),\n});\n\n// AWS Linux 2022\nnew ec2.Instance(this, 'Instance4', {\n  vpc,\n  instanceType,\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2022,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 50,
        "104": 4,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 7,
        "194": 16,
        "197": 8,
        "225": 2,
        "226": 4,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 8,
        "290": 1
      },
      "fqnsFingerprint": "652223447479399c6a93203ba5533722d422b08ade0f618cdd546e2bc1d2713a"
    },
    "bdac62d5a100702aac562a60e3a08524d668ee426d8505477eb644efc042725e": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxStorage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    },
    "555bc6f80473645c668ed40cb4f230cb5134d7ed79c6a19c6d6d43f1704cf055": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxVirt"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    },
    "6d2c4bf6af2d7e2636fb42e45b6046268da1ed345b6189566f49ca1d321dcfad": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// Showing the most complex setup, if you have simpler requirements\n\t// you can use `CloudFormationInit.fromElements()`.\n\tinit: ec2.cloudFormationInit.fromConfigSets(&configSetProps{\n\t\tconfigSets: map[string][]*string{\n\t\t\t// Applies the configs below in this order\n\t\t\t\"default\": []*string{\n\t\t\t\tjsii.String(\"yumPreinstall\"),\n\t\t\t\tjsii.String(\"config\"),\n\t\t\t},\n\t\t},\n\t\tconfigs: map[string]initConfig{\n\t\t\t\"yumPreinstall\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitPackage.yum(jsii.String(\"git\")),\n\t\t\t}),\n\t\t\t\"config\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitFile.fromObject(jsii.String(\"/etc/stack.json\"), map[string]interface{}{\n\t\t\t\t\t\"stackId\": *stack.of(this).stackId,\n\t\t\t\t\t\"stackName\": *stack.of(this).stackName,\n\t\t\t\t\t\"region\": *stack.of(this).region,\n\t\t\t\t}),\n\t\t\t\tec2.InitGroup.fromName(jsii.String(\"my-group\")),\n\t\t\t\tec2.InitUser.fromName(jsii.String(\"my-user\")),\n\t\t\t\tec2.InitPackage.rpm(jsii.String(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")),\n\t\t\t}),\n\t\t},\n\t}),\n\tinitOptions: &applyCloudFormationInitOptions{\n\t\t// Optional, which configsets to activate (['default'] by default)\n\t\tconfigSets: []*string{\n\t\t\tjsii.String(\"default\"),\n\t\t},\n\n\t\t// Optional, how long the installation is expected to take (5 minutes by default)\n\t\ttimeout: duration.minutes(jsii.Number(30)),\n\n\t\t// Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeUrl: jsii.Boolean(true),\n\n\t\t// Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeRole: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e09877ee77c7133a1ded3fbcac431c014557be3ac85f628eb43b417156d12366"
    },
    "9466292ba9db2773a0fb0f66ac233cdfaf52e2f2e45fa255c3cc5edd904dbd56": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# cfn_resource: cdk.CfnResource\n# role: iam.Role\n# user_data: ec2.UserData\n\nattach_init_options = ec2.AttachInitOptions(\n    instance_role=role,\n    platform=ec2.OperatingSystemType.LINUX,\n    user_data=user_data,\n\n    # the properties below are optional\n    config_sets=[\"configSets\"],\n    embed_fingerprint=False,\n    ignore_failures=False,\n    include_role=False,\n    include_url=False,\n    print_log=False,\n    signal_resource=cfn_resource\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nCfnResource cfnResource;\nRole role;\nUserData userData;\nAttachInitOptions attachInitOptions = new AttachInitOptions {\n    InstanceRole = role,\n    Platform = OperatingSystemType.LINUX,\n    UserData = userData,\n\n    // the properties below are optional\n    ConfigSets = new [] { \"configSets\" },\n    EmbedFingerprint = false,\n    IgnoreFailures = false,\n    IncludeRole = false,\n    IncludeUrl = false,\n    PrintLog = false,\n    SignalResource = cfnResource\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nCfnResource cfnResource;\nRole role;\nUserData userData;\n\nAttachInitOptions attachInitOptions = AttachInitOptions.builder()\n        .instanceRole(role)\n        .platform(OperatingSystemType.LINUX)\n        .userData(userData)\n\n        // the properties below are optional\n        .configSets(List.of(\"configSets\"))\n        .embedFingerprint(false)\n        .ignoreFailures(false)\n        .includeRole(false)\n        .includeUrl(false)\n        .printLog(false)\n        .signalResource(cfnResource)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar cfnResource cfnResource\nvar role role\nvar userData userData\nattachInitOptions := &attachInitOptions{\n\tinstanceRole: role,\n\tplatform: ec2.operatingSystemType_LINUX,\n\tuserData: userData,\n\n\t// the properties below are optional\n\tconfigSets: []*string{\n\t\tjsii.String(\"configSets\"),\n\t},\n\tembedFingerprint: jsii.Boolean(false),\n\tignoreFailures: jsii.Boolean(false),\n\tincludeRole: jsii.Boolean(false),\n\tincludeUrl: jsii.Boolean(false),\n\tprintLog: jsii.Boolean(false),\n\tsignalResource: cfnResource,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cfnResource: cdk.CfnResource;\ndeclare const role: iam.Role;\ndeclare const userData: ec2.UserData;\nconst attachInitOptions: ec2.AttachInitOptions = {\n  instanceRole: role,\n  platform: ec2.OperatingSystemType.LINUX,\n  userData: userData,\n\n  // the properties below are optional\n  configSets: ['configSets'],\n  embedFingerprint: false,\n  ignoreFailures: false,\n  includeRole: false,\n  includeUrl: false,\n  printLog: false,\n  signalResource: cfnResource,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AttachInitOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AttachInitOptions",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.CfnResource"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cfnResource: cdk.CfnResource;\ndeclare const role: iam.Role;\ndeclare const userData: ec2.UserData;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst attachInitOptions: ec2.AttachInitOptions = {\n  instanceRole: role,\n  platform: ec2.OperatingSystemType.LINUX,\n  userData: userData,\n\n  // the properties below are optional\n  configSets: ['configSets'],\n  embedFingerprint: false,\n  ignoreFailures: false,\n  includeRole: false,\n  includeUrl: false,\n  printLog: false,\n  signalResource: cfnResource,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 31,
        "91": 5,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 1,
        "194": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "80162f1bc3593d8b3a498304b7560ca711be10bbb58727bf3fbcb11ec4f03d88"
    },
    "19fc02bdd35ae61c3942742bebe770b8c03bdb321ef603cfbaf3b20aa156469f": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "host := ec2.NewBastionHostLinux(this, jsii.String(\"BastionHost\"), &bastionHostLinuxProps{\n\tvpc: vpc,\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"EBSBastionHost\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(10), &ebsDeviceOptions{\n\t\t\t\tencrypted: jsii.Boolean(true),\n\t\t\t}),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.BastionHostLinux"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "03454ad0bbec338997a56a0ad76eca2348841701fcd0c65e155140df3bd8e281"
    },
    "5250cb553551a0da457d7f4368dc8810c987696ee6e41e5acc91d3dad93aa4de": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "host := ec2.NewBastionHostLinux(this, jsii.String(\"BastionHost\"), &bastionHostLinuxProps{\n\tvpc: vpc,\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"EBSBastionHost\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(10), &ebsDeviceOptions{\n\t\t\t\tencrypted: jsii.Boolean(true),\n\t\t\t}),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.BastionHostLinuxProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "03454ad0bbec338997a56a0ad76eca2348841701fcd0c65e155140df3bd8e281"
    },
    "de182ed1e9460064f7b77091c0a8908795aaf90e275163ba5223abbd37c83bfa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# block_device_volume: ec2.BlockDeviceVolume\n\nblock_device = ec2.BlockDevice(\n    device_name=\"deviceName\",\n    volume=block_device_volume,\n\n    # the properties below are optional\n    mapping_enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nBlockDeviceVolume blockDeviceVolume;\n\nBlockDevice blockDevice = new BlockDevice {\n    DeviceName = \"deviceName\",\n    Volume = blockDeviceVolume,\n\n    // the properties below are optional\n    MappingEnabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nBlockDeviceVolume blockDeviceVolume;\n\nBlockDevice blockDevice = BlockDevice.builder()\n        .deviceName(\"deviceName\")\n        .volume(blockDeviceVolume)\n\n        // the properties below are optional\n        .mappingEnabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar blockDeviceVolume blockDeviceVolume\nblockDevice := &blockDevice{\n\tdeviceName: jsii.String(\"deviceName\"),\n\tvolume: blockDeviceVolume,\n\n\t// the properties below are optional\n\tmappingEnabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const blockDeviceVolume: ec2.BlockDeviceVolume;\nconst blockDevice: ec2.BlockDevice = {\n  deviceName: 'deviceName',\n  volume: blockDeviceVolume,\n\n  // the properties below are optional\n  mappingEnabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.BlockDevice"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDevice",
        "@aws-cdk/aws-ec2.BlockDeviceVolume"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const blockDeviceVolume: ec2.BlockDeviceVolume;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst blockDevice: ec2.BlockDevice = {\n  deviceName: 'deviceName',\n  volume: blockDeviceVolume,\n\n  // the properties below are optional\n  mappingEnabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "53bb532b475cd45062f6f10199062ed154d5a889210e29832e7549a979837221"
    },
    "a8d7d12d91f81d3c33d0bd97eb716e9ca17c33594dbe77a96654238847d7dcb9": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.BlockDevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.BlockDeviceVolume.ebs(50)\n    ), ec2.BlockDevice(\n        device_name=\"/dev/sdm\",\n        volume=ec2.BlockDeviceVolume.ebs(100)\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"/dev/sda1\",\n        Volume = BlockDeviceVolume.Ebs(50)\n    }, new BlockDevice {\n        DeviceName = \"/dev/sdm\",\n        Volume = BlockDeviceVolume.Ebs(100)\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"/dev/sda1\")\n                .volume(BlockDeviceVolume.ebs(50))\n                .build(), BlockDevice.builder()\n                .deviceName(\"/dev/sdm\")\n                .volume(BlockDeviceVolume.ebs(100))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// ...\n\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sda1\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(50)),\n\t\t},\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sdm\"),\n\t\t\tvolume: ec2.*blockDeviceVolume.ebs(jsii.Number(100)),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.BlockDeviceVolume"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62a8c742c24849e1e99019c80132de13323c25d4f04e2ef136549bfaf1e84bf6"
    },
    "5995fb9a00c5e46032a07ba740116dc3a9a80fe6fa9512e56ef7cc699bbb75a9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_capacity_reservation = ec2.CfnCapacityReservation(self, \"MyCfnCapacityReservation\",\n    availability_zone=\"availabilityZone\",\n    instance_count=123,\n    instance_platform=\"instancePlatform\",\n    instance_type=\"instanceType\",\n\n    # the properties below are optional\n    ebs_optimized=False,\n    end_date=\"endDate\",\n    end_date_type=\"endDateType\",\n    ephemeral_storage=False,\n    instance_match_criteria=\"instanceMatchCriteria\",\n    out_post_arn=\"outPostArn\",\n    placement_group_arn=\"placementGroupArn\",\n    tag_specifications=[ec2.CfnCapacityReservation.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    tenancy=\"tenancy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnCapacityReservation cfnCapacityReservation = new CfnCapacityReservation(this, \"MyCfnCapacityReservation\", new CfnCapacityReservationProps {\n    AvailabilityZone = \"availabilityZone\",\n    InstanceCount = 123,\n    InstancePlatform = \"instancePlatform\",\n    InstanceType = \"instanceType\",\n\n    // the properties below are optional\n    EbsOptimized = false,\n    EndDate = \"endDate\",\n    EndDateType = \"endDateType\",\n    EphemeralStorage = false,\n    InstanceMatchCriteria = \"instanceMatchCriteria\",\n    OutPostArn = \"outPostArn\",\n    PlacementGroupArn = \"placementGroupArn\",\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    Tenancy = \"tenancy\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnCapacityReservation cfnCapacityReservation = CfnCapacityReservation.Builder.create(this, \"MyCfnCapacityReservation\")\n        .availabilityZone(\"availabilityZone\")\n        .instanceCount(123)\n        .instancePlatform(\"instancePlatform\")\n        .instanceType(\"instanceType\")\n\n        // the properties below are optional\n        .ebsOptimized(false)\n        .endDate(\"endDate\")\n        .endDateType(\"endDateType\")\n        .ephemeralStorage(false)\n        .instanceMatchCriteria(\"instanceMatchCriteria\")\n        .outPostArn(\"outPostArn\")\n        .placementGroupArn(\"placementGroupArn\")\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .tenancy(\"tenancy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnCapacityReservation := ec2.NewCfnCapacityReservation(this, jsii.String(\"MyCfnCapacityReservation\"), &cfnCapacityReservationProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tinstanceCount: jsii.Number(123),\n\tinstancePlatform: jsii.String(\"instancePlatform\"),\n\tinstanceType: jsii.String(\"instanceType\"),\n\n\t// the properties below are optional\n\tebsOptimized: jsii.Boolean(false),\n\tendDate: jsii.String(\"endDate\"),\n\tendDateType: jsii.String(\"endDateType\"),\n\tephemeralStorage: jsii.Boolean(false),\n\tinstanceMatchCriteria: jsii.String(\"instanceMatchCriteria\"),\n\toutPostArn: jsii.String(\"outPostArn\"),\n\tplacementGroupArn: jsii.String(\"placementGroupArn\"),\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttenancy: jsii.String(\"tenancy\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnCapacityReservation = new ec2.CfnCapacityReservation(this, 'MyCfnCapacityReservation', {\n  availabilityZone: 'availabilityZone',\n  instanceCount: 123,\n  instancePlatform: 'instancePlatform',\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  ebsOptimized: false,\n  endDate: 'endDate',\n  endDateType: 'endDateType',\n  ephemeralStorage: false,\n  instanceMatchCriteria: 'instanceMatchCriteria',\n  outPostArn: 'outPostArn',\n  placementGroupArn: 'placementGroupArn',\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  tenancy: 'tenancy',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCapacityReservation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCapacityReservation",
        "@aws-cdk/aws-ec2.CfnCapacityReservationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCapacityReservation = new ec2.CfnCapacityReservation(this, 'MyCfnCapacityReservation', {\n  availabilityZone: 'availabilityZone',\n  instanceCount: 123,\n  instancePlatform: 'instancePlatform',\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  ebsOptimized: false,\n  endDate: 'endDate',\n  endDateType: 'endDateType',\n  ephemeralStorage: false,\n  instanceMatchCriteria: 'instanceMatchCriteria',\n  outPostArn: 'outPostArn',\n  placementGroupArn: 'placementGroupArn',\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  tenancy: 'tenancy',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 21,
        "91": 2,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "5d74c5b660a6d64edd3c60d188824a08ffb791fda0595d98fed7ab078758bab7"
    },
    "012c57be37e08c7e486d5d55fdb801f2b923de11bb20a072e1db76aff224e458": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntag_specification_property = ec2.CfnCapacityReservation.TagSpecificationProperty(\n    resource_type=\"resourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTagSpecificationProperty tagSpecificationProperty = new TagSpecificationProperty {\n    ResourceType = \"resourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTagSpecificationProperty tagSpecificationProperty = TagSpecificationProperty.builder()\n        .resourceType(\"resourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntagSpecificationProperty := &tagSpecificationProperty{\n\tresourceType: jsii.String(\"resourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst tagSpecificationProperty: ec2.CfnCapacityReservation.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCapacityReservation.TagSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCapacityReservation.TagSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagSpecificationProperty: ec2.CfnCapacityReservation.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d3515c5a6995702528f14cedc7eaf4ff80c18cf92a6f45acb3ec6f2127f6d3b0"
    },
    "6e1ee20d4f154ab3bc78bfaaf09066a8240a2201a4cfe5dfc69c670c0da4d8c5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_capacity_reservation_fleet = ec2.CfnCapacityReservationFleet(self, \"MyCfnCapacityReservationFleet\",\n    allocation_strategy=\"allocationStrategy\",\n    end_date=\"endDate\",\n    instance_match_criteria=\"instanceMatchCriteria\",\n    instance_type_specifications=[ec2.CfnCapacityReservationFleet.InstanceTypeSpecificationProperty(\n        availability_zone=\"availabilityZone\",\n        availability_zone_id=\"availabilityZoneId\",\n        ebs_optimized=False,\n        instance_platform=\"instancePlatform\",\n        instance_type=\"instanceType\",\n        priority=123,\n        weight=123\n    )],\n    no_remove_end_date=False,\n    remove_end_date=False,\n    tag_specifications=[ec2.CfnCapacityReservationFleet.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    tenancy=\"tenancy\",\n    total_target_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnCapacityReservationFleet cfnCapacityReservationFleet = new CfnCapacityReservationFleet(this, \"MyCfnCapacityReservationFleet\", new CfnCapacityReservationFleetProps {\n    AllocationStrategy = \"allocationStrategy\",\n    EndDate = \"endDate\",\n    InstanceMatchCriteria = \"instanceMatchCriteria\",\n    InstanceTypeSpecifications = new [] { new InstanceTypeSpecificationProperty {\n        AvailabilityZone = \"availabilityZone\",\n        AvailabilityZoneId = \"availabilityZoneId\",\n        EbsOptimized = false,\n        InstancePlatform = \"instancePlatform\",\n        InstanceType = \"instanceType\",\n        Priority = 123,\n        Weight = 123\n    } },\n    NoRemoveEndDate = false,\n    RemoveEndDate = false,\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    Tenancy = \"tenancy\",\n    TotalTargetCapacity = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnCapacityReservationFleet cfnCapacityReservationFleet = CfnCapacityReservationFleet.Builder.create(this, \"MyCfnCapacityReservationFleet\")\n        .allocationStrategy(\"allocationStrategy\")\n        .endDate(\"endDate\")\n        .instanceMatchCriteria(\"instanceMatchCriteria\")\n        .instanceTypeSpecifications(List.of(InstanceTypeSpecificationProperty.builder()\n                .availabilityZone(\"availabilityZone\")\n                .availabilityZoneId(\"availabilityZoneId\")\n                .ebsOptimized(false)\n                .instancePlatform(\"instancePlatform\")\n                .instanceType(\"instanceType\")\n                .priority(123)\n                .weight(123)\n                .build()))\n        .noRemoveEndDate(false)\n        .removeEndDate(false)\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .tenancy(\"tenancy\")\n        .totalTargetCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnCapacityReservationFleet := ec2.NewCfnCapacityReservationFleet(this, jsii.String(\"MyCfnCapacityReservationFleet\"), &cfnCapacityReservationFleetProps{\n\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\tendDate: jsii.String(\"endDate\"),\n\tinstanceMatchCriteria: jsii.String(\"instanceMatchCriteria\"),\n\tinstanceTypeSpecifications: []interface{}{\n\t\t&instanceTypeSpecificationProperty{\n\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\tavailabilityZoneId: jsii.String(\"availabilityZoneId\"),\n\t\t\tebsOptimized: jsii.Boolean(false),\n\t\t\tinstancePlatform: jsii.String(\"instancePlatform\"),\n\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\tpriority: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tnoRemoveEndDate: jsii.Boolean(false),\n\tremoveEndDate: jsii.Boolean(false),\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttenancy: jsii.String(\"tenancy\"),\n\ttotalTargetCapacity: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnCapacityReservationFleet = new ec2.CfnCapacityReservationFleet(this, 'MyCfnCapacityReservationFleet', /* all optional props */ {\n  allocationStrategy: 'allocationStrategy',\n  endDate: 'endDate',\n  instanceMatchCriteria: 'instanceMatchCriteria',\n  instanceTypeSpecifications: [{\n    availabilityZone: 'availabilityZone',\n    availabilityZoneId: 'availabilityZoneId',\n    ebsOptimized: false,\n    instancePlatform: 'instancePlatform',\n    instanceType: 'instanceType',\n    priority: 123,\n    weight: 123,\n  }],\n  noRemoveEndDate: false,\n  removeEndDate: false,\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  tenancy: 'tenancy',\n  totalTargetCapacity: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCapacityReservationFleet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCapacityReservationFleet",
        "@aws-cdk/aws-ec2.CfnCapacityReservationFleetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCapacityReservationFleet = new ec2.CfnCapacityReservationFleet(this, 'MyCfnCapacityReservationFleet', /* all optional props */ {\n  allocationStrategy: 'allocationStrategy',\n  endDate: 'endDate',\n  instanceMatchCriteria: 'instanceMatchCriteria',\n  instanceTypeSpecifications: [{\n    availabilityZone: 'availabilityZone',\n    availabilityZoneId: 'availabilityZoneId',\n    ebsOptimized: false,\n    instancePlatform: 'instancePlatform',\n    instanceType: 'instanceType',\n    priority: 123,\n    weight: 123,\n  }],\n  noRemoveEndDate: false,\n  removeEndDate: false,\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  tenancy: 'tenancy',\n  totalTargetCapacity: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 24,
        "91": 3,
        "104": 1,
        "192": 3,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "a6615f04b986e61e24470f75b80e3f48f55edf2c0823cc29fa87e0ed4154376f"
    },
    "514dd3f017f5ac67de46daa06125ecfcfef616dad4366933c77704bec9e5663c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_type_specification_property = ec2.CfnCapacityReservationFleet.InstanceTypeSpecificationProperty(\n    availability_zone=\"availabilityZone\",\n    availability_zone_id=\"availabilityZoneId\",\n    ebs_optimized=False,\n    instance_platform=\"instancePlatform\",\n    instance_type=\"instanceType\",\n    priority=123,\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceTypeSpecificationProperty instanceTypeSpecificationProperty = new InstanceTypeSpecificationProperty {\n    AvailabilityZone = \"availabilityZone\",\n    AvailabilityZoneId = \"availabilityZoneId\",\n    EbsOptimized = false,\n    InstancePlatform = \"instancePlatform\",\n    InstanceType = \"instanceType\",\n    Priority = 123,\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceTypeSpecificationProperty instanceTypeSpecificationProperty = InstanceTypeSpecificationProperty.builder()\n        .availabilityZone(\"availabilityZone\")\n        .availabilityZoneId(\"availabilityZoneId\")\n        .ebsOptimized(false)\n        .instancePlatform(\"instancePlatform\")\n        .instanceType(\"instanceType\")\n        .priority(123)\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceTypeSpecificationProperty := &instanceTypeSpecificationProperty{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tavailabilityZoneId: jsii.String(\"availabilityZoneId\"),\n\tebsOptimized: jsii.Boolean(false),\n\tinstancePlatform: jsii.String(\"instancePlatform\"),\n\tinstanceType: jsii.String(\"instanceType\"),\n\tpriority: jsii.Number(123),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceTypeSpecificationProperty: ec2.CfnCapacityReservationFleet.InstanceTypeSpecificationProperty = {\n  availabilityZone: 'availabilityZone',\n  availabilityZoneId: 'availabilityZoneId',\n  ebsOptimized: false,\n  instancePlatform: 'instancePlatform',\n  instanceType: 'instanceType',\n  priority: 123,\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCapacityReservationFleet.InstanceTypeSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCapacityReservationFleet.InstanceTypeSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceTypeSpecificationProperty: ec2.CfnCapacityReservationFleet.InstanceTypeSpecificationProperty = {\n  availabilityZone: 'availabilityZone',\n  availabilityZoneId: 'availabilityZoneId',\n  ebsOptimized: false,\n  instancePlatform: 'instancePlatform',\n  instanceType: 'instanceType',\n  priority: 123,\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 12,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "57f788255d25ba232f9f10f493857190f5c4e7c9b93756e39af1a71c91c1fd2b"
    },
    "71094ff2a61d0fc572f369ba52aca9795eb461f2f7bca001720be503f3419f0c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntag_specification_property = ec2.CfnCapacityReservationFleet.TagSpecificationProperty(\n    resource_type=\"resourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTagSpecificationProperty tagSpecificationProperty = new TagSpecificationProperty {\n    ResourceType = \"resourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTagSpecificationProperty tagSpecificationProperty = TagSpecificationProperty.builder()\n        .resourceType(\"resourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntagSpecificationProperty := &tagSpecificationProperty{\n\tresourceType: jsii.String(\"resourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst tagSpecificationProperty: ec2.CfnCapacityReservationFleet.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCapacityReservationFleet.TagSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCapacityReservationFleet.TagSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagSpecificationProperty: ec2.CfnCapacityReservationFleet.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "6e0e6f53d90fbda38797c874b2d2940d433fd3bf98354bfca9f7eef4a11a73ed"
    },
    "9a4d46c47be18f51dfd0bd52388ff36de2c195c4018309c7b62d69f9ff5d2e8b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_capacity_reservation_fleet_props = ec2.CfnCapacityReservationFleetProps(\n    allocation_strategy=\"allocationStrategy\",\n    end_date=\"endDate\",\n    instance_match_criteria=\"instanceMatchCriteria\",\n    instance_type_specifications=[ec2.CfnCapacityReservationFleet.InstanceTypeSpecificationProperty(\n        availability_zone=\"availabilityZone\",\n        availability_zone_id=\"availabilityZoneId\",\n        ebs_optimized=False,\n        instance_platform=\"instancePlatform\",\n        instance_type=\"instanceType\",\n        priority=123,\n        weight=123\n    )],\n    no_remove_end_date=False,\n    remove_end_date=False,\n    tag_specifications=[ec2.CfnCapacityReservationFleet.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    tenancy=\"tenancy\",\n    total_target_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnCapacityReservationFleetProps cfnCapacityReservationFleetProps = new CfnCapacityReservationFleetProps {\n    AllocationStrategy = \"allocationStrategy\",\n    EndDate = \"endDate\",\n    InstanceMatchCriteria = \"instanceMatchCriteria\",\n    InstanceTypeSpecifications = new [] { new InstanceTypeSpecificationProperty {\n        AvailabilityZone = \"availabilityZone\",\n        AvailabilityZoneId = \"availabilityZoneId\",\n        EbsOptimized = false,\n        InstancePlatform = \"instancePlatform\",\n        InstanceType = \"instanceType\",\n        Priority = 123,\n        Weight = 123\n    } },\n    NoRemoveEndDate = false,\n    RemoveEndDate = false,\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    Tenancy = \"tenancy\",\n    TotalTargetCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnCapacityReservationFleetProps cfnCapacityReservationFleetProps = CfnCapacityReservationFleetProps.builder()\n        .allocationStrategy(\"allocationStrategy\")\n        .endDate(\"endDate\")\n        .instanceMatchCriteria(\"instanceMatchCriteria\")\n        .instanceTypeSpecifications(List.of(InstanceTypeSpecificationProperty.builder()\n                .availabilityZone(\"availabilityZone\")\n                .availabilityZoneId(\"availabilityZoneId\")\n                .ebsOptimized(false)\n                .instancePlatform(\"instancePlatform\")\n                .instanceType(\"instanceType\")\n                .priority(123)\n                .weight(123)\n                .build()))\n        .noRemoveEndDate(false)\n        .removeEndDate(false)\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .tenancy(\"tenancy\")\n        .totalTargetCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnCapacityReservationFleetProps := &cfnCapacityReservationFleetProps{\n\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\tendDate: jsii.String(\"endDate\"),\n\tinstanceMatchCriteria: jsii.String(\"instanceMatchCriteria\"),\n\tinstanceTypeSpecifications: []interface{}{\n\t\t&instanceTypeSpecificationProperty{\n\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\tavailabilityZoneId: jsii.String(\"availabilityZoneId\"),\n\t\t\tebsOptimized: jsii.Boolean(false),\n\t\t\tinstancePlatform: jsii.String(\"instancePlatform\"),\n\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\tpriority: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tnoRemoveEndDate: jsii.Boolean(false),\n\tremoveEndDate: jsii.Boolean(false),\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttenancy: jsii.String(\"tenancy\"),\n\ttotalTargetCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnCapacityReservationFleetProps: ec2.CfnCapacityReservationFleetProps = {\n  allocationStrategy: 'allocationStrategy',\n  endDate: 'endDate',\n  instanceMatchCriteria: 'instanceMatchCriteria',\n  instanceTypeSpecifications: [{\n    availabilityZone: 'availabilityZone',\n    availabilityZoneId: 'availabilityZoneId',\n    ebsOptimized: false,\n    instancePlatform: 'instancePlatform',\n    instanceType: 'instanceType',\n    priority: 123,\n    weight: 123,\n  }],\n  noRemoveEndDate: false,\n  removeEndDate: false,\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  tenancy: 'tenancy',\n  totalTargetCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCapacityReservationFleetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCapacityReservationFleetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCapacityReservationFleetProps: ec2.CfnCapacityReservationFleetProps = {\n  allocationStrategy: 'allocationStrategy',\n  endDate: 'endDate',\n  instanceMatchCriteria: 'instanceMatchCriteria',\n  instanceTypeSpecifications: [{\n    availabilityZone: 'availabilityZone',\n    availabilityZoneId: 'availabilityZoneId',\n    ebsOptimized: false,\n    instancePlatform: 'instancePlatform',\n    instanceType: 'instanceType',\n    priority: 123,\n    weight: 123,\n  }],\n  noRemoveEndDate: false,\n  removeEndDate: false,\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  tenancy: 'tenancy',\n  totalTargetCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 12,
        "75": 24,
        "91": 3,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "b569c59c0db107116e666ea6b38926116b58a5014d02113abc30611db754d0da"
    },
    "87f773669e811cc5ca135b1112fc834dfc8a67e8cca8a2219178eb92dbf03c40": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_capacity_reservation_props = ec2.CfnCapacityReservationProps(\n    availability_zone=\"availabilityZone\",\n    instance_count=123,\n    instance_platform=\"instancePlatform\",\n    instance_type=\"instanceType\",\n\n    # the properties below are optional\n    ebs_optimized=False,\n    end_date=\"endDate\",\n    end_date_type=\"endDateType\",\n    ephemeral_storage=False,\n    instance_match_criteria=\"instanceMatchCriteria\",\n    out_post_arn=\"outPostArn\",\n    placement_group_arn=\"placementGroupArn\",\n    tag_specifications=[ec2.CfnCapacityReservation.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    tenancy=\"tenancy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnCapacityReservationProps cfnCapacityReservationProps = new CfnCapacityReservationProps {\n    AvailabilityZone = \"availabilityZone\",\n    InstanceCount = 123,\n    InstancePlatform = \"instancePlatform\",\n    InstanceType = \"instanceType\",\n\n    // the properties below are optional\n    EbsOptimized = false,\n    EndDate = \"endDate\",\n    EndDateType = \"endDateType\",\n    EphemeralStorage = false,\n    InstanceMatchCriteria = \"instanceMatchCriteria\",\n    OutPostArn = \"outPostArn\",\n    PlacementGroupArn = \"placementGroupArn\",\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    Tenancy = \"tenancy\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnCapacityReservationProps cfnCapacityReservationProps = CfnCapacityReservationProps.builder()\n        .availabilityZone(\"availabilityZone\")\n        .instanceCount(123)\n        .instancePlatform(\"instancePlatform\")\n        .instanceType(\"instanceType\")\n\n        // the properties below are optional\n        .ebsOptimized(false)\n        .endDate(\"endDate\")\n        .endDateType(\"endDateType\")\n        .ephemeralStorage(false)\n        .instanceMatchCriteria(\"instanceMatchCriteria\")\n        .outPostArn(\"outPostArn\")\n        .placementGroupArn(\"placementGroupArn\")\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .tenancy(\"tenancy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnCapacityReservationProps := &cfnCapacityReservationProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tinstanceCount: jsii.Number(123),\n\tinstancePlatform: jsii.String(\"instancePlatform\"),\n\tinstanceType: jsii.String(\"instanceType\"),\n\n\t// the properties below are optional\n\tebsOptimized: jsii.Boolean(false),\n\tendDate: jsii.String(\"endDate\"),\n\tendDateType: jsii.String(\"endDateType\"),\n\tephemeralStorage: jsii.Boolean(false),\n\tinstanceMatchCriteria: jsii.String(\"instanceMatchCriteria\"),\n\toutPostArn: jsii.String(\"outPostArn\"),\n\tplacementGroupArn: jsii.String(\"placementGroupArn\"),\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttenancy: jsii.String(\"tenancy\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnCapacityReservationProps: ec2.CfnCapacityReservationProps = {\n  availabilityZone: 'availabilityZone',\n  instanceCount: 123,\n  instancePlatform: 'instancePlatform',\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  ebsOptimized: false,\n  endDate: 'endDate',\n  endDateType: 'endDateType',\n  ephemeralStorage: false,\n  instanceMatchCriteria: 'instanceMatchCriteria',\n  outPostArn: 'outPostArn',\n  placementGroupArn: 'placementGroupArn',\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  tenancy: 'tenancy',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCapacityReservationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCapacityReservationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCapacityReservationProps: ec2.CfnCapacityReservationProps = {\n  availabilityZone: 'availabilityZone',\n  instanceCount: 123,\n  instancePlatform: 'instancePlatform',\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  ebsOptimized: false,\n  endDate: 'endDate',\n  endDateType: 'endDateType',\n  ephemeralStorage: false,\n  instanceMatchCriteria: 'instanceMatchCriteria',\n  outPostArn: 'outPostArn',\n  placementGroupArn: 'placementGroupArn',\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  tenancy: 'tenancy',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 21,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "f3d288d9cd5c0d50989919e911da70a4cfcb42fef858b632432d7e1c314afe7b"
    },
    "66510019bbfb55819f1808a5f8f01578a65c75536e0d93f1c5234755b2eda767": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_carrier_gateway = ec2.CfnCarrierGateway(self, \"MyCfnCarrierGateway\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnCarrierGateway cfnCarrierGateway = new CfnCarrierGateway(this, \"MyCfnCarrierGateway\", new CfnCarrierGatewayProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnCarrierGateway cfnCarrierGateway = CfnCarrierGateway.Builder.create(this, \"MyCfnCarrierGateway\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnCarrierGateway := ec2.NewCfnCarrierGateway(this, jsii.String(\"MyCfnCarrierGateway\"), &cfnCarrierGatewayProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnCarrierGateway = new ec2.CfnCarrierGateway(this, 'MyCfnCarrierGateway', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCarrierGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCarrierGateway",
        "@aws-cdk/aws-ec2.CfnCarrierGatewayProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCarrierGateway = new ec2.CfnCarrierGateway(this, 'MyCfnCarrierGateway', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "599aed9cca64a0dccc4d4e08bedd3e95d2259ca7793adb1c47f195669f7af269"
    },
    "e286e943779f9923f0f17d45e8d94f8beee1cf68a71667822393f492cba5eea6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_carrier_gateway_props = ec2.CfnCarrierGatewayProps(\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnCarrierGatewayProps cfnCarrierGatewayProps = new CfnCarrierGatewayProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnCarrierGatewayProps cfnCarrierGatewayProps = CfnCarrierGatewayProps.builder()\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnCarrierGatewayProps := &cfnCarrierGatewayProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnCarrierGatewayProps: ec2.CfnCarrierGatewayProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCarrierGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCarrierGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCarrierGatewayProps: ec2.CfnCarrierGatewayProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "2e2102b3032c07f971078db8715725b5c8266dbf0b81ae4bb014749d5e935a29"
    },
    "3864303509876335c21a995bfe38501ccdf6b9ea6f1cda8616f143fcbaf8836d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_client_vpn_authorization_rule = ec2.CfnClientVpnAuthorizationRule(self, \"MyCfnClientVpnAuthorizationRule\",\n    client_vpn_endpoint_id=\"clientVpnEndpointId\",\n    target_network_cidr=\"targetNetworkCidr\",\n\n    # the properties below are optional\n    access_group_id=\"accessGroupId\",\n    authorize_all_groups=False,\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnClientVpnAuthorizationRule cfnClientVpnAuthorizationRule = new CfnClientVpnAuthorizationRule(this, \"MyCfnClientVpnAuthorizationRule\", new CfnClientVpnAuthorizationRuleProps {\n    ClientVpnEndpointId = \"clientVpnEndpointId\",\n    TargetNetworkCidr = \"targetNetworkCidr\",\n\n    // the properties below are optional\n    AccessGroupId = \"accessGroupId\",\n    AuthorizeAllGroups = false,\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnClientVpnAuthorizationRule cfnClientVpnAuthorizationRule = CfnClientVpnAuthorizationRule.Builder.create(this, \"MyCfnClientVpnAuthorizationRule\")\n        .clientVpnEndpointId(\"clientVpnEndpointId\")\n        .targetNetworkCidr(\"targetNetworkCidr\")\n\n        // the properties below are optional\n        .accessGroupId(\"accessGroupId\")\n        .authorizeAllGroups(false)\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnClientVpnAuthorizationRule := ec2.NewCfnClientVpnAuthorizationRule(this, jsii.String(\"MyCfnClientVpnAuthorizationRule\"), &cfnClientVpnAuthorizationRuleProps{\n\tclientVpnEndpointId: jsii.String(\"clientVpnEndpointId\"),\n\ttargetNetworkCidr: jsii.String(\"targetNetworkCidr\"),\n\n\t// the properties below are optional\n\taccessGroupId: jsii.String(\"accessGroupId\"),\n\tauthorizeAllGroups: jsii.Boolean(false),\n\tdescription: jsii.String(\"description\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnClientVpnAuthorizationRule = new ec2.CfnClientVpnAuthorizationRule(this, 'MyCfnClientVpnAuthorizationRule', {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  targetNetworkCidr: 'targetNetworkCidr',\n\n  // the properties below are optional\n  accessGroupId: 'accessGroupId',\n  authorizeAllGroups: false,\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnAuthorizationRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnAuthorizationRule",
        "@aws-cdk/aws-ec2.CfnClientVpnAuthorizationRuleProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientVpnAuthorizationRule = new ec2.CfnClientVpnAuthorizationRule(this, 'MyCfnClientVpnAuthorizationRule', {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  targetNetworkCidr: 'targetNetworkCidr',\n\n  // the properties below are optional\n  accessGroupId: 'accessGroupId',\n  authorizeAllGroups: false,\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6bdf81c0d82d817e655b8b4163f3856aea5b6ffbbcc3226a57490c8f5b3ca3a2"
    },
    "bd2cb0e25c83049272c3d311b605828118394ba59beb251139fca7416beee620": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_client_vpn_authorization_rule_props = ec2.CfnClientVpnAuthorizationRuleProps(\n    client_vpn_endpoint_id=\"clientVpnEndpointId\",\n    target_network_cidr=\"targetNetworkCidr\",\n\n    # the properties below are optional\n    access_group_id=\"accessGroupId\",\n    authorize_all_groups=False,\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnClientVpnAuthorizationRuleProps cfnClientVpnAuthorizationRuleProps = new CfnClientVpnAuthorizationRuleProps {\n    ClientVpnEndpointId = \"clientVpnEndpointId\",\n    TargetNetworkCidr = \"targetNetworkCidr\",\n\n    // the properties below are optional\n    AccessGroupId = \"accessGroupId\",\n    AuthorizeAllGroups = false,\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnClientVpnAuthorizationRuleProps cfnClientVpnAuthorizationRuleProps = CfnClientVpnAuthorizationRuleProps.builder()\n        .clientVpnEndpointId(\"clientVpnEndpointId\")\n        .targetNetworkCidr(\"targetNetworkCidr\")\n\n        // the properties below are optional\n        .accessGroupId(\"accessGroupId\")\n        .authorizeAllGroups(false)\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnClientVpnAuthorizationRuleProps := &cfnClientVpnAuthorizationRuleProps{\n\tclientVpnEndpointId: jsii.String(\"clientVpnEndpointId\"),\n\ttargetNetworkCidr: jsii.String(\"targetNetworkCidr\"),\n\n\t// the properties below are optional\n\taccessGroupId: jsii.String(\"accessGroupId\"),\n\tauthorizeAllGroups: jsii.Boolean(false),\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnClientVpnAuthorizationRuleProps: ec2.CfnClientVpnAuthorizationRuleProps = {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  targetNetworkCidr: 'targetNetworkCidr',\n\n  // the properties below are optional\n  accessGroupId: 'accessGroupId',\n  authorizeAllGroups: false,\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnAuthorizationRuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnAuthorizationRuleProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientVpnAuthorizationRuleProps: ec2.CfnClientVpnAuthorizationRuleProps = {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  targetNetworkCidr: 'targetNetworkCidr',\n\n  // the properties below are optional\n  accessGroupId: 'accessGroupId',\n  authorizeAllGroups: false,\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b261f4708b0e18026692702354da2341d7db4495cfa247914252a98dc372daa1"
    },
    "69cec9d7e001eb5df923ea3dc35d2cb96a9c0859493b5af330e45a73c84846c1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_client_vpn_endpoint = ec2.CfnClientVpnEndpoint(self, \"MyCfnClientVpnEndpoint\",\n    authentication_options=[ec2.CfnClientVpnEndpoint.ClientAuthenticationRequestProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        active_directory=ec2.CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty(\n            directory_id=\"directoryId\"\n        ),\n        federated_authentication=ec2.CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty(\n            saml_provider_arn=\"samlProviderArn\",\n\n            # the properties below are optional\n            self_service_saml_provider_arn=\"selfServiceSamlProviderArn\"\n        ),\n        mutual_authentication=ec2.CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty(\n            client_root_certificate_chain_arn=\"clientRootCertificateChainArn\"\n        )\n    )],\n    client_cidr_block=\"clientCidrBlock\",\n    connection_log_options=ec2.CfnClientVpnEndpoint.ConnectionLogOptionsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        cloudwatch_log_group=\"cloudwatchLogGroup\",\n        cloudwatch_log_stream=\"cloudwatchLogStream\"\n    ),\n    server_certificate_arn=\"serverCertificateArn\",\n\n    # the properties below are optional\n    client_connect_options=ec2.CfnClientVpnEndpoint.ClientConnectOptionsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        lambda_function_arn=\"lambdaFunctionArn\"\n    ),\n    client_login_banner_options=ec2.CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        banner_text=\"bannerText\"\n    ),\n    description=\"description\",\n    dns_servers=[\"dnsServers\"],\n    security_group_ids=[\"securityGroupIds\"],\n    self_service_portal=\"selfServicePortal\",\n    session_timeout_hours=123,\n    split_tunnel=False,\n    tag_specifications=[ec2.CfnClientVpnEndpoint.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    transport_protocol=\"transportProtocol\",\n    vpc_id=\"vpcId\",\n    vpn_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnClientVpnEndpoint cfnClientVpnEndpoint = new CfnClientVpnEndpoint(this, \"MyCfnClientVpnEndpoint\", new CfnClientVpnEndpointProps {\n    AuthenticationOptions = new [] { new ClientAuthenticationRequestProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        ActiveDirectory = new DirectoryServiceAuthenticationRequestProperty {\n            DirectoryId = \"directoryId\"\n        },\n        FederatedAuthentication = new FederatedAuthenticationRequestProperty {\n            SamlProviderArn = \"samlProviderArn\",\n\n            // the properties below are optional\n            SelfServiceSamlProviderArn = \"selfServiceSamlProviderArn\"\n        },\n        MutualAuthentication = new CertificateAuthenticationRequestProperty {\n            ClientRootCertificateChainArn = \"clientRootCertificateChainArn\"\n        }\n    } },\n    ClientCidrBlock = \"clientCidrBlock\",\n    ConnectionLogOptions = new ConnectionLogOptionsProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        CloudwatchLogGroup = \"cloudwatchLogGroup\",\n        CloudwatchLogStream = \"cloudwatchLogStream\"\n    },\n    ServerCertificateArn = \"serverCertificateArn\",\n\n    // the properties below are optional\n    ClientConnectOptions = new ClientConnectOptionsProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        LambdaFunctionArn = \"lambdaFunctionArn\"\n    },\n    ClientLoginBannerOptions = new ClientLoginBannerOptionsProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        BannerText = \"bannerText\"\n    },\n    Description = \"description\",\n    DnsServers = new [] { \"dnsServers\" },\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SelfServicePortal = \"selfServicePortal\",\n    SessionTimeoutHours = 123,\n    SplitTunnel = false,\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    TransportProtocol = \"transportProtocol\",\n    VpcId = \"vpcId\",\n    VpnPort = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnClientVpnEndpoint cfnClientVpnEndpoint = CfnClientVpnEndpoint.Builder.create(this, \"MyCfnClientVpnEndpoint\")\n        .authenticationOptions(List.of(ClientAuthenticationRequestProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .activeDirectory(DirectoryServiceAuthenticationRequestProperty.builder()\n                        .directoryId(\"directoryId\")\n                        .build())\n                .federatedAuthentication(FederatedAuthenticationRequestProperty.builder()\n                        .samlProviderArn(\"samlProviderArn\")\n\n                        // the properties below are optional\n                        .selfServiceSamlProviderArn(\"selfServiceSamlProviderArn\")\n                        .build())\n                .mutualAuthentication(CertificateAuthenticationRequestProperty.builder()\n                        .clientRootCertificateChainArn(\"clientRootCertificateChainArn\")\n                        .build())\n                .build()))\n        .clientCidrBlock(\"clientCidrBlock\")\n        .connectionLogOptions(ConnectionLogOptionsProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .cloudwatchLogGroup(\"cloudwatchLogGroup\")\n                .cloudwatchLogStream(\"cloudwatchLogStream\")\n                .build())\n        .serverCertificateArn(\"serverCertificateArn\")\n\n        // the properties below are optional\n        .clientConnectOptions(ClientConnectOptionsProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .lambdaFunctionArn(\"lambdaFunctionArn\")\n                .build())\n        .clientLoginBannerOptions(ClientLoginBannerOptionsProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .bannerText(\"bannerText\")\n                .build())\n        .description(\"description\")\n        .dnsServers(List.of(\"dnsServers\"))\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .selfServicePortal(\"selfServicePortal\")\n        .sessionTimeoutHours(123)\n        .splitTunnel(false)\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .transportProtocol(\"transportProtocol\")\n        .vpcId(\"vpcId\")\n        .vpnPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnClientVpnEndpoint := ec2.NewCfnClientVpnEndpoint(this, jsii.String(\"MyCfnClientVpnEndpoint\"), &cfnClientVpnEndpointProps{\n\tauthenticationOptions: []interface{}{\n\t\t&clientAuthenticationRequestProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\tactiveDirectory: &directoryServiceAuthenticationRequestProperty{\n\t\t\t\tdirectoryId: jsii.String(\"directoryId\"),\n\t\t\t},\n\t\t\tfederatedAuthentication: &federatedAuthenticationRequestProperty{\n\t\t\t\tsamlProviderArn: jsii.String(\"samlProviderArn\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tselfServiceSamlProviderArn: jsii.String(\"selfServiceSamlProviderArn\"),\n\t\t\t},\n\t\t\tmutualAuthentication: &certificateAuthenticationRequestProperty{\n\t\t\t\tclientRootCertificateChainArn: jsii.String(\"clientRootCertificateChainArn\"),\n\t\t\t},\n\t\t},\n\t},\n\tclientCidrBlock: jsii.String(\"clientCidrBlock\"),\n\tconnectionLogOptions: &connectionLogOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tcloudwatchLogGroup: jsii.String(\"cloudwatchLogGroup\"),\n\t\tcloudwatchLogStream: jsii.String(\"cloudwatchLogStream\"),\n\t},\n\tserverCertificateArn: jsii.String(\"serverCertificateArn\"),\n\n\t// the properties below are optional\n\tclientConnectOptions: &clientConnectOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tlambdaFunctionArn: jsii.String(\"lambdaFunctionArn\"),\n\t},\n\tclientLoginBannerOptions: &clientLoginBannerOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tbannerText: jsii.String(\"bannerText\"),\n\t},\n\tdescription: jsii.String(\"description\"),\n\tdnsServers: []*string{\n\t\tjsii.String(\"dnsServers\"),\n\t},\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n\tselfServicePortal: jsii.String(\"selfServicePortal\"),\n\tsessionTimeoutHours: jsii.Number(123),\n\tsplitTunnel: jsii.Boolean(false),\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttransportProtocol: jsii.String(\"transportProtocol\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\tvpnPort: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnClientVpnEndpoint = new ec2.CfnClientVpnEndpoint(this, 'MyCfnClientVpnEndpoint', {\n  authenticationOptions: [{\n    type: 'type',\n\n    // the properties below are optional\n    activeDirectory: {\n      directoryId: 'directoryId',\n    },\n    federatedAuthentication: {\n      samlProviderArn: 'samlProviderArn',\n\n      // the properties below are optional\n      selfServiceSamlProviderArn: 'selfServiceSamlProviderArn',\n    },\n    mutualAuthentication: {\n      clientRootCertificateChainArn: 'clientRootCertificateChainArn',\n    },\n  }],\n  clientCidrBlock: 'clientCidrBlock',\n  connectionLogOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    cloudwatchLogGroup: 'cloudwatchLogGroup',\n    cloudwatchLogStream: 'cloudwatchLogStream',\n  },\n  serverCertificateArn: 'serverCertificateArn',\n\n  // the properties below are optional\n  clientConnectOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  clientLoginBannerOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    bannerText: 'bannerText',\n  },\n  description: 'description',\n  dnsServers: ['dnsServers'],\n  securityGroupIds: ['securityGroupIds'],\n  selfServicePortal: 'selfServicePortal',\n  sessionTimeoutHours: 123,\n  splitTunnel: false,\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  transportProtocol: 'transportProtocol',\n  vpcId: 'vpcId',\n  vpnPort: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint",
        "@aws-cdk/aws-ec2.CfnClientVpnEndpointProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientVpnEndpoint = new ec2.CfnClientVpnEndpoint(this, 'MyCfnClientVpnEndpoint', {\n  authenticationOptions: [{\n    type: 'type',\n\n    // the properties below are optional\n    activeDirectory: {\n      directoryId: 'directoryId',\n    },\n    federatedAuthentication: {\n      samlProviderArn: 'samlProviderArn',\n\n      // the properties below are optional\n      selfServiceSamlProviderArn: 'selfServiceSamlProviderArn',\n    },\n    mutualAuthentication: {\n      clientRootCertificateChainArn: 'clientRootCertificateChainArn',\n    },\n  }],\n  clientCidrBlock: 'clientCidrBlock',\n  connectionLogOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    cloudwatchLogGroup: 'cloudwatchLogGroup',\n    cloudwatchLogStream: 'cloudwatchLogStream',\n  },\n  serverCertificateArn: 'serverCertificateArn',\n\n  // the properties below are optional\n  clientConnectOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  clientLoginBannerOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    bannerText: 'bannerText',\n  },\n  description: 'description',\n  dnsServers: ['dnsServers'],\n  securityGroupIds: ['securityGroupIds'],\n  selfServicePortal: 'selfServicePortal',\n  sessionTimeoutHours: 123,\n  splitTunnel: false,\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  transportProtocol: 'transportProtocol',\n  vpcId: 'vpcId',\n  vpnPort: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 22,
        "75": 39,
        "91": 4,
        "104": 1,
        "192": 5,
        "193": 10,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 35,
        "290": 1
      },
      "fqnsFingerprint": "81da4b9ee012f45bdff231585e47a7dd126df2570ef0951cc6c6f14c91b2a360"
    },
    "abc1e0f76eb7bd10ce7e725f537d5269b0eeb3b9fbc0cdb66b6821ae1a65cbf4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncertificate_authentication_request_property = ec2.CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty(\n    client_root_certificate_chain_arn=\"clientRootCertificateChainArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCertificateAuthenticationRequestProperty certificateAuthenticationRequestProperty = new CertificateAuthenticationRequestProperty {\n    ClientRootCertificateChainArn = \"clientRootCertificateChainArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCertificateAuthenticationRequestProperty certificateAuthenticationRequestProperty = CertificateAuthenticationRequestProperty.builder()\n        .clientRootCertificateChainArn(\"clientRootCertificateChainArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncertificateAuthenticationRequestProperty := &certificateAuthenticationRequestProperty{\n\tclientRootCertificateChainArn: jsii.String(\"clientRootCertificateChainArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst certificateAuthenticationRequestProperty: ec2.CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty = {\n  clientRootCertificateChainArn: 'clientRootCertificateChainArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst certificateAuthenticationRequestProperty: ec2.CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty = {\n  clientRootCertificateChainArn: 'clientRootCertificateChainArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "915d35ba26a9406a97bdc02e8d4d9793276e89834ff3b0867370409895280d55"
    },
    "e716a29b1da665334fb1c18905c4f970ead1acef347ad282cc91818407c36af0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nclient_authentication_request_property = ec2.CfnClientVpnEndpoint.ClientAuthenticationRequestProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    active_directory=ec2.CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty(\n        directory_id=\"directoryId\"\n    ),\n    federated_authentication=ec2.CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty(\n        saml_provider_arn=\"samlProviderArn\",\n\n        # the properties below are optional\n        self_service_saml_provider_arn=\"selfServiceSamlProviderArn\"\n    ),\n    mutual_authentication=ec2.CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty(\n        client_root_certificate_chain_arn=\"clientRootCertificateChainArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClientAuthenticationRequestProperty clientAuthenticationRequestProperty = new ClientAuthenticationRequestProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    ActiveDirectory = new DirectoryServiceAuthenticationRequestProperty {\n        DirectoryId = \"directoryId\"\n    },\n    FederatedAuthentication = new FederatedAuthenticationRequestProperty {\n        SamlProviderArn = \"samlProviderArn\",\n\n        // the properties below are optional\n        SelfServiceSamlProviderArn = \"selfServiceSamlProviderArn\"\n    },\n    MutualAuthentication = new CertificateAuthenticationRequestProperty {\n        ClientRootCertificateChainArn = \"clientRootCertificateChainArn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClientAuthenticationRequestProperty clientAuthenticationRequestProperty = ClientAuthenticationRequestProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .activeDirectory(DirectoryServiceAuthenticationRequestProperty.builder()\n                .directoryId(\"directoryId\")\n                .build())\n        .federatedAuthentication(FederatedAuthenticationRequestProperty.builder()\n                .samlProviderArn(\"samlProviderArn\")\n\n                // the properties below are optional\n                .selfServiceSamlProviderArn(\"selfServiceSamlProviderArn\")\n                .build())\n        .mutualAuthentication(CertificateAuthenticationRequestProperty.builder()\n                .clientRootCertificateChainArn(\"clientRootCertificateChainArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nclientAuthenticationRequestProperty := &clientAuthenticationRequestProperty{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tactiveDirectory: &directoryServiceAuthenticationRequestProperty{\n\t\tdirectoryId: jsii.String(\"directoryId\"),\n\t},\n\tfederatedAuthentication: &federatedAuthenticationRequestProperty{\n\t\tsamlProviderArn: jsii.String(\"samlProviderArn\"),\n\n\t\t// the properties below are optional\n\t\tselfServiceSamlProviderArn: jsii.String(\"selfServiceSamlProviderArn\"),\n\t},\n\tmutualAuthentication: &certificateAuthenticationRequestProperty{\n\t\tclientRootCertificateChainArn: jsii.String(\"clientRootCertificateChainArn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst clientAuthenticationRequestProperty: ec2.CfnClientVpnEndpoint.ClientAuthenticationRequestProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  activeDirectory: {\n    directoryId: 'directoryId',\n  },\n  federatedAuthentication: {\n    samlProviderArn: 'samlProviderArn',\n\n    // the properties below are optional\n    selfServiceSamlProviderArn: 'selfServiceSamlProviderArn',\n  },\n  mutualAuthentication: {\n    clientRootCertificateChainArn: 'clientRootCertificateChainArn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.ClientAuthenticationRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.ClientAuthenticationRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientAuthenticationRequestProperty: ec2.CfnClientVpnEndpoint.ClientAuthenticationRequestProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  activeDirectory: {\n    directoryId: 'directoryId',\n  },\n  federatedAuthentication: {\n    samlProviderArn: 'samlProviderArn',\n\n    // the properties below are optional\n    selfServiceSamlProviderArn: 'selfServiceSamlProviderArn',\n  },\n  mutualAuthentication: {\n    clientRootCertificateChainArn: 'clientRootCertificateChainArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b9c6ce2d70a44187e0c0819141e2dae25b36b642232b3d8eca1286d431bdbd7e"
    },
    "2fe1338c942b9a25a3cbcc82209767600df39c9aa34dc61b1585db93e5897841": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nclient_connect_options_property = ec2.CfnClientVpnEndpoint.ClientConnectOptionsProperty(\n    enabled=False,\n\n    # the properties below are optional\n    lambda_function_arn=\"lambdaFunctionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClientConnectOptionsProperty clientConnectOptionsProperty = new ClientConnectOptionsProperty {\n    Enabled = false,\n\n    // the properties below are optional\n    LambdaFunctionArn = \"lambdaFunctionArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClientConnectOptionsProperty clientConnectOptionsProperty = ClientConnectOptionsProperty.builder()\n        .enabled(false)\n\n        // the properties below are optional\n        .lambdaFunctionArn(\"lambdaFunctionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nclientConnectOptionsProperty := &clientConnectOptionsProperty{\n\tenabled: jsii.Boolean(false),\n\n\t// the properties below are optional\n\tlambdaFunctionArn: jsii.String(\"lambdaFunctionArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst clientConnectOptionsProperty: ec2.CfnClientVpnEndpoint.ClientConnectOptionsProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  lambdaFunctionArn: 'lambdaFunctionArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.ClientConnectOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.ClientConnectOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientConnectOptionsProperty: ec2.CfnClientVpnEndpoint.ClientConnectOptionsProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  lambdaFunctionArn: 'lambdaFunctionArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d8c0dae322ca154c8d574c6c4159c8d1b816b83ef1e247f62e51d638c35dbca1"
    },
    "1be126d26de947f16d9fc6ad75ef8303dae7ff50bad043642cfaeb109f56935f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nclient_login_banner_options_property = ec2.CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty(\n    enabled=False,\n\n    # the properties below are optional\n    banner_text=\"bannerText\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClientLoginBannerOptionsProperty clientLoginBannerOptionsProperty = new ClientLoginBannerOptionsProperty {\n    Enabled = false,\n\n    // the properties below are optional\n    BannerText = \"bannerText\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClientLoginBannerOptionsProperty clientLoginBannerOptionsProperty = ClientLoginBannerOptionsProperty.builder()\n        .enabled(false)\n\n        // the properties below are optional\n        .bannerText(\"bannerText\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nclientLoginBannerOptionsProperty := &clientLoginBannerOptionsProperty{\n\tenabled: jsii.Boolean(false),\n\n\t// the properties below are optional\n\tbannerText: jsii.String(\"bannerText\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst clientLoginBannerOptionsProperty: ec2.CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  bannerText: 'bannerText',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientLoginBannerOptionsProperty: ec2.CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  bannerText: 'bannerText',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5b1f66fd862bcef984fdf8b96d466e240e067e85bb785ee3340a9bf5ece35a25"
    },
    "c946a1d08810a22bbf77ec18fcd5ae980eed2507321c9b336a6ac343314de74e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nconnection_log_options_property = ec2.CfnClientVpnEndpoint.ConnectionLogOptionsProperty(\n    enabled=False,\n\n    # the properties below are optional\n    cloudwatch_log_group=\"cloudwatchLogGroup\",\n    cloudwatch_log_stream=\"cloudwatchLogStream\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nConnectionLogOptionsProperty connectionLogOptionsProperty = new ConnectionLogOptionsProperty {\n    Enabled = false,\n\n    // the properties below are optional\n    CloudwatchLogGroup = \"cloudwatchLogGroup\",\n    CloudwatchLogStream = \"cloudwatchLogStream\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nConnectionLogOptionsProperty connectionLogOptionsProperty = ConnectionLogOptionsProperty.builder()\n        .enabled(false)\n\n        // the properties below are optional\n        .cloudwatchLogGroup(\"cloudwatchLogGroup\")\n        .cloudwatchLogStream(\"cloudwatchLogStream\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nconnectionLogOptionsProperty := &connectionLogOptionsProperty{\n\tenabled: jsii.Boolean(false),\n\n\t// the properties below are optional\n\tcloudwatchLogGroup: jsii.String(\"cloudwatchLogGroup\"),\n\tcloudwatchLogStream: jsii.String(\"cloudwatchLogStream\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst connectionLogOptionsProperty: ec2.CfnClientVpnEndpoint.ConnectionLogOptionsProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  cloudwatchLogGroup: 'cloudwatchLogGroup',\n  cloudwatchLogStream: 'cloudwatchLogStream',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.ConnectionLogOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.ConnectionLogOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connectionLogOptionsProperty: ec2.CfnClientVpnEndpoint.ConnectionLogOptionsProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  cloudwatchLogGroup: 'cloudwatchLogGroup',\n  cloudwatchLogStream: 'cloudwatchLogStream',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "81d3828a115d43f1878270a7d85fb6f7716aac996ad133ecff474b9271d4a0db"
    },
    "a34f6370e0d40a5519855f349344c8c75e0f1bd5ddffd58c4c7ecea8cc6dd82f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ndirectory_service_authentication_request_property = ec2.CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty(\n    directory_id=\"directoryId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nDirectoryServiceAuthenticationRequestProperty directoryServiceAuthenticationRequestProperty = new DirectoryServiceAuthenticationRequestProperty {\n    DirectoryId = \"directoryId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nDirectoryServiceAuthenticationRequestProperty directoryServiceAuthenticationRequestProperty = DirectoryServiceAuthenticationRequestProperty.builder()\n        .directoryId(\"directoryId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ndirectoryServiceAuthenticationRequestProperty := &directoryServiceAuthenticationRequestProperty{\n\tdirectoryId: jsii.String(\"directoryId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst directoryServiceAuthenticationRequestProperty: ec2.CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty = {\n  directoryId: 'directoryId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst directoryServiceAuthenticationRequestProperty: ec2.CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty = {\n  directoryId: 'directoryId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e05dd765774390a7ebf2eb8544eb4f4554c151fbea7ecb1dd704ba4135a522fb"
    },
    "a1ed96bb620d6372182fb9aeee4121a94790d33692079ad2c499b6f4a3d306da": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nfederated_authentication_request_property = ec2.CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty(\n    saml_provider_arn=\"samlProviderArn\",\n\n    # the properties below are optional\n    self_service_saml_provider_arn=\"selfServiceSamlProviderArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nFederatedAuthenticationRequestProperty federatedAuthenticationRequestProperty = new FederatedAuthenticationRequestProperty {\n    SamlProviderArn = \"samlProviderArn\",\n\n    // the properties below are optional\n    SelfServiceSamlProviderArn = \"selfServiceSamlProviderArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nFederatedAuthenticationRequestProperty federatedAuthenticationRequestProperty = FederatedAuthenticationRequestProperty.builder()\n        .samlProviderArn(\"samlProviderArn\")\n\n        // the properties below are optional\n        .selfServiceSamlProviderArn(\"selfServiceSamlProviderArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nfederatedAuthenticationRequestProperty := &federatedAuthenticationRequestProperty{\n\tsamlProviderArn: jsii.String(\"samlProviderArn\"),\n\n\t// the properties below are optional\n\tselfServiceSamlProviderArn: jsii.String(\"selfServiceSamlProviderArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst federatedAuthenticationRequestProperty: ec2.CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty = {\n  samlProviderArn: 'samlProviderArn',\n\n  // the properties below are optional\n  selfServiceSamlProviderArn: 'selfServiceSamlProviderArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst federatedAuthenticationRequestProperty: ec2.CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty = {\n  samlProviderArn: 'samlProviderArn',\n\n  // the properties below are optional\n  selfServiceSamlProviderArn: 'selfServiceSamlProviderArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bfd690a591e97a77cecd3209052ce4c84886336b884aebd7996ab7a5f47b5c3b"
    },
    "e5137712a938bcd140b51ddf88910337548d652a69de4ccf896d890f40e4794b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntag_specification_property = ec2.CfnClientVpnEndpoint.TagSpecificationProperty(\n    resource_type=\"resourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTagSpecificationProperty tagSpecificationProperty = new TagSpecificationProperty {\n    ResourceType = \"resourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTagSpecificationProperty tagSpecificationProperty = TagSpecificationProperty.builder()\n        .resourceType(\"resourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntagSpecificationProperty := &tagSpecificationProperty{\n\tresourceType: jsii.String(\"resourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst tagSpecificationProperty: ec2.CfnClientVpnEndpoint.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.TagSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpoint.TagSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagSpecificationProperty: ec2.CfnClientVpnEndpoint.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8a318ea9f8ea76e5ea8ffd3963bf0e580b2ffb730f330d552f50dc1ff9bc8a61"
    },
    "7328b0d761c3c413e3b256f0db9440ddf4a8f11c5ab5736e092b030dea217c04": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_client_vpn_endpoint_props = ec2.CfnClientVpnEndpointProps(\n    authentication_options=[ec2.CfnClientVpnEndpoint.ClientAuthenticationRequestProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        active_directory=ec2.CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty(\n            directory_id=\"directoryId\"\n        ),\n        federated_authentication=ec2.CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty(\n            saml_provider_arn=\"samlProviderArn\",\n\n            # the properties below are optional\n            self_service_saml_provider_arn=\"selfServiceSamlProviderArn\"\n        ),\n        mutual_authentication=ec2.CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty(\n            client_root_certificate_chain_arn=\"clientRootCertificateChainArn\"\n        )\n    )],\n    client_cidr_block=\"clientCidrBlock\",\n    connection_log_options=ec2.CfnClientVpnEndpoint.ConnectionLogOptionsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        cloudwatch_log_group=\"cloudwatchLogGroup\",\n        cloudwatch_log_stream=\"cloudwatchLogStream\"\n    ),\n    server_certificate_arn=\"serverCertificateArn\",\n\n    # the properties below are optional\n    client_connect_options=ec2.CfnClientVpnEndpoint.ClientConnectOptionsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        lambda_function_arn=\"lambdaFunctionArn\"\n    ),\n    client_login_banner_options=ec2.CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        banner_text=\"bannerText\"\n    ),\n    description=\"description\",\n    dns_servers=[\"dnsServers\"],\n    security_group_ids=[\"securityGroupIds\"],\n    self_service_portal=\"selfServicePortal\",\n    session_timeout_hours=123,\n    split_tunnel=False,\n    tag_specifications=[ec2.CfnClientVpnEndpoint.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    transport_protocol=\"transportProtocol\",\n    vpc_id=\"vpcId\",\n    vpn_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnClientVpnEndpointProps cfnClientVpnEndpointProps = new CfnClientVpnEndpointProps {\n    AuthenticationOptions = new [] { new ClientAuthenticationRequestProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        ActiveDirectory = new DirectoryServiceAuthenticationRequestProperty {\n            DirectoryId = \"directoryId\"\n        },\n        FederatedAuthentication = new FederatedAuthenticationRequestProperty {\n            SamlProviderArn = \"samlProviderArn\",\n\n            // the properties below are optional\n            SelfServiceSamlProviderArn = \"selfServiceSamlProviderArn\"\n        },\n        MutualAuthentication = new CertificateAuthenticationRequestProperty {\n            ClientRootCertificateChainArn = \"clientRootCertificateChainArn\"\n        }\n    } },\n    ClientCidrBlock = \"clientCidrBlock\",\n    ConnectionLogOptions = new ConnectionLogOptionsProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        CloudwatchLogGroup = \"cloudwatchLogGroup\",\n        CloudwatchLogStream = \"cloudwatchLogStream\"\n    },\n    ServerCertificateArn = \"serverCertificateArn\",\n\n    // the properties below are optional\n    ClientConnectOptions = new ClientConnectOptionsProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        LambdaFunctionArn = \"lambdaFunctionArn\"\n    },\n    ClientLoginBannerOptions = new ClientLoginBannerOptionsProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        BannerText = \"bannerText\"\n    },\n    Description = \"description\",\n    DnsServers = new [] { \"dnsServers\" },\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SelfServicePortal = \"selfServicePortal\",\n    SessionTimeoutHours = 123,\n    SplitTunnel = false,\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    TransportProtocol = \"transportProtocol\",\n    VpcId = \"vpcId\",\n    VpnPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnClientVpnEndpointProps cfnClientVpnEndpointProps = CfnClientVpnEndpointProps.builder()\n        .authenticationOptions(List.of(ClientAuthenticationRequestProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .activeDirectory(DirectoryServiceAuthenticationRequestProperty.builder()\n                        .directoryId(\"directoryId\")\n                        .build())\n                .federatedAuthentication(FederatedAuthenticationRequestProperty.builder()\n                        .samlProviderArn(\"samlProviderArn\")\n\n                        // the properties below are optional\n                        .selfServiceSamlProviderArn(\"selfServiceSamlProviderArn\")\n                        .build())\n                .mutualAuthentication(CertificateAuthenticationRequestProperty.builder()\n                        .clientRootCertificateChainArn(\"clientRootCertificateChainArn\")\n                        .build())\n                .build()))\n        .clientCidrBlock(\"clientCidrBlock\")\n        .connectionLogOptions(ConnectionLogOptionsProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .cloudwatchLogGroup(\"cloudwatchLogGroup\")\n                .cloudwatchLogStream(\"cloudwatchLogStream\")\n                .build())\n        .serverCertificateArn(\"serverCertificateArn\")\n\n        // the properties below are optional\n        .clientConnectOptions(ClientConnectOptionsProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .lambdaFunctionArn(\"lambdaFunctionArn\")\n                .build())\n        .clientLoginBannerOptions(ClientLoginBannerOptionsProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .bannerText(\"bannerText\")\n                .build())\n        .description(\"description\")\n        .dnsServers(List.of(\"dnsServers\"))\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .selfServicePortal(\"selfServicePortal\")\n        .sessionTimeoutHours(123)\n        .splitTunnel(false)\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .transportProtocol(\"transportProtocol\")\n        .vpcId(\"vpcId\")\n        .vpnPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnClientVpnEndpointProps := &cfnClientVpnEndpointProps{\n\tauthenticationOptions: []interface{}{\n\t\t&clientAuthenticationRequestProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\tactiveDirectory: &directoryServiceAuthenticationRequestProperty{\n\t\t\t\tdirectoryId: jsii.String(\"directoryId\"),\n\t\t\t},\n\t\t\tfederatedAuthentication: &federatedAuthenticationRequestProperty{\n\t\t\t\tsamlProviderArn: jsii.String(\"samlProviderArn\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tselfServiceSamlProviderArn: jsii.String(\"selfServiceSamlProviderArn\"),\n\t\t\t},\n\t\t\tmutualAuthentication: &certificateAuthenticationRequestProperty{\n\t\t\t\tclientRootCertificateChainArn: jsii.String(\"clientRootCertificateChainArn\"),\n\t\t\t},\n\t\t},\n\t},\n\tclientCidrBlock: jsii.String(\"clientCidrBlock\"),\n\tconnectionLogOptions: &connectionLogOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tcloudwatchLogGroup: jsii.String(\"cloudwatchLogGroup\"),\n\t\tcloudwatchLogStream: jsii.String(\"cloudwatchLogStream\"),\n\t},\n\tserverCertificateArn: jsii.String(\"serverCertificateArn\"),\n\n\t// the properties below are optional\n\tclientConnectOptions: &clientConnectOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tlambdaFunctionArn: jsii.String(\"lambdaFunctionArn\"),\n\t},\n\tclientLoginBannerOptions: &clientLoginBannerOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tbannerText: jsii.String(\"bannerText\"),\n\t},\n\tdescription: jsii.String(\"description\"),\n\tdnsServers: []*string{\n\t\tjsii.String(\"dnsServers\"),\n\t},\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n\tselfServicePortal: jsii.String(\"selfServicePortal\"),\n\tsessionTimeoutHours: jsii.Number(123),\n\tsplitTunnel: jsii.Boolean(false),\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttransportProtocol: jsii.String(\"transportProtocol\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\tvpnPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnClientVpnEndpointProps: ec2.CfnClientVpnEndpointProps = {\n  authenticationOptions: [{\n    type: 'type',\n\n    // the properties below are optional\n    activeDirectory: {\n      directoryId: 'directoryId',\n    },\n    federatedAuthentication: {\n      samlProviderArn: 'samlProviderArn',\n\n      // the properties below are optional\n      selfServiceSamlProviderArn: 'selfServiceSamlProviderArn',\n    },\n    mutualAuthentication: {\n      clientRootCertificateChainArn: 'clientRootCertificateChainArn',\n    },\n  }],\n  clientCidrBlock: 'clientCidrBlock',\n  connectionLogOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    cloudwatchLogGroup: 'cloudwatchLogGroup',\n    cloudwatchLogStream: 'cloudwatchLogStream',\n  },\n  serverCertificateArn: 'serverCertificateArn',\n\n  // the properties below are optional\n  clientConnectOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  clientLoginBannerOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    bannerText: 'bannerText',\n  },\n  description: 'description',\n  dnsServers: ['dnsServers'],\n  securityGroupIds: ['securityGroupIds'],\n  selfServicePortal: 'selfServicePortal',\n  sessionTimeoutHours: 123,\n  splitTunnel: false,\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  transportProtocol: 'transportProtocol',\n  vpcId: 'vpcId',\n  vpnPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnEndpointProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientVpnEndpointProps: ec2.CfnClientVpnEndpointProps = {\n  authenticationOptions: [{\n    type: 'type',\n\n    // the properties below are optional\n    activeDirectory: {\n      directoryId: 'directoryId',\n    },\n    federatedAuthentication: {\n      samlProviderArn: 'samlProviderArn',\n\n      // the properties below are optional\n      selfServiceSamlProviderArn: 'selfServiceSamlProviderArn',\n    },\n    mutualAuthentication: {\n      clientRootCertificateChainArn: 'clientRootCertificateChainArn',\n    },\n  }],\n  clientCidrBlock: 'clientCidrBlock',\n  connectionLogOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    cloudwatchLogGroup: 'cloudwatchLogGroup',\n    cloudwatchLogStream: 'cloudwatchLogStream',\n  },\n  serverCertificateArn: 'serverCertificateArn',\n\n  // the properties below are optional\n  clientConnectOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  clientLoginBannerOptions: {\n    enabled: false,\n\n    // the properties below are optional\n    bannerText: 'bannerText',\n  },\n  description: 'description',\n  dnsServers: ['dnsServers'],\n  securityGroupIds: ['securityGroupIds'],\n  selfServicePortal: 'selfServicePortal',\n  sessionTimeoutHours: 123,\n  splitTunnel: false,\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  transportProtocol: 'transportProtocol',\n  vpcId: 'vpcId',\n  vpnPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 21,
        "75": 39,
        "91": 4,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 10,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 35,
        "290": 1
      },
      "fqnsFingerprint": "219b226121a8b0ed2b76e26e35898242baace5386509e9eeeaa6d85f24363cb0"
    },
    "a7839ad337275551521e40179aa2f85ef7d344b73c84916a3b153c41f05b2255": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_client_vpn_route = ec2.CfnClientVpnRoute(self, \"MyCfnClientVpnRoute\",\n    client_vpn_endpoint_id=\"clientVpnEndpointId\",\n    destination_cidr_block=\"destinationCidrBlock\",\n    target_vpc_subnet_id=\"targetVpcSubnetId\",\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnClientVpnRoute cfnClientVpnRoute = new CfnClientVpnRoute(this, \"MyCfnClientVpnRoute\", new CfnClientVpnRouteProps {\n    ClientVpnEndpointId = \"clientVpnEndpointId\",\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    TargetVpcSubnetId = \"targetVpcSubnetId\",\n\n    // the properties below are optional\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnClientVpnRoute cfnClientVpnRoute = CfnClientVpnRoute.Builder.create(this, \"MyCfnClientVpnRoute\")\n        .clientVpnEndpointId(\"clientVpnEndpointId\")\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .targetVpcSubnetId(\"targetVpcSubnetId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnClientVpnRoute := ec2.NewCfnClientVpnRoute(this, jsii.String(\"MyCfnClientVpnRoute\"), &cfnClientVpnRouteProps{\n\tclientVpnEndpointId: jsii.String(\"clientVpnEndpointId\"),\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\ttargetVpcSubnetId: jsii.String(\"targetVpcSubnetId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnClientVpnRoute = new ec2.CfnClientVpnRoute(this, 'MyCfnClientVpnRoute', {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  destinationCidrBlock: 'destinationCidrBlock',\n  targetVpcSubnetId: 'targetVpcSubnetId',\n\n  // the properties below are optional\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnRoute",
        "@aws-cdk/aws-ec2.CfnClientVpnRouteProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientVpnRoute = new ec2.CfnClientVpnRoute(this, 'MyCfnClientVpnRoute', {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  destinationCidrBlock: 'destinationCidrBlock',\n  targetVpcSubnetId: 'targetVpcSubnetId',\n\n  // the properties below are optional\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "12631fbc3a3d129810751b3170ead47c49da760933c464b56598f7274df09cb5"
    },
    "39a068297a727758abe193252deca013f97597839430d690bc66d81b8368c797": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_client_vpn_route_props = ec2.CfnClientVpnRouteProps(\n    client_vpn_endpoint_id=\"clientVpnEndpointId\",\n    destination_cidr_block=\"destinationCidrBlock\",\n    target_vpc_subnet_id=\"targetVpcSubnetId\",\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnClientVpnRouteProps cfnClientVpnRouteProps = new CfnClientVpnRouteProps {\n    ClientVpnEndpointId = \"clientVpnEndpointId\",\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    TargetVpcSubnetId = \"targetVpcSubnetId\",\n\n    // the properties below are optional\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnClientVpnRouteProps cfnClientVpnRouteProps = CfnClientVpnRouteProps.builder()\n        .clientVpnEndpointId(\"clientVpnEndpointId\")\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .targetVpcSubnetId(\"targetVpcSubnetId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnClientVpnRouteProps := &cfnClientVpnRouteProps{\n\tclientVpnEndpointId: jsii.String(\"clientVpnEndpointId\"),\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\ttargetVpcSubnetId: jsii.String(\"targetVpcSubnetId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnClientVpnRouteProps: ec2.CfnClientVpnRouteProps = {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  destinationCidrBlock: 'destinationCidrBlock',\n  targetVpcSubnetId: 'targetVpcSubnetId',\n\n  // the properties below are optional\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnRouteProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnRouteProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientVpnRouteProps: ec2.CfnClientVpnRouteProps = {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  destinationCidrBlock: 'destinationCidrBlock',\n  targetVpcSubnetId: 'targetVpcSubnetId',\n\n  // the properties below are optional\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e61ed1913f50158665c2ed3e0d8a0f9434eb000bcce9cbfa9954be4b34dae749"
    },
    "2d396cfcd181c99a7ced57779454e03139458cd14d3dca7901f391c69bf39f1c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_client_vpn_target_network_association = ec2.CfnClientVpnTargetNetworkAssociation(self, \"MyCfnClientVpnTargetNetworkAssociation\",\n    client_vpn_endpoint_id=\"clientVpnEndpointId\",\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnClientVpnTargetNetworkAssociation cfnClientVpnTargetNetworkAssociation = new CfnClientVpnTargetNetworkAssociation(this, \"MyCfnClientVpnTargetNetworkAssociation\", new CfnClientVpnTargetNetworkAssociationProps {\n    ClientVpnEndpointId = \"clientVpnEndpointId\",\n    SubnetId = \"subnetId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnClientVpnTargetNetworkAssociation cfnClientVpnTargetNetworkAssociation = CfnClientVpnTargetNetworkAssociation.Builder.create(this, \"MyCfnClientVpnTargetNetworkAssociation\")\n        .clientVpnEndpointId(\"clientVpnEndpointId\")\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnClientVpnTargetNetworkAssociation := ec2.NewCfnClientVpnTargetNetworkAssociation(this, jsii.String(\"MyCfnClientVpnTargetNetworkAssociation\"), &cfnClientVpnTargetNetworkAssociationProps{\n\tclientVpnEndpointId: jsii.String(\"clientVpnEndpointId\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnClientVpnTargetNetworkAssociation = new ec2.CfnClientVpnTargetNetworkAssociation(this, 'MyCfnClientVpnTargetNetworkAssociation', {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  subnetId: 'subnetId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnTargetNetworkAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnTargetNetworkAssociation",
        "@aws-cdk/aws-ec2.CfnClientVpnTargetNetworkAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientVpnTargetNetworkAssociation = new ec2.CfnClientVpnTargetNetworkAssociation(this, 'MyCfnClientVpnTargetNetworkAssociation', {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  subnetId: 'subnetId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2517ffd2368fda2dd883864bc8a115eb7b665ec92260cbdb47905ccdf66cc3e2"
    },
    "2d83b448840e93d0e2b69f6b8b110c13c8810b830affd4f3567ab0f3993535f7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_client_vpn_target_network_association_props = ec2.CfnClientVpnTargetNetworkAssociationProps(\n    client_vpn_endpoint_id=\"clientVpnEndpointId\",\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnClientVpnTargetNetworkAssociationProps cfnClientVpnTargetNetworkAssociationProps = new CfnClientVpnTargetNetworkAssociationProps {\n    ClientVpnEndpointId = \"clientVpnEndpointId\",\n    SubnetId = \"subnetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnClientVpnTargetNetworkAssociationProps cfnClientVpnTargetNetworkAssociationProps = CfnClientVpnTargetNetworkAssociationProps.builder()\n        .clientVpnEndpointId(\"clientVpnEndpointId\")\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnClientVpnTargetNetworkAssociationProps := &cfnClientVpnTargetNetworkAssociationProps{\n\tclientVpnEndpointId: jsii.String(\"clientVpnEndpointId\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnClientVpnTargetNetworkAssociationProps: ec2.CfnClientVpnTargetNetworkAssociationProps = {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  subnetId: 'subnetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnClientVpnTargetNetworkAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnClientVpnTargetNetworkAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientVpnTargetNetworkAssociationProps: ec2.CfnClientVpnTargetNetworkAssociationProps = {\n  clientVpnEndpointId: 'clientVpnEndpointId',\n  subnetId: 'subnetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4742e7b01db6ff02ee7eae5750b1bdf0bdcaeaca4a5c0962b937d0cc2ed8759c"
    },
    "eee9a72de9ed9a79e7a6023e0f9b838a393d918fed68f363245638cfa904e709": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_customer_gateway = ec2.CfnCustomerGateway(self, \"MyCfnCustomerGateway\",\n    bgp_asn=123,\n    ip_address=\"ipAddress\",\n    type=\"type\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnCustomerGateway cfnCustomerGateway = new CfnCustomerGateway(this, \"MyCfnCustomerGateway\", new CfnCustomerGatewayProps {\n    BgpAsn = 123,\n    IpAddress = \"ipAddress\",\n    Type = \"type\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnCustomerGateway cfnCustomerGateway = CfnCustomerGateway.Builder.create(this, \"MyCfnCustomerGateway\")\n        .bgpAsn(123)\n        .ipAddress(\"ipAddress\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnCustomerGateway := ec2.NewCfnCustomerGateway(this, jsii.String(\"MyCfnCustomerGateway\"), &cfnCustomerGatewayProps{\n\tbgpAsn: jsii.Number(123),\n\tipAddress: jsii.String(\"ipAddress\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnCustomerGateway = new ec2.CfnCustomerGateway(this, 'MyCfnCustomerGateway', {\n  bgpAsn: 123,\n  ipAddress: 'ipAddress',\n  type: 'type',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCustomerGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCustomerGateway",
        "@aws-cdk/aws-ec2.CfnCustomerGatewayProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCustomerGateway = new ec2.CfnCustomerGateway(this, 'MyCfnCustomerGateway', {\n  bgpAsn: 123,\n  ipAddress: 'ipAddress',\n  type: 'type',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "f36ca0d537855911324c912b9ba27b0f78928f984d737a5c8b28232434594248"
    },
    "d46028a4a42140c673794e5ede5f89e96eb67b097354c834d76987ef83d46458": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_customer_gateway_props = ec2.CfnCustomerGatewayProps(\n    bgp_asn=123,\n    ip_address=\"ipAddress\",\n    type=\"type\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnCustomerGatewayProps cfnCustomerGatewayProps = new CfnCustomerGatewayProps {\n    BgpAsn = 123,\n    IpAddress = \"ipAddress\",\n    Type = \"type\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnCustomerGatewayProps cfnCustomerGatewayProps = CfnCustomerGatewayProps.builder()\n        .bgpAsn(123)\n        .ipAddress(\"ipAddress\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnCustomerGatewayProps := &cfnCustomerGatewayProps{\n\tbgpAsn: jsii.Number(123),\n\tipAddress: jsii.String(\"ipAddress\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnCustomerGatewayProps: ec2.CfnCustomerGatewayProps = {\n  bgpAsn: 123,\n  ipAddress: 'ipAddress',\n  type: 'type',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnCustomerGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnCustomerGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCustomerGatewayProps: ec2.CfnCustomerGatewayProps = {\n  bgpAsn: 123,\n  ipAddress: 'ipAddress',\n  type: 'type',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "582621477a1b93ee7c7f73de69d4aef594b7cd5cbad3fac4f6037994543fa163"
    },
    "0a4e4a9fd699fcd3c2dde7348b4961df96eaea376d41578a78679aedff4af523": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_dHCPOptions = ec2.CfnDHCPOptions(self, \"MyCfnDHCPOptions\",\n    domain_name=\"domainName\",\n    domain_name_servers=[\"domainNameServers\"],\n    netbios_name_servers=[\"netbiosNameServers\"],\n    netbios_node_type=123,\n    ntp_servers=[\"ntpServers\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnDHCPOptions cfnDHCPOptions = new CfnDHCPOptions(this, \"MyCfnDHCPOptions\", new CfnDHCPOptionsProps {\n    DomainName = \"domainName\",\n    DomainNameServers = new [] { \"domainNameServers\" },\n    NetbiosNameServers = new [] { \"netbiosNameServers\" },\n    NetbiosNodeType = 123,\n    NtpServers = new [] { \"ntpServers\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnDHCPOptions cfnDHCPOptions = CfnDHCPOptions.Builder.create(this, \"MyCfnDHCPOptions\")\n        .domainName(\"domainName\")\n        .domainNameServers(List.of(\"domainNameServers\"))\n        .netbiosNameServers(List.of(\"netbiosNameServers\"))\n        .netbiosNodeType(123)\n        .ntpServers(List.of(\"ntpServers\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnDHCPOptions := ec2.NewCfnDHCPOptions(this, jsii.String(\"MyCfnDHCPOptions\"), &cfnDHCPOptionsProps{\n\tdomainName: jsii.String(\"domainName\"),\n\tdomainNameServers: []*string{\n\t\tjsii.String(\"domainNameServers\"),\n\t},\n\tnetbiosNameServers: []*string{\n\t\tjsii.String(\"netbiosNameServers\"),\n\t},\n\tnetbiosNodeType: jsii.Number(123),\n\tntpServers: []*string{\n\t\tjsii.String(\"ntpServers\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnDHCPOptions = new ec2.CfnDHCPOptions(this, 'MyCfnDHCPOptions', /* all optional props */ {\n  domainName: 'domainName',\n  domainNameServers: ['domainNameServers'],\n  netbiosNameServers: ['netbiosNameServers'],\n  netbiosNodeType: 123,\n  ntpServers: ['ntpServers'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnDHCPOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnDHCPOptions",
        "@aws-cdk/aws-ec2.CfnDHCPOptionsProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDHCPOptions = new ec2.CfnDHCPOptions(this, 'MyCfnDHCPOptions', /* all optional props */ {\n  domainName: 'domainName',\n  domainNameServers: ['domainNameServers'],\n  netbiosNameServers: ['netbiosNameServers'],\n  netbiosNodeType: 123,\n  ntpServers: ['ntpServers'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 12,
        "104": 1,
        "192": 4,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "315ba6941722e0dba3bbddd5d879d57b41ca7f6c0dec155d51bc9ef349ca688e"
    },
    "64e52437a2be13fb749c6867c0f01253b9a40f253b35b3e3d3d46176f952e35a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_dHCPOptions_props = ec2.CfnDHCPOptionsProps(\n    domain_name=\"domainName\",\n    domain_name_servers=[\"domainNameServers\"],\n    netbios_name_servers=[\"netbiosNameServers\"],\n    netbios_node_type=123,\n    ntp_servers=[\"ntpServers\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnDHCPOptionsProps cfnDHCPOptionsProps = new CfnDHCPOptionsProps {\n    DomainName = \"domainName\",\n    DomainNameServers = new [] { \"domainNameServers\" },\n    NetbiosNameServers = new [] { \"netbiosNameServers\" },\n    NetbiosNodeType = 123,\n    NtpServers = new [] { \"ntpServers\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnDHCPOptionsProps cfnDHCPOptionsProps = CfnDHCPOptionsProps.builder()\n        .domainName(\"domainName\")\n        .domainNameServers(List.of(\"domainNameServers\"))\n        .netbiosNameServers(List.of(\"netbiosNameServers\"))\n        .netbiosNodeType(123)\n        .ntpServers(List.of(\"ntpServers\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnDHCPOptionsProps := &cfnDHCPOptionsProps{\n\tdomainName: jsii.String(\"domainName\"),\n\tdomainNameServers: []*string{\n\t\tjsii.String(\"domainNameServers\"),\n\t},\n\tnetbiosNameServers: []*string{\n\t\tjsii.String(\"netbiosNameServers\"),\n\t},\n\tnetbiosNodeType: jsii.Number(123),\n\tntpServers: []*string{\n\t\tjsii.String(\"ntpServers\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnDHCPOptionsProps: ec2.CfnDHCPOptionsProps = {\n  domainName: 'domainName',\n  domainNameServers: ['domainNameServers'],\n  netbiosNameServers: ['netbiosNameServers'],\n  netbiosNodeType: 123,\n  ntpServers: ['ntpServers'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnDHCPOptionsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnDHCPOptionsProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDHCPOptionsProps: ec2.CfnDHCPOptionsProps = {\n  domainName: 'domainName',\n  domainNameServers: ['domainNameServers'],\n  netbiosNameServers: ['netbiosNameServers'],\n  netbiosNodeType: 123,\n  ntpServers: ['ntpServers'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 12,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "97c3fa764244126a907ccda2f9d25be4bfb52865f8af446378efb34d8492ecb3"
    },
    "7600ee7b794710904b5b9f9559973599e75139fe68ad075fb316de5b28f607f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_eC2_fleet = ec2.CfnEC2Fleet(self, \"MyCfnEC2Fleet\",\n    launch_template_configs=[ec2.CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty(\n        launch_template_specification=ec2.CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty(\n            launch_template_id=\"launchTemplateId\",\n            launch_template_name=\"launchTemplateName\",\n            version=\"version\"\n        ),\n        overrides=[ec2.CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty(\n            availability_zone=\"availabilityZone\",\n            instance_requirements=ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty(\n                accelerator_count=ec2.CfnEC2Fleet.AcceleratorCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_manufacturers=[\"acceleratorManufacturers\"],\n                accelerator_names=[\"acceleratorNames\"],\n                accelerator_total_memory_mi_b=ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_types=[\"acceleratorTypes\"],\n                bare_metal=\"bareMetal\",\n                baseline_ebs_bandwidth_mbps=ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                burstable_performance=\"burstablePerformance\",\n                cpu_manufacturers=[\"cpuManufacturers\"],\n                excluded_instance_types=[\"excludedInstanceTypes\"],\n                instance_generations=[\"instanceGenerations\"],\n                local_storage=\"localStorage\",\n                local_storage_types=[\"localStorageTypes\"],\n                memory_gi_bPer_vCpu=ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                memory_mi_b=ec2.CfnEC2Fleet.MemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                network_interface_count=ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                on_demand_max_price_percentage_over_lowest_price=123,\n                require_hibernate_support=False,\n                spot_max_price_percentage_over_lowest_price=123,\n                total_local_storage_gb=ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                v_cpu_count=ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty(\n                    max=123,\n                    min=123\n                )\n            ),\n            instance_type=\"instanceType\",\n            max_price=\"maxPrice\",\n            placement=ec2.CfnEC2Fleet.PlacementProperty(\n                affinity=\"affinity\",\n                availability_zone=\"availabilityZone\",\n                group_name=\"groupName\",\n                host_id=\"hostId\",\n                host_resource_group_arn=\"hostResourceGroupArn\",\n                partition_number=123,\n                spread_domain=\"spreadDomain\",\n                tenancy=\"tenancy\"\n            ),\n            priority=123,\n            subnet_id=\"subnetId\",\n            weighted_capacity=123\n        )]\n    )],\n    target_capacity_specification=ec2.CfnEC2Fleet.TargetCapacitySpecificationRequestProperty(\n        total_target_capacity=123,\n\n        # the properties below are optional\n        default_target_capacity_type=\"defaultTargetCapacityType\",\n        on_demand_target_capacity=123,\n        spot_target_capacity=123,\n        target_capacity_unit_type=\"targetCapacityUnitType\"\n    ),\n\n    # the properties below are optional\n    context=\"context\",\n    excess_capacity_termination_policy=\"excessCapacityTerminationPolicy\",\n    on_demand_options=ec2.CfnEC2Fleet.OnDemandOptionsRequestProperty(\n        allocation_strategy=\"allocationStrategy\",\n        capacity_reservation_options=ec2.CfnEC2Fleet.CapacityReservationOptionsRequestProperty(\n            usage_strategy=\"usageStrategy\"\n        ),\n        max_total_price=\"maxTotalPrice\",\n        min_target_capacity=123,\n        single_availability_zone=False,\n        single_instance_type=False\n    ),\n    replace_unhealthy_instances=False,\n    spot_options=ec2.CfnEC2Fleet.SpotOptionsRequestProperty(\n        allocation_strategy=\"allocationStrategy\",\n        instance_interruption_behavior=\"instanceInterruptionBehavior\",\n        instance_pools_to_use_count=123,\n        maintenance_strategies=ec2.CfnEC2Fleet.MaintenanceStrategiesProperty(\n            capacity_rebalance=ec2.CfnEC2Fleet.CapacityRebalanceProperty(\n                replacement_strategy=\"replacementStrategy\",\n                termination_delay=123\n            )\n        ),\n        max_total_price=\"maxTotalPrice\",\n        min_target_capacity=123,\n        single_availability_zone=False,\n        single_instance_type=False\n    ),\n    tag_specifications=[ec2.CfnEC2Fleet.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    terminate_instances_with_expiration=False,\n    type=\"type\",\n    valid_from=\"validFrom\",\n    valid_until=\"validUntil\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnEC2Fleet cfnEC2Fleet = new CfnEC2Fleet(this, \"MyCfnEC2Fleet\", new CfnEC2FleetProps {\n    LaunchTemplateConfigs = new [] { new FleetLaunchTemplateConfigRequestProperty {\n        LaunchTemplateSpecification = new FleetLaunchTemplateSpecificationRequestProperty {\n            LaunchTemplateId = \"launchTemplateId\",\n            LaunchTemplateName = \"launchTemplateName\",\n            Version = \"version\"\n        },\n        Overrides = new [] { new FleetLaunchTemplateOverridesRequestProperty {\n            AvailabilityZone = \"availabilityZone\",\n            InstanceRequirements = new InstanceRequirementsRequestProperty {\n                AcceleratorCount = new AcceleratorCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n                AcceleratorNames = new [] { \"acceleratorNames\" },\n                AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorTypes = new [] { \"acceleratorTypes\" },\n                BareMetal = \"bareMetal\",\n                BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                BurstablePerformance = \"burstablePerformance\",\n                CpuManufacturers = new [] { \"cpuManufacturers\" },\n                ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n                InstanceGenerations = new [] { \"instanceGenerations\" },\n                LocalStorage = \"localStorage\",\n                LocalStorageTypes = new [] { \"localStorageTypes\" },\n                MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                MemoryMiB = new MemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                OnDemandMaxPricePercentageOverLowestPrice = 123,\n                RequireHibernateSupport = false,\n                SpotMaxPricePercentageOverLowestPrice = 123,\n                TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                VCpuCount = new VCpuCountRangeRequestProperty {\n                    Max = 123,\n                    Min = 123\n                }\n            },\n            InstanceType = \"instanceType\",\n            MaxPrice = \"maxPrice\",\n            Placement = new PlacementProperty {\n                Affinity = \"affinity\",\n                AvailabilityZone = \"availabilityZone\",\n                GroupName = \"groupName\",\n                HostId = \"hostId\",\n                HostResourceGroupArn = \"hostResourceGroupArn\",\n                PartitionNumber = 123,\n                SpreadDomain = \"spreadDomain\",\n                Tenancy = \"tenancy\"\n            },\n            Priority = 123,\n            SubnetId = \"subnetId\",\n            WeightedCapacity = 123\n        } }\n    } },\n    TargetCapacitySpecification = new TargetCapacitySpecificationRequestProperty {\n        TotalTargetCapacity = 123,\n\n        // the properties below are optional\n        DefaultTargetCapacityType = \"defaultTargetCapacityType\",\n        OnDemandTargetCapacity = 123,\n        SpotTargetCapacity = 123,\n        TargetCapacityUnitType = \"targetCapacityUnitType\"\n    },\n\n    // the properties below are optional\n    Context = \"context\",\n    ExcessCapacityTerminationPolicy = \"excessCapacityTerminationPolicy\",\n    OnDemandOptions = new OnDemandOptionsRequestProperty {\n        AllocationStrategy = \"allocationStrategy\",\n        CapacityReservationOptions = new CapacityReservationOptionsRequestProperty {\n            UsageStrategy = \"usageStrategy\"\n        },\n        MaxTotalPrice = \"maxTotalPrice\",\n        MinTargetCapacity = 123,\n        SingleAvailabilityZone = false,\n        SingleInstanceType = false\n    },\n    ReplaceUnhealthyInstances = false,\n    SpotOptions = new SpotOptionsRequestProperty {\n        AllocationStrategy = \"allocationStrategy\",\n        InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n        InstancePoolsToUseCount = 123,\n        MaintenanceStrategies = new MaintenanceStrategiesProperty {\n            CapacityRebalance = new CapacityRebalanceProperty {\n                ReplacementStrategy = \"replacementStrategy\",\n                TerminationDelay = 123\n            }\n        },\n        MaxTotalPrice = \"maxTotalPrice\",\n        MinTargetCapacity = 123,\n        SingleAvailabilityZone = false,\n        SingleInstanceType = false\n    },\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    TerminateInstancesWithExpiration = false,\n    Type = \"type\",\n    ValidFrom = \"validFrom\",\n    ValidUntil = \"validUntil\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnEC2Fleet cfnEC2Fleet = CfnEC2Fleet.Builder.create(this, \"MyCfnEC2Fleet\")\n        .launchTemplateConfigs(List.of(FleetLaunchTemplateConfigRequestProperty.builder()\n                .launchTemplateSpecification(FleetLaunchTemplateSpecificationRequestProperty.builder()\n                        .launchTemplateId(\"launchTemplateId\")\n                        .launchTemplateName(\"launchTemplateName\")\n                        .version(\"version\")\n                        .build())\n                .overrides(List.of(FleetLaunchTemplateOverridesRequestProperty.builder()\n                        .availabilityZone(\"availabilityZone\")\n                        .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                                .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                                .acceleratorNames(List.of(\"acceleratorNames\"))\n                                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                                .bareMetal(\"bareMetal\")\n                                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .burstablePerformance(\"burstablePerformance\")\n                                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                                .instanceGenerations(List.of(\"instanceGenerations\"))\n                                .localStorage(\"localStorage\")\n                                .localStorageTypes(List.of(\"localStorageTypes\"))\n                                .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .memoryMiB(MemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .onDemandMaxPricePercentageOverLowestPrice(123)\n                                .requireHibernateSupport(false)\n                                .spotMaxPricePercentageOverLowestPrice(123)\n                                .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .build())\n                        .instanceType(\"instanceType\")\n                        .maxPrice(\"maxPrice\")\n                        .placement(PlacementProperty.builder()\n                                .affinity(\"affinity\")\n                                .availabilityZone(\"availabilityZone\")\n                                .groupName(\"groupName\")\n                                .hostId(\"hostId\")\n                                .hostResourceGroupArn(\"hostResourceGroupArn\")\n                                .partitionNumber(123)\n                                .spreadDomain(\"spreadDomain\")\n                                .tenancy(\"tenancy\")\n                                .build())\n                        .priority(123)\n                        .subnetId(\"subnetId\")\n                        .weightedCapacity(123)\n                        .build()))\n                .build()))\n        .targetCapacitySpecification(TargetCapacitySpecificationRequestProperty.builder()\n                .totalTargetCapacity(123)\n\n                // the properties below are optional\n                .defaultTargetCapacityType(\"defaultTargetCapacityType\")\n                .onDemandTargetCapacity(123)\n                .spotTargetCapacity(123)\n                .targetCapacityUnitType(\"targetCapacityUnitType\")\n                .build())\n\n        // the properties below are optional\n        .context(\"context\")\n        .excessCapacityTerminationPolicy(\"excessCapacityTerminationPolicy\")\n        .onDemandOptions(OnDemandOptionsRequestProperty.builder()\n                .allocationStrategy(\"allocationStrategy\")\n                .capacityReservationOptions(CapacityReservationOptionsRequestProperty.builder()\n                        .usageStrategy(\"usageStrategy\")\n                        .build())\n                .maxTotalPrice(\"maxTotalPrice\")\n                .minTargetCapacity(123)\n                .singleAvailabilityZone(false)\n                .singleInstanceType(false)\n                .build())\n        .replaceUnhealthyInstances(false)\n        .spotOptions(SpotOptionsRequestProperty.builder()\n                .allocationStrategy(\"allocationStrategy\")\n                .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n                .instancePoolsToUseCount(123)\n                .maintenanceStrategies(MaintenanceStrategiesProperty.builder()\n                        .capacityRebalance(CapacityRebalanceProperty.builder()\n                                .replacementStrategy(\"replacementStrategy\")\n                                .terminationDelay(123)\n                                .build())\n                        .build())\n                .maxTotalPrice(\"maxTotalPrice\")\n                .minTargetCapacity(123)\n                .singleAvailabilityZone(false)\n                .singleInstanceType(false)\n                .build())\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .terminateInstancesWithExpiration(false)\n        .type(\"type\")\n        .validFrom(\"validFrom\")\n        .validUntil(\"validUntil\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnEC2Fleet := ec2.NewCfnEC2Fleet(this, jsii.String(\"MyCfnEC2Fleet\"), &cfnEC2FleetProps{\n\tlaunchTemplateConfigs: []interface{}{\n\t\t&fleetLaunchTemplateConfigRequestProperty{\n\t\t\tlaunchTemplateSpecification: &fleetLaunchTemplateSpecificationRequestProperty{\n\t\t\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\t\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t\t\t\tversion: jsii.String(\"version\"),\n\t\t\t},\n\t\t\toverrides: []interface{}{\n\t\t\t\t&fleetLaunchTemplateOverridesRequestProperty{\n\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\t\t\tmaxPrice: jsii.String(\"maxPrice\"),\n\t\t\t\t\tplacement: &placementProperty{\n\t\t\t\t\t\taffinity: jsii.String(\"affinity\"),\n\t\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\t\tgroupName: jsii.String(\"groupName\"),\n\t\t\t\t\t\thostId: jsii.String(\"hostId\"),\n\t\t\t\t\t\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\t\t\t\t\t\tpartitionNumber: jsii.Number(123),\n\t\t\t\t\t\tspreadDomain: jsii.String(\"spreadDomain\"),\n\t\t\t\t\t\ttenancy: jsii.String(\"tenancy\"),\n\t\t\t\t\t},\n\t\t\t\t\tpriority: jsii.Number(123),\n\t\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\t\tweightedCapacity: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttargetCapacitySpecification: &targetCapacitySpecificationRequestProperty{\n\t\ttotalTargetCapacity: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tdefaultTargetCapacityType: jsii.String(\"defaultTargetCapacityType\"),\n\t\tonDemandTargetCapacity: jsii.Number(123),\n\t\tspotTargetCapacity: jsii.Number(123),\n\t\ttargetCapacityUnitType: jsii.String(\"targetCapacityUnitType\"),\n\t},\n\n\t// the properties below are optional\n\tcontext: jsii.String(\"context\"),\n\texcessCapacityTerminationPolicy: jsii.String(\"excessCapacityTerminationPolicy\"),\n\tonDemandOptions: &onDemandOptionsRequestProperty{\n\t\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\t\tcapacityReservationOptions: &capacityReservationOptionsRequestProperty{\n\t\t\tusageStrategy: jsii.String(\"usageStrategy\"),\n\t\t},\n\t\tmaxTotalPrice: jsii.String(\"maxTotalPrice\"),\n\t\tminTargetCapacity: jsii.Number(123),\n\t\tsingleAvailabilityZone: jsii.Boolean(false),\n\t\tsingleInstanceType: jsii.Boolean(false),\n\t},\n\treplaceUnhealthyInstances: jsii.Boolean(false),\n\tspotOptions: &spotOptionsRequestProperty{\n\t\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\t\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\t\tinstancePoolsToUseCount: jsii.Number(123),\n\t\tmaintenanceStrategies: &maintenanceStrategiesProperty{\n\t\t\tcapacityRebalance: &capacityRebalanceProperty{\n\t\t\t\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\t\t\t\tterminationDelay: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tmaxTotalPrice: jsii.String(\"maxTotalPrice\"),\n\t\tminTargetCapacity: jsii.Number(123),\n\t\tsingleAvailabilityZone: jsii.Boolean(false),\n\t\tsingleInstanceType: jsii.Boolean(false),\n\t},\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tterminateInstancesWithExpiration: jsii.Boolean(false),\n\ttype: jsii.String(\"type\"),\n\tvalidFrom: jsii.String(\"validFrom\"),\n\tvalidUntil: jsii.String(\"validUntil\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnEC2Fleet = new ec2.CfnEC2Fleet(this, 'MyCfnEC2Fleet', {\n  launchTemplateConfigs: [{\n    launchTemplateSpecification: {\n      launchTemplateId: 'launchTemplateId',\n      launchTemplateName: 'launchTemplateName',\n      version: 'version',\n    },\n    overrides: [{\n      availabilityZone: 'availabilityZone',\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      maxPrice: 'maxPrice',\n      placement: {\n        affinity: 'affinity',\n        availabilityZone: 'availabilityZone',\n        groupName: 'groupName',\n        hostId: 'hostId',\n        hostResourceGroupArn: 'hostResourceGroupArn',\n        partitionNumber: 123,\n        spreadDomain: 'spreadDomain',\n        tenancy: 'tenancy',\n      },\n      priority: 123,\n      subnetId: 'subnetId',\n      weightedCapacity: 123,\n    }],\n  }],\n  targetCapacitySpecification: {\n    totalTargetCapacity: 123,\n\n    // the properties below are optional\n    defaultTargetCapacityType: 'defaultTargetCapacityType',\n    onDemandTargetCapacity: 123,\n    spotTargetCapacity: 123,\n    targetCapacityUnitType: 'targetCapacityUnitType',\n  },\n\n  // the properties below are optional\n  context: 'context',\n  excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n  onDemandOptions: {\n    allocationStrategy: 'allocationStrategy',\n    capacityReservationOptions: {\n      usageStrategy: 'usageStrategy',\n    },\n    maxTotalPrice: 'maxTotalPrice',\n    minTargetCapacity: 123,\n    singleAvailabilityZone: false,\n    singleInstanceType: false,\n  },\n  replaceUnhealthyInstances: false,\n  spotOptions: {\n    allocationStrategy: 'allocationStrategy',\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    instancePoolsToUseCount: 123,\n    maintenanceStrategies: {\n      capacityRebalance: {\n        replacementStrategy: 'replacementStrategy',\n        terminationDelay: 123,\n      },\n    },\n    maxTotalPrice: 'maxTotalPrice',\n    minTargetCapacity: 123,\n    singleAvailabilityZone: false,\n    singleInstanceType: false,\n  },\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  terminateInstancesWithExpiration: false,\n  type: 'type',\n  validFrom: 'validFrom',\n  validUntil: 'validUntil',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet",
        "@aws-cdk/aws-ec2.CfnEC2FleetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEC2Fleet = new ec2.CfnEC2Fleet(this, 'MyCfnEC2Fleet', {\n  launchTemplateConfigs: [{\n    launchTemplateSpecification: {\n      launchTemplateId: 'launchTemplateId',\n      launchTemplateName: 'launchTemplateName',\n      version: 'version',\n    },\n    overrides: [{\n      availabilityZone: 'availabilityZone',\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      maxPrice: 'maxPrice',\n      placement: {\n        affinity: 'affinity',\n        availabilityZone: 'availabilityZone',\n        groupName: 'groupName',\n        hostId: 'hostId',\n        hostResourceGroupArn: 'hostResourceGroupArn',\n        partitionNumber: 123,\n        spreadDomain: 'spreadDomain',\n        tenancy: 'tenancy',\n      },\n      priority: 123,\n      subnetId: 'subnetId',\n      weightedCapacity: 123,\n    }],\n  }],\n  targetCapacitySpecification: {\n    totalTargetCapacity: 123,\n\n    // the properties below are optional\n    defaultTargetCapacityType: 'defaultTargetCapacityType',\n    onDemandTargetCapacity: 123,\n    spotTargetCapacity: 123,\n    targetCapacityUnitType: 'targetCapacityUnitType',\n  },\n\n  // the properties below are optional\n  context: 'context',\n  excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n  onDemandOptions: {\n    allocationStrategy: 'allocationStrategy',\n    capacityReservationOptions: {\n      usageStrategy: 'usageStrategy',\n    },\n    maxTotalPrice: 'maxTotalPrice',\n    minTargetCapacity: 123,\n    singleAvailabilityZone: false,\n    singleInstanceType: false,\n  },\n  replaceUnhealthyInstances: false,\n  spotOptions: {\n    allocationStrategy: 'allocationStrategy',\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    instancePoolsToUseCount: 123,\n    maintenanceStrategies: {\n      capacityRebalance: {\n        replacementStrategy: 'replacementStrategy',\n        terminationDelay: 123,\n      },\n    },\n    maxTotalPrice: 'maxTotalPrice',\n    minTargetCapacity: 123,\n    singleAvailabilityZone: false,\n    singleInstanceType: false,\n  },\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  terminateInstancesWithExpiration: false,\n  type: 'type',\n  validFrom: 'validFrom',\n  validUntil: 'validUntil',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 28,
        "10": 43,
        "75": 101,
        "91": 7,
        "104": 1,
        "192": 11,
        "193": 22,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 97,
        "290": 1
      },
      "fqnsFingerprint": "a88b24399868233e19d1ecc047bce2cebb3bcc248244153aafec7e6d809a1a9d"
    },
    "ec50447f6474d09dd0f3c7237af77bb56fb7db382cc01f6d7172486b253c0fb3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\naccelerator_count_request_property = ec2.CfnEC2Fleet.AcceleratorCountRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAcceleratorCountRequestProperty acceleratorCountRequestProperty = new AcceleratorCountRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAcceleratorCountRequestProperty acceleratorCountRequestProperty = AcceleratorCountRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nacceleratorCountRequestProperty := &acceleratorCountRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst acceleratorCountRequestProperty: ec2.CfnEC2Fleet.AcceleratorCountRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.AcceleratorCountRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.AcceleratorCountRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorCountRequestProperty: ec2.CfnEC2Fleet.AcceleratorCountRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f17c04f569355f61cd5ea88f14e347ca4c06c7e72d1710da0df69d75f253c4e5"
    },
    "5ff54695a6f6ab21399f9584286b3cafc6b30f60569c1c100d3b486ef2f3f420": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\naccelerator_total_memory_mi_bRequest_property = ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAcceleratorTotalMemoryMiBRequestProperty acceleratorTotalMemoryMiBRequestProperty = new AcceleratorTotalMemoryMiBRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAcceleratorTotalMemoryMiBRequestProperty acceleratorTotalMemoryMiBRequestProperty = AcceleratorTotalMemoryMiBRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nacceleratorTotalMemoryMiBRequestProperty := &acceleratorTotalMemoryMiBRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst acceleratorTotalMemoryMiBRequestProperty: ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorTotalMemoryMiBRequestProperty: ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "279c01a40284ecb31aaae7e20820ad6f764993a1d4966087b2539808f72d7b9e"
    },
    "b6b626c59edeba6da8df32740948b664a01253e251879c9d0ad2fc83d0bdcca9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nbaseline_ebs_bandwidth_mbps_request_property = ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nBaselineEbsBandwidthMbpsRequestProperty baselineEbsBandwidthMbpsRequestProperty = new BaselineEbsBandwidthMbpsRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nBaselineEbsBandwidthMbpsRequestProperty baselineEbsBandwidthMbpsRequestProperty = BaselineEbsBandwidthMbpsRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nbaselineEbsBandwidthMbpsRequestProperty := &baselineEbsBandwidthMbpsRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst baselineEbsBandwidthMbpsRequestProperty: ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baselineEbsBandwidthMbpsRequestProperty: ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7fc6628ecb62fc29841c9273eabdb4579930c99076f6e7c1fa0711407195f99b"
    },
    "53fd21c92aed9244e46d5c871af02965aac527b56fd4408fc878c42abffee0a5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncapacity_rebalance_property = ec2.CfnEC2Fleet.CapacityRebalanceProperty(\n    replacement_strategy=\"replacementStrategy\",\n    termination_delay=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCapacityRebalanceProperty capacityRebalanceProperty = new CapacityRebalanceProperty {\n    ReplacementStrategy = \"replacementStrategy\",\n    TerminationDelay = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCapacityRebalanceProperty capacityRebalanceProperty = CapacityRebalanceProperty.builder()\n        .replacementStrategy(\"replacementStrategy\")\n        .terminationDelay(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncapacityRebalanceProperty := &capacityRebalanceProperty{\n\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\tterminationDelay: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst capacityRebalanceProperty: ec2.CfnEC2Fleet.CapacityRebalanceProperty = {\n  replacementStrategy: 'replacementStrategy',\n  terminationDelay: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.CapacityRebalanceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.CapacityRebalanceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityRebalanceProperty: ec2.CfnEC2Fleet.CapacityRebalanceProperty = {\n  replacementStrategy: 'replacementStrategy',\n  terminationDelay: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "11f94e71562c67be1613d86b507d841c37b93eb6d7620af34eb0e108f8a5d703"
    },
    "1cf1d9329bf05e82b20b56954a11a50c698d435e1784155e4dca90cec0d08d0d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncapacity_reservation_options_request_property = ec2.CfnEC2Fleet.CapacityReservationOptionsRequestProperty(\n    usage_strategy=\"usageStrategy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCapacityReservationOptionsRequestProperty capacityReservationOptionsRequestProperty = new CapacityReservationOptionsRequestProperty {\n    UsageStrategy = \"usageStrategy\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCapacityReservationOptionsRequestProperty capacityReservationOptionsRequestProperty = CapacityReservationOptionsRequestProperty.builder()\n        .usageStrategy(\"usageStrategy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncapacityReservationOptionsRequestProperty := &capacityReservationOptionsRequestProperty{\n\tusageStrategy: jsii.String(\"usageStrategy\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst capacityReservationOptionsRequestProperty: ec2.CfnEC2Fleet.CapacityReservationOptionsRequestProperty = {\n  usageStrategy: 'usageStrategy',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.CapacityReservationOptionsRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.CapacityReservationOptionsRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityReservationOptionsRequestProperty: ec2.CfnEC2Fleet.CapacityReservationOptionsRequestProperty = {\n  usageStrategy: 'usageStrategy',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f5cb2373fb467e089f31f5d12bb372782e0edddb7b977b2bc249a2a3785632fb"
    },
    "1315ecac7097f1533b17afe2875bcb74de87dc7ddd02f6b946167a24541b2272": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nfleet_launch_template_config_request_property = ec2.CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty(\n    launch_template_specification=ec2.CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty(\n        launch_template_id=\"launchTemplateId\",\n        launch_template_name=\"launchTemplateName\",\n        version=\"version\"\n    ),\n    overrides=[ec2.CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty(\n        availability_zone=\"availabilityZone\",\n        instance_requirements=ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty(\n            accelerator_count=ec2.CfnEC2Fleet.AcceleratorCountRequestProperty(\n                max=123,\n                min=123\n            ),\n            accelerator_manufacturers=[\"acceleratorManufacturers\"],\n            accelerator_names=[\"acceleratorNames\"],\n            accelerator_total_memory_mi_b=ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty(\n                max=123,\n                min=123\n            ),\n            accelerator_types=[\"acceleratorTypes\"],\n            bare_metal=\"bareMetal\",\n            baseline_ebs_bandwidth_mbps=ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty(\n                max=123,\n                min=123\n            ),\n            burstable_performance=\"burstablePerformance\",\n            cpu_manufacturers=[\"cpuManufacturers\"],\n            excluded_instance_types=[\"excludedInstanceTypes\"],\n            instance_generations=[\"instanceGenerations\"],\n            local_storage=\"localStorage\",\n            local_storage_types=[\"localStorageTypes\"],\n            memory_gi_bPer_vCpu=ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty(\n                max=123,\n                min=123\n            ),\n            memory_mi_b=ec2.CfnEC2Fleet.MemoryMiBRequestProperty(\n                max=123,\n                min=123\n            ),\n            network_interface_count=ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty(\n                max=123,\n                min=123\n            ),\n            on_demand_max_price_percentage_over_lowest_price=123,\n            require_hibernate_support=False,\n            spot_max_price_percentage_over_lowest_price=123,\n            total_local_storage_gb=ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty(\n                max=123,\n                min=123\n            ),\n            v_cpu_count=ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty(\n                max=123,\n                min=123\n            )\n        ),\n        instance_type=\"instanceType\",\n        max_price=\"maxPrice\",\n        placement=ec2.CfnEC2Fleet.PlacementProperty(\n            affinity=\"affinity\",\n            availability_zone=\"availabilityZone\",\n            group_name=\"groupName\",\n            host_id=\"hostId\",\n            host_resource_group_arn=\"hostResourceGroupArn\",\n            partition_number=123,\n            spread_domain=\"spreadDomain\",\n            tenancy=\"tenancy\"\n        ),\n        priority=123,\n        subnet_id=\"subnetId\",\n        weighted_capacity=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nFleetLaunchTemplateConfigRequestProperty fleetLaunchTemplateConfigRequestProperty = new FleetLaunchTemplateConfigRequestProperty {\n    LaunchTemplateSpecification = new FleetLaunchTemplateSpecificationRequestProperty {\n        LaunchTemplateId = \"launchTemplateId\",\n        LaunchTemplateName = \"launchTemplateName\",\n        Version = \"version\"\n    },\n    Overrides = new [] { new FleetLaunchTemplateOverridesRequestProperty {\n        AvailabilityZone = \"availabilityZone\",\n        InstanceRequirements = new InstanceRequirementsRequestProperty {\n            AcceleratorCount = new AcceleratorCountRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n            AcceleratorNames = new [] { \"acceleratorNames\" },\n            AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            AcceleratorTypes = new [] { \"acceleratorTypes\" },\n            BareMetal = \"bareMetal\",\n            BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            BurstablePerformance = \"burstablePerformance\",\n            CpuManufacturers = new [] { \"cpuManufacturers\" },\n            ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n            InstanceGenerations = new [] { \"instanceGenerations\" },\n            LocalStorage = \"localStorage\",\n            LocalStorageTypes = new [] { \"localStorageTypes\" },\n            MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            MemoryMiB = new MemoryMiBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            OnDemandMaxPricePercentageOverLowestPrice = 123,\n            RequireHibernateSupport = false,\n            SpotMaxPricePercentageOverLowestPrice = 123,\n            TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            VCpuCount = new VCpuCountRangeRequestProperty {\n                Max = 123,\n                Min = 123\n            }\n        },\n        InstanceType = \"instanceType\",\n        MaxPrice = \"maxPrice\",\n        Placement = new PlacementProperty {\n            Affinity = \"affinity\",\n            AvailabilityZone = \"availabilityZone\",\n            GroupName = \"groupName\",\n            HostId = \"hostId\",\n            HostResourceGroupArn = \"hostResourceGroupArn\",\n            PartitionNumber = 123,\n            SpreadDomain = \"spreadDomain\",\n            Tenancy = \"tenancy\"\n        },\n        Priority = 123,\n        SubnetId = \"subnetId\",\n        WeightedCapacity = 123\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nFleetLaunchTemplateConfigRequestProperty fleetLaunchTemplateConfigRequestProperty = FleetLaunchTemplateConfigRequestProperty.builder()\n        .launchTemplateSpecification(FleetLaunchTemplateSpecificationRequestProperty.builder()\n                .launchTemplateId(\"launchTemplateId\")\n                .launchTemplateName(\"launchTemplateName\")\n                .version(\"version\")\n                .build())\n        .overrides(List.of(FleetLaunchTemplateOverridesRequestProperty.builder()\n                .availabilityZone(\"availabilityZone\")\n                .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                        .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                        .acceleratorNames(List.of(\"acceleratorNames\"))\n                        .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                        .bareMetal(\"bareMetal\")\n                        .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .burstablePerformance(\"burstablePerformance\")\n                        .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                        .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                        .instanceGenerations(List.of(\"instanceGenerations\"))\n                        .localStorage(\"localStorage\")\n                        .localStorageTypes(List.of(\"localStorageTypes\"))\n                        .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .memoryMiB(MemoryMiBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .onDemandMaxPricePercentageOverLowestPrice(123)\n                        .requireHibernateSupport(false)\n                        .spotMaxPricePercentageOverLowestPrice(123)\n                        .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .build())\n                .instanceType(\"instanceType\")\n                .maxPrice(\"maxPrice\")\n                .placement(PlacementProperty.builder()\n                        .affinity(\"affinity\")\n                        .availabilityZone(\"availabilityZone\")\n                        .groupName(\"groupName\")\n                        .hostId(\"hostId\")\n                        .hostResourceGroupArn(\"hostResourceGroupArn\")\n                        .partitionNumber(123)\n                        .spreadDomain(\"spreadDomain\")\n                        .tenancy(\"tenancy\")\n                        .build())\n                .priority(123)\n                .subnetId(\"subnetId\")\n                .weightedCapacity(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nfleetLaunchTemplateConfigRequestProperty := &fleetLaunchTemplateConfigRequestProperty{\n\tlaunchTemplateSpecification: &fleetLaunchTemplateSpecificationRequestProperty{\n\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t\tversion: jsii.String(\"version\"),\n\t},\n\toverrides: []interface{}{\n\t\t&fleetLaunchTemplateOverridesRequestProperty{\n\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t},\n\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t},\n\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t},\n\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t},\n\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t},\n\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t},\n\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t},\n\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\tmaxPrice: jsii.String(\"maxPrice\"),\n\t\t\tplacement: &placementProperty{\n\t\t\t\taffinity: jsii.String(\"affinity\"),\n\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\tgroupName: jsii.String(\"groupName\"),\n\t\t\t\thostId: jsii.String(\"hostId\"),\n\t\t\t\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\t\t\t\tpartitionNumber: jsii.Number(123),\n\t\t\t\tspreadDomain: jsii.String(\"spreadDomain\"),\n\t\t\t\ttenancy: jsii.String(\"tenancy\"),\n\t\t\t},\n\t\t\tpriority: jsii.Number(123),\n\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\tweightedCapacity: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst fleetLaunchTemplateConfigRequestProperty: ec2.CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty = {\n  launchTemplateSpecification: {\n    launchTemplateId: 'launchTemplateId',\n    launchTemplateName: 'launchTemplateName',\n    version: 'version',\n  },\n  overrides: [{\n    availabilityZone: 'availabilityZone',\n    instanceRequirements: {\n      acceleratorCount: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorManufacturers: ['acceleratorManufacturers'],\n      acceleratorNames: ['acceleratorNames'],\n      acceleratorTotalMemoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorTypes: ['acceleratorTypes'],\n      bareMetal: 'bareMetal',\n      baselineEbsBandwidthMbps: {\n        max: 123,\n        min: 123,\n      },\n      burstablePerformance: 'burstablePerformance',\n      cpuManufacturers: ['cpuManufacturers'],\n      excludedInstanceTypes: ['excludedInstanceTypes'],\n      instanceGenerations: ['instanceGenerations'],\n      localStorage: 'localStorage',\n      localStorageTypes: ['localStorageTypes'],\n      memoryGiBPerVCpu: {\n        max: 123,\n        min: 123,\n      },\n      memoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      networkInterfaceCount: {\n        max: 123,\n        min: 123,\n      },\n      onDemandMaxPricePercentageOverLowestPrice: 123,\n      requireHibernateSupport: false,\n      spotMaxPricePercentageOverLowestPrice: 123,\n      totalLocalStorageGb: {\n        max: 123,\n        min: 123,\n      },\n      vCpuCount: {\n        max: 123,\n        min: 123,\n      },\n    },\n    instanceType: 'instanceType',\n    maxPrice: 'maxPrice',\n    placement: {\n      affinity: 'affinity',\n      availabilityZone: 'availabilityZone',\n      groupName: 'groupName',\n      hostId: 'hostId',\n      hostResourceGroupArn: 'hostResourceGroupArn',\n      partitionNumber: 123,\n      spreadDomain: 'spreadDomain',\n      tenancy: 'tenancy',\n    },\n    priority: 123,\n    subnetId: 'subnetId',\n    weightedCapacity: 123,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fleetLaunchTemplateConfigRequestProperty: ec2.CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty = {\n  launchTemplateSpecification: {\n    launchTemplateId: 'launchTemplateId',\n    launchTemplateName: 'launchTemplateName',\n    version: 'version',\n  },\n  overrides: [{\n    availabilityZone: 'availabilityZone',\n    instanceRequirements: {\n      acceleratorCount: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorManufacturers: ['acceleratorManufacturers'],\n      acceleratorNames: ['acceleratorNames'],\n      acceleratorTotalMemoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorTypes: ['acceleratorTypes'],\n      bareMetal: 'bareMetal',\n      baselineEbsBandwidthMbps: {\n        max: 123,\n        min: 123,\n      },\n      burstablePerformance: 'burstablePerformance',\n      cpuManufacturers: ['cpuManufacturers'],\n      excludedInstanceTypes: ['excludedInstanceTypes'],\n      instanceGenerations: ['instanceGenerations'],\n      localStorage: 'localStorage',\n      localStorageTypes: ['localStorageTypes'],\n      memoryGiBPerVCpu: {\n        max: 123,\n        min: 123,\n      },\n      memoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      networkInterfaceCount: {\n        max: 123,\n        min: 123,\n      },\n      onDemandMaxPricePercentageOverLowestPrice: 123,\n      requireHibernateSupport: false,\n      spotMaxPricePercentageOverLowestPrice: 123,\n      totalLocalStorageGb: {\n        max: 123,\n        min: 123,\n      },\n      vCpuCount: {\n        max: 123,\n        min: 123,\n      },\n    },\n    instanceType: 'instanceType',\n    maxPrice: 'maxPrice',\n    placement: {\n      affinity: 'affinity',\n      availabilityZone: 'availabilityZone',\n      groupName: 'groupName',\n      hostId: 'hostId',\n      hostResourceGroupArn: 'hostResourceGroupArn',\n      partitionNumber: 123,\n      spreadDomain: 'spreadDomain',\n      tenancy: 'tenancy',\n    },\n    priority: 123,\n    subnetId: 'subnetId',\n    weightedCapacity: 123,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 21,
        "10": 25,
        "75": 63,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 8,
        "193": 13,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 58,
        "290": 1
      },
      "fqnsFingerprint": "c95338bd2ee3f596ee7f312c29b1c11f7a5a2149a2407c1015cfb0b0abd2e537"
    },
    "fdcdcede1dcd6aa1e30fce88c80938eed232fbefb15580fbda1724b5ee14a82e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nfleet_launch_template_overrides_request_property = ec2.CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty(\n    availability_zone=\"availabilityZone\",\n    instance_requirements=ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty(\n        accelerator_count=ec2.CfnEC2Fleet.AcceleratorCountRequestProperty(\n            max=123,\n            min=123\n        ),\n        accelerator_manufacturers=[\"acceleratorManufacturers\"],\n        accelerator_names=[\"acceleratorNames\"],\n        accelerator_total_memory_mi_b=ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty(\n            max=123,\n            min=123\n        ),\n        accelerator_types=[\"acceleratorTypes\"],\n        bare_metal=\"bareMetal\",\n        baseline_ebs_bandwidth_mbps=ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty(\n            max=123,\n            min=123\n        ),\n        burstable_performance=\"burstablePerformance\",\n        cpu_manufacturers=[\"cpuManufacturers\"],\n        excluded_instance_types=[\"excludedInstanceTypes\"],\n        instance_generations=[\"instanceGenerations\"],\n        local_storage=\"localStorage\",\n        local_storage_types=[\"localStorageTypes\"],\n        memory_gi_bPer_vCpu=ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty(\n            max=123,\n            min=123\n        ),\n        memory_mi_b=ec2.CfnEC2Fleet.MemoryMiBRequestProperty(\n            max=123,\n            min=123\n        ),\n        network_interface_count=ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty(\n            max=123,\n            min=123\n        ),\n        on_demand_max_price_percentage_over_lowest_price=123,\n        require_hibernate_support=False,\n        spot_max_price_percentage_over_lowest_price=123,\n        total_local_storage_gb=ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty(\n            max=123,\n            min=123\n        ),\n        v_cpu_count=ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty(\n            max=123,\n            min=123\n        )\n    ),\n    instance_type=\"instanceType\",\n    max_price=\"maxPrice\",\n    placement=ec2.CfnEC2Fleet.PlacementProperty(\n        affinity=\"affinity\",\n        availability_zone=\"availabilityZone\",\n        group_name=\"groupName\",\n        host_id=\"hostId\",\n        host_resource_group_arn=\"hostResourceGroupArn\",\n        partition_number=123,\n        spread_domain=\"spreadDomain\",\n        tenancy=\"tenancy\"\n    ),\n    priority=123,\n    subnet_id=\"subnetId\",\n    weighted_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nFleetLaunchTemplateOverridesRequestProperty fleetLaunchTemplateOverridesRequestProperty = new FleetLaunchTemplateOverridesRequestProperty {\n    AvailabilityZone = \"availabilityZone\",\n    InstanceRequirements = new InstanceRequirementsRequestProperty {\n        AcceleratorCount = new AcceleratorCountRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n        AcceleratorNames = new [] { \"acceleratorNames\" },\n        AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        AcceleratorTypes = new [] { \"acceleratorTypes\" },\n        BareMetal = \"bareMetal\",\n        BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        BurstablePerformance = \"burstablePerformance\",\n        CpuManufacturers = new [] { \"cpuManufacturers\" },\n        ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n        InstanceGenerations = new [] { \"instanceGenerations\" },\n        LocalStorage = \"localStorage\",\n        LocalStorageTypes = new [] { \"localStorageTypes\" },\n        MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        MemoryMiB = new MemoryMiBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        OnDemandMaxPricePercentageOverLowestPrice = 123,\n        RequireHibernateSupport = false,\n        SpotMaxPricePercentageOverLowestPrice = 123,\n        TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        VCpuCount = new VCpuCountRangeRequestProperty {\n            Max = 123,\n            Min = 123\n        }\n    },\n    InstanceType = \"instanceType\",\n    MaxPrice = \"maxPrice\",\n    Placement = new PlacementProperty {\n        Affinity = \"affinity\",\n        AvailabilityZone = \"availabilityZone\",\n        GroupName = \"groupName\",\n        HostId = \"hostId\",\n        HostResourceGroupArn = \"hostResourceGroupArn\",\n        PartitionNumber = 123,\n        SpreadDomain = \"spreadDomain\",\n        Tenancy = \"tenancy\"\n    },\n    Priority = 123,\n    SubnetId = \"subnetId\",\n    WeightedCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nFleetLaunchTemplateOverridesRequestProperty fleetLaunchTemplateOverridesRequestProperty = FleetLaunchTemplateOverridesRequestProperty.builder()\n        .availabilityZone(\"availabilityZone\")\n        .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                .acceleratorNames(List.of(\"acceleratorNames\"))\n                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                .bareMetal(\"bareMetal\")\n                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .burstablePerformance(\"burstablePerformance\")\n                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                .instanceGenerations(List.of(\"instanceGenerations\"))\n                .localStorage(\"localStorage\")\n                .localStorageTypes(List.of(\"localStorageTypes\"))\n                .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .memoryMiB(MemoryMiBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .onDemandMaxPricePercentageOverLowestPrice(123)\n                .requireHibernateSupport(false)\n                .spotMaxPricePercentageOverLowestPrice(123)\n                .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .build())\n        .instanceType(\"instanceType\")\n        .maxPrice(\"maxPrice\")\n        .placement(PlacementProperty.builder()\n                .affinity(\"affinity\")\n                .availabilityZone(\"availabilityZone\")\n                .groupName(\"groupName\")\n                .hostId(\"hostId\")\n                .hostResourceGroupArn(\"hostResourceGroupArn\")\n                .partitionNumber(123)\n                .spreadDomain(\"spreadDomain\")\n                .tenancy(\"tenancy\")\n                .build())\n        .priority(123)\n        .subnetId(\"subnetId\")\n        .weightedCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nfleetLaunchTemplateOverridesRequestProperty := &fleetLaunchTemplateOverridesRequestProperty{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tacceleratorManufacturers: []*string{\n\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t},\n\t\tacceleratorNames: []*string{\n\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t},\n\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tacceleratorTypes: []*string{\n\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t},\n\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\tcpuManufacturers: []*string{\n\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t},\n\t\texcludedInstanceTypes: []*string{\n\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t},\n\t\tinstanceGenerations: []*string{\n\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t},\n\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\tlocalStorageTypes: []*string{\n\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t},\n\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t},\n\tinstanceType: jsii.String(\"instanceType\"),\n\tmaxPrice: jsii.String(\"maxPrice\"),\n\tplacement: &placementProperty{\n\t\taffinity: jsii.String(\"affinity\"),\n\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\tgroupName: jsii.String(\"groupName\"),\n\t\thostId: jsii.String(\"hostId\"),\n\t\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\t\tpartitionNumber: jsii.Number(123),\n\t\tspreadDomain: jsii.String(\"spreadDomain\"),\n\t\ttenancy: jsii.String(\"tenancy\"),\n\t},\n\tpriority: jsii.Number(123),\n\tsubnetId: jsii.String(\"subnetId\"),\n\tweightedCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst fleetLaunchTemplateOverridesRequestProperty: ec2.CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty = {\n  availabilityZone: 'availabilityZone',\n  instanceRequirements: {\n    acceleratorCount: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorManufacturers: ['acceleratorManufacturers'],\n    acceleratorNames: ['acceleratorNames'],\n    acceleratorTotalMemoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorTypes: ['acceleratorTypes'],\n    bareMetal: 'bareMetal',\n    baselineEbsBandwidthMbps: {\n      max: 123,\n      min: 123,\n    },\n    burstablePerformance: 'burstablePerformance',\n    cpuManufacturers: ['cpuManufacturers'],\n    excludedInstanceTypes: ['excludedInstanceTypes'],\n    instanceGenerations: ['instanceGenerations'],\n    localStorage: 'localStorage',\n    localStorageTypes: ['localStorageTypes'],\n    memoryGiBPerVCpu: {\n      max: 123,\n      min: 123,\n    },\n    memoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    networkInterfaceCount: {\n      max: 123,\n      min: 123,\n    },\n    onDemandMaxPricePercentageOverLowestPrice: 123,\n    requireHibernateSupport: false,\n    spotMaxPricePercentageOverLowestPrice: 123,\n    totalLocalStorageGb: {\n      max: 123,\n      min: 123,\n    },\n    vCpuCount: {\n      max: 123,\n      min: 123,\n    },\n  },\n  instanceType: 'instanceType',\n  maxPrice: 'maxPrice',\n  placement: {\n    affinity: 'affinity',\n    availabilityZone: 'availabilityZone',\n    groupName: 'groupName',\n    hostId: 'hostId',\n    hostResourceGroupArn: 'hostResourceGroupArn',\n    partitionNumber: 123,\n    spreadDomain: 'spreadDomain',\n    tenancy: 'tenancy',\n  },\n  priority: 123,\n  subnetId: 'subnetId',\n  weightedCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fleetLaunchTemplateOverridesRequestProperty: ec2.CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty = {\n  availabilityZone: 'availabilityZone',\n  instanceRequirements: {\n    acceleratorCount: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorManufacturers: ['acceleratorManufacturers'],\n    acceleratorNames: ['acceleratorNames'],\n    acceleratorTotalMemoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorTypes: ['acceleratorTypes'],\n    bareMetal: 'bareMetal',\n    baselineEbsBandwidthMbps: {\n      max: 123,\n      min: 123,\n    },\n    burstablePerformance: 'burstablePerformance',\n    cpuManufacturers: ['cpuManufacturers'],\n    excludedInstanceTypes: ['excludedInstanceTypes'],\n    instanceGenerations: ['instanceGenerations'],\n    localStorage: 'localStorage',\n    localStorageTypes: ['localStorageTypes'],\n    memoryGiBPerVCpu: {\n      max: 123,\n      min: 123,\n    },\n    memoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    networkInterfaceCount: {\n      max: 123,\n      min: 123,\n    },\n    onDemandMaxPricePercentageOverLowestPrice: 123,\n    requireHibernateSupport: false,\n    spotMaxPricePercentageOverLowestPrice: 123,\n    totalLocalStorageGb: {\n      max: 123,\n      min: 123,\n    },\n    vCpuCount: {\n      max: 123,\n      min: 123,\n    },\n  },\n  instanceType: 'instanceType',\n  maxPrice: 'maxPrice',\n  placement: {\n    affinity: 'affinity',\n    availabilityZone: 'availabilityZone',\n    groupName: 'groupName',\n    hostId: 'hostId',\n    hostResourceGroupArn: 'hostResourceGroupArn',\n    partitionNumber: 123,\n    spreadDomain: 'spreadDomain',\n    tenancy: 'tenancy',\n  },\n  priority: 123,\n  subnetId: 'subnetId',\n  weightedCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 21,
        "10": 22,
        "75": 58,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 7,
        "193": 11,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 53,
        "290": 1
      },
      "fqnsFingerprint": "71e743a0d62b6fc1e6de8bc6f1039c9446bfa69da6f40f88faf32b22a8d5ba6a"
    },
    "d90ad651294012282d11f690168f6426e9c0b00efb693a4c6cb81c17c877f29a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nfleet_launch_template_specification_request_property = ec2.CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty(\n    launch_template_id=\"launchTemplateId\",\n    launch_template_name=\"launchTemplateName\",\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nFleetLaunchTemplateSpecificationRequestProperty fleetLaunchTemplateSpecificationRequestProperty = new FleetLaunchTemplateSpecificationRequestProperty {\n    LaunchTemplateId = \"launchTemplateId\",\n    LaunchTemplateName = \"launchTemplateName\",\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nFleetLaunchTemplateSpecificationRequestProperty fleetLaunchTemplateSpecificationRequestProperty = FleetLaunchTemplateSpecificationRequestProperty.builder()\n        .launchTemplateId(\"launchTemplateId\")\n        .launchTemplateName(\"launchTemplateName\")\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nfleetLaunchTemplateSpecificationRequestProperty := &fleetLaunchTemplateSpecificationRequestProperty{\n\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\tversion: jsii.String(\"version\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst fleetLaunchTemplateSpecificationRequestProperty: ec2.CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty = {\n  launchTemplateId: 'launchTemplateId',\n  launchTemplateName: 'launchTemplateName',\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fleetLaunchTemplateSpecificationRequestProperty: ec2.CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty = {\n  launchTemplateId: 'launchTemplateId',\n  launchTemplateName: 'launchTemplateName',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "286b54d2f456c532ef3d31cde933a7acce8566a1e2b82e98a58c597c3059fa18"
    },
    "de20faf6632204b74ae9e3ad892b220861449c197814dcbeedf7993c28002200": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_requirements_request_property = ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty(\n    accelerator_count=ec2.CfnEC2Fleet.AcceleratorCountRequestProperty(\n        max=123,\n        min=123\n    ),\n    accelerator_manufacturers=[\"acceleratorManufacturers\"],\n    accelerator_names=[\"acceleratorNames\"],\n    accelerator_total_memory_mi_b=ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty(\n        max=123,\n        min=123\n    ),\n    accelerator_types=[\"acceleratorTypes\"],\n    bare_metal=\"bareMetal\",\n    baseline_ebs_bandwidth_mbps=ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty(\n        max=123,\n        min=123\n    ),\n    burstable_performance=\"burstablePerformance\",\n    cpu_manufacturers=[\"cpuManufacturers\"],\n    excluded_instance_types=[\"excludedInstanceTypes\"],\n    instance_generations=[\"instanceGenerations\"],\n    local_storage=\"localStorage\",\n    local_storage_types=[\"localStorageTypes\"],\n    memory_gi_bPer_vCpu=ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty(\n        max=123,\n        min=123\n    ),\n    memory_mi_b=ec2.CfnEC2Fleet.MemoryMiBRequestProperty(\n        max=123,\n        min=123\n    ),\n    network_interface_count=ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty(\n        max=123,\n        min=123\n    ),\n    on_demand_max_price_percentage_over_lowest_price=123,\n    require_hibernate_support=False,\n    spot_max_price_percentage_over_lowest_price=123,\n    total_local_storage_gb=ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty(\n        max=123,\n        min=123\n    ),\n    v_cpu_count=ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty(\n        max=123,\n        min=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceRequirementsRequestProperty instanceRequirementsRequestProperty = new InstanceRequirementsRequestProperty {\n    AcceleratorCount = new AcceleratorCountRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n    AcceleratorNames = new [] { \"acceleratorNames\" },\n    AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    AcceleratorTypes = new [] { \"acceleratorTypes\" },\n    BareMetal = \"bareMetal\",\n    BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    BurstablePerformance = \"burstablePerformance\",\n    CpuManufacturers = new [] { \"cpuManufacturers\" },\n    ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n    InstanceGenerations = new [] { \"instanceGenerations\" },\n    LocalStorage = \"localStorage\",\n    LocalStorageTypes = new [] { \"localStorageTypes\" },\n    MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    MemoryMiB = new MemoryMiBRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    OnDemandMaxPricePercentageOverLowestPrice = 123,\n    RequireHibernateSupport = false,\n    SpotMaxPricePercentageOverLowestPrice = 123,\n    TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    VCpuCount = new VCpuCountRangeRequestProperty {\n        Max = 123,\n        Min = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceRequirementsRequestProperty instanceRequirementsRequestProperty = InstanceRequirementsRequestProperty.builder()\n        .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n        .acceleratorNames(List.of(\"acceleratorNames\"))\n        .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .acceleratorTypes(List.of(\"acceleratorTypes\"))\n        .bareMetal(\"bareMetal\")\n        .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .burstablePerformance(\"burstablePerformance\")\n        .cpuManufacturers(List.of(\"cpuManufacturers\"))\n        .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n        .instanceGenerations(List.of(\"instanceGenerations\"))\n        .localStorage(\"localStorage\")\n        .localStorageTypes(List.of(\"localStorageTypes\"))\n        .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .memoryMiB(MemoryMiBRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .onDemandMaxPricePercentageOverLowestPrice(123)\n        .requireHibernateSupport(false)\n        .spotMaxPricePercentageOverLowestPrice(123)\n        .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceRequirementsRequestProperty := &instanceRequirementsRequestProperty{\n\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tacceleratorManufacturers: []*string{\n\t\tjsii.String(\"acceleratorManufacturers\"),\n\t},\n\tacceleratorNames: []*string{\n\t\tjsii.String(\"acceleratorNames\"),\n\t},\n\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tacceleratorTypes: []*string{\n\t\tjsii.String(\"acceleratorTypes\"),\n\t},\n\tbareMetal: jsii.String(\"bareMetal\"),\n\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\tcpuManufacturers: []*string{\n\t\tjsii.String(\"cpuManufacturers\"),\n\t},\n\texcludedInstanceTypes: []*string{\n\t\tjsii.String(\"excludedInstanceTypes\"),\n\t},\n\tinstanceGenerations: []*string{\n\t\tjsii.String(\"instanceGenerations\"),\n\t},\n\tlocalStorage: jsii.String(\"localStorage\"),\n\tlocalStorageTypes: []*string{\n\t\tjsii.String(\"localStorageTypes\"),\n\t},\n\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tmemoryMiB: &memoryMiBRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\trequireHibernateSupport: jsii.Boolean(false),\n\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceRequirementsRequestProperty: ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty = {\n  acceleratorCount: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorManufacturers: ['acceleratorManufacturers'],\n  acceleratorNames: ['acceleratorNames'],\n  acceleratorTotalMemoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorTypes: ['acceleratorTypes'],\n  bareMetal: 'bareMetal',\n  baselineEbsBandwidthMbps: {\n    max: 123,\n    min: 123,\n  },\n  burstablePerformance: 'burstablePerformance',\n  cpuManufacturers: ['cpuManufacturers'],\n  excludedInstanceTypes: ['excludedInstanceTypes'],\n  instanceGenerations: ['instanceGenerations'],\n  localStorage: 'localStorage',\n  localStorageTypes: ['localStorageTypes'],\n  memoryGiBPerVCpu: {\n    max: 123,\n    min: 123,\n  },\n  memoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  networkInterfaceCount: {\n    max: 123,\n    min: 123,\n  },\n  onDemandMaxPricePercentageOverLowestPrice: 123,\n  requireHibernateSupport: false,\n  spotMaxPricePercentageOverLowestPrice: 123,\n  totalLocalStorageGb: {\n    max: 123,\n    min: 123,\n  },\n  vCpuCount: {\n    max: 123,\n    min: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceRequirementsRequestProperty: ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty = {\n  acceleratorCount: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorManufacturers: ['acceleratorManufacturers'],\n  acceleratorNames: ['acceleratorNames'],\n  acceleratorTotalMemoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorTypes: ['acceleratorTypes'],\n  bareMetal: 'bareMetal',\n  baselineEbsBandwidthMbps: {\n    max: 123,\n    min: 123,\n  },\n  burstablePerformance: 'burstablePerformance',\n  cpuManufacturers: ['cpuManufacturers'],\n  excludedInstanceTypes: ['excludedInstanceTypes'],\n  instanceGenerations: ['instanceGenerations'],\n  localStorage: 'localStorage',\n  localStorageTypes: ['localStorageTypes'],\n  memoryGiBPerVCpu: {\n    max: 123,\n    min: 123,\n  },\n  memoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  networkInterfaceCount: {\n    max: 123,\n    min: 123,\n  },\n  onDemandMaxPricePercentageOverLowestPrice: 123,\n  requireHibernateSupport: false,\n  spotMaxPricePercentageOverLowestPrice: 123,\n  totalLocalStorageGb: {\n    max: 123,\n    min: 123,\n  },\n  vCpuCount: {\n    max: 123,\n    min: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 18,
        "10": 11,
        "75": 42,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 7,
        "193": 9,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 37,
        "290": 1
      },
      "fqnsFingerprint": "24719aa5cc7d7ae504116d5e7ca62d387dee65297dd27557c2344de3cafeec24"
    },
    "442fb5c5efe6d83d7f8f9fb08d49354ed72779d8648cd1b68e64aba9a46330c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmaintenance_strategies_property = ec2.CfnEC2Fleet.MaintenanceStrategiesProperty(\n    capacity_rebalance=ec2.CfnEC2Fleet.CapacityRebalanceProperty(\n        replacement_strategy=\"replacementStrategy\",\n        termination_delay=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMaintenanceStrategiesProperty maintenanceStrategiesProperty = new MaintenanceStrategiesProperty {\n    CapacityRebalance = new CapacityRebalanceProperty {\n        ReplacementStrategy = \"replacementStrategy\",\n        TerminationDelay = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMaintenanceStrategiesProperty maintenanceStrategiesProperty = MaintenanceStrategiesProperty.builder()\n        .capacityRebalance(CapacityRebalanceProperty.builder()\n                .replacementStrategy(\"replacementStrategy\")\n                .terminationDelay(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmaintenanceStrategiesProperty := &maintenanceStrategiesProperty{\n\tcapacityRebalance: &capacityRebalanceProperty{\n\t\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\t\tterminationDelay: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst maintenanceStrategiesProperty: ec2.CfnEC2Fleet.MaintenanceStrategiesProperty = {\n  capacityRebalance: {\n    replacementStrategy: 'replacementStrategy',\n    terminationDelay: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.MaintenanceStrategiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.MaintenanceStrategiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst maintenanceStrategiesProperty: ec2.CfnEC2Fleet.MaintenanceStrategiesProperty = {\n  capacityRebalance: {\n    replacementStrategy: 'replacementStrategy',\n    terminationDelay: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f67ed4fa6de0f248421f557dab7fde5ebf5fc7707d939ebc14d58d5401a520fd"
    },
    "6860727c7a6395d596af6e04223a9862c5b58cb5ac7f00b1162bf3856a2ccbb3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmemory_gi_bPer_vCpu_request_property = ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMemoryGiBPerVCpuRequestProperty memoryGiBPerVCpuRequestProperty = new MemoryGiBPerVCpuRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMemoryGiBPerVCpuRequestProperty memoryGiBPerVCpuRequestProperty = MemoryGiBPerVCpuRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmemoryGiBPerVCpuRequestProperty := &memoryGiBPerVCpuRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst memoryGiBPerVCpuRequestProperty: ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst memoryGiBPerVCpuRequestProperty: ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "444ffc45b99988a6d2f0dabb33a6cd4c2eb50dcc7e5bf6174e5cb3f2667be737"
    },
    "3932d66c445bccfdd3d961a4922f8a718619ad526e019cb35c205fcb2926ff68": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmemory_mi_bRequest_property = ec2.CfnEC2Fleet.MemoryMiBRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMemoryMiBRequestProperty memoryMiBRequestProperty = new MemoryMiBRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMemoryMiBRequestProperty memoryMiBRequestProperty = MemoryMiBRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmemoryMiBRequestProperty := &memoryMiBRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst memoryMiBRequestProperty: ec2.CfnEC2Fleet.MemoryMiBRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.MemoryMiBRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.MemoryMiBRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst memoryMiBRequestProperty: ec2.CfnEC2Fleet.MemoryMiBRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "09cd1cefb5cbe84d3d8d2689071aaddbccdb0487e1e322c6674d0ef66bd85dbf"
    },
    "2e5a7d371fd0609ad849264429273faabcc36f87a99fd284b3b82c9d139ee352": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nnetwork_interface_count_request_property = ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNetworkInterfaceCountRequestProperty networkInterfaceCountRequestProperty = new NetworkInterfaceCountRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNetworkInterfaceCountRequestProperty networkInterfaceCountRequestProperty = NetworkInterfaceCountRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nnetworkInterfaceCountRequestProperty := &networkInterfaceCountRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst networkInterfaceCountRequestProperty: ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkInterfaceCountRequestProperty: ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "612a93c2050b81abd876607e4c3fa471ac3bbfd93737c67e6719e70f5a60f784"
    },
    "05fb344bbe6a22b7bd6cc77bb417e4d5d8931de8ed6c4f22df7850318a298e3d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\non_demand_options_request_property = ec2.CfnEC2Fleet.OnDemandOptionsRequestProperty(\n    allocation_strategy=\"allocationStrategy\",\n    capacity_reservation_options=ec2.CfnEC2Fleet.CapacityReservationOptionsRequestProperty(\n        usage_strategy=\"usageStrategy\"\n    ),\n    max_total_price=\"maxTotalPrice\",\n    min_target_capacity=123,\n    single_availability_zone=False,\n    single_instance_type=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nOnDemandOptionsRequestProperty onDemandOptionsRequestProperty = new OnDemandOptionsRequestProperty {\n    AllocationStrategy = \"allocationStrategy\",\n    CapacityReservationOptions = new CapacityReservationOptionsRequestProperty {\n        UsageStrategy = \"usageStrategy\"\n    },\n    MaxTotalPrice = \"maxTotalPrice\",\n    MinTargetCapacity = 123,\n    SingleAvailabilityZone = false,\n    SingleInstanceType = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nOnDemandOptionsRequestProperty onDemandOptionsRequestProperty = OnDemandOptionsRequestProperty.builder()\n        .allocationStrategy(\"allocationStrategy\")\n        .capacityReservationOptions(CapacityReservationOptionsRequestProperty.builder()\n                .usageStrategy(\"usageStrategy\")\n                .build())\n        .maxTotalPrice(\"maxTotalPrice\")\n        .minTargetCapacity(123)\n        .singleAvailabilityZone(false)\n        .singleInstanceType(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nonDemandOptionsRequestProperty := &onDemandOptionsRequestProperty{\n\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\tcapacityReservationOptions: &capacityReservationOptionsRequestProperty{\n\t\tusageStrategy: jsii.String(\"usageStrategy\"),\n\t},\n\tmaxTotalPrice: jsii.String(\"maxTotalPrice\"),\n\tminTargetCapacity: jsii.Number(123),\n\tsingleAvailabilityZone: jsii.Boolean(false),\n\tsingleInstanceType: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst onDemandOptionsRequestProperty: ec2.CfnEC2Fleet.OnDemandOptionsRequestProperty = {\n  allocationStrategy: 'allocationStrategy',\n  capacityReservationOptions: {\n    usageStrategy: 'usageStrategy',\n  },\n  maxTotalPrice: 'maxTotalPrice',\n  minTargetCapacity: 123,\n  singleAvailabilityZone: false,\n  singleInstanceType: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.OnDemandOptionsRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.OnDemandOptionsRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst onDemandOptionsRequestProperty: ec2.CfnEC2Fleet.OnDemandOptionsRequestProperty = {\n  allocationStrategy: 'allocationStrategy',\n  capacityReservationOptions: {\n    usageStrategy: 'usageStrategy',\n  },\n  maxTotalPrice: 'maxTotalPrice',\n  minTargetCapacity: 123,\n  singleAvailabilityZone: false,\n  singleInstanceType: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "ae196416c34ef337184e4043775cd4624b4156495f64f2728803b34c55268acb"
    },
    "cf2022620fcf94ce1965ed5619e72fb9d57c7a11b2cc1e033fe7f2350b879aea": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nplacement_property = ec2.CfnEC2Fleet.PlacementProperty(\n    affinity=\"affinity\",\n    availability_zone=\"availabilityZone\",\n    group_name=\"groupName\",\n    host_id=\"hostId\",\n    host_resource_group_arn=\"hostResourceGroupArn\",\n    partition_number=123,\n    spread_domain=\"spreadDomain\",\n    tenancy=\"tenancy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPlacementProperty placementProperty = new PlacementProperty {\n    Affinity = \"affinity\",\n    AvailabilityZone = \"availabilityZone\",\n    GroupName = \"groupName\",\n    HostId = \"hostId\",\n    HostResourceGroupArn = \"hostResourceGroupArn\",\n    PartitionNumber = 123,\n    SpreadDomain = \"spreadDomain\",\n    Tenancy = \"tenancy\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPlacementProperty placementProperty = PlacementProperty.builder()\n        .affinity(\"affinity\")\n        .availabilityZone(\"availabilityZone\")\n        .groupName(\"groupName\")\n        .hostId(\"hostId\")\n        .hostResourceGroupArn(\"hostResourceGroupArn\")\n        .partitionNumber(123)\n        .spreadDomain(\"spreadDomain\")\n        .tenancy(\"tenancy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nplacementProperty := &placementProperty{\n\taffinity: jsii.String(\"affinity\"),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tgroupName: jsii.String(\"groupName\"),\n\thostId: jsii.String(\"hostId\"),\n\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\tpartitionNumber: jsii.Number(123),\n\tspreadDomain: jsii.String(\"spreadDomain\"),\n\ttenancy: jsii.String(\"tenancy\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst placementProperty: ec2.CfnEC2Fleet.PlacementProperty = {\n  affinity: 'affinity',\n  availabilityZone: 'availabilityZone',\n  groupName: 'groupName',\n  hostId: 'hostId',\n  hostResourceGroupArn: 'hostResourceGroupArn',\n  partitionNumber: 123,\n  spreadDomain: 'spreadDomain',\n  tenancy: 'tenancy',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.PlacementProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.PlacementProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst placementProperty: ec2.CfnEC2Fleet.PlacementProperty = {\n  affinity: 'affinity',\n  availabilityZone: 'availabilityZone',\n  groupName: 'groupName',\n  hostId: 'hostId',\n  hostResourceGroupArn: 'hostResourceGroupArn',\n  partitionNumber: 123,\n  spreadDomain: 'spreadDomain',\n  tenancy: 'tenancy',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 13,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "4c55a91e1a5597f08525fa964a9a8545c6f98abb50638aa8906d4b0587e406df"
    },
    "70cdf92c3278b86539b6853eb4d23c2f33f55d240b168d57387bfd2f82033bfe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_options_request_property = ec2.CfnEC2Fleet.SpotOptionsRequestProperty(\n    allocation_strategy=\"allocationStrategy\",\n    instance_interruption_behavior=\"instanceInterruptionBehavior\",\n    instance_pools_to_use_count=123,\n    maintenance_strategies=ec2.CfnEC2Fleet.MaintenanceStrategiesProperty(\n        capacity_rebalance=ec2.CfnEC2Fleet.CapacityRebalanceProperty(\n            replacement_strategy=\"replacementStrategy\",\n            termination_delay=123\n        )\n    ),\n    max_total_price=\"maxTotalPrice\",\n    min_target_capacity=123,\n    single_availability_zone=False,\n    single_instance_type=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotOptionsRequestProperty spotOptionsRequestProperty = new SpotOptionsRequestProperty {\n    AllocationStrategy = \"allocationStrategy\",\n    InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n    InstancePoolsToUseCount = 123,\n    MaintenanceStrategies = new MaintenanceStrategiesProperty {\n        CapacityRebalance = new CapacityRebalanceProperty {\n            ReplacementStrategy = \"replacementStrategy\",\n            TerminationDelay = 123\n        }\n    },\n    MaxTotalPrice = \"maxTotalPrice\",\n    MinTargetCapacity = 123,\n    SingleAvailabilityZone = false,\n    SingleInstanceType = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotOptionsRequestProperty spotOptionsRequestProperty = SpotOptionsRequestProperty.builder()\n        .allocationStrategy(\"allocationStrategy\")\n        .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n        .instancePoolsToUseCount(123)\n        .maintenanceStrategies(MaintenanceStrategiesProperty.builder()\n                .capacityRebalance(CapacityRebalanceProperty.builder()\n                        .replacementStrategy(\"replacementStrategy\")\n                        .terminationDelay(123)\n                        .build())\n                .build())\n        .maxTotalPrice(\"maxTotalPrice\")\n        .minTargetCapacity(123)\n        .singleAvailabilityZone(false)\n        .singleInstanceType(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotOptionsRequestProperty := &spotOptionsRequestProperty{\n\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\tinstancePoolsToUseCount: jsii.Number(123),\n\tmaintenanceStrategies: &maintenanceStrategiesProperty{\n\t\tcapacityRebalance: &capacityRebalanceProperty{\n\t\t\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\t\t\tterminationDelay: jsii.Number(123),\n\t\t},\n\t},\n\tmaxTotalPrice: jsii.String(\"maxTotalPrice\"),\n\tminTargetCapacity: jsii.Number(123),\n\tsingleAvailabilityZone: jsii.Boolean(false),\n\tsingleInstanceType: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotOptionsRequestProperty: ec2.CfnEC2Fleet.SpotOptionsRequestProperty = {\n  allocationStrategy: 'allocationStrategy',\n  instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n  instancePoolsToUseCount: 123,\n  maintenanceStrategies: {\n    capacityRebalance: {\n      replacementStrategy: 'replacementStrategy',\n      terminationDelay: 123,\n    },\n  },\n  maxTotalPrice: 'maxTotalPrice',\n  minTargetCapacity: 123,\n  singleAvailabilityZone: false,\n  singleInstanceType: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.SpotOptionsRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.SpotOptionsRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotOptionsRequestProperty: ec2.CfnEC2Fleet.SpotOptionsRequestProperty = {\n  allocationStrategy: 'allocationStrategy',\n  instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n  instancePoolsToUseCount: 123,\n  maintenanceStrategies: {\n    capacityRebalance: {\n      replacementStrategy: 'replacementStrategy',\n      terminationDelay: 123,\n    },\n  },\n  maxTotalPrice: 'maxTotalPrice',\n  minTargetCapacity: 123,\n  singleAvailabilityZone: false,\n  singleInstanceType: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 16,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "4298e2c2412f2f4f30b4921c1c5f6753d592b5012dacfc2d5240886f5257bd89"
    },
    "f169faf0ec6d9376394ddd7a53713f2f790daaab87b3ae3b1d02d4d5f392fc15": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntag_specification_property = ec2.CfnEC2Fleet.TagSpecificationProperty(\n    resource_type=\"resourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTagSpecificationProperty tagSpecificationProperty = new TagSpecificationProperty {\n    ResourceType = \"resourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTagSpecificationProperty tagSpecificationProperty = TagSpecificationProperty.builder()\n        .resourceType(\"resourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntagSpecificationProperty := &tagSpecificationProperty{\n\tresourceType: jsii.String(\"resourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst tagSpecificationProperty: ec2.CfnEC2Fleet.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.TagSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.TagSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagSpecificationProperty: ec2.CfnEC2Fleet.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "684b26e3bb80ae21a7aa684ea357c05b45b34efaba6df11b49a649c99257eedf"
    },
    "83b138d386c257a88180aa737749ec7471002d880daff28b791d6a55d4504b56": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntarget_capacity_specification_request_property = ec2.CfnEC2Fleet.TargetCapacitySpecificationRequestProperty(\n    total_target_capacity=123,\n\n    # the properties below are optional\n    default_target_capacity_type=\"defaultTargetCapacityType\",\n    on_demand_target_capacity=123,\n    spot_target_capacity=123,\n    target_capacity_unit_type=\"targetCapacityUnitType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTargetCapacitySpecificationRequestProperty targetCapacitySpecificationRequestProperty = new TargetCapacitySpecificationRequestProperty {\n    TotalTargetCapacity = 123,\n\n    // the properties below are optional\n    DefaultTargetCapacityType = \"defaultTargetCapacityType\",\n    OnDemandTargetCapacity = 123,\n    SpotTargetCapacity = 123,\n    TargetCapacityUnitType = \"targetCapacityUnitType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTargetCapacitySpecificationRequestProperty targetCapacitySpecificationRequestProperty = TargetCapacitySpecificationRequestProperty.builder()\n        .totalTargetCapacity(123)\n\n        // the properties below are optional\n        .defaultTargetCapacityType(\"defaultTargetCapacityType\")\n        .onDemandTargetCapacity(123)\n        .spotTargetCapacity(123)\n        .targetCapacityUnitType(\"targetCapacityUnitType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntargetCapacitySpecificationRequestProperty := &targetCapacitySpecificationRequestProperty{\n\ttotalTargetCapacity: jsii.Number(123),\n\n\t// the properties below are optional\n\tdefaultTargetCapacityType: jsii.String(\"defaultTargetCapacityType\"),\n\tonDemandTargetCapacity: jsii.Number(123),\n\tspotTargetCapacity: jsii.Number(123),\n\ttargetCapacityUnitType: jsii.String(\"targetCapacityUnitType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst targetCapacitySpecificationRequestProperty: ec2.CfnEC2Fleet.TargetCapacitySpecificationRequestProperty = {\n  totalTargetCapacity: 123,\n\n  // the properties below are optional\n  defaultTargetCapacityType: 'defaultTargetCapacityType',\n  onDemandTargetCapacity: 123,\n  spotTargetCapacity: 123,\n  targetCapacityUnitType: 'targetCapacityUnitType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.TargetCapacitySpecificationRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.TargetCapacitySpecificationRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst targetCapacitySpecificationRequestProperty: ec2.CfnEC2Fleet.TargetCapacitySpecificationRequestProperty = {\n  totalTargetCapacity: 123,\n\n  // the properties below are optional\n  defaultTargetCapacityType: 'defaultTargetCapacityType',\n  onDemandTargetCapacity: 123,\n  spotTargetCapacity: 123,\n  targetCapacityUnitType: 'targetCapacityUnitType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "4d9c1e36be9a18b280dc8ef7f9cdd81ddc677a2e562cbdc9d8105c340de9b2d1"
    },
    "c2cd697afcc4fed787122d7d2824dfe4d03041152b01785d834d0a26e101594d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntotal_local_storage_gBRequest_property = ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTotalLocalStorageGBRequestProperty totalLocalStorageGBRequestProperty = new TotalLocalStorageGBRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTotalLocalStorageGBRequestProperty totalLocalStorageGBRequestProperty = TotalLocalStorageGBRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntotalLocalStorageGBRequestProperty := &totalLocalStorageGBRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst totalLocalStorageGBRequestProperty: ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst totalLocalStorageGBRequestProperty: ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f5012ef67ca083f5d4215618a43398dd37a2028531b024dd48b2ec9572784753"
    },
    "9190b0f291e8c7293132aecf06fe3df61f67c5e03325d4a81d7bba3e5c183831": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nv_cpu_count_range_request_property = ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nVCpuCountRangeRequestProperty vCpuCountRangeRequestProperty = new VCpuCountRangeRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nVCpuCountRangeRequestProperty vCpuCountRangeRequestProperty = VCpuCountRangeRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nvCpuCountRangeRequestProperty := &vCpuCountRangeRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst vCpuCountRangeRequestProperty: ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vCpuCountRangeRequestProperty: ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4bd4df465f622c0d987f63af839de30fb9b7f5008c77c3bb876c549c53d8d828"
    },
    "a7a161f753e08e1ce98360b26cd7cc0c24c9adad78b3badee57fb2063146e875": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_eC2_fleet_props = ec2.CfnEC2FleetProps(\n    launch_template_configs=[ec2.CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty(\n        launch_template_specification=ec2.CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty(\n            launch_template_id=\"launchTemplateId\",\n            launch_template_name=\"launchTemplateName\",\n            version=\"version\"\n        ),\n        overrides=[ec2.CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty(\n            availability_zone=\"availabilityZone\",\n            instance_requirements=ec2.CfnEC2Fleet.InstanceRequirementsRequestProperty(\n                accelerator_count=ec2.CfnEC2Fleet.AcceleratorCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_manufacturers=[\"acceleratorManufacturers\"],\n                accelerator_names=[\"acceleratorNames\"],\n                accelerator_total_memory_mi_b=ec2.CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_types=[\"acceleratorTypes\"],\n                bare_metal=\"bareMetal\",\n                baseline_ebs_bandwidth_mbps=ec2.CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                burstable_performance=\"burstablePerformance\",\n                cpu_manufacturers=[\"cpuManufacturers\"],\n                excluded_instance_types=[\"excludedInstanceTypes\"],\n                instance_generations=[\"instanceGenerations\"],\n                local_storage=\"localStorage\",\n                local_storage_types=[\"localStorageTypes\"],\n                memory_gi_bPer_vCpu=ec2.CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                memory_mi_b=ec2.CfnEC2Fleet.MemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                network_interface_count=ec2.CfnEC2Fleet.NetworkInterfaceCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                on_demand_max_price_percentage_over_lowest_price=123,\n                require_hibernate_support=False,\n                spot_max_price_percentage_over_lowest_price=123,\n                total_local_storage_gb=ec2.CfnEC2Fleet.TotalLocalStorageGBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                v_cpu_count=ec2.CfnEC2Fleet.VCpuCountRangeRequestProperty(\n                    max=123,\n                    min=123\n                )\n            ),\n            instance_type=\"instanceType\",\n            max_price=\"maxPrice\",\n            placement=ec2.CfnEC2Fleet.PlacementProperty(\n                affinity=\"affinity\",\n                availability_zone=\"availabilityZone\",\n                group_name=\"groupName\",\n                host_id=\"hostId\",\n                host_resource_group_arn=\"hostResourceGroupArn\",\n                partition_number=123,\n                spread_domain=\"spreadDomain\",\n                tenancy=\"tenancy\"\n            ),\n            priority=123,\n            subnet_id=\"subnetId\",\n            weighted_capacity=123\n        )]\n    )],\n    target_capacity_specification=ec2.CfnEC2Fleet.TargetCapacitySpecificationRequestProperty(\n        total_target_capacity=123,\n\n        # the properties below are optional\n        default_target_capacity_type=\"defaultTargetCapacityType\",\n        on_demand_target_capacity=123,\n        spot_target_capacity=123,\n        target_capacity_unit_type=\"targetCapacityUnitType\"\n    ),\n\n    # the properties below are optional\n    context=\"context\",\n    excess_capacity_termination_policy=\"excessCapacityTerminationPolicy\",\n    on_demand_options=ec2.CfnEC2Fleet.OnDemandOptionsRequestProperty(\n        allocation_strategy=\"allocationStrategy\",\n        capacity_reservation_options=ec2.CfnEC2Fleet.CapacityReservationOptionsRequestProperty(\n            usage_strategy=\"usageStrategy\"\n        ),\n        max_total_price=\"maxTotalPrice\",\n        min_target_capacity=123,\n        single_availability_zone=False,\n        single_instance_type=False\n    ),\n    replace_unhealthy_instances=False,\n    spot_options=ec2.CfnEC2Fleet.SpotOptionsRequestProperty(\n        allocation_strategy=\"allocationStrategy\",\n        instance_interruption_behavior=\"instanceInterruptionBehavior\",\n        instance_pools_to_use_count=123,\n        maintenance_strategies=ec2.CfnEC2Fleet.MaintenanceStrategiesProperty(\n            capacity_rebalance=ec2.CfnEC2Fleet.CapacityRebalanceProperty(\n                replacement_strategy=\"replacementStrategy\",\n                termination_delay=123\n            )\n        ),\n        max_total_price=\"maxTotalPrice\",\n        min_target_capacity=123,\n        single_availability_zone=False,\n        single_instance_type=False\n    ),\n    tag_specifications=[ec2.CfnEC2Fleet.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    terminate_instances_with_expiration=False,\n    type=\"type\",\n    valid_from=\"validFrom\",\n    valid_until=\"validUntil\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnEC2FleetProps cfnEC2FleetProps = new CfnEC2FleetProps {\n    LaunchTemplateConfigs = new [] { new FleetLaunchTemplateConfigRequestProperty {\n        LaunchTemplateSpecification = new FleetLaunchTemplateSpecificationRequestProperty {\n            LaunchTemplateId = \"launchTemplateId\",\n            LaunchTemplateName = \"launchTemplateName\",\n            Version = \"version\"\n        },\n        Overrides = new [] { new FleetLaunchTemplateOverridesRequestProperty {\n            AvailabilityZone = \"availabilityZone\",\n            InstanceRequirements = new InstanceRequirementsRequestProperty {\n                AcceleratorCount = new AcceleratorCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n                AcceleratorNames = new [] { \"acceleratorNames\" },\n                AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorTypes = new [] { \"acceleratorTypes\" },\n                BareMetal = \"bareMetal\",\n                BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                BurstablePerformance = \"burstablePerformance\",\n                CpuManufacturers = new [] { \"cpuManufacturers\" },\n                ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n                InstanceGenerations = new [] { \"instanceGenerations\" },\n                LocalStorage = \"localStorage\",\n                LocalStorageTypes = new [] { \"localStorageTypes\" },\n                MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                MemoryMiB = new MemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                OnDemandMaxPricePercentageOverLowestPrice = 123,\n                RequireHibernateSupport = false,\n                SpotMaxPricePercentageOverLowestPrice = 123,\n                TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                VCpuCount = new VCpuCountRangeRequestProperty {\n                    Max = 123,\n                    Min = 123\n                }\n            },\n            InstanceType = \"instanceType\",\n            MaxPrice = \"maxPrice\",\n            Placement = new PlacementProperty {\n                Affinity = \"affinity\",\n                AvailabilityZone = \"availabilityZone\",\n                GroupName = \"groupName\",\n                HostId = \"hostId\",\n                HostResourceGroupArn = \"hostResourceGroupArn\",\n                PartitionNumber = 123,\n                SpreadDomain = \"spreadDomain\",\n                Tenancy = \"tenancy\"\n            },\n            Priority = 123,\n            SubnetId = \"subnetId\",\n            WeightedCapacity = 123\n        } }\n    } },\n    TargetCapacitySpecification = new TargetCapacitySpecificationRequestProperty {\n        TotalTargetCapacity = 123,\n\n        // the properties below are optional\n        DefaultTargetCapacityType = \"defaultTargetCapacityType\",\n        OnDemandTargetCapacity = 123,\n        SpotTargetCapacity = 123,\n        TargetCapacityUnitType = \"targetCapacityUnitType\"\n    },\n\n    // the properties below are optional\n    Context = \"context\",\n    ExcessCapacityTerminationPolicy = \"excessCapacityTerminationPolicy\",\n    OnDemandOptions = new OnDemandOptionsRequestProperty {\n        AllocationStrategy = \"allocationStrategy\",\n        CapacityReservationOptions = new CapacityReservationOptionsRequestProperty {\n            UsageStrategy = \"usageStrategy\"\n        },\n        MaxTotalPrice = \"maxTotalPrice\",\n        MinTargetCapacity = 123,\n        SingleAvailabilityZone = false,\n        SingleInstanceType = false\n    },\n    ReplaceUnhealthyInstances = false,\n    SpotOptions = new SpotOptionsRequestProperty {\n        AllocationStrategy = \"allocationStrategy\",\n        InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n        InstancePoolsToUseCount = 123,\n        MaintenanceStrategies = new MaintenanceStrategiesProperty {\n            CapacityRebalance = new CapacityRebalanceProperty {\n                ReplacementStrategy = \"replacementStrategy\",\n                TerminationDelay = 123\n            }\n        },\n        MaxTotalPrice = \"maxTotalPrice\",\n        MinTargetCapacity = 123,\n        SingleAvailabilityZone = false,\n        SingleInstanceType = false\n    },\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    TerminateInstancesWithExpiration = false,\n    Type = \"type\",\n    ValidFrom = \"validFrom\",\n    ValidUntil = \"validUntil\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnEC2FleetProps cfnEC2FleetProps = CfnEC2FleetProps.builder()\n        .launchTemplateConfigs(List.of(FleetLaunchTemplateConfigRequestProperty.builder()\n                .launchTemplateSpecification(FleetLaunchTemplateSpecificationRequestProperty.builder()\n                        .launchTemplateId(\"launchTemplateId\")\n                        .launchTemplateName(\"launchTemplateName\")\n                        .version(\"version\")\n                        .build())\n                .overrides(List.of(FleetLaunchTemplateOverridesRequestProperty.builder()\n                        .availabilityZone(\"availabilityZone\")\n                        .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                                .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                                .acceleratorNames(List.of(\"acceleratorNames\"))\n                                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                                .bareMetal(\"bareMetal\")\n                                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .burstablePerformance(\"burstablePerformance\")\n                                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                                .instanceGenerations(List.of(\"instanceGenerations\"))\n                                .localStorage(\"localStorage\")\n                                .localStorageTypes(List.of(\"localStorageTypes\"))\n                                .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .memoryMiB(MemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .onDemandMaxPricePercentageOverLowestPrice(123)\n                                .requireHibernateSupport(false)\n                                .spotMaxPricePercentageOverLowestPrice(123)\n                                .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .build())\n                        .instanceType(\"instanceType\")\n                        .maxPrice(\"maxPrice\")\n                        .placement(PlacementProperty.builder()\n                                .affinity(\"affinity\")\n                                .availabilityZone(\"availabilityZone\")\n                                .groupName(\"groupName\")\n                                .hostId(\"hostId\")\n                                .hostResourceGroupArn(\"hostResourceGroupArn\")\n                                .partitionNumber(123)\n                                .spreadDomain(\"spreadDomain\")\n                                .tenancy(\"tenancy\")\n                                .build())\n                        .priority(123)\n                        .subnetId(\"subnetId\")\n                        .weightedCapacity(123)\n                        .build()))\n                .build()))\n        .targetCapacitySpecification(TargetCapacitySpecificationRequestProperty.builder()\n                .totalTargetCapacity(123)\n\n                // the properties below are optional\n                .defaultTargetCapacityType(\"defaultTargetCapacityType\")\n                .onDemandTargetCapacity(123)\n                .spotTargetCapacity(123)\n                .targetCapacityUnitType(\"targetCapacityUnitType\")\n                .build())\n\n        // the properties below are optional\n        .context(\"context\")\n        .excessCapacityTerminationPolicy(\"excessCapacityTerminationPolicy\")\n        .onDemandOptions(OnDemandOptionsRequestProperty.builder()\n                .allocationStrategy(\"allocationStrategy\")\n                .capacityReservationOptions(CapacityReservationOptionsRequestProperty.builder()\n                        .usageStrategy(\"usageStrategy\")\n                        .build())\n                .maxTotalPrice(\"maxTotalPrice\")\n                .minTargetCapacity(123)\n                .singleAvailabilityZone(false)\n                .singleInstanceType(false)\n                .build())\n        .replaceUnhealthyInstances(false)\n        .spotOptions(SpotOptionsRequestProperty.builder()\n                .allocationStrategy(\"allocationStrategy\")\n                .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n                .instancePoolsToUseCount(123)\n                .maintenanceStrategies(MaintenanceStrategiesProperty.builder()\n                        .capacityRebalance(CapacityRebalanceProperty.builder()\n                                .replacementStrategy(\"replacementStrategy\")\n                                .terminationDelay(123)\n                                .build())\n                        .build())\n                .maxTotalPrice(\"maxTotalPrice\")\n                .minTargetCapacity(123)\n                .singleAvailabilityZone(false)\n                .singleInstanceType(false)\n                .build())\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .terminateInstancesWithExpiration(false)\n        .type(\"type\")\n        .validFrom(\"validFrom\")\n        .validUntil(\"validUntil\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnEC2FleetProps := &cfnEC2FleetProps{\n\tlaunchTemplateConfigs: []interface{}{\n\t\t&fleetLaunchTemplateConfigRequestProperty{\n\t\t\tlaunchTemplateSpecification: &fleetLaunchTemplateSpecificationRequestProperty{\n\t\t\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\t\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t\t\t\tversion: jsii.String(\"version\"),\n\t\t\t},\n\t\t\toverrides: []interface{}{\n\t\t\t\t&fleetLaunchTemplateOverridesRequestProperty{\n\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\t\t\tmaxPrice: jsii.String(\"maxPrice\"),\n\t\t\t\t\tplacement: &placementProperty{\n\t\t\t\t\t\taffinity: jsii.String(\"affinity\"),\n\t\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\t\tgroupName: jsii.String(\"groupName\"),\n\t\t\t\t\t\thostId: jsii.String(\"hostId\"),\n\t\t\t\t\t\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\t\t\t\t\t\tpartitionNumber: jsii.Number(123),\n\t\t\t\t\t\tspreadDomain: jsii.String(\"spreadDomain\"),\n\t\t\t\t\t\ttenancy: jsii.String(\"tenancy\"),\n\t\t\t\t\t},\n\t\t\t\t\tpriority: jsii.Number(123),\n\t\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\t\tweightedCapacity: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttargetCapacitySpecification: &targetCapacitySpecificationRequestProperty{\n\t\ttotalTargetCapacity: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tdefaultTargetCapacityType: jsii.String(\"defaultTargetCapacityType\"),\n\t\tonDemandTargetCapacity: jsii.Number(123),\n\t\tspotTargetCapacity: jsii.Number(123),\n\t\ttargetCapacityUnitType: jsii.String(\"targetCapacityUnitType\"),\n\t},\n\n\t// the properties below are optional\n\tcontext: jsii.String(\"context\"),\n\texcessCapacityTerminationPolicy: jsii.String(\"excessCapacityTerminationPolicy\"),\n\tonDemandOptions: &onDemandOptionsRequestProperty{\n\t\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\t\tcapacityReservationOptions: &capacityReservationOptionsRequestProperty{\n\t\t\tusageStrategy: jsii.String(\"usageStrategy\"),\n\t\t},\n\t\tmaxTotalPrice: jsii.String(\"maxTotalPrice\"),\n\t\tminTargetCapacity: jsii.Number(123),\n\t\tsingleAvailabilityZone: jsii.Boolean(false),\n\t\tsingleInstanceType: jsii.Boolean(false),\n\t},\n\treplaceUnhealthyInstances: jsii.Boolean(false),\n\tspotOptions: &spotOptionsRequestProperty{\n\t\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\t\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\t\tinstancePoolsToUseCount: jsii.Number(123),\n\t\tmaintenanceStrategies: &maintenanceStrategiesProperty{\n\t\t\tcapacityRebalance: &capacityRebalanceProperty{\n\t\t\t\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\t\t\t\tterminationDelay: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tmaxTotalPrice: jsii.String(\"maxTotalPrice\"),\n\t\tminTargetCapacity: jsii.Number(123),\n\t\tsingleAvailabilityZone: jsii.Boolean(false),\n\t\tsingleInstanceType: jsii.Boolean(false),\n\t},\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tterminateInstancesWithExpiration: jsii.Boolean(false),\n\ttype: jsii.String(\"type\"),\n\tvalidFrom: jsii.String(\"validFrom\"),\n\tvalidUntil: jsii.String(\"validUntil\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnEC2FleetProps: ec2.CfnEC2FleetProps = {\n  launchTemplateConfigs: [{\n    launchTemplateSpecification: {\n      launchTemplateId: 'launchTemplateId',\n      launchTemplateName: 'launchTemplateName',\n      version: 'version',\n    },\n    overrides: [{\n      availabilityZone: 'availabilityZone',\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      maxPrice: 'maxPrice',\n      placement: {\n        affinity: 'affinity',\n        availabilityZone: 'availabilityZone',\n        groupName: 'groupName',\n        hostId: 'hostId',\n        hostResourceGroupArn: 'hostResourceGroupArn',\n        partitionNumber: 123,\n        spreadDomain: 'spreadDomain',\n        tenancy: 'tenancy',\n      },\n      priority: 123,\n      subnetId: 'subnetId',\n      weightedCapacity: 123,\n    }],\n  }],\n  targetCapacitySpecification: {\n    totalTargetCapacity: 123,\n\n    // the properties below are optional\n    defaultTargetCapacityType: 'defaultTargetCapacityType',\n    onDemandTargetCapacity: 123,\n    spotTargetCapacity: 123,\n    targetCapacityUnitType: 'targetCapacityUnitType',\n  },\n\n  // the properties below are optional\n  context: 'context',\n  excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n  onDemandOptions: {\n    allocationStrategy: 'allocationStrategy',\n    capacityReservationOptions: {\n      usageStrategy: 'usageStrategy',\n    },\n    maxTotalPrice: 'maxTotalPrice',\n    minTargetCapacity: 123,\n    singleAvailabilityZone: false,\n    singleInstanceType: false,\n  },\n  replaceUnhealthyInstances: false,\n  spotOptions: {\n    allocationStrategy: 'allocationStrategy',\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    instancePoolsToUseCount: 123,\n    maintenanceStrategies: {\n      capacityRebalance: {\n        replacementStrategy: 'replacementStrategy',\n        terminationDelay: 123,\n      },\n    },\n    maxTotalPrice: 'maxTotalPrice',\n    minTargetCapacity: 123,\n    singleAvailabilityZone: false,\n    singleInstanceType: false,\n  },\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  terminateInstancesWithExpiration: false,\n  type: 'type',\n  validFrom: 'validFrom',\n  validUntil: 'validUntil',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEC2FleetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEC2FleetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEC2FleetProps: ec2.CfnEC2FleetProps = {\n  launchTemplateConfigs: [{\n    launchTemplateSpecification: {\n      launchTemplateId: 'launchTemplateId',\n      launchTemplateName: 'launchTemplateName',\n      version: 'version',\n    },\n    overrides: [{\n      availabilityZone: 'availabilityZone',\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      maxPrice: 'maxPrice',\n      placement: {\n        affinity: 'affinity',\n        availabilityZone: 'availabilityZone',\n        groupName: 'groupName',\n        hostId: 'hostId',\n        hostResourceGroupArn: 'hostResourceGroupArn',\n        partitionNumber: 123,\n        spreadDomain: 'spreadDomain',\n        tenancy: 'tenancy',\n      },\n      priority: 123,\n      subnetId: 'subnetId',\n      weightedCapacity: 123,\n    }],\n  }],\n  targetCapacitySpecification: {\n    totalTargetCapacity: 123,\n\n    // the properties below are optional\n    defaultTargetCapacityType: 'defaultTargetCapacityType',\n    onDemandTargetCapacity: 123,\n    spotTargetCapacity: 123,\n    targetCapacityUnitType: 'targetCapacityUnitType',\n  },\n\n  // the properties below are optional\n  context: 'context',\n  excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n  onDemandOptions: {\n    allocationStrategy: 'allocationStrategy',\n    capacityReservationOptions: {\n      usageStrategy: 'usageStrategy',\n    },\n    maxTotalPrice: 'maxTotalPrice',\n    minTargetCapacity: 123,\n    singleAvailabilityZone: false,\n    singleInstanceType: false,\n  },\n  replaceUnhealthyInstances: false,\n  spotOptions: {\n    allocationStrategy: 'allocationStrategy',\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    instancePoolsToUseCount: 123,\n    maintenanceStrategies: {\n      capacityRebalance: {\n        replacementStrategy: 'replacementStrategy',\n        terminationDelay: 123,\n      },\n    },\n    maxTotalPrice: 'maxTotalPrice',\n    minTargetCapacity: 123,\n    singleAvailabilityZone: false,\n    singleInstanceType: false,\n  },\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  terminateInstancesWithExpiration: false,\n  type: 'type',\n  validFrom: 'validFrom',\n  validUntil: 'validUntil',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 28,
        "10": 42,
        "75": 101,
        "91": 7,
        "153": 1,
        "169": 1,
        "192": 11,
        "193": 22,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 97,
        "290": 1
      },
      "fqnsFingerprint": "bb632924c1a9f10ebb02aa91892e82212f97c01cf897bac4afeed28af6aa1d6e"
    },
    "1ae9f8e29c3e4527c33e6e957df427fccba0bcb14a54aed2997dedaff5b99605": {
      "translations": {
        "python": {
          "source": "# instance: ec2.Instance\n\n# my_zone: route53.HostedZone\n\n\nelastic_ip = ec2.CfnEIP(self, \"EIP\",\n    domain=\"vpc\",\n    instance_id=instance.instance_id\n)\nroute53.ARecord(self, \"ARecord\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_ip_addresses(elastic_ip.ref)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = new CfnEIP(this, \"EIP\", new CfnEIPProps {\n    Domain = \"vpc\",\n    InstanceId = instance.InstanceId\n});\nnew ARecord(this, \"ARecord\", new ARecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromIpAddresses(elasticIp.Ref)\n});",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = CfnEIP.Builder.create(this, \"EIP\")\n        .domain(\"vpc\")\n        .instanceId(instance.getInstanceId())\n        .build();\nARecord.Builder.create(this, \"ARecord\")\n        .zone(myZone)\n        .target(RecordTarget.fromIpAddresses(elasticIp.getRef()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var instance instance\n\nvar myZone hostedZone\n\nelasticIp := ec2.NewCfnEIP(this, jsii.String(\"EIP\"), &cfnEIPProps{\n\tdomain: jsii.String(\"vpc\"),\n\tinstanceId: instance.instanceId,\n})\nroute53.NewARecord(this, jsii.String(\"ARecord\"), &aRecordProps{\n\tzone: myZone,\n\ttarget: route53.recordTarget.fromIpAddresses(elasticIp.ref),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\n\ndeclare const myZone: route53.HostedZone;\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEIP"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIP",
        "@aws-cdk/aws-ec2.CfnEIPProps",
        "@aws-cdk/aws-ec2.Instance#instanceId",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromIpAddresses",
        "@aws-cdk/core.Construct",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\n\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "89e380ec87d3dcb9bb1517c3ae98b920b37365333aabd1032337a47a494b0cf4"
    },
    "fcdee161fc6ec0397f89c9cf36701aa49794f1f2633e56d80d7230cf7e4f717f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_eIPAssociation = ec2.CfnEIPAssociation(self, \"MyCfnEIPAssociation\",\n    allocation_id=\"allocationId\",\n    eip=\"eip\",\n    instance_id=\"instanceId\",\n    network_interface_id=\"networkInterfaceId\",\n    private_ip_address=\"privateIpAddress\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnEIPAssociation cfnEIPAssociation = new CfnEIPAssociation(this, \"MyCfnEIPAssociation\", new CfnEIPAssociationProps {\n    AllocationId = \"allocationId\",\n    Eip = \"eip\",\n    InstanceId = \"instanceId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    PrivateIpAddress = \"privateIpAddress\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnEIPAssociation cfnEIPAssociation = CfnEIPAssociation.Builder.create(this, \"MyCfnEIPAssociation\")\n        .allocationId(\"allocationId\")\n        .eip(\"eip\")\n        .instanceId(\"instanceId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .privateIpAddress(\"privateIpAddress\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnEIPAssociation := ec2.NewCfnEIPAssociation(this, jsii.String(\"MyCfnEIPAssociation\"), &cfnEIPAssociationProps{\n\tallocationId: jsii.String(\"allocationId\"),\n\teip: jsii.String(\"eip\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnEIPAssociation = new ec2.CfnEIPAssociation(this, 'MyCfnEIPAssociation', /* all optional props */ {\n  allocationId: 'allocationId',\n  eip: 'eip',\n  instanceId: 'instanceId',\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddress: 'privateIpAddress',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEIPAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIPAssociation",
        "@aws-cdk/aws-ec2.CfnEIPAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEIPAssociation = new ec2.CfnEIPAssociation(this, 'MyCfnEIPAssociation', /* all optional props */ {\n  allocationId: 'allocationId',\n  eip: 'eip',\n  instanceId: 'instanceId',\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddress: 'privateIpAddress',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "68774c4d04fa6fd701f4563baced53293c969ffc4987c4e8ea4f80584e2d0fd9"
    },
    "49509b3644d4bf8e001fbb78bdecce4389868ee1fae8d0a8aea5d36391daa2b3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_eIPAssociation_props = ec2.CfnEIPAssociationProps(\n    allocation_id=\"allocationId\",\n    eip=\"eip\",\n    instance_id=\"instanceId\",\n    network_interface_id=\"networkInterfaceId\",\n    private_ip_address=\"privateIpAddress\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnEIPAssociationProps cfnEIPAssociationProps = new CfnEIPAssociationProps {\n    AllocationId = \"allocationId\",\n    Eip = \"eip\",\n    InstanceId = \"instanceId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    PrivateIpAddress = \"privateIpAddress\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnEIPAssociationProps cfnEIPAssociationProps = CfnEIPAssociationProps.builder()\n        .allocationId(\"allocationId\")\n        .eip(\"eip\")\n        .instanceId(\"instanceId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .privateIpAddress(\"privateIpAddress\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnEIPAssociationProps := &cfnEIPAssociationProps{\n\tallocationId: jsii.String(\"allocationId\"),\n\teip: jsii.String(\"eip\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnEIPAssociationProps: ec2.CfnEIPAssociationProps = {\n  allocationId: 'allocationId',\n  eip: 'eip',\n  instanceId: 'instanceId',\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddress: 'privateIpAddress',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEIPAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIPAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEIPAssociationProps: ec2.CfnEIPAssociationProps = {\n  allocationId: 'allocationId',\n  eip: 'eip',\n  instanceId: 'instanceId',\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddress: 'privateIpAddress',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "509335b39be02127d763567332c4133badfa4997c5ca83f95ddbc3db3e5b675c"
    },
    "730e202907250e9f9fe5d3a6d60299cf0da358620c59983bfb8b4a33019cd9b7": {
      "translations": {
        "python": {
          "source": "# instance: ec2.Instance\n\n# my_zone: route53.HostedZone\n\n\nelastic_ip = ec2.CfnEIP(self, \"EIP\",\n    domain=\"vpc\",\n    instance_id=instance.instance_id\n)\nroute53.ARecord(self, \"ARecord\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_ip_addresses(elastic_ip.ref)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = new CfnEIP(this, \"EIP\", new CfnEIPProps {\n    Domain = \"vpc\",\n    InstanceId = instance.InstanceId\n});\nnew ARecord(this, \"ARecord\", new ARecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromIpAddresses(elasticIp.Ref)\n});",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = CfnEIP.Builder.create(this, \"EIP\")\n        .domain(\"vpc\")\n        .instanceId(instance.getInstanceId())\n        .build();\nARecord.Builder.create(this, \"ARecord\")\n        .zone(myZone)\n        .target(RecordTarget.fromIpAddresses(elasticIp.getRef()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var instance instance\n\nvar myZone hostedZone\n\nelasticIp := ec2.NewCfnEIP(this, jsii.String(\"EIP\"), &cfnEIPProps{\n\tdomain: jsii.String(\"vpc\"),\n\tinstanceId: instance.instanceId,\n})\nroute53.NewARecord(this, jsii.String(\"ARecord\"), &aRecordProps{\n\tzone: myZone,\n\ttarget: route53.recordTarget.fromIpAddresses(elasticIp.ref),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\n\ndeclare const myZone: route53.HostedZone;\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEIPProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIP",
        "@aws-cdk/aws-ec2.CfnEIPProps",
        "@aws-cdk/aws-ec2.Instance#instanceId",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromIpAddresses",
        "@aws-cdk/core.Construct",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\n\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "89e380ec87d3dcb9bb1517c3ae98b920b37365333aabd1032337a47a494b0cf4"
    },
    "df6dc802880a00259091fae3897030dcbdf29f8660cf93aed53922fb8184be90": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_egress_only_internet_gateway = ec2.CfnEgressOnlyInternetGateway(self, \"MyCfnEgressOnlyInternetGateway\",\n    vpc_id=\"vpcId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnEgressOnlyInternetGateway cfnEgressOnlyInternetGateway = new CfnEgressOnlyInternetGateway(this, \"MyCfnEgressOnlyInternetGateway\", new CfnEgressOnlyInternetGatewayProps {\n    VpcId = \"vpcId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnEgressOnlyInternetGateway cfnEgressOnlyInternetGateway = CfnEgressOnlyInternetGateway.Builder.create(this, \"MyCfnEgressOnlyInternetGateway\")\n        .vpcId(\"vpcId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnEgressOnlyInternetGateway := ec2.NewCfnEgressOnlyInternetGateway(this, jsii.String(\"MyCfnEgressOnlyInternetGateway\"), &cfnEgressOnlyInternetGatewayProps{\n\tvpcId: jsii.String(\"vpcId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnEgressOnlyInternetGateway = new ec2.CfnEgressOnlyInternetGateway(this, 'MyCfnEgressOnlyInternetGateway', {\n  vpcId: 'vpcId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEgressOnlyInternetGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEgressOnlyInternetGateway",
        "@aws-cdk/aws-ec2.CfnEgressOnlyInternetGatewayProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEgressOnlyInternetGateway = new ec2.CfnEgressOnlyInternetGateway(this, 'MyCfnEgressOnlyInternetGateway', {\n  vpcId: 'vpcId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "682b81a5a1701059bfd3026db3b8afe21e3ba872d3777bfc65c88fb50a9b4a6c"
    },
    "cf30c68dead3b8499127310e3e14c071627e97c63619757e903aad1e262ec789": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_egress_only_internet_gateway_props = ec2.CfnEgressOnlyInternetGatewayProps(\n    vpc_id=\"vpcId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnEgressOnlyInternetGatewayProps cfnEgressOnlyInternetGatewayProps = new CfnEgressOnlyInternetGatewayProps {\n    VpcId = \"vpcId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnEgressOnlyInternetGatewayProps cfnEgressOnlyInternetGatewayProps = CfnEgressOnlyInternetGatewayProps.builder()\n        .vpcId(\"vpcId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnEgressOnlyInternetGatewayProps := &cfnEgressOnlyInternetGatewayProps{\n\tvpcId: jsii.String(\"vpcId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnEgressOnlyInternetGatewayProps: ec2.CfnEgressOnlyInternetGatewayProps = {\n  vpcId: 'vpcId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEgressOnlyInternetGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEgressOnlyInternetGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEgressOnlyInternetGatewayProps: ec2.CfnEgressOnlyInternetGatewayProps = {\n  vpcId: 'vpcId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f41a5465aa5f650458f3b92777c5a233fe2cb2e74510c7f873149af10ceec7d4"
    },
    "0327226be07718b8fe9258e87257e11c6e009b306a34b51717503a41f09b99ba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_enclave_certificate_iam_role_association = ec2.CfnEnclaveCertificateIamRoleAssociation(self, \"MyCfnEnclaveCertificateIamRoleAssociation\",\n    certificate_arn=\"certificateArn\",\n    role_arn=\"roleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnEnclaveCertificateIamRoleAssociation cfnEnclaveCertificateIamRoleAssociation = new CfnEnclaveCertificateIamRoleAssociation(this, \"MyCfnEnclaveCertificateIamRoleAssociation\", new CfnEnclaveCertificateIamRoleAssociationProps {\n    CertificateArn = \"certificateArn\",\n    RoleArn = \"roleArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnEnclaveCertificateIamRoleAssociation cfnEnclaveCertificateIamRoleAssociation = CfnEnclaveCertificateIamRoleAssociation.Builder.create(this, \"MyCfnEnclaveCertificateIamRoleAssociation\")\n        .certificateArn(\"certificateArn\")\n        .roleArn(\"roleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnEnclaveCertificateIamRoleAssociation := ec2.NewCfnEnclaveCertificateIamRoleAssociation(this, jsii.String(\"MyCfnEnclaveCertificateIamRoleAssociation\"), &cfnEnclaveCertificateIamRoleAssociationProps{\n\tcertificateArn: jsii.String(\"certificateArn\"),\n\troleArn: jsii.String(\"roleArn\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnEnclaveCertificateIamRoleAssociation = new ec2.CfnEnclaveCertificateIamRoleAssociation(this, 'MyCfnEnclaveCertificateIamRoleAssociation', {\n  certificateArn: 'certificateArn',\n  roleArn: 'roleArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEnclaveCertificateIamRoleAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEnclaveCertificateIamRoleAssociation",
        "@aws-cdk/aws-ec2.CfnEnclaveCertificateIamRoleAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEnclaveCertificateIamRoleAssociation = new ec2.CfnEnclaveCertificateIamRoleAssociation(this, 'MyCfnEnclaveCertificateIamRoleAssociation', {\n  certificateArn: 'certificateArn',\n  roleArn: 'roleArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a9f028c3031e5cd4caa7cb959ecf7ddefbb53af6a9eff57bf38a0b6ba334c1d4"
    },
    "799d21cea0d058a051a7eea85984c0dabe2aad471ac220f3fc4ae0a247ce9cf6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_enclave_certificate_iam_role_association_props = ec2.CfnEnclaveCertificateIamRoleAssociationProps(\n    certificate_arn=\"certificateArn\",\n    role_arn=\"roleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnEnclaveCertificateIamRoleAssociationProps cfnEnclaveCertificateIamRoleAssociationProps = new CfnEnclaveCertificateIamRoleAssociationProps {\n    CertificateArn = \"certificateArn\",\n    RoleArn = \"roleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnEnclaveCertificateIamRoleAssociationProps cfnEnclaveCertificateIamRoleAssociationProps = CfnEnclaveCertificateIamRoleAssociationProps.builder()\n        .certificateArn(\"certificateArn\")\n        .roleArn(\"roleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnEnclaveCertificateIamRoleAssociationProps := &cfnEnclaveCertificateIamRoleAssociationProps{\n\tcertificateArn: jsii.String(\"certificateArn\"),\n\troleArn: jsii.String(\"roleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnEnclaveCertificateIamRoleAssociationProps: ec2.CfnEnclaveCertificateIamRoleAssociationProps = {\n  certificateArn: 'certificateArn',\n  roleArn: 'roleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEnclaveCertificateIamRoleAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEnclaveCertificateIamRoleAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEnclaveCertificateIamRoleAssociationProps: ec2.CfnEnclaveCertificateIamRoleAssociationProps = {\n  certificateArn: 'certificateArn',\n  roleArn: 'roleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3c4506db7bc931fc970cced6b918b7a5b8c4893794a86082b52dd7663bef72ce"
    },
    "3b31c23ca3c8e1b54725587226bfddd02d65cc4876715c9ce200e8790c7e3d0f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# destination_options: Any\n\ncfn_flow_log = ec2.CfnFlowLog(self, \"MyCfnFlowLog\",\n    resource_id=\"resourceId\",\n    resource_type=\"resourceType\",\n    traffic_type=\"trafficType\",\n\n    # the properties below are optional\n    deliver_logs_permission_arn=\"deliverLogsPermissionArn\",\n    destination_options=destination_options,\n    log_destination=\"logDestination\",\n    log_destination_type=\"logDestinationType\",\n    log_format=\"logFormat\",\n    log_group_name=\"logGroupName\",\n    max_aggregation_interval=123,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar destinationOptions;\n\nCfnFlowLog cfnFlowLog = new CfnFlowLog(this, \"MyCfnFlowLog\", new CfnFlowLogProps {\n    ResourceId = \"resourceId\",\n    ResourceType = \"resourceType\",\n    TrafficType = \"trafficType\",\n\n    // the properties below are optional\n    DeliverLogsPermissionArn = \"deliverLogsPermissionArn\",\n    DestinationOptions = destinationOptions,\n    LogDestination = \"logDestination\",\n    LogDestinationType = \"logDestinationType\",\n    LogFormat = \"logFormat\",\n    LogGroupName = \"logGroupName\",\n    MaxAggregationInterval = 123,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject destinationOptions;\n\nCfnFlowLog cfnFlowLog = CfnFlowLog.Builder.create(this, \"MyCfnFlowLog\")\n        .resourceId(\"resourceId\")\n        .resourceType(\"resourceType\")\n        .trafficType(\"trafficType\")\n\n        // the properties below are optional\n        .deliverLogsPermissionArn(\"deliverLogsPermissionArn\")\n        .destinationOptions(destinationOptions)\n        .logDestination(\"logDestination\")\n        .logDestinationType(\"logDestinationType\")\n        .logFormat(\"logFormat\")\n        .logGroupName(\"logGroupName\")\n        .maxAggregationInterval(123)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar destinationOptions interface{}\ncfnFlowLog := ec2.NewCfnFlowLog(this, jsii.String(\"MyCfnFlowLog\"), &cfnFlowLogProps{\n\tresourceId: jsii.String(\"resourceId\"),\n\tresourceType: jsii.String(\"resourceType\"),\n\ttrafficType: jsii.String(\"trafficType\"),\n\n\t// the properties below are optional\n\tdeliverLogsPermissionArn: jsii.String(\"deliverLogsPermissionArn\"),\n\tdestinationOptions: destinationOptions,\n\tlogDestination: jsii.String(\"logDestination\"),\n\tlogDestinationType: jsii.String(\"logDestinationType\"),\n\tlogFormat: jsii.String(\"logFormat\"),\n\tlogGroupName: jsii.String(\"logGroupName\"),\n\tmaxAggregationInterval: jsii.Number(123),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const destinationOptions: any;\nconst cfnFlowLog = new ec2.CfnFlowLog(this, 'MyCfnFlowLog', {\n  resourceId: 'resourceId',\n  resourceType: 'resourceType',\n  trafficType: 'trafficType',\n\n  // the properties below are optional\n  deliverLogsPermissionArn: 'deliverLogsPermissionArn',\n  destinationOptions: destinationOptions,\n  logDestination: 'logDestination',\n  logDestinationType: 'logDestinationType',\n  logFormat: 'logFormat',\n  logGroupName: 'logGroupName',\n  maxAggregationInterval: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnFlowLog"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnFlowLog",
        "@aws-cdk/aws-ec2.CfnFlowLogProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const destinationOptions: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFlowLog = new ec2.CfnFlowLog(this, 'MyCfnFlowLog', {\n  resourceId: 'resourceId',\n  resourceType: 'resourceType',\n  trafficType: 'trafficType',\n\n  // the properties below are optional\n  deliverLogsPermissionArn: 'deliverLogsPermissionArn',\n  destinationOptions: destinationOptions,\n  logDestination: 'logDestination',\n  logDestinationType: 'logDestinationType',\n  logFormat: 'logFormat',\n  logGroupName: 'logGroupName',\n  maxAggregationInterval: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 19,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "fdadb2c40d50ed73147a126deae1ff3216f9ace03fa03072f7254e34edd257d0"
    },
    "4ae4495a27166f7c738e7cfd4701be107343e8e34ef9b882a8ee19f91796ae33": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# destination_options: Any\n\ncfn_flow_log_props = ec2.CfnFlowLogProps(\n    resource_id=\"resourceId\",\n    resource_type=\"resourceType\",\n    traffic_type=\"trafficType\",\n\n    # the properties below are optional\n    deliver_logs_permission_arn=\"deliverLogsPermissionArn\",\n    destination_options=destination_options,\n    log_destination=\"logDestination\",\n    log_destination_type=\"logDestinationType\",\n    log_format=\"logFormat\",\n    log_group_name=\"logGroupName\",\n    max_aggregation_interval=123,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar destinationOptions;\n\nCfnFlowLogProps cfnFlowLogProps = new CfnFlowLogProps {\n    ResourceId = \"resourceId\",\n    ResourceType = \"resourceType\",\n    TrafficType = \"trafficType\",\n\n    // the properties below are optional\n    DeliverLogsPermissionArn = \"deliverLogsPermissionArn\",\n    DestinationOptions = destinationOptions,\n    LogDestination = \"logDestination\",\n    LogDestinationType = \"logDestinationType\",\n    LogFormat = \"logFormat\",\n    LogGroupName = \"logGroupName\",\n    MaxAggregationInterval = 123,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject destinationOptions;\n\nCfnFlowLogProps cfnFlowLogProps = CfnFlowLogProps.builder()\n        .resourceId(\"resourceId\")\n        .resourceType(\"resourceType\")\n        .trafficType(\"trafficType\")\n\n        // the properties below are optional\n        .deliverLogsPermissionArn(\"deliverLogsPermissionArn\")\n        .destinationOptions(destinationOptions)\n        .logDestination(\"logDestination\")\n        .logDestinationType(\"logDestinationType\")\n        .logFormat(\"logFormat\")\n        .logGroupName(\"logGroupName\")\n        .maxAggregationInterval(123)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar destinationOptions interface{}\ncfnFlowLogProps := &cfnFlowLogProps{\n\tresourceId: jsii.String(\"resourceId\"),\n\tresourceType: jsii.String(\"resourceType\"),\n\ttrafficType: jsii.String(\"trafficType\"),\n\n\t// the properties below are optional\n\tdeliverLogsPermissionArn: jsii.String(\"deliverLogsPermissionArn\"),\n\tdestinationOptions: destinationOptions,\n\tlogDestination: jsii.String(\"logDestination\"),\n\tlogDestinationType: jsii.String(\"logDestinationType\"),\n\tlogFormat: jsii.String(\"logFormat\"),\n\tlogGroupName: jsii.String(\"logGroupName\"),\n\tmaxAggregationInterval: jsii.Number(123),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const destinationOptions: any;\nconst cfnFlowLogProps: ec2.CfnFlowLogProps = {\n  resourceId: 'resourceId',\n  resourceType: 'resourceType',\n  trafficType: 'trafficType',\n\n  // the properties below are optional\n  deliverLogsPermissionArn: 'deliverLogsPermissionArn',\n  destinationOptions: destinationOptions,\n  logDestination: 'logDestination',\n  logDestinationType: 'logDestinationType',\n  logFormat: 'logFormat',\n  logGroupName: 'logGroupName',\n  maxAggregationInterval: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnFlowLogProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnFlowLogProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const destinationOptions: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFlowLogProps: ec2.CfnFlowLogProps = {\n  resourceId: 'resourceId',\n  resourceType: 'resourceType',\n  trafficType: 'trafficType',\n\n  // the properties below are optional\n  deliverLogsPermissionArn: 'deliverLogsPermissionArn',\n  destinationOptions: destinationOptions,\n  logDestination: 'logDestination',\n  logDestinationType: 'logDestinationType',\n  logFormat: 'logFormat',\n  logGroupName: 'logGroupName',\n  maxAggregationInterval: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 19,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "599dd00118d5493e210349128e7691d72618479b8d463552abb3b51fdfce74bd"
    },
    "d588494ad26a90b2cc61b27c0b4ec73832f139c8c18915657bcf6c81081b5a4a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_gateway_route_table_association = ec2.CfnGatewayRouteTableAssociation(self, \"MyCfnGatewayRouteTableAssociation\",\n    gateway_id=\"gatewayId\",\n    route_table_id=\"routeTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnGatewayRouteTableAssociation cfnGatewayRouteTableAssociation = new CfnGatewayRouteTableAssociation(this, \"MyCfnGatewayRouteTableAssociation\", new CfnGatewayRouteTableAssociationProps {\n    GatewayId = \"gatewayId\",\n    RouteTableId = \"routeTableId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnGatewayRouteTableAssociation cfnGatewayRouteTableAssociation = CfnGatewayRouteTableAssociation.Builder.create(this, \"MyCfnGatewayRouteTableAssociation\")\n        .gatewayId(\"gatewayId\")\n        .routeTableId(\"routeTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnGatewayRouteTableAssociation := ec2.NewCfnGatewayRouteTableAssociation(this, jsii.String(\"MyCfnGatewayRouteTableAssociation\"), &cfnGatewayRouteTableAssociationProps{\n\tgatewayId: jsii.String(\"gatewayId\"),\n\trouteTableId: jsii.String(\"routeTableId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnGatewayRouteTableAssociation = new ec2.CfnGatewayRouteTableAssociation(this, 'MyCfnGatewayRouteTableAssociation', {\n  gatewayId: 'gatewayId',\n  routeTableId: 'routeTableId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnGatewayRouteTableAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnGatewayRouteTableAssociation",
        "@aws-cdk/aws-ec2.CfnGatewayRouteTableAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGatewayRouteTableAssociation = new ec2.CfnGatewayRouteTableAssociation(this, 'MyCfnGatewayRouteTableAssociation', {\n  gatewayId: 'gatewayId',\n  routeTableId: 'routeTableId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "cb4537a712cbf188a72e9703fe6fe5d4118f1598f8557fe7d17d009a2459ea5a"
    },
    "612916610688572777628a50a89d73c20be925450cc03ec3f5bf2c7a0e2653a9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_gateway_route_table_association_props = ec2.CfnGatewayRouteTableAssociationProps(\n    gateway_id=\"gatewayId\",\n    route_table_id=\"routeTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnGatewayRouteTableAssociationProps cfnGatewayRouteTableAssociationProps = new CfnGatewayRouteTableAssociationProps {\n    GatewayId = \"gatewayId\",\n    RouteTableId = \"routeTableId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnGatewayRouteTableAssociationProps cfnGatewayRouteTableAssociationProps = CfnGatewayRouteTableAssociationProps.builder()\n        .gatewayId(\"gatewayId\")\n        .routeTableId(\"routeTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnGatewayRouteTableAssociationProps := &cfnGatewayRouteTableAssociationProps{\n\tgatewayId: jsii.String(\"gatewayId\"),\n\trouteTableId: jsii.String(\"routeTableId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnGatewayRouteTableAssociationProps: ec2.CfnGatewayRouteTableAssociationProps = {\n  gatewayId: 'gatewayId',\n  routeTableId: 'routeTableId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnGatewayRouteTableAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnGatewayRouteTableAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGatewayRouteTableAssociationProps: ec2.CfnGatewayRouteTableAssociationProps = {\n  gatewayId: 'gatewayId',\n  routeTableId: 'routeTableId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7014daa4817065990628c35e5747469d1814860dd521aec132b88c2b753c5e5b"
    },
    "964df068b44013d9e67b894da7b594bdf68e806bb2404f7820f02e3221708b75": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_host = ec2.CfnHost(self, \"MyCfnHost\",\n    availability_zone=\"availabilityZone\",\n    instance_type=\"instanceType\",\n\n    # the properties below are optional\n    auto_placement=\"autoPlacement\",\n    host_recovery=\"hostRecovery\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnHost cfnHost = new CfnHost(this, \"MyCfnHost\", new CfnHostProps {\n    AvailabilityZone = \"availabilityZone\",\n    InstanceType = \"instanceType\",\n\n    // the properties below are optional\n    AutoPlacement = \"autoPlacement\",\n    HostRecovery = \"hostRecovery\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnHost cfnHost = CfnHost.Builder.create(this, \"MyCfnHost\")\n        .availabilityZone(\"availabilityZone\")\n        .instanceType(\"instanceType\")\n\n        // the properties below are optional\n        .autoPlacement(\"autoPlacement\")\n        .hostRecovery(\"hostRecovery\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnHost := ec2.NewCfnHost(this, jsii.String(\"MyCfnHost\"), &cfnHostProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tinstanceType: jsii.String(\"instanceType\"),\n\n\t// the properties below are optional\n\tautoPlacement: jsii.String(\"autoPlacement\"),\n\thostRecovery: jsii.String(\"hostRecovery\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnHost = new ec2.CfnHost(this, 'MyCfnHost', {\n  availabilityZone: 'availabilityZone',\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  autoPlacement: 'autoPlacement',\n  hostRecovery: 'hostRecovery',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnHost"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnHost",
        "@aws-cdk/aws-ec2.CfnHostProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHost = new ec2.CfnHost(this, 'MyCfnHost', {\n  availabilityZone: 'availabilityZone',\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  autoPlacement: 'autoPlacement',\n  hostRecovery: 'hostRecovery',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "75f78693f399a865180f3a1b4b4579276dbb948c571dbf5ffb5218a8ff9278bd"
    },
    "997a0f518b9a7e12bf306a049344e800533680b58c5cd58149d98ba41427c654": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_host_props = ec2.CfnHostProps(\n    availability_zone=\"availabilityZone\",\n    instance_type=\"instanceType\",\n\n    # the properties below are optional\n    auto_placement=\"autoPlacement\",\n    host_recovery=\"hostRecovery\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnHostProps cfnHostProps = new CfnHostProps {\n    AvailabilityZone = \"availabilityZone\",\n    InstanceType = \"instanceType\",\n\n    // the properties below are optional\n    AutoPlacement = \"autoPlacement\",\n    HostRecovery = \"hostRecovery\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnHostProps cfnHostProps = CfnHostProps.builder()\n        .availabilityZone(\"availabilityZone\")\n        .instanceType(\"instanceType\")\n\n        // the properties below are optional\n        .autoPlacement(\"autoPlacement\")\n        .hostRecovery(\"hostRecovery\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnHostProps := &cfnHostProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tinstanceType: jsii.String(\"instanceType\"),\n\n\t// the properties below are optional\n\tautoPlacement: jsii.String(\"autoPlacement\"),\n\thostRecovery: jsii.String(\"hostRecovery\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnHostProps: ec2.CfnHostProps = {\n  availabilityZone: 'availabilityZone',\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  autoPlacement: 'autoPlacement',\n  hostRecovery: 'hostRecovery',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnHostProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnHostProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHostProps: ec2.CfnHostProps = {\n  availabilityZone: 'availabilityZone',\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  autoPlacement: 'autoPlacement',\n  hostRecovery: 'hostRecovery',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "458e3bf03f8912654ac44ed962c44cc0f769de2457ebe293929e6135c4bb3ed8"
    },
    "e5f728f7c6e3e4abc379ab8586c1a1de97749946d4979788222c2d7854883dbf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_iPAM = ec2.CfnIPAM(self, \"MyCfnIPAM\",\n    description=\"description\",\n    operating_regions=[ec2.CfnIPAM.IpamOperatingRegionProperty(\n        region_name=\"regionName\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnIPAM cfnIPAM = new CfnIPAM(this, \"MyCfnIPAM\", new CfnIPAMProps {\n    Description = \"description\",\n    OperatingRegions = new [] { new IpamOperatingRegionProperty {\n        RegionName = \"regionName\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnIPAM cfnIPAM = CfnIPAM.Builder.create(this, \"MyCfnIPAM\")\n        .description(\"description\")\n        .operatingRegions(List.of(IpamOperatingRegionProperty.builder()\n                .regionName(\"regionName\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnIPAM := ec2.NewCfnIPAM(this, jsii.String(\"MyCfnIPAM\"), &cfnIPAMProps{\n\tdescription: jsii.String(\"description\"),\n\toperatingRegions: []interface{}{\n\t\t&ipamOperatingRegionProperty{\n\t\t\tregionName: jsii.String(\"regionName\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnIPAM = new ec2.CfnIPAM(this, 'MyCfnIPAM', /* all optional props */ {\n  description: 'description',\n  operatingRegions: [{\n    regionName: 'regionName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAM"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAM",
        "@aws-cdk/aws-ec2.CfnIPAMProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIPAM = new ec2.CfnIPAM(this, 'MyCfnIPAM', /* all optional props */ {\n  description: 'description',\n  operatingRegions: [{\n    regionName: 'regionName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "118f1bf0714851034a26bd9d3441f27f89951cf86447fb60ca8218789f07ca6f"
    },
    "b3aff1bc9af52671302ecdbbba9f7d479326fa69d360ffdc7c663dabc5e5080e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nipam_operating_region_property = ec2.CfnIPAM.IpamOperatingRegionProperty(\n    region_name=\"regionName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIpamOperatingRegionProperty ipamOperatingRegionProperty = new IpamOperatingRegionProperty {\n    RegionName = \"regionName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIpamOperatingRegionProperty ipamOperatingRegionProperty = IpamOperatingRegionProperty.builder()\n        .regionName(\"regionName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nipamOperatingRegionProperty := &ipamOperatingRegionProperty{\n\tregionName: jsii.String(\"regionName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ipamOperatingRegionProperty: ec2.CfnIPAM.IpamOperatingRegionProperty = {\n  regionName: 'regionName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAM.IpamOperatingRegionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAM.IpamOperatingRegionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ipamOperatingRegionProperty: ec2.CfnIPAM.IpamOperatingRegionProperty = {\n  regionName: 'regionName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1377b43d79068e49a49d4c69364d7b0722149d53eb5e82658ff8cce7eae0d4b4"
    },
    "ed2d055d1e00554d31ec39400ddd6a63e9616374f71af930c3eb0fa3ec5440c9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_iPAMAllocation = ec2.CfnIPAMAllocation(self, \"MyCfnIPAMAllocation\",\n    ipam_pool_id=\"ipamPoolId\",\n\n    # the properties below are optional\n    cidr=\"cidr\",\n    description=\"description\",\n    netmask_length=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnIPAMAllocation cfnIPAMAllocation = new CfnIPAMAllocation(this, \"MyCfnIPAMAllocation\", new CfnIPAMAllocationProps {\n    IpamPoolId = \"ipamPoolId\",\n\n    // the properties below are optional\n    Cidr = \"cidr\",\n    Description = \"description\",\n    NetmaskLength = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnIPAMAllocation cfnIPAMAllocation = CfnIPAMAllocation.Builder.create(this, \"MyCfnIPAMAllocation\")\n        .ipamPoolId(\"ipamPoolId\")\n\n        // the properties below are optional\n        .cidr(\"cidr\")\n        .description(\"description\")\n        .netmaskLength(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnIPAMAllocation := ec2.NewCfnIPAMAllocation(this, jsii.String(\"MyCfnIPAMAllocation\"), &cfnIPAMAllocationProps{\n\tipamPoolId: jsii.String(\"ipamPoolId\"),\n\n\t// the properties below are optional\n\tcidr: jsii.String(\"cidr\"),\n\tdescription: jsii.String(\"description\"),\n\tnetmaskLength: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnIPAMAllocation = new ec2.CfnIPAMAllocation(this, 'MyCfnIPAMAllocation', {\n  ipamPoolId: 'ipamPoolId',\n\n  // the properties below are optional\n  cidr: 'cidr',\n  description: 'description',\n  netmaskLength: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAMAllocation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAMAllocation",
        "@aws-cdk/aws-ec2.CfnIPAMAllocationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIPAMAllocation = new ec2.CfnIPAMAllocation(this, 'MyCfnIPAMAllocation', {\n  ipamPoolId: 'ipamPoolId',\n\n  // the properties below are optional\n  cidr: 'cidr',\n  description: 'description',\n  netmaskLength: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "6d886bd1f41ae86e22dca7773fde86a692afc853a17b9e34b9ec4d3247556bdd"
    },
    "0ef78f01ac0aa058f68a709acb46e858c95a030bcaf6d34370a6df366fc2427b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_iPAMAllocation_props = ec2.CfnIPAMAllocationProps(\n    ipam_pool_id=\"ipamPoolId\",\n\n    # the properties below are optional\n    cidr=\"cidr\",\n    description=\"description\",\n    netmask_length=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnIPAMAllocationProps cfnIPAMAllocationProps = new CfnIPAMAllocationProps {\n    IpamPoolId = \"ipamPoolId\",\n\n    // the properties below are optional\n    Cidr = \"cidr\",\n    Description = \"description\",\n    NetmaskLength = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnIPAMAllocationProps cfnIPAMAllocationProps = CfnIPAMAllocationProps.builder()\n        .ipamPoolId(\"ipamPoolId\")\n\n        // the properties below are optional\n        .cidr(\"cidr\")\n        .description(\"description\")\n        .netmaskLength(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnIPAMAllocationProps := &cfnIPAMAllocationProps{\n\tipamPoolId: jsii.String(\"ipamPoolId\"),\n\n\t// the properties below are optional\n\tcidr: jsii.String(\"cidr\"),\n\tdescription: jsii.String(\"description\"),\n\tnetmaskLength: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnIPAMAllocationProps: ec2.CfnIPAMAllocationProps = {\n  ipamPoolId: 'ipamPoolId',\n\n  // the properties below are optional\n  cidr: 'cidr',\n  description: 'description',\n  netmaskLength: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAMAllocationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAMAllocationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIPAMAllocationProps: ec2.CfnIPAMAllocationProps = {\n  ipamPoolId: 'ipamPoolId',\n\n  // the properties below are optional\n  cidr: 'cidr',\n  description: 'description',\n  netmaskLength: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ae09ec6c529f54593fcef02fe59f7319fc99db0b146a4509d70e88eab4fce1fa"
    },
    "158b3de87ea1f6035564a45832d35da35723030aaa10fe9deb6ea6c37d680739": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_iPAMPool = ec2.CfnIPAMPool(self, \"MyCfnIPAMPool\",\n    address_family=\"addressFamily\",\n    ipam_scope_id=\"ipamScopeId\",\n\n    # the properties below are optional\n    allocation_default_netmask_length=123,\n    allocation_max_netmask_length=123,\n    allocation_min_netmask_length=123,\n    allocation_resource_tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    auto_import=False,\n    description=\"description\",\n    locale=\"locale\",\n    provisioned_cidrs=[ec2.CfnIPAMPool.ProvisionedCidrProperty(\n        cidr=\"cidr\"\n    )],\n    publicly_advertisable=False,\n    source_ipam_pool_id=\"sourceIpamPoolId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnIPAMPool cfnIPAMPool = new CfnIPAMPool(this, \"MyCfnIPAMPool\", new CfnIPAMPoolProps {\n    AddressFamily = \"addressFamily\",\n    IpamScopeId = \"ipamScopeId\",\n\n    // the properties below are optional\n    AllocationDefaultNetmaskLength = 123,\n    AllocationMaxNetmaskLength = 123,\n    AllocationMinNetmaskLength = 123,\n    AllocationResourceTags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    AutoImport = false,\n    Description = \"description\",\n    Locale = \"locale\",\n    ProvisionedCidrs = new [] { new ProvisionedCidrProperty {\n        Cidr = \"cidr\"\n    } },\n    PubliclyAdvertisable = false,\n    SourceIpamPoolId = \"sourceIpamPoolId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnIPAMPool cfnIPAMPool = CfnIPAMPool.Builder.create(this, \"MyCfnIPAMPool\")\n        .addressFamily(\"addressFamily\")\n        .ipamScopeId(\"ipamScopeId\")\n\n        // the properties below are optional\n        .allocationDefaultNetmaskLength(123)\n        .allocationMaxNetmaskLength(123)\n        .allocationMinNetmaskLength(123)\n        .allocationResourceTags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .autoImport(false)\n        .description(\"description\")\n        .locale(\"locale\")\n        .provisionedCidrs(List.of(ProvisionedCidrProperty.builder()\n                .cidr(\"cidr\")\n                .build()))\n        .publiclyAdvertisable(false)\n        .sourceIpamPoolId(\"sourceIpamPoolId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnIPAMPool := ec2.NewCfnIPAMPool(this, jsii.String(\"MyCfnIPAMPool\"), &cfnIPAMPoolProps{\n\taddressFamily: jsii.String(\"addressFamily\"),\n\tipamScopeId: jsii.String(\"ipamScopeId\"),\n\n\t// the properties below are optional\n\tallocationDefaultNetmaskLength: jsii.Number(123),\n\tallocationMaxNetmaskLength: jsii.Number(123),\n\tallocationMinNetmaskLength: jsii.Number(123),\n\tallocationResourceTags: []interface{}{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tautoImport: jsii.Boolean(false),\n\tdescription: jsii.String(\"description\"),\n\tlocale: jsii.String(\"locale\"),\n\tprovisionedCidrs: []interface{}{\n\t\t&provisionedCidrProperty{\n\t\t\tcidr: jsii.String(\"cidr\"),\n\t\t},\n\t},\n\tpubliclyAdvertisable: jsii.Boolean(false),\n\tsourceIpamPoolId: jsii.String(\"sourceIpamPoolId\"),\n\ttags: []*cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnIPAMPool = new ec2.CfnIPAMPool(this, 'MyCfnIPAMPool', {\n  addressFamily: 'addressFamily',\n  ipamScopeId: 'ipamScopeId',\n\n  // the properties below are optional\n  allocationDefaultNetmaskLength: 123,\n  allocationMaxNetmaskLength: 123,\n  allocationMinNetmaskLength: 123,\n  allocationResourceTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  autoImport: false,\n  description: 'description',\n  locale: 'locale',\n  provisionedCidrs: [{\n    cidr: 'cidr',\n  }],\n  publiclyAdvertisable: false,\n  sourceIpamPoolId: 'sourceIpamPoolId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAMPool"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAMPool",
        "@aws-cdk/aws-ec2.CfnIPAMPoolProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIPAMPool = new ec2.CfnIPAMPool(this, 'MyCfnIPAMPool', {\n  addressFamily: 'addressFamily',\n  ipamScopeId: 'ipamScopeId',\n\n  // the properties below are optional\n  allocationDefaultNetmaskLength: 123,\n  allocationMaxNetmaskLength: 123,\n  allocationMinNetmaskLength: 123,\n  allocationResourceTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  autoImport: false,\n  description: 'description',\n  locale: 'locale',\n  provisionedCidrs: [{\n    cidr: 'cidr',\n  }],\n  publiclyAdvertisable: false,\n  sourceIpamPoolId: 'sourceIpamPoolId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 12,
        "75": 22,
        "91": 2,
        "104": 1,
        "192": 3,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "086a227b3ef24e3d306b79457dd2bd4c3404195ba11152050466422b19b1f9c4"
    },
    "d5bc75d832e6ef4c18115f96c5b1687f8b433c03532a827b9a7214bc9eb5e5ea": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprovisioned_cidr_property = ec2.CfnIPAMPool.ProvisionedCidrProperty(\n    cidr=\"cidr\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nProvisionedCidrProperty provisionedCidrProperty = new ProvisionedCidrProperty {\n    Cidr = \"cidr\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nProvisionedCidrProperty provisionedCidrProperty = ProvisionedCidrProperty.builder()\n        .cidr(\"cidr\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprovisionedCidrProperty := &provisionedCidrProperty{\n\tcidr: jsii.String(\"cidr\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst provisionedCidrProperty: ec2.CfnIPAMPool.ProvisionedCidrProperty = {\n  cidr: 'cidr',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAMPool.ProvisionedCidrProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAMPool.ProvisionedCidrProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst provisionedCidrProperty: ec2.CfnIPAMPool.ProvisionedCidrProperty = {\n  cidr: 'cidr',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d22c1919974247ed3e69d6ea483f77529641e92794abf03e374d2d500b2c6d39"
    },
    "65ff4db1ff83573e90e0f2999fe6d4ef7f7d66b34be1276c9e17f209a61d76c1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_iPAMPool_props = ec2.CfnIPAMPoolProps(\n    address_family=\"addressFamily\",\n    ipam_scope_id=\"ipamScopeId\",\n\n    # the properties below are optional\n    allocation_default_netmask_length=123,\n    allocation_max_netmask_length=123,\n    allocation_min_netmask_length=123,\n    allocation_resource_tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    auto_import=False,\n    description=\"description\",\n    locale=\"locale\",\n    provisioned_cidrs=[ec2.CfnIPAMPool.ProvisionedCidrProperty(\n        cidr=\"cidr\"\n    )],\n    publicly_advertisable=False,\n    source_ipam_pool_id=\"sourceIpamPoolId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnIPAMPoolProps cfnIPAMPoolProps = new CfnIPAMPoolProps {\n    AddressFamily = \"addressFamily\",\n    IpamScopeId = \"ipamScopeId\",\n\n    // the properties below are optional\n    AllocationDefaultNetmaskLength = 123,\n    AllocationMaxNetmaskLength = 123,\n    AllocationMinNetmaskLength = 123,\n    AllocationResourceTags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    AutoImport = false,\n    Description = \"description\",\n    Locale = \"locale\",\n    ProvisionedCidrs = new [] { new ProvisionedCidrProperty {\n        Cidr = \"cidr\"\n    } },\n    PubliclyAdvertisable = false,\n    SourceIpamPoolId = \"sourceIpamPoolId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnIPAMPoolProps cfnIPAMPoolProps = CfnIPAMPoolProps.builder()\n        .addressFamily(\"addressFamily\")\n        .ipamScopeId(\"ipamScopeId\")\n\n        // the properties below are optional\n        .allocationDefaultNetmaskLength(123)\n        .allocationMaxNetmaskLength(123)\n        .allocationMinNetmaskLength(123)\n        .allocationResourceTags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .autoImport(false)\n        .description(\"description\")\n        .locale(\"locale\")\n        .provisionedCidrs(List.of(ProvisionedCidrProperty.builder()\n                .cidr(\"cidr\")\n                .build()))\n        .publiclyAdvertisable(false)\n        .sourceIpamPoolId(\"sourceIpamPoolId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnIPAMPoolProps := &cfnIPAMPoolProps{\n\taddressFamily: jsii.String(\"addressFamily\"),\n\tipamScopeId: jsii.String(\"ipamScopeId\"),\n\n\t// the properties below are optional\n\tallocationDefaultNetmaskLength: jsii.Number(123),\n\tallocationMaxNetmaskLength: jsii.Number(123),\n\tallocationMinNetmaskLength: jsii.Number(123),\n\tallocationResourceTags: []interface{}{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tautoImport: jsii.Boolean(false),\n\tdescription: jsii.String(\"description\"),\n\tlocale: jsii.String(\"locale\"),\n\tprovisionedCidrs: []interface{}{\n\t\t&provisionedCidrProperty{\n\t\t\tcidr: jsii.String(\"cidr\"),\n\t\t},\n\t},\n\tpubliclyAdvertisable: jsii.Boolean(false),\n\tsourceIpamPoolId: jsii.String(\"sourceIpamPoolId\"),\n\ttags: []*cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnIPAMPoolProps: ec2.CfnIPAMPoolProps = {\n  addressFamily: 'addressFamily',\n  ipamScopeId: 'ipamScopeId',\n\n  // the properties below are optional\n  allocationDefaultNetmaskLength: 123,\n  allocationMaxNetmaskLength: 123,\n  allocationMinNetmaskLength: 123,\n  allocationResourceTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  autoImport: false,\n  description: 'description',\n  locale: 'locale',\n  provisionedCidrs: [{\n    cidr: 'cidr',\n  }],\n  publiclyAdvertisable: false,\n  sourceIpamPoolId: 'sourceIpamPoolId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAMPoolProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAMPoolProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIPAMPoolProps: ec2.CfnIPAMPoolProps = {\n  addressFamily: 'addressFamily',\n  ipamScopeId: 'ipamScopeId',\n\n  // the properties below are optional\n  allocationDefaultNetmaskLength: 123,\n  allocationMaxNetmaskLength: 123,\n  allocationMinNetmaskLength: 123,\n  allocationResourceTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  autoImport: false,\n  description: 'description',\n  locale: 'locale',\n  provisionedCidrs: [{\n    cidr: 'cidr',\n  }],\n  publiclyAdvertisable: false,\n  sourceIpamPoolId: 'sourceIpamPoolId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 11,
        "75": 22,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "78df1cd42c33d520423e701f3bfa1b68210ee37e2210dc4eaba23c34ff51b45f"
    },
    "e43269be048ddb85be2d352629ad4a2ef0a186509e64979189121a5d4ac8ff3e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_iPAMProps = ec2.CfnIPAMProps(\n    description=\"description\",\n    operating_regions=[ec2.CfnIPAM.IpamOperatingRegionProperty(\n        region_name=\"regionName\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnIPAMProps cfnIPAMProps = new CfnIPAMProps {\n    Description = \"description\",\n    OperatingRegions = new [] { new IpamOperatingRegionProperty {\n        RegionName = \"regionName\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnIPAMProps cfnIPAMProps = CfnIPAMProps.builder()\n        .description(\"description\")\n        .operatingRegions(List.of(IpamOperatingRegionProperty.builder()\n                .regionName(\"regionName\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnIPAMProps := &cfnIPAMProps{\n\tdescription: jsii.String(\"description\"),\n\toperatingRegions: []interface{}{\n\t\t&ipamOperatingRegionProperty{\n\t\t\tregionName: jsii.String(\"regionName\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnIPAMProps: ec2.CfnIPAMProps = {\n  description: 'description',\n  operatingRegions: [{\n    regionName: 'regionName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAMProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAMProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIPAMProps: ec2.CfnIPAMProps = {\n  description: 'description',\n  operatingRegions: [{\n    regionName: 'regionName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "eb46560123816ac783256a57f6c17ddefcdcab411ff78b30a1e99fb88ee3cac2"
    },
    "aeb437f30a1d2cdb2af9643b342c3c6263a5bd4e086732ac4aa91edb3d18e765": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_iPAMScope = ec2.CfnIPAMScope(self, \"MyCfnIPAMScope\",\n    ipam_id=\"ipamId\",\n\n    # the properties below are optional\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnIPAMScope cfnIPAMScope = new CfnIPAMScope(this, \"MyCfnIPAMScope\", new CfnIPAMScopeProps {\n    IpamId = \"ipamId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnIPAMScope cfnIPAMScope = CfnIPAMScope.Builder.create(this, \"MyCfnIPAMScope\")\n        .ipamId(\"ipamId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnIPAMScope := ec2.NewCfnIPAMScope(this, jsii.String(\"MyCfnIPAMScope\"), &cfnIPAMScopeProps{\n\tipamId: jsii.String(\"ipamId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnIPAMScope = new ec2.CfnIPAMScope(this, 'MyCfnIPAMScope', {\n  ipamId: 'ipamId',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAMScope"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAMScope",
        "@aws-cdk/aws-ec2.CfnIPAMScopeProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIPAMScope = new ec2.CfnIPAMScope(this, 'MyCfnIPAMScope', {\n  ipamId: 'ipamId',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f70ace41d495cb22f5fb74045d463c8ec16d958d065ca68713084ee85eea993f"
    },
    "3487428e62f4f16f69f31bf85d58b042f141c45aa7c276d944ff437b48f3b136": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_iPAMScope_props = ec2.CfnIPAMScopeProps(\n    ipam_id=\"ipamId\",\n\n    # the properties below are optional\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnIPAMScopeProps cfnIPAMScopeProps = new CfnIPAMScopeProps {\n    IpamId = \"ipamId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnIPAMScopeProps cfnIPAMScopeProps = CfnIPAMScopeProps.builder()\n        .ipamId(\"ipamId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnIPAMScopeProps := &cfnIPAMScopeProps{\n\tipamId: jsii.String(\"ipamId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnIPAMScopeProps: ec2.CfnIPAMScopeProps = {\n  ipamId: 'ipamId',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnIPAMScopeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnIPAMScopeProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIPAMScopeProps: ec2.CfnIPAMScopeProps = {\n  ipamId: 'ipamId',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "beac27201b0e673bd8a9c924b2bebfb57991d0af311e0331a6994f7b51f8a601"
    },
    "c1a64b5aaa8b549a4724ae064181a669137a6a6d2281ecbbf38baca730a2bda5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_instance = ec2.CfnInstance(self, \"MyCfnInstance\",\n    additional_info=\"additionalInfo\",\n    affinity=\"affinity\",\n    availability_zone=\"availabilityZone\",\n    block_device_mappings=[ec2.CfnInstance.BlockDeviceMappingProperty(\n        device_name=\"deviceName\",\n\n        # the properties below are optional\n        ebs=ec2.CfnInstance.EbsProperty(\n            delete_on_termination=False,\n            encrypted=False,\n            iops=123,\n            kms_key_id=\"kmsKeyId\",\n            snapshot_id=\"snapshotId\",\n            volume_size=123,\n            volume_type=\"volumeType\"\n        ),\n        no_device=ec2.CfnInstance.NoDeviceProperty(),\n        virtual_name=\"virtualName\"\n    )],\n    cpu_options=ec2.CfnInstance.CpuOptionsProperty(\n        core_count=123,\n        threads_per_core=123\n    ),\n    credit_specification=ec2.CfnInstance.CreditSpecificationProperty(\n        cpu_credits=\"cpuCredits\"\n    ),\n    disable_api_termination=False,\n    ebs_optimized=False,\n    elastic_gpu_specifications=[ec2.CfnInstance.ElasticGpuSpecificationProperty(\n        type=\"type\"\n    )],\n    elastic_inference_accelerators=[ec2.CfnInstance.ElasticInferenceAcceleratorProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        count=123\n    )],\n    enclave_options=ec2.CfnInstance.EnclaveOptionsProperty(\n        enabled=False\n    ),\n    hibernation_options=ec2.CfnInstance.HibernationOptionsProperty(\n        configured=False\n    ),\n    host_id=\"hostId\",\n    host_resource_group_arn=\"hostResourceGroupArn\",\n    iam_instance_profile=\"iamInstanceProfile\",\n    image_id=\"imageId\",\n    instance_initiated_shutdown_behavior=\"instanceInitiatedShutdownBehavior\",\n    instance_type=\"instanceType\",\n    ipv6_address_count=123,\n    ipv6_addresses=[ec2.CfnInstance.InstanceIpv6AddressProperty(\n        ipv6_address=\"ipv6Address\"\n    )],\n    kernel_id=\"kernelId\",\n    key_name=\"keyName\",\n    launch_template=ec2.CfnInstance.LaunchTemplateSpecificationProperty(\n        version=\"version\",\n\n        # the properties below are optional\n        launch_template_id=\"launchTemplateId\",\n        launch_template_name=\"launchTemplateName\"\n    ),\n    license_specifications=[ec2.CfnInstance.LicenseSpecificationProperty(\n        license_configuration_arn=\"licenseConfigurationArn\"\n    )],\n    monitoring=False,\n    network_interfaces=[ec2.CfnInstance.NetworkInterfaceProperty(\n        device_index=\"deviceIndex\",\n\n        # the properties below are optional\n        associate_public_ip_address=False,\n        delete_on_termination=False,\n        description=\"description\",\n        group_set=[\"groupSet\"],\n        ipv6_address_count=123,\n        ipv6_addresses=[ec2.CfnInstance.InstanceIpv6AddressProperty(\n            ipv6_address=\"ipv6Address\"\n        )],\n        network_interface_id=\"networkInterfaceId\",\n        private_ip_address=\"privateIpAddress\",\n        private_ip_addresses=[ec2.CfnInstance.PrivateIpAddressSpecificationProperty(\n            primary=False,\n            private_ip_address=\"privateIpAddress\"\n        )],\n        secondary_private_ip_address_count=123,\n        subnet_id=\"subnetId\"\n    )],\n    placement_group_name=\"placementGroupName\",\n    private_dns_name_options=ec2.CfnInstance.PrivateDnsNameOptionsProperty(\n        enable_resource_name_dns_aaaa_record=False,\n        enable_resource_name_dns_aRecord=False,\n        hostname_type=\"hostnameType\"\n    ),\n    private_ip_address=\"privateIpAddress\",\n    propagate_tags_to_volume_on_creation=False,\n    ramdisk_id=\"ramdiskId\",\n    security_group_ids=[\"securityGroupIds\"],\n    security_groups=[\"securityGroups\"],\n    source_dest_check=False,\n    ssm_associations=[ec2.CfnInstance.SsmAssociationProperty(\n        document_name=\"documentName\",\n\n        # the properties below are optional\n        association_parameters=[ec2.CfnInstance.AssociationParameterProperty(\n            key=\"key\",\n            value=[\"value\"]\n        )]\n    )],\n    subnet_id=\"subnetId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    tenancy=\"tenancy\",\n    user_data=\"userData\",\n    volumes=[ec2.CfnInstance.VolumeProperty(\n        device=\"device\",\n        volume_id=\"volumeId\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnInstance cfnInstance = new CfnInstance(this, \"MyCfnInstance\", new CfnInstanceProps {\n    AdditionalInfo = \"additionalInfo\",\n    Affinity = \"affinity\",\n    AvailabilityZone = \"availabilityZone\",\n    BlockDeviceMappings = new [] { new BlockDeviceMappingProperty {\n        DeviceName = \"deviceName\",\n\n        // the properties below are optional\n        Ebs = new EbsProperty {\n            DeleteOnTermination = false,\n            Encrypted = false,\n            Iops = 123,\n            KmsKeyId = \"kmsKeyId\",\n            SnapshotId = \"snapshotId\",\n            VolumeSize = 123,\n            VolumeType = \"volumeType\"\n        },\n        NoDevice = new NoDeviceProperty { },\n        VirtualName = \"virtualName\"\n    } },\n    CpuOptions = new CpuOptionsProperty {\n        CoreCount = 123,\n        ThreadsPerCore = 123\n    },\n    CreditSpecification = new CreditSpecificationProperty {\n        CpuCredits = \"cpuCredits\"\n    },\n    DisableApiTermination = false,\n    EbsOptimized = false,\n    ElasticGpuSpecifications = new [] { new ElasticGpuSpecificationProperty {\n        Type = \"type\"\n    } },\n    ElasticInferenceAccelerators = new [] { new ElasticInferenceAcceleratorProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Count = 123\n    } },\n    EnclaveOptions = new EnclaveOptionsProperty {\n        Enabled = false\n    },\n    HibernationOptions = new HibernationOptionsProperty {\n        Configured = false\n    },\n    HostId = \"hostId\",\n    HostResourceGroupArn = \"hostResourceGroupArn\",\n    IamInstanceProfile = \"iamInstanceProfile\",\n    ImageId = \"imageId\",\n    InstanceInitiatedShutdownBehavior = \"instanceInitiatedShutdownBehavior\",\n    InstanceType = \"instanceType\",\n    Ipv6AddressCount = 123,\n    Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n        Ipv6Address = \"ipv6Address\"\n    } },\n    KernelId = \"kernelId\",\n    KeyName = \"keyName\",\n    LaunchTemplate = new LaunchTemplateSpecificationProperty {\n        Version = \"version\",\n\n        // the properties below are optional\n        LaunchTemplateId = \"launchTemplateId\",\n        LaunchTemplateName = \"launchTemplateName\"\n    },\n    LicenseSpecifications = new [] { new LicenseSpecificationProperty {\n        LicenseConfigurationArn = \"licenseConfigurationArn\"\n    } },\n    Monitoring = false,\n    NetworkInterfaces = new [] { new NetworkInterfaceProperty {\n        DeviceIndex = \"deviceIndex\",\n\n        // the properties below are optional\n        AssociatePublicIpAddress = false,\n        DeleteOnTermination = false,\n        Description = \"description\",\n        GroupSet = new [] { \"groupSet\" },\n        Ipv6AddressCount = 123,\n        Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n            Ipv6Address = \"ipv6Address\"\n        } },\n        NetworkInterfaceId = \"networkInterfaceId\",\n        PrivateIpAddress = \"privateIpAddress\",\n        PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n            Primary = false,\n            PrivateIpAddress = \"privateIpAddress\"\n        } },\n        SecondaryPrivateIpAddressCount = 123,\n        SubnetId = \"subnetId\"\n    } },\n    PlacementGroupName = \"placementGroupName\",\n    PrivateDnsNameOptions = new PrivateDnsNameOptionsProperty {\n        EnableResourceNameDnsAaaaRecord = false,\n        EnableResourceNameDnsARecord = false,\n        HostnameType = \"hostnameType\"\n    },\n    PrivateIpAddress = \"privateIpAddress\",\n    PropagateTagsToVolumeOnCreation = false,\n    RamdiskId = \"ramdiskId\",\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SecurityGroups = new [] { \"securityGroups\" },\n    SourceDestCheck = false,\n    SsmAssociations = new [] { new SsmAssociationProperty {\n        DocumentName = \"documentName\",\n\n        // the properties below are optional\n        AssociationParameters = new [] { new AssociationParameterProperty {\n            Key = \"key\",\n            Value = new [] { \"value\" }\n        } }\n    } },\n    SubnetId = \"subnetId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Tenancy = \"tenancy\",\n    UserData = \"userData\",\n    Volumes = new [] { new VolumeProperty {\n        Device = \"device\",\n        VolumeId = \"volumeId\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnInstance cfnInstance = CfnInstance.Builder.create(this, \"MyCfnInstance\")\n        .additionalInfo(\"additionalInfo\")\n        .affinity(\"affinity\")\n        .availabilityZone(\"availabilityZone\")\n        .blockDeviceMappings(List.of(BlockDeviceMappingProperty.builder()\n                .deviceName(\"deviceName\")\n\n                // the properties below are optional\n                .ebs(EbsProperty.builder()\n                        .deleteOnTermination(false)\n                        .encrypted(false)\n                        .iops(123)\n                        .kmsKeyId(\"kmsKeyId\")\n                        .snapshotId(\"snapshotId\")\n                        .volumeSize(123)\n                        .volumeType(\"volumeType\")\n                        .build())\n                .noDevice(NoDeviceProperty.builder().build())\n                .virtualName(\"virtualName\")\n                .build()))\n        .cpuOptions(CpuOptionsProperty.builder()\n                .coreCount(123)\n                .threadsPerCore(123)\n                .build())\n        .creditSpecification(CreditSpecificationProperty.builder()\n                .cpuCredits(\"cpuCredits\")\n                .build())\n        .disableApiTermination(false)\n        .ebsOptimized(false)\n        .elasticGpuSpecifications(List.of(ElasticGpuSpecificationProperty.builder()\n                .type(\"type\")\n                .build()))\n        .elasticInferenceAccelerators(List.of(ElasticInferenceAcceleratorProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .count(123)\n                .build()))\n        .enclaveOptions(EnclaveOptionsProperty.builder()\n                .enabled(false)\n                .build())\n        .hibernationOptions(HibernationOptionsProperty.builder()\n                .configured(false)\n                .build())\n        .hostId(\"hostId\")\n        .hostResourceGroupArn(\"hostResourceGroupArn\")\n        .iamInstanceProfile(\"iamInstanceProfile\")\n        .imageId(\"imageId\")\n        .instanceInitiatedShutdownBehavior(\"instanceInitiatedShutdownBehavior\")\n        .instanceType(\"instanceType\")\n        .ipv6AddressCount(123)\n        .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                .ipv6Address(\"ipv6Address\")\n                .build()))\n        .kernelId(\"kernelId\")\n        .keyName(\"keyName\")\n        .launchTemplate(LaunchTemplateSpecificationProperty.builder()\n                .version(\"version\")\n\n                // the properties below are optional\n                .launchTemplateId(\"launchTemplateId\")\n                .launchTemplateName(\"launchTemplateName\")\n                .build())\n        .licenseSpecifications(List.of(LicenseSpecificationProperty.builder()\n                .licenseConfigurationArn(\"licenseConfigurationArn\")\n                .build()))\n        .monitoring(false)\n        .networkInterfaces(List.of(NetworkInterfaceProperty.builder()\n                .deviceIndex(\"deviceIndex\")\n\n                // the properties below are optional\n                .associatePublicIpAddress(false)\n                .deleteOnTermination(false)\n                .description(\"description\")\n                .groupSet(List.of(\"groupSet\"))\n                .ipv6AddressCount(123)\n                .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                        .ipv6Address(\"ipv6Address\")\n                        .build()))\n                .networkInterfaceId(\"networkInterfaceId\")\n                .privateIpAddress(\"privateIpAddress\")\n                .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                        .primary(false)\n                        .privateIpAddress(\"privateIpAddress\")\n                        .build()))\n                .secondaryPrivateIpAddressCount(123)\n                .subnetId(\"subnetId\")\n                .build()))\n        .placementGroupName(\"placementGroupName\")\n        .privateDnsNameOptions(PrivateDnsNameOptionsProperty.builder()\n                .enableResourceNameDnsAaaaRecord(false)\n                .enableResourceNameDnsARecord(false)\n                .hostnameType(\"hostnameType\")\n                .build())\n        .privateIpAddress(\"privateIpAddress\")\n        .propagateTagsToVolumeOnCreation(false)\n        .ramdiskId(\"ramdiskId\")\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .securityGroups(List.of(\"securityGroups\"))\n        .sourceDestCheck(false)\n        .ssmAssociations(List.of(SsmAssociationProperty.builder()\n                .documentName(\"documentName\")\n\n                // the properties below are optional\n                .associationParameters(List.of(AssociationParameterProperty.builder()\n                        .key(\"key\")\n                        .value(List.of(\"value\"))\n                        .build()))\n                .build()))\n        .subnetId(\"subnetId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .tenancy(\"tenancy\")\n        .userData(\"userData\")\n        .volumes(List.of(VolumeProperty.builder()\n                .device(\"device\")\n                .volumeId(\"volumeId\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnInstance := ec2.NewCfnInstance(this, jsii.String(\"MyCfnInstance\"), &cfnInstanceProps{\n\tadditionalInfo: jsii.String(\"additionalInfo\"),\n\taffinity: jsii.String(\"affinity\"),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tblockDeviceMappings: []interface{}{\n\t\t&blockDeviceMappingProperty{\n\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tebs: &ebsProperty{\n\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\tencrypted: jsii.Boolean(false),\n\t\t\t\tiops: jsii.Number(123),\n\t\t\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t\t\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\t\t\tvolumeSize: jsii.Number(123),\n\t\t\t\tvolumeType: jsii.String(\"volumeType\"),\n\t\t\t},\n\t\t\tnoDevice: &noDeviceProperty{\n\t\t\t},\n\t\t\tvirtualName: jsii.String(\"virtualName\"),\n\t\t},\n\t},\n\tcpuOptions: &cpuOptionsProperty{\n\t\tcoreCount: jsii.Number(123),\n\t\tthreadsPerCore: jsii.Number(123),\n\t},\n\tcreditSpecification: &creditSpecificationProperty{\n\t\tcpuCredits: jsii.String(\"cpuCredits\"),\n\t},\n\tdisableApiTermination: jsii.Boolean(false),\n\tebsOptimized: jsii.Boolean(false),\n\telasticGpuSpecifications: []interface{}{\n\t\t&elasticGpuSpecificationProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\telasticInferenceAccelerators: []interface{}{\n\t\t&elasticInferenceAcceleratorProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcount: jsii.Number(123),\n\t\t},\n\t},\n\tenclaveOptions: &enclaveOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t},\n\thibernationOptions: &hibernationOptionsProperty{\n\t\tconfigured: jsii.Boolean(false),\n\t},\n\thostId: jsii.String(\"hostId\"),\n\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\tiamInstanceProfile: jsii.String(\"iamInstanceProfile\"),\n\timageId: jsii.String(\"imageId\"),\n\tinstanceInitiatedShutdownBehavior: jsii.String(\"instanceInitiatedShutdownBehavior\"),\n\tinstanceType: jsii.String(\"instanceType\"),\n\tipv6AddressCount: jsii.Number(123),\n\tipv6Addresses: []interface{}{\n\t\t&instanceIpv6AddressProperty{\n\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t},\n\t},\n\tkernelId: jsii.String(\"kernelId\"),\n\tkeyName: jsii.String(\"keyName\"),\n\tlaunchTemplate: &launchTemplateSpecificationProperty{\n\t\tversion: jsii.String(\"version\"),\n\n\t\t// the properties below are optional\n\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t},\n\tlicenseSpecifications: []interface{}{\n\t\t&licenseSpecificationProperty{\n\t\t\tlicenseConfigurationArn: jsii.String(\"licenseConfigurationArn\"),\n\t\t},\n\t},\n\tmonitoring: jsii.Boolean(false),\n\tnetworkInterfaces: []interface{}{\n\t\t&networkInterfaceProperty{\n\t\t\tdeviceIndex: jsii.String(\"deviceIndex\"),\n\n\t\t\t// the properties below are optional\n\t\t\tassociatePublicIpAddress: jsii.Boolean(false),\n\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tgroupSet: []*string{\n\t\t\t\tjsii.String(\"groupSet\"),\n\t\t\t},\n\t\t\tipv6AddressCount: jsii.Number(123),\n\t\t\tipv6Addresses: []interface{}{\n\t\t\t\t&instanceIpv6AddressProperty{\n\t\t\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t\tprivateIpAddresses: []interface{}{\n\t\t\t\t&privateIpAddressSpecificationProperty{\n\t\t\t\t\tprimary: jsii.Boolean(false),\n\t\t\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t},\n\t},\n\tplacementGroupName: jsii.String(\"placementGroupName\"),\n\tprivateDnsNameOptions: &privateDnsNameOptionsProperty{\n\t\tenableResourceNameDnsAaaaRecord: jsii.Boolean(false),\n\t\tenableResourceNameDnsARecord: jsii.Boolean(false),\n\t\thostnameType: jsii.String(\"hostnameType\"),\n\t},\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\tpropagateTagsToVolumeOnCreation: jsii.Boolean(false),\n\tramdiskId: jsii.String(\"ramdiskId\"),\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\tsourceDestCheck: jsii.Boolean(false),\n\tssmAssociations: []interface{}{\n\t\t&ssmAssociationProperty{\n\t\t\tdocumentName: jsii.String(\"documentName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tassociationParameters: []interface{}{\n\t\t\t\t&associationParameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: []*string{\n\t\t\t\t\t\tjsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tsubnetId: jsii.String(\"subnetId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttenancy: jsii.String(\"tenancy\"),\n\tuserData: jsii.String(\"userData\"),\n\tvolumes: []interface{}{\n\t\t&volumeProperty{\n\t\t\tdevice: jsii.String(\"device\"),\n\t\t\tvolumeId: jsii.String(\"volumeId\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnInstance = new ec2.CfnInstance(this, 'MyCfnInstance', /* all optional props */ {\n  additionalInfo: 'additionalInfo',\n  affinity: 'affinity',\n  availabilityZone: 'availabilityZone',\n  blockDeviceMappings: [{\n    deviceName: 'deviceName',\n\n    // the properties below are optional\n    ebs: {\n      deleteOnTermination: false,\n      encrypted: false,\n      iops: 123,\n      kmsKeyId: 'kmsKeyId',\n      snapshotId: 'snapshotId',\n      volumeSize: 123,\n      volumeType: 'volumeType',\n    },\n    noDevice: { },\n    virtualName: 'virtualName',\n  }],\n  cpuOptions: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  creditSpecification: {\n    cpuCredits: 'cpuCredits',\n  },\n  disableApiTermination: false,\n  ebsOptimized: false,\n  elasticGpuSpecifications: [{\n    type: 'type',\n  }],\n  elasticInferenceAccelerators: [{\n    type: 'type',\n\n    // the properties below are optional\n    count: 123,\n  }],\n  enclaveOptions: {\n    enabled: false,\n  },\n  hibernationOptions: {\n    configured: false,\n  },\n  hostId: 'hostId',\n  hostResourceGroupArn: 'hostResourceGroupArn',\n  iamInstanceProfile: 'iamInstanceProfile',\n  imageId: 'imageId',\n  instanceInitiatedShutdownBehavior: 'instanceInitiatedShutdownBehavior',\n  instanceType: 'instanceType',\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  kernelId: 'kernelId',\n  keyName: 'keyName',\n  launchTemplate: {\n    version: 'version',\n\n    // the properties below are optional\n    launchTemplateId: 'launchTemplateId',\n    launchTemplateName: 'launchTemplateName',\n  },\n  licenseSpecifications: [{\n    licenseConfigurationArn: 'licenseConfigurationArn',\n  }],\n  monitoring: false,\n  networkInterfaces: [{\n    deviceIndex: 'deviceIndex',\n\n    // the properties below are optional\n    associatePublicIpAddress: false,\n    deleteOnTermination: false,\n    description: 'description',\n    groupSet: ['groupSet'],\n    ipv6AddressCount: 123,\n    ipv6Addresses: [{\n      ipv6Address: 'ipv6Address',\n    }],\n    networkInterfaceId: 'networkInterfaceId',\n    privateIpAddress: 'privateIpAddress',\n    privateIpAddresses: [{\n      primary: false,\n      privateIpAddress: 'privateIpAddress',\n    }],\n    secondaryPrivateIpAddressCount: 123,\n    subnetId: 'subnetId',\n  }],\n  placementGroupName: 'placementGroupName',\n  privateDnsNameOptions: {\n    enableResourceNameDnsAaaaRecord: false,\n    enableResourceNameDnsARecord: false,\n    hostnameType: 'hostnameType',\n  },\n  privateIpAddress: 'privateIpAddress',\n  propagateTagsToVolumeOnCreation: false,\n  ramdiskId: 'ramdiskId',\n  securityGroupIds: ['securityGroupIds'],\n  securityGroups: ['securityGroups'],\n  sourceDestCheck: false,\n  ssmAssociations: [{\n    documentName: 'documentName',\n\n    // the properties below are optional\n    associationParameters: [{\n      key: 'key',\n      value: ['value'],\n    }],\n  }],\n  subnetId: 'subnetId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tenancy: 'tenancy',\n  userData: 'userData',\n  volumes: [{\n    device: 'device',\n    volumeId: 'volumeId',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance",
        "@aws-cdk/aws-ec2.CfnInstanceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnInstance = new ec2.CfnInstance(this, 'MyCfnInstance', /* all optional props */ {\n  additionalInfo: 'additionalInfo',\n  affinity: 'affinity',\n  availabilityZone: 'availabilityZone',\n  blockDeviceMappings: [{\n    deviceName: 'deviceName',\n\n    // the properties below are optional\n    ebs: {\n      deleteOnTermination: false,\n      encrypted: false,\n      iops: 123,\n      kmsKeyId: 'kmsKeyId',\n      snapshotId: 'snapshotId',\n      volumeSize: 123,\n      volumeType: 'volumeType',\n    },\n    noDevice: { },\n    virtualName: 'virtualName',\n  }],\n  cpuOptions: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  creditSpecification: {\n    cpuCredits: 'cpuCredits',\n  },\n  disableApiTermination: false,\n  ebsOptimized: false,\n  elasticGpuSpecifications: [{\n    type: 'type',\n  }],\n  elasticInferenceAccelerators: [{\n    type: 'type',\n\n    // the properties below are optional\n    count: 123,\n  }],\n  enclaveOptions: {\n    enabled: false,\n  },\n  hibernationOptions: {\n    configured: false,\n  },\n  hostId: 'hostId',\n  hostResourceGroupArn: 'hostResourceGroupArn',\n  iamInstanceProfile: 'iamInstanceProfile',\n  imageId: 'imageId',\n  instanceInitiatedShutdownBehavior: 'instanceInitiatedShutdownBehavior',\n  instanceType: 'instanceType',\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  kernelId: 'kernelId',\n  keyName: 'keyName',\n  launchTemplate: {\n    version: 'version',\n\n    // the properties below are optional\n    launchTemplateId: 'launchTemplateId',\n    launchTemplateName: 'launchTemplateName',\n  },\n  licenseSpecifications: [{\n    licenseConfigurationArn: 'licenseConfigurationArn',\n  }],\n  monitoring: false,\n  networkInterfaces: [{\n    deviceIndex: 'deviceIndex',\n\n    // the properties below are optional\n    associatePublicIpAddress: false,\n    deleteOnTermination: false,\n    description: 'description',\n    groupSet: ['groupSet'],\n    ipv6AddressCount: 123,\n    ipv6Addresses: [{\n      ipv6Address: 'ipv6Address',\n    }],\n    networkInterfaceId: 'networkInterfaceId',\n    privateIpAddress: 'privateIpAddress',\n    privateIpAddresses: [{\n      primary: false,\n      privateIpAddress: 'privateIpAddress',\n    }],\n    secondaryPrivateIpAddressCount: 123,\n    subnetId: 'subnetId',\n  }],\n  placementGroupName: 'placementGroupName',\n  privateDnsNameOptions: {\n    enableResourceNameDnsAaaaRecord: false,\n    enableResourceNameDnsARecord: false,\n    hostnameType: 'hostnameType',\n  },\n  privateIpAddress: 'privateIpAddress',\n  propagateTagsToVolumeOnCreation: false,\n  ramdiskId: 'ramdiskId',\n  securityGroupIds: ['securityGroupIds'],\n  securityGroups: ['securityGroups'],\n  sourceDestCheck: false,\n  ssmAssociations: [{\n    documentName: 'documentName',\n\n    // the properties below are optional\n    associationParameters: [{\n      key: 'key',\n      value: ['value'],\n    }],\n  }],\n  subnetId: 'subnetId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tenancy: 'tenancy',\n  userData: 'userData',\n  volumes: [{\n    device: 'device',\n    volumeId: 'volumeId',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 50,
        "75": 94,
        "91": 14,
        "104": 1,
        "192": 16,
        "193": 21,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 90,
        "290": 1
      },
      "fqnsFingerprint": "7bcaa0b195ce2fb1a997caaafc7396bfe821a7d68566cc21db782a3bfaaf0d2b"
    },
    "46fbfbe5a70e09f5609a458c7572e507552fb901d06e7359b926848266c319e7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nassociation_parameter_property = ec2.CfnInstance.AssociationParameterProperty(\n    key=\"key\",\n    value=[\"value\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAssociationParameterProperty associationParameterProperty = new AssociationParameterProperty {\n    Key = \"key\",\n    Value = new [] { \"value\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAssociationParameterProperty associationParameterProperty = AssociationParameterProperty.builder()\n        .key(\"key\")\n        .value(List.of(\"value\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nassociationParameterProperty := &associationParameterProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: []*string{\n\t\tjsii.String(\"value\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst associationParameterProperty: ec2.CfnInstance.AssociationParameterProperty = {\n  key: 'key',\n  value: ['value'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.AssociationParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.AssociationParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst associationParameterProperty: ec2.CfnInstance.AssociationParameterProperty = {\n  key: 'key',\n  value: ['value'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9e7d94927269aa0bbf54932fa12532a1fad6a82591ab8714aca99287f0a94fb9"
    },
    "489ac86c0aabefdaafb6c4ec820013cfa7c0c62b5463cb17692ae2ac7ec84400": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nblock_device_mapping_property = ec2.CfnInstance.BlockDeviceMappingProperty(\n    device_name=\"deviceName\",\n\n    # the properties below are optional\n    ebs=ec2.CfnInstance.EbsProperty(\n        delete_on_termination=False,\n        encrypted=False,\n        iops=123,\n        kms_key_id=\"kmsKeyId\",\n        snapshot_id=\"snapshotId\",\n        volume_size=123,\n        volume_type=\"volumeType\"\n    ),\n    no_device=ec2.CfnInstance.NoDeviceProperty(),\n    virtual_name=\"virtualName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nBlockDeviceMappingProperty blockDeviceMappingProperty = new BlockDeviceMappingProperty {\n    DeviceName = \"deviceName\",\n\n    // the properties below are optional\n    Ebs = new EbsProperty {\n        DeleteOnTermination = false,\n        Encrypted = false,\n        Iops = 123,\n        KmsKeyId = \"kmsKeyId\",\n        SnapshotId = \"snapshotId\",\n        VolumeSize = 123,\n        VolumeType = \"volumeType\"\n    },\n    NoDevice = new NoDeviceProperty { },\n    VirtualName = \"virtualName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nBlockDeviceMappingProperty blockDeviceMappingProperty = BlockDeviceMappingProperty.builder()\n        .deviceName(\"deviceName\")\n\n        // the properties below are optional\n        .ebs(EbsProperty.builder()\n                .deleteOnTermination(false)\n                .encrypted(false)\n                .iops(123)\n                .kmsKeyId(\"kmsKeyId\")\n                .snapshotId(\"snapshotId\")\n                .volumeSize(123)\n                .volumeType(\"volumeType\")\n                .build())\n        .noDevice(NoDeviceProperty.builder().build())\n        .virtualName(\"virtualName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nblockDeviceMappingProperty := &blockDeviceMappingProperty{\n\tdeviceName: jsii.String(\"deviceName\"),\n\n\t// the properties below are optional\n\tebs: &ebsProperty{\n\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\tencrypted: jsii.Boolean(false),\n\t\tiops: jsii.Number(123),\n\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\tvolumeSize: jsii.Number(123),\n\t\tvolumeType: jsii.String(\"volumeType\"),\n\t},\n\tnoDevice: &noDeviceProperty{\n\t},\n\tvirtualName: jsii.String(\"virtualName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst blockDeviceMappingProperty: ec2.CfnInstance.BlockDeviceMappingProperty = {\n  deviceName: 'deviceName',\n\n  // the properties below are optional\n  ebs: {\n    deleteOnTermination: false,\n    encrypted: false,\n    iops: 123,\n    kmsKeyId: 'kmsKeyId',\n    snapshotId: 'snapshotId',\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  noDevice: { },\n  virtualName: 'virtualName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.BlockDeviceMappingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.BlockDeviceMappingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst blockDeviceMappingProperty: ec2.CfnInstance.BlockDeviceMappingProperty = {\n  deviceName: 'deviceName',\n\n  // the properties below are optional\n  ebs: {\n    deleteOnTermination: false,\n    encrypted: false,\n    iops: 123,\n    kmsKeyId: 'kmsKeyId',\n    snapshotId: 'snapshotId',\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  noDevice: { },\n  virtualName: 'virtualName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 16,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "06ccee105b36f2ef42585ec284e82d1e9bf7260c13192601a15d0d00e936d1ad"
    },
    "b73265848ae83ec6626860994b6f72aa581a0c578163bc80e23f5ba6300e09e0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncpu_options_property = ec2.CfnInstance.CpuOptionsProperty(\n    core_count=123,\n    threads_per_core=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCpuOptionsProperty cpuOptionsProperty = new CpuOptionsProperty {\n    CoreCount = 123,\n    ThreadsPerCore = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCpuOptionsProperty cpuOptionsProperty = CpuOptionsProperty.builder()\n        .coreCount(123)\n        .threadsPerCore(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncpuOptionsProperty := &cpuOptionsProperty{\n\tcoreCount: jsii.Number(123),\n\tthreadsPerCore: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cpuOptionsProperty: ec2.CfnInstance.CpuOptionsProperty = {\n  coreCount: 123,\n  threadsPerCore: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.CpuOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.CpuOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cpuOptionsProperty: ec2.CfnInstance.CpuOptionsProperty = {\n  coreCount: 123,\n  threadsPerCore: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "cc297168caa873db456ad3565480e0feb96bce3e6e931eab530b84a656c95bb2"
    },
    "b9a85e91310cfb4d23f1e1f4e450d5a84af8332c89242163ea0419e642e40a37": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncredit_specification_property = ec2.CfnInstance.CreditSpecificationProperty(\n    cpu_credits=\"cpuCredits\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCreditSpecificationProperty creditSpecificationProperty = new CreditSpecificationProperty {\n    CpuCredits = \"cpuCredits\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCreditSpecificationProperty creditSpecificationProperty = CreditSpecificationProperty.builder()\n        .cpuCredits(\"cpuCredits\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncreditSpecificationProperty := &creditSpecificationProperty{\n\tcpuCredits: jsii.String(\"cpuCredits\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst creditSpecificationProperty: ec2.CfnInstance.CreditSpecificationProperty = {\n  cpuCredits: 'cpuCredits',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.CreditSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.CreditSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst creditSpecificationProperty: ec2.CfnInstance.CreditSpecificationProperty = {\n  cpuCredits: 'cpuCredits',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "31bb1bb608c6c63ef77051c400c66e03aafae0a3efda57787fc0ae8e95331ab9"
    },
    "3b69877c468e200921200ad6b80e2fc953baa21202b1f8e23cec805bce88495a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nebs_property = ec2.CfnInstance.EbsProperty(\n    delete_on_termination=False,\n    encrypted=False,\n    iops=123,\n    kms_key_id=\"kmsKeyId\",\n    snapshot_id=\"snapshotId\",\n    volume_size=123,\n    volume_type=\"volumeType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEbsProperty ebsProperty = new EbsProperty {\n    DeleteOnTermination = false,\n    Encrypted = false,\n    Iops = 123,\n    KmsKeyId = \"kmsKeyId\",\n    SnapshotId = \"snapshotId\",\n    VolumeSize = 123,\n    VolumeType = \"volumeType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEbsProperty ebsProperty = EbsProperty.builder()\n        .deleteOnTermination(false)\n        .encrypted(false)\n        .iops(123)\n        .kmsKeyId(\"kmsKeyId\")\n        .snapshotId(\"snapshotId\")\n        .volumeSize(123)\n        .volumeType(\"volumeType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nebsProperty := &ebsProperty{\n\tdeleteOnTermination: jsii.Boolean(false),\n\tencrypted: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tsnapshotId: jsii.String(\"snapshotId\"),\n\tvolumeSize: jsii.Number(123),\n\tvolumeType: jsii.String(\"volumeType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ebsProperty: ec2.CfnInstance.EbsProperty = {\n  deleteOnTermination: false,\n  encrypted: false,\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  snapshotId: 'snapshotId',\n  volumeSize: 123,\n  volumeType: 'volumeType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.EbsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.EbsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ebsProperty: ec2.CfnInstance.EbsProperty = {\n  deleteOnTermination: false,\n  encrypted: false,\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  snapshotId: 'snapshotId',\n  volumeSize: 123,\n  volumeType: 'volumeType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 12,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "34c1a9cefe4da018edd4b7c561053ef1379aceb7f4a37896919813cb8ae50eee"
    },
    "9b8b6152664d59d2c548fa562767ce7839972cacc9cef7609d706beabb1d9d00": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nelastic_gpu_specification_property = ec2.CfnInstance.ElasticGpuSpecificationProperty(\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nElasticGpuSpecificationProperty elasticGpuSpecificationProperty = new ElasticGpuSpecificationProperty {\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nElasticGpuSpecificationProperty elasticGpuSpecificationProperty = ElasticGpuSpecificationProperty.builder()\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nelasticGpuSpecificationProperty := &elasticGpuSpecificationProperty{\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst elasticGpuSpecificationProperty: ec2.CfnInstance.ElasticGpuSpecificationProperty = {\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.ElasticGpuSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.ElasticGpuSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticGpuSpecificationProperty: ec2.CfnInstance.ElasticGpuSpecificationProperty = {\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9557324b074ac4db53aef687811d5824320ed27f790b9ca231d95e015a6cfda5"
    },
    "f6863b1d31e44469326a27f0b3d7615031cd5935a53cf6f85263dbf38df9f241": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nelastic_inference_accelerator_property = ec2.CfnInstance.ElasticInferenceAcceleratorProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    count=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nElasticInferenceAcceleratorProperty elasticInferenceAcceleratorProperty = new ElasticInferenceAcceleratorProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    Count = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nElasticInferenceAcceleratorProperty elasticInferenceAcceleratorProperty = ElasticInferenceAcceleratorProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .count(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nelasticInferenceAcceleratorProperty := &elasticInferenceAcceleratorProperty{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tcount: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst elasticInferenceAcceleratorProperty: ec2.CfnInstance.ElasticInferenceAcceleratorProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  count: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.ElasticInferenceAcceleratorProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.ElasticInferenceAcceleratorProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticInferenceAcceleratorProperty: ec2.CfnInstance.ElasticInferenceAcceleratorProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  count: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ef5c8d3ad5c337c63df393a352721b45478790c08ef94bf02378f1c5304cf411"
    },
    "a5a7d0e5e4c7ec42d71ee3147c3f4b13c5b0e905ee6bbd3820bcc93f22cf2f73": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nenclave_options_property = ec2.CfnInstance.EnclaveOptionsProperty(\n    enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEnclaveOptionsProperty enclaveOptionsProperty = new EnclaveOptionsProperty {\n    Enabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEnclaveOptionsProperty enclaveOptionsProperty = EnclaveOptionsProperty.builder()\n        .enabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nenclaveOptionsProperty := &enclaveOptionsProperty{\n\tenabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst enclaveOptionsProperty: ec2.CfnInstance.EnclaveOptionsProperty = {\n  enabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.EnclaveOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.EnclaveOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst enclaveOptionsProperty: ec2.CfnInstance.EnclaveOptionsProperty = {\n  enabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6ef0780fd205f600b40eebe8350c66d176eaf67b5f16d46247401f89dfda0120"
    },
    "0e9232c29ff74e5078fae04b9f3495b11d65973786cf17b7e718fd38952e923b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nhibernation_options_property = ec2.CfnInstance.HibernationOptionsProperty(\n    configured=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nHibernationOptionsProperty hibernationOptionsProperty = new HibernationOptionsProperty {\n    Configured = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nHibernationOptionsProperty hibernationOptionsProperty = HibernationOptionsProperty.builder()\n        .configured(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nhibernationOptionsProperty := &hibernationOptionsProperty{\n\tconfigured: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst hibernationOptionsProperty: ec2.CfnInstance.HibernationOptionsProperty = {\n  configured: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.HibernationOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.HibernationOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst hibernationOptionsProperty: ec2.CfnInstance.HibernationOptionsProperty = {\n  configured: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "fdbae6476997e99ad60b989e4200989fbfa0bc56da533da5551e852c59dcdedd"
    },
    "8f2ba6a489a052ddc343d464cdc4b9cd32ad0dd16896a76586e422ba856ad725": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_ipv6_address_property = ec2.CfnInstance.InstanceIpv6AddressProperty(\n    ipv6_address=\"ipv6Address\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceIpv6AddressProperty instanceIpv6AddressProperty = new InstanceIpv6AddressProperty {\n    Ipv6Address = \"ipv6Address\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceIpv6AddressProperty instanceIpv6AddressProperty = InstanceIpv6AddressProperty.builder()\n        .ipv6Address(\"ipv6Address\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceIpv6AddressProperty := &instanceIpv6AddressProperty{\n\tipv6Address: jsii.String(\"ipv6Address\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceIpv6AddressProperty: ec2.CfnInstance.InstanceIpv6AddressProperty = {\n  ipv6Address: 'ipv6Address',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.InstanceIpv6AddressProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.InstanceIpv6AddressProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceIpv6AddressProperty: ec2.CfnInstance.InstanceIpv6AddressProperty = {\n  ipv6Address: 'ipv6Address',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "92ba74d73c64bd95bae4451332074bf9295b6c575b0fca055dcb5881cee63e8b"
    },
    "aaa92e903e60cec2d2fb463d9af0a5db1a86f2d6987ee3813bc071b8bcf5b799": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_specification_property = ec2.CfnInstance.LaunchTemplateSpecificationProperty(\n    version=\"version\",\n\n    # the properties below are optional\n    launch_template_id=\"launchTemplateId\",\n    launch_template_name=\"launchTemplateName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateSpecificationProperty launchTemplateSpecificationProperty = new LaunchTemplateSpecificationProperty {\n    Version = \"version\",\n\n    // the properties below are optional\n    LaunchTemplateId = \"launchTemplateId\",\n    LaunchTemplateName = \"launchTemplateName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateSpecificationProperty launchTemplateSpecificationProperty = LaunchTemplateSpecificationProperty.builder()\n        .version(\"version\")\n\n        // the properties below are optional\n        .launchTemplateId(\"launchTemplateId\")\n        .launchTemplateName(\"launchTemplateName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateSpecificationProperty := &launchTemplateSpecificationProperty{\n\tversion: jsii.String(\"version\"),\n\n\t// the properties below are optional\n\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateSpecificationProperty: ec2.CfnInstance.LaunchTemplateSpecificationProperty = {\n  version: 'version',\n\n  // the properties below are optional\n  launchTemplateId: 'launchTemplateId',\n  launchTemplateName: 'launchTemplateName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.LaunchTemplateSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.LaunchTemplateSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateSpecificationProperty: ec2.CfnInstance.LaunchTemplateSpecificationProperty = {\n  version: 'version',\n\n  // the properties below are optional\n  launchTemplateId: 'launchTemplateId',\n  launchTemplateName: 'launchTemplateName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8c4d985df06732e238d1054a75c9be32d03b6a24a703ca1cf52baeb01f53993a"
    },
    "5c5ce92e85a2a66cbd4a267917e386f14e48b84d6cc84ce58b7741a9a9984db0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlicense_specification_property = ec2.CfnInstance.LicenseSpecificationProperty(\n    license_configuration_arn=\"licenseConfigurationArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLicenseSpecificationProperty licenseSpecificationProperty = new LicenseSpecificationProperty {\n    LicenseConfigurationArn = \"licenseConfigurationArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLicenseSpecificationProperty licenseSpecificationProperty = LicenseSpecificationProperty.builder()\n        .licenseConfigurationArn(\"licenseConfigurationArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlicenseSpecificationProperty := &licenseSpecificationProperty{\n\tlicenseConfigurationArn: jsii.String(\"licenseConfigurationArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst licenseSpecificationProperty: ec2.CfnInstance.LicenseSpecificationProperty = {\n  licenseConfigurationArn: 'licenseConfigurationArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.LicenseSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.LicenseSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst licenseSpecificationProperty: ec2.CfnInstance.LicenseSpecificationProperty = {\n  licenseConfigurationArn: 'licenseConfigurationArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7fc1c705b27bc69fdeaa2b09af8b5505c3cf2a5dd4db4dbbda9a3cde9b6fc474"
    },
    "0ae678753b38172c3d7ec6a69338830b6deef6c0a71ba8d7199e998e05b762b1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nnetwork_interface_property = ec2.CfnInstance.NetworkInterfaceProperty(\n    device_index=\"deviceIndex\",\n\n    # the properties below are optional\n    associate_public_ip_address=False,\n    delete_on_termination=False,\n    description=\"description\",\n    group_set=[\"groupSet\"],\n    ipv6_address_count=123,\n    ipv6_addresses=[ec2.CfnInstance.InstanceIpv6AddressProperty(\n        ipv6_address=\"ipv6Address\"\n    )],\n    network_interface_id=\"networkInterfaceId\",\n    private_ip_address=\"privateIpAddress\",\n    private_ip_addresses=[ec2.CfnInstance.PrivateIpAddressSpecificationProperty(\n        primary=False,\n        private_ip_address=\"privateIpAddress\"\n    )],\n    secondary_private_ip_address_count=123,\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNetworkInterfaceProperty networkInterfaceProperty = new NetworkInterfaceProperty {\n    DeviceIndex = \"deviceIndex\",\n\n    // the properties below are optional\n    AssociatePublicIpAddress = false,\n    DeleteOnTermination = false,\n    Description = \"description\",\n    GroupSet = new [] { \"groupSet\" },\n    Ipv6AddressCount = 123,\n    Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n        Ipv6Address = \"ipv6Address\"\n    } },\n    NetworkInterfaceId = \"networkInterfaceId\",\n    PrivateIpAddress = \"privateIpAddress\",\n    PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n        Primary = false,\n        PrivateIpAddress = \"privateIpAddress\"\n    } },\n    SecondaryPrivateIpAddressCount = 123,\n    SubnetId = \"subnetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNetworkInterfaceProperty networkInterfaceProperty = NetworkInterfaceProperty.builder()\n        .deviceIndex(\"deviceIndex\")\n\n        // the properties below are optional\n        .associatePublicIpAddress(false)\n        .deleteOnTermination(false)\n        .description(\"description\")\n        .groupSet(List.of(\"groupSet\"))\n        .ipv6AddressCount(123)\n        .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                .ipv6Address(\"ipv6Address\")\n                .build()))\n        .networkInterfaceId(\"networkInterfaceId\")\n        .privateIpAddress(\"privateIpAddress\")\n        .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                .primary(false)\n                .privateIpAddress(\"privateIpAddress\")\n                .build()))\n        .secondaryPrivateIpAddressCount(123)\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nnetworkInterfaceProperty := &networkInterfaceProperty{\n\tdeviceIndex: jsii.String(\"deviceIndex\"),\n\n\t// the properties below are optional\n\tassociatePublicIpAddress: jsii.Boolean(false),\n\tdeleteOnTermination: jsii.Boolean(false),\n\tdescription: jsii.String(\"description\"),\n\tgroupSet: []*string{\n\t\tjsii.String(\"groupSet\"),\n\t},\n\tipv6AddressCount: jsii.Number(123),\n\tipv6Addresses: []interface{}{\n\t\t&instanceIpv6AddressProperty{\n\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t},\n\t},\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\tprivateIpAddresses: []interface{}{\n\t\t&privateIpAddressSpecificationProperty{\n\t\t\tprimary: jsii.Boolean(false),\n\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t},\n\t},\n\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\tsubnetId: jsii.String(\"subnetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst networkInterfaceProperty: ec2.CfnInstance.NetworkInterfaceProperty = {\n  deviceIndex: 'deviceIndex',\n\n  // the properties below are optional\n  associatePublicIpAddress: false,\n  deleteOnTermination: false,\n  description: 'description',\n  groupSet: ['groupSet'],\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddress: 'privateIpAddress',\n  privateIpAddresses: [{\n    primary: false,\n    privateIpAddress: 'privateIpAddress',\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  subnetId: 'subnetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.NetworkInterfaceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.NetworkInterfaceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkInterfaceProperty: ec2.CfnInstance.NetworkInterfaceProperty = {\n  deviceIndex: 'deviceIndex',\n\n  // the properties below are optional\n  associatePublicIpAddress: false,\n  deleteOnTermination: false,\n  description: 'description',\n  groupSet: ['groupSet'],\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddress: 'privateIpAddress',\n  privateIpAddresses: [{\n    primary: false,\n    privateIpAddress: 'privateIpAddress',\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  subnetId: 'subnetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 20,
        "91": 3,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "ecc698f6d738ec20e74159866aa377af4ad2a6645ea45a8a9d6d382f53e7cd9a"
    },
    "620c2331a50fcae2cba40f0dba5fc78f612b010212e69e5c9a73c8cf9a9edc04": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nno_device_property = ec2.CfnInstance.NoDeviceProperty()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNoDeviceProperty noDeviceProperty = new NoDeviceProperty { };",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNoDeviceProperty noDeviceProperty = NoDeviceProperty.builder().build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nnoDeviceProperty := &noDeviceProperty{\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst noDeviceProperty: ec2.CfnInstance.NoDeviceProperty = { };",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.NoDeviceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.NoDeviceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst noDeviceProperty: ec2.CfnInstance.NoDeviceProperty = { };\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "ed413f8c7354a2e489a15ee657607d86c357e7c9e4293da4fb9b72f13cb93332"
    },
    "c92b6840c60ea51bf7975e5f93744a5ecdb2fa5e49147baff91a2d27164911f0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_dns_name_options_property = ec2.CfnInstance.PrivateDnsNameOptionsProperty(\n    enable_resource_name_dns_aaaa_record=False,\n    enable_resource_name_dns_aRecord=False,\n    hostname_type=\"hostnameType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateDnsNameOptionsProperty privateDnsNameOptionsProperty = new PrivateDnsNameOptionsProperty {\n    EnableResourceNameDnsAaaaRecord = false,\n    EnableResourceNameDnsARecord = false,\n    HostnameType = \"hostnameType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateDnsNameOptionsProperty privateDnsNameOptionsProperty = PrivateDnsNameOptionsProperty.builder()\n        .enableResourceNameDnsAaaaRecord(false)\n        .enableResourceNameDnsARecord(false)\n        .hostnameType(\"hostnameType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateDnsNameOptionsProperty := &privateDnsNameOptionsProperty{\n\tenableResourceNameDnsAaaaRecord: jsii.Boolean(false),\n\tenableResourceNameDnsARecord: jsii.Boolean(false),\n\thostnameType: jsii.String(\"hostnameType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateDnsNameOptionsProperty: ec2.CfnInstance.PrivateDnsNameOptionsProperty = {\n  enableResourceNameDnsAaaaRecord: false,\n  enableResourceNameDnsARecord: false,\n  hostnameType: 'hostnameType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.PrivateDnsNameOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.PrivateDnsNameOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateDnsNameOptionsProperty: ec2.CfnInstance.PrivateDnsNameOptionsProperty = {\n  enableResourceNameDnsAaaaRecord: false,\n  enableResourceNameDnsARecord: false,\n  hostnameType: 'hostnameType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4086f38af5effc69554307fdc03fa2cac3c6d79ad6fe04fd7b578a9fa1296128"
    },
    "6d2241dd34f97eaf3585c1e252fdc55d446d0cdf4d86ce5c3e9b866cc7cbb005": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_ip_address_specification_property = ec2.CfnInstance.PrivateIpAddressSpecificationProperty(\n    primary=False,\n    private_ip_address=\"privateIpAddress\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateIpAddressSpecificationProperty privateIpAddressSpecificationProperty = new PrivateIpAddressSpecificationProperty {\n    Primary = false,\n    PrivateIpAddress = \"privateIpAddress\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateIpAddressSpecificationProperty privateIpAddressSpecificationProperty = PrivateIpAddressSpecificationProperty.builder()\n        .primary(false)\n        .privateIpAddress(\"privateIpAddress\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateIpAddressSpecificationProperty := &privateIpAddressSpecificationProperty{\n\tprimary: jsii.Boolean(false),\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateIpAddressSpecificationProperty: ec2.CfnInstance.PrivateIpAddressSpecificationProperty = {\n  primary: false,\n  privateIpAddress: 'privateIpAddress',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.PrivateIpAddressSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.PrivateIpAddressSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateIpAddressSpecificationProperty: ec2.CfnInstance.PrivateIpAddressSpecificationProperty = {\n  primary: false,\n  privateIpAddress: 'privateIpAddress',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "af6b8b13e0098397d05fb506fce45e5fbf4872486e061546bad6c4f18e034337"
    },
    "bed8bfc528a6813f59053a37d76bdf150abe41239668f417a2444ae0495d47c6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nssm_association_property = ec2.CfnInstance.SsmAssociationProperty(\n    document_name=\"documentName\",\n\n    # the properties below are optional\n    association_parameters=[ec2.CfnInstance.AssociationParameterProperty(\n        key=\"key\",\n        value=[\"value\"]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSsmAssociationProperty ssmAssociationProperty = new SsmAssociationProperty {\n    DocumentName = \"documentName\",\n\n    // the properties below are optional\n    AssociationParameters = new [] { new AssociationParameterProperty {\n        Key = \"key\",\n        Value = new [] { \"value\" }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSsmAssociationProperty ssmAssociationProperty = SsmAssociationProperty.builder()\n        .documentName(\"documentName\")\n\n        // the properties below are optional\n        .associationParameters(List.of(AssociationParameterProperty.builder()\n                .key(\"key\")\n                .value(List.of(\"value\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nssmAssociationProperty := &ssmAssociationProperty{\n\tdocumentName: jsii.String(\"documentName\"),\n\n\t// the properties below are optional\n\tassociationParameters: []interface{}{\n\t\t&associationParameterProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: []*string{\n\t\t\t\tjsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ssmAssociationProperty: ec2.CfnInstance.SsmAssociationProperty = {\n  documentName: 'documentName',\n\n  // the properties below are optional\n  associationParameters: [{\n    key: 'key',\n    value: ['value'],\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.SsmAssociationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.SsmAssociationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ssmAssociationProperty: ec2.CfnInstance.SsmAssociationProperty = {\n  documentName: 'documentName',\n\n  // the properties below are optional\n  associationParameters: [{\n    key: 'key',\n    value: ['value'],\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d410439f529f98cf5c73481e8120b3c8243c94119d8a7fd7ab984d18123e3144"
    },
    "73e8781ad19409d178e355320b93c6f83614e2b7ea2e5b05607a664d4f0f3d9b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nvolume_property = ec2.CfnInstance.VolumeProperty(\n    device=\"device\",\n    volume_id=\"volumeId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nVolumeProperty volumeProperty = new VolumeProperty {\n    Device = \"device\",\n    VolumeId = \"volumeId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nVolumeProperty volumeProperty = VolumeProperty.builder()\n        .device(\"device\")\n        .volumeId(\"volumeId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nvolumeProperty := &volumeProperty{\n\tdevice: jsii.String(\"device\"),\n\tvolumeId: jsii.String(\"volumeId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst volumeProperty: ec2.CfnInstance.VolumeProperty = {\n  device: 'device',\n  volumeId: 'volumeId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstance.VolumeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstance.VolumeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst volumeProperty: ec2.CfnInstance.VolumeProperty = {\n  device: 'device',\n  volumeId: 'volumeId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "030a17b73506530b66027629fb039a8e4653a83483e698459a28fc60bb32d1aa"
    },
    "5bc3a2a2d73c530a436a31cc150e53c5dbf7c55e648be0e9b46cf1c470ae6fc4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_instance_props = ec2.CfnInstanceProps(\n    additional_info=\"additionalInfo\",\n    affinity=\"affinity\",\n    availability_zone=\"availabilityZone\",\n    block_device_mappings=[ec2.CfnInstance.BlockDeviceMappingProperty(\n        device_name=\"deviceName\",\n\n        # the properties below are optional\n        ebs=ec2.CfnInstance.EbsProperty(\n            delete_on_termination=False,\n            encrypted=False,\n            iops=123,\n            kms_key_id=\"kmsKeyId\",\n            snapshot_id=\"snapshotId\",\n            volume_size=123,\n            volume_type=\"volumeType\"\n        ),\n        no_device=ec2.CfnInstance.NoDeviceProperty(),\n        virtual_name=\"virtualName\"\n    )],\n    cpu_options=ec2.CfnInstance.CpuOptionsProperty(\n        core_count=123,\n        threads_per_core=123\n    ),\n    credit_specification=ec2.CfnInstance.CreditSpecificationProperty(\n        cpu_credits=\"cpuCredits\"\n    ),\n    disable_api_termination=False,\n    ebs_optimized=False,\n    elastic_gpu_specifications=[ec2.CfnInstance.ElasticGpuSpecificationProperty(\n        type=\"type\"\n    )],\n    elastic_inference_accelerators=[ec2.CfnInstance.ElasticInferenceAcceleratorProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        count=123\n    )],\n    enclave_options=ec2.CfnInstance.EnclaveOptionsProperty(\n        enabled=False\n    ),\n    hibernation_options=ec2.CfnInstance.HibernationOptionsProperty(\n        configured=False\n    ),\n    host_id=\"hostId\",\n    host_resource_group_arn=\"hostResourceGroupArn\",\n    iam_instance_profile=\"iamInstanceProfile\",\n    image_id=\"imageId\",\n    instance_initiated_shutdown_behavior=\"instanceInitiatedShutdownBehavior\",\n    instance_type=\"instanceType\",\n    ipv6_address_count=123,\n    ipv6_addresses=[ec2.CfnInstance.InstanceIpv6AddressProperty(\n        ipv6_address=\"ipv6Address\"\n    )],\n    kernel_id=\"kernelId\",\n    key_name=\"keyName\",\n    launch_template=ec2.CfnInstance.LaunchTemplateSpecificationProperty(\n        version=\"version\",\n\n        # the properties below are optional\n        launch_template_id=\"launchTemplateId\",\n        launch_template_name=\"launchTemplateName\"\n    ),\n    license_specifications=[ec2.CfnInstance.LicenseSpecificationProperty(\n        license_configuration_arn=\"licenseConfigurationArn\"\n    )],\n    monitoring=False,\n    network_interfaces=[ec2.CfnInstance.NetworkInterfaceProperty(\n        device_index=\"deviceIndex\",\n\n        # the properties below are optional\n        associate_public_ip_address=False,\n        delete_on_termination=False,\n        description=\"description\",\n        group_set=[\"groupSet\"],\n        ipv6_address_count=123,\n        ipv6_addresses=[ec2.CfnInstance.InstanceIpv6AddressProperty(\n            ipv6_address=\"ipv6Address\"\n        )],\n        network_interface_id=\"networkInterfaceId\",\n        private_ip_address=\"privateIpAddress\",\n        private_ip_addresses=[ec2.CfnInstance.PrivateIpAddressSpecificationProperty(\n            primary=False,\n            private_ip_address=\"privateIpAddress\"\n        )],\n        secondary_private_ip_address_count=123,\n        subnet_id=\"subnetId\"\n    )],\n    placement_group_name=\"placementGroupName\",\n    private_dns_name_options=ec2.CfnInstance.PrivateDnsNameOptionsProperty(\n        enable_resource_name_dns_aaaa_record=False,\n        enable_resource_name_dns_aRecord=False,\n        hostname_type=\"hostnameType\"\n    ),\n    private_ip_address=\"privateIpAddress\",\n    propagate_tags_to_volume_on_creation=False,\n    ramdisk_id=\"ramdiskId\",\n    security_group_ids=[\"securityGroupIds\"],\n    security_groups=[\"securityGroups\"],\n    source_dest_check=False,\n    ssm_associations=[ec2.CfnInstance.SsmAssociationProperty(\n        document_name=\"documentName\",\n\n        # the properties below are optional\n        association_parameters=[ec2.CfnInstance.AssociationParameterProperty(\n            key=\"key\",\n            value=[\"value\"]\n        )]\n    )],\n    subnet_id=\"subnetId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    tenancy=\"tenancy\",\n    user_data=\"userData\",\n    volumes=[ec2.CfnInstance.VolumeProperty(\n        device=\"device\",\n        volume_id=\"volumeId\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnInstanceProps cfnInstanceProps = new CfnInstanceProps {\n    AdditionalInfo = \"additionalInfo\",\n    Affinity = \"affinity\",\n    AvailabilityZone = \"availabilityZone\",\n    BlockDeviceMappings = new [] { new BlockDeviceMappingProperty {\n        DeviceName = \"deviceName\",\n\n        // the properties below are optional\n        Ebs = new EbsProperty {\n            DeleteOnTermination = false,\n            Encrypted = false,\n            Iops = 123,\n            KmsKeyId = \"kmsKeyId\",\n            SnapshotId = \"snapshotId\",\n            VolumeSize = 123,\n            VolumeType = \"volumeType\"\n        },\n        NoDevice = new NoDeviceProperty { },\n        VirtualName = \"virtualName\"\n    } },\n    CpuOptions = new CpuOptionsProperty {\n        CoreCount = 123,\n        ThreadsPerCore = 123\n    },\n    CreditSpecification = new CreditSpecificationProperty {\n        CpuCredits = \"cpuCredits\"\n    },\n    DisableApiTermination = false,\n    EbsOptimized = false,\n    ElasticGpuSpecifications = new [] { new ElasticGpuSpecificationProperty {\n        Type = \"type\"\n    } },\n    ElasticInferenceAccelerators = new [] { new ElasticInferenceAcceleratorProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Count = 123\n    } },\n    EnclaveOptions = new EnclaveOptionsProperty {\n        Enabled = false\n    },\n    HibernationOptions = new HibernationOptionsProperty {\n        Configured = false\n    },\n    HostId = \"hostId\",\n    HostResourceGroupArn = \"hostResourceGroupArn\",\n    IamInstanceProfile = \"iamInstanceProfile\",\n    ImageId = \"imageId\",\n    InstanceInitiatedShutdownBehavior = \"instanceInitiatedShutdownBehavior\",\n    InstanceType = \"instanceType\",\n    Ipv6AddressCount = 123,\n    Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n        Ipv6Address = \"ipv6Address\"\n    } },\n    KernelId = \"kernelId\",\n    KeyName = \"keyName\",\n    LaunchTemplate = new LaunchTemplateSpecificationProperty {\n        Version = \"version\",\n\n        // the properties below are optional\n        LaunchTemplateId = \"launchTemplateId\",\n        LaunchTemplateName = \"launchTemplateName\"\n    },\n    LicenseSpecifications = new [] { new LicenseSpecificationProperty {\n        LicenseConfigurationArn = \"licenseConfigurationArn\"\n    } },\n    Monitoring = false,\n    NetworkInterfaces = new [] { new NetworkInterfaceProperty {\n        DeviceIndex = \"deviceIndex\",\n\n        // the properties below are optional\n        AssociatePublicIpAddress = false,\n        DeleteOnTermination = false,\n        Description = \"description\",\n        GroupSet = new [] { \"groupSet\" },\n        Ipv6AddressCount = 123,\n        Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n            Ipv6Address = \"ipv6Address\"\n        } },\n        NetworkInterfaceId = \"networkInterfaceId\",\n        PrivateIpAddress = \"privateIpAddress\",\n        PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n            Primary = false,\n            PrivateIpAddress = \"privateIpAddress\"\n        } },\n        SecondaryPrivateIpAddressCount = 123,\n        SubnetId = \"subnetId\"\n    } },\n    PlacementGroupName = \"placementGroupName\",\n    PrivateDnsNameOptions = new PrivateDnsNameOptionsProperty {\n        EnableResourceNameDnsAaaaRecord = false,\n        EnableResourceNameDnsARecord = false,\n        HostnameType = \"hostnameType\"\n    },\n    PrivateIpAddress = \"privateIpAddress\",\n    PropagateTagsToVolumeOnCreation = false,\n    RamdiskId = \"ramdiskId\",\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SecurityGroups = new [] { \"securityGroups\" },\n    SourceDestCheck = false,\n    SsmAssociations = new [] { new SsmAssociationProperty {\n        DocumentName = \"documentName\",\n\n        // the properties below are optional\n        AssociationParameters = new [] { new AssociationParameterProperty {\n            Key = \"key\",\n            Value = new [] { \"value\" }\n        } }\n    } },\n    SubnetId = \"subnetId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Tenancy = \"tenancy\",\n    UserData = \"userData\",\n    Volumes = new [] { new VolumeProperty {\n        Device = \"device\",\n        VolumeId = \"volumeId\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnInstanceProps cfnInstanceProps = CfnInstanceProps.builder()\n        .additionalInfo(\"additionalInfo\")\n        .affinity(\"affinity\")\n        .availabilityZone(\"availabilityZone\")\n        .blockDeviceMappings(List.of(BlockDeviceMappingProperty.builder()\n                .deviceName(\"deviceName\")\n\n                // the properties below are optional\n                .ebs(EbsProperty.builder()\n                        .deleteOnTermination(false)\n                        .encrypted(false)\n                        .iops(123)\n                        .kmsKeyId(\"kmsKeyId\")\n                        .snapshotId(\"snapshotId\")\n                        .volumeSize(123)\n                        .volumeType(\"volumeType\")\n                        .build())\n                .noDevice(NoDeviceProperty.builder().build())\n                .virtualName(\"virtualName\")\n                .build()))\n        .cpuOptions(CpuOptionsProperty.builder()\n                .coreCount(123)\n                .threadsPerCore(123)\n                .build())\n        .creditSpecification(CreditSpecificationProperty.builder()\n                .cpuCredits(\"cpuCredits\")\n                .build())\n        .disableApiTermination(false)\n        .ebsOptimized(false)\n        .elasticGpuSpecifications(List.of(ElasticGpuSpecificationProperty.builder()\n                .type(\"type\")\n                .build()))\n        .elasticInferenceAccelerators(List.of(ElasticInferenceAcceleratorProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .count(123)\n                .build()))\n        .enclaveOptions(EnclaveOptionsProperty.builder()\n                .enabled(false)\n                .build())\n        .hibernationOptions(HibernationOptionsProperty.builder()\n                .configured(false)\n                .build())\n        .hostId(\"hostId\")\n        .hostResourceGroupArn(\"hostResourceGroupArn\")\n        .iamInstanceProfile(\"iamInstanceProfile\")\n        .imageId(\"imageId\")\n        .instanceInitiatedShutdownBehavior(\"instanceInitiatedShutdownBehavior\")\n        .instanceType(\"instanceType\")\n        .ipv6AddressCount(123)\n        .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                .ipv6Address(\"ipv6Address\")\n                .build()))\n        .kernelId(\"kernelId\")\n        .keyName(\"keyName\")\n        .launchTemplate(LaunchTemplateSpecificationProperty.builder()\n                .version(\"version\")\n\n                // the properties below are optional\n                .launchTemplateId(\"launchTemplateId\")\n                .launchTemplateName(\"launchTemplateName\")\n                .build())\n        .licenseSpecifications(List.of(LicenseSpecificationProperty.builder()\n                .licenseConfigurationArn(\"licenseConfigurationArn\")\n                .build()))\n        .monitoring(false)\n        .networkInterfaces(List.of(NetworkInterfaceProperty.builder()\n                .deviceIndex(\"deviceIndex\")\n\n                // the properties below are optional\n                .associatePublicIpAddress(false)\n                .deleteOnTermination(false)\n                .description(\"description\")\n                .groupSet(List.of(\"groupSet\"))\n                .ipv6AddressCount(123)\n                .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                        .ipv6Address(\"ipv6Address\")\n                        .build()))\n                .networkInterfaceId(\"networkInterfaceId\")\n                .privateIpAddress(\"privateIpAddress\")\n                .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                        .primary(false)\n                        .privateIpAddress(\"privateIpAddress\")\n                        .build()))\n                .secondaryPrivateIpAddressCount(123)\n                .subnetId(\"subnetId\")\n                .build()))\n        .placementGroupName(\"placementGroupName\")\n        .privateDnsNameOptions(PrivateDnsNameOptionsProperty.builder()\n                .enableResourceNameDnsAaaaRecord(false)\n                .enableResourceNameDnsARecord(false)\n                .hostnameType(\"hostnameType\")\n                .build())\n        .privateIpAddress(\"privateIpAddress\")\n        .propagateTagsToVolumeOnCreation(false)\n        .ramdiskId(\"ramdiskId\")\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .securityGroups(List.of(\"securityGroups\"))\n        .sourceDestCheck(false)\n        .ssmAssociations(List.of(SsmAssociationProperty.builder()\n                .documentName(\"documentName\")\n\n                // the properties below are optional\n                .associationParameters(List.of(AssociationParameterProperty.builder()\n                        .key(\"key\")\n                        .value(List.of(\"value\"))\n                        .build()))\n                .build()))\n        .subnetId(\"subnetId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .tenancy(\"tenancy\")\n        .userData(\"userData\")\n        .volumes(List.of(VolumeProperty.builder()\n                .device(\"device\")\n                .volumeId(\"volumeId\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnInstanceProps := &cfnInstanceProps{\n\tadditionalInfo: jsii.String(\"additionalInfo\"),\n\taffinity: jsii.String(\"affinity\"),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tblockDeviceMappings: []interface{}{\n\t\t&blockDeviceMappingProperty{\n\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tebs: &ebsProperty{\n\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\tencrypted: jsii.Boolean(false),\n\t\t\t\tiops: jsii.Number(123),\n\t\t\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t\t\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\t\t\tvolumeSize: jsii.Number(123),\n\t\t\t\tvolumeType: jsii.String(\"volumeType\"),\n\t\t\t},\n\t\t\tnoDevice: &noDeviceProperty{\n\t\t\t},\n\t\t\tvirtualName: jsii.String(\"virtualName\"),\n\t\t},\n\t},\n\tcpuOptions: &cpuOptionsProperty{\n\t\tcoreCount: jsii.Number(123),\n\t\tthreadsPerCore: jsii.Number(123),\n\t},\n\tcreditSpecification: &creditSpecificationProperty{\n\t\tcpuCredits: jsii.String(\"cpuCredits\"),\n\t},\n\tdisableApiTermination: jsii.Boolean(false),\n\tebsOptimized: jsii.Boolean(false),\n\telasticGpuSpecifications: []interface{}{\n\t\t&elasticGpuSpecificationProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\telasticInferenceAccelerators: []interface{}{\n\t\t&elasticInferenceAcceleratorProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcount: jsii.Number(123),\n\t\t},\n\t},\n\tenclaveOptions: &enclaveOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t},\n\thibernationOptions: &hibernationOptionsProperty{\n\t\tconfigured: jsii.Boolean(false),\n\t},\n\thostId: jsii.String(\"hostId\"),\n\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\tiamInstanceProfile: jsii.String(\"iamInstanceProfile\"),\n\timageId: jsii.String(\"imageId\"),\n\tinstanceInitiatedShutdownBehavior: jsii.String(\"instanceInitiatedShutdownBehavior\"),\n\tinstanceType: jsii.String(\"instanceType\"),\n\tipv6AddressCount: jsii.Number(123),\n\tipv6Addresses: []interface{}{\n\t\t&instanceIpv6AddressProperty{\n\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t},\n\t},\n\tkernelId: jsii.String(\"kernelId\"),\n\tkeyName: jsii.String(\"keyName\"),\n\tlaunchTemplate: &launchTemplateSpecificationProperty{\n\t\tversion: jsii.String(\"version\"),\n\n\t\t// the properties below are optional\n\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t},\n\tlicenseSpecifications: []interface{}{\n\t\t&licenseSpecificationProperty{\n\t\t\tlicenseConfigurationArn: jsii.String(\"licenseConfigurationArn\"),\n\t\t},\n\t},\n\tmonitoring: jsii.Boolean(false),\n\tnetworkInterfaces: []interface{}{\n\t\t&networkInterfaceProperty{\n\t\t\tdeviceIndex: jsii.String(\"deviceIndex\"),\n\n\t\t\t// the properties below are optional\n\t\t\tassociatePublicIpAddress: jsii.Boolean(false),\n\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tgroupSet: []*string{\n\t\t\t\tjsii.String(\"groupSet\"),\n\t\t\t},\n\t\t\tipv6AddressCount: jsii.Number(123),\n\t\t\tipv6Addresses: []interface{}{\n\t\t\t\t&instanceIpv6AddressProperty{\n\t\t\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t\tprivateIpAddresses: []interface{}{\n\t\t\t\t&privateIpAddressSpecificationProperty{\n\t\t\t\t\tprimary: jsii.Boolean(false),\n\t\t\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t},\n\t},\n\tplacementGroupName: jsii.String(\"placementGroupName\"),\n\tprivateDnsNameOptions: &privateDnsNameOptionsProperty{\n\t\tenableResourceNameDnsAaaaRecord: jsii.Boolean(false),\n\t\tenableResourceNameDnsARecord: jsii.Boolean(false),\n\t\thostnameType: jsii.String(\"hostnameType\"),\n\t},\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\tpropagateTagsToVolumeOnCreation: jsii.Boolean(false),\n\tramdiskId: jsii.String(\"ramdiskId\"),\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\tsourceDestCheck: jsii.Boolean(false),\n\tssmAssociations: []interface{}{\n\t\t&ssmAssociationProperty{\n\t\t\tdocumentName: jsii.String(\"documentName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tassociationParameters: []interface{}{\n\t\t\t\t&associationParameterProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: []*string{\n\t\t\t\t\t\tjsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tsubnetId: jsii.String(\"subnetId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttenancy: jsii.String(\"tenancy\"),\n\tuserData: jsii.String(\"userData\"),\n\tvolumes: []interface{}{\n\t\t&volumeProperty{\n\t\t\tdevice: jsii.String(\"device\"),\n\t\t\tvolumeId: jsii.String(\"volumeId\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnInstanceProps: ec2.CfnInstanceProps = {\n  additionalInfo: 'additionalInfo',\n  affinity: 'affinity',\n  availabilityZone: 'availabilityZone',\n  blockDeviceMappings: [{\n    deviceName: 'deviceName',\n\n    // the properties below are optional\n    ebs: {\n      deleteOnTermination: false,\n      encrypted: false,\n      iops: 123,\n      kmsKeyId: 'kmsKeyId',\n      snapshotId: 'snapshotId',\n      volumeSize: 123,\n      volumeType: 'volumeType',\n    },\n    noDevice: { },\n    virtualName: 'virtualName',\n  }],\n  cpuOptions: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  creditSpecification: {\n    cpuCredits: 'cpuCredits',\n  },\n  disableApiTermination: false,\n  ebsOptimized: false,\n  elasticGpuSpecifications: [{\n    type: 'type',\n  }],\n  elasticInferenceAccelerators: [{\n    type: 'type',\n\n    // the properties below are optional\n    count: 123,\n  }],\n  enclaveOptions: {\n    enabled: false,\n  },\n  hibernationOptions: {\n    configured: false,\n  },\n  hostId: 'hostId',\n  hostResourceGroupArn: 'hostResourceGroupArn',\n  iamInstanceProfile: 'iamInstanceProfile',\n  imageId: 'imageId',\n  instanceInitiatedShutdownBehavior: 'instanceInitiatedShutdownBehavior',\n  instanceType: 'instanceType',\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  kernelId: 'kernelId',\n  keyName: 'keyName',\n  launchTemplate: {\n    version: 'version',\n\n    // the properties below are optional\n    launchTemplateId: 'launchTemplateId',\n    launchTemplateName: 'launchTemplateName',\n  },\n  licenseSpecifications: [{\n    licenseConfigurationArn: 'licenseConfigurationArn',\n  }],\n  monitoring: false,\n  networkInterfaces: [{\n    deviceIndex: 'deviceIndex',\n\n    // the properties below are optional\n    associatePublicIpAddress: false,\n    deleteOnTermination: false,\n    description: 'description',\n    groupSet: ['groupSet'],\n    ipv6AddressCount: 123,\n    ipv6Addresses: [{\n      ipv6Address: 'ipv6Address',\n    }],\n    networkInterfaceId: 'networkInterfaceId',\n    privateIpAddress: 'privateIpAddress',\n    privateIpAddresses: [{\n      primary: false,\n      privateIpAddress: 'privateIpAddress',\n    }],\n    secondaryPrivateIpAddressCount: 123,\n    subnetId: 'subnetId',\n  }],\n  placementGroupName: 'placementGroupName',\n  privateDnsNameOptions: {\n    enableResourceNameDnsAaaaRecord: false,\n    enableResourceNameDnsARecord: false,\n    hostnameType: 'hostnameType',\n  },\n  privateIpAddress: 'privateIpAddress',\n  propagateTagsToVolumeOnCreation: false,\n  ramdiskId: 'ramdiskId',\n  securityGroupIds: ['securityGroupIds'],\n  securityGroups: ['securityGroups'],\n  sourceDestCheck: false,\n  ssmAssociations: [{\n    documentName: 'documentName',\n\n    // the properties below are optional\n    associationParameters: [{\n      key: 'key',\n      value: ['value'],\n    }],\n  }],\n  subnetId: 'subnetId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tenancy: 'tenancy',\n  userData: 'userData',\n  volumes: [{\n    device: 'device',\n    volumeId: 'volumeId',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnInstanceProps: ec2.CfnInstanceProps = {\n  additionalInfo: 'additionalInfo',\n  affinity: 'affinity',\n  availabilityZone: 'availabilityZone',\n  blockDeviceMappings: [{\n    deviceName: 'deviceName',\n\n    // the properties below are optional\n    ebs: {\n      deleteOnTermination: false,\n      encrypted: false,\n      iops: 123,\n      kmsKeyId: 'kmsKeyId',\n      snapshotId: 'snapshotId',\n      volumeSize: 123,\n      volumeType: 'volumeType',\n    },\n    noDevice: { },\n    virtualName: 'virtualName',\n  }],\n  cpuOptions: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  creditSpecification: {\n    cpuCredits: 'cpuCredits',\n  },\n  disableApiTermination: false,\n  ebsOptimized: false,\n  elasticGpuSpecifications: [{\n    type: 'type',\n  }],\n  elasticInferenceAccelerators: [{\n    type: 'type',\n\n    // the properties below are optional\n    count: 123,\n  }],\n  enclaveOptions: {\n    enabled: false,\n  },\n  hibernationOptions: {\n    configured: false,\n  },\n  hostId: 'hostId',\n  hostResourceGroupArn: 'hostResourceGroupArn',\n  iamInstanceProfile: 'iamInstanceProfile',\n  imageId: 'imageId',\n  instanceInitiatedShutdownBehavior: 'instanceInitiatedShutdownBehavior',\n  instanceType: 'instanceType',\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  kernelId: 'kernelId',\n  keyName: 'keyName',\n  launchTemplate: {\n    version: 'version',\n\n    // the properties below are optional\n    launchTemplateId: 'launchTemplateId',\n    launchTemplateName: 'launchTemplateName',\n  },\n  licenseSpecifications: [{\n    licenseConfigurationArn: 'licenseConfigurationArn',\n  }],\n  monitoring: false,\n  networkInterfaces: [{\n    deviceIndex: 'deviceIndex',\n\n    // the properties below are optional\n    associatePublicIpAddress: false,\n    deleteOnTermination: false,\n    description: 'description',\n    groupSet: ['groupSet'],\n    ipv6AddressCount: 123,\n    ipv6Addresses: [{\n      ipv6Address: 'ipv6Address',\n    }],\n    networkInterfaceId: 'networkInterfaceId',\n    privateIpAddress: 'privateIpAddress',\n    privateIpAddresses: [{\n      primary: false,\n      privateIpAddress: 'privateIpAddress',\n    }],\n    secondaryPrivateIpAddressCount: 123,\n    subnetId: 'subnetId',\n  }],\n  placementGroupName: 'placementGroupName',\n  privateDnsNameOptions: {\n    enableResourceNameDnsAaaaRecord: false,\n    enableResourceNameDnsARecord: false,\n    hostnameType: 'hostnameType',\n  },\n  privateIpAddress: 'privateIpAddress',\n  propagateTagsToVolumeOnCreation: false,\n  ramdiskId: 'ramdiskId',\n  securityGroupIds: ['securityGroupIds'],\n  securityGroups: ['securityGroups'],\n  sourceDestCheck: false,\n  ssmAssociations: [{\n    documentName: 'documentName',\n\n    // the properties below are optional\n    associationParameters: [{\n      key: 'key',\n      value: ['value'],\n    }],\n  }],\n  subnetId: 'subnetId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tenancy: 'tenancy',\n  userData: 'userData',\n  volumes: [{\n    device: 'device',\n    volumeId: 'volumeId',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 49,
        "75": 94,
        "91": 14,
        "153": 1,
        "169": 1,
        "192": 16,
        "193": 21,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 90,
        "290": 1
      },
      "fqnsFingerprint": "0e2b50d572617323f2e97641db54bd81d64e1bebd688d5bd32101e7ce0c0164e"
    },
    "4b27ee22ffcb7785e287a9007296f7552b4cacbf6f4af50a6e86b032d3c3501d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_internet_gateway = ec2.CfnInternetGateway(self, \"MyCfnInternetGateway\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnInternetGateway cfnInternetGateway = new CfnInternetGateway(this, \"MyCfnInternetGateway\", new CfnInternetGatewayProps {\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnInternetGateway cfnInternetGateway = CfnInternetGateway.Builder.create(this, \"MyCfnInternetGateway\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnInternetGateway := ec2.NewCfnInternetGateway(this, jsii.String(\"MyCfnInternetGateway\"), &cfnInternetGatewayProps{\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnInternetGateway = new ec2.CfnInternetGateway(this, 'MyCfnInternetGateway', /* all optional props */ {\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInternetGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInternetGateway",
        "@aws-cdk/aws-ec2.CfnInternetGatewayProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnInternetGateway = new ec2.CfnInternetGateway(this, 'MyCfnInternetGateway', /* all optional props */ {\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "c8d69bf55944aa881fedead3651be52059e29f2c51059dba4493abee3ab1e510"
    },
    "b434db0bddfc2c41d8250f1f5455226feeaeed508e6211bd334beb541a9c6159": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_internet_gateway_props = ec2.CfnInternetGatewayProps(\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnInternetGatewayProps cfnInternetGatewayProps = new CfnInternetGatewayProps {\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnInternetGatewayProps cfnInternetGatewayProps = CfnInternetGatewayProps.builder()\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnInternetGatewayProps := &cfnInternetGatewayProps{\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnInternetGatewayProps: ec2.CfnInternetGatewayProps = {\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnInternetGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnInternetGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnInternetGatewayProps: ec2.CfnInternetGatewayProps = {\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "091334cfdc34003878b8f75b9d619ad6007d845d6fd46f95e77ea64977a0d646"
    },
    "209ff74c57ee1feaf2d87c2ab118f443018c24224067ef0b18e10ca9254be674": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n\nuser_data = \"\"\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n\"\"\"\nlt = ec2.CfnLaunchTemplate(self, \"LaunchTemplate\",\n    launch_template_data=ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n        instance_type=\"t3.small\",\n        user_data=Fn.base64(user_data)\n    )\n)\n\ncluster.add_nodegroup_capacity(\"extra-ng\",\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=lt.ref,\n        version=lt.attr_latest_version_number\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\nstring userData = @\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"\"==MYBOUNDARY==\"\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"\"us-ascii\"\"\n\n#!/bin/bash\necho \"\"Running custom user data script\"\"\n\n--==MYBOUNDARY==--\\\n\";\nCfnLaunchTemplate lt = new CfnLaunchTemplate(this, \"LaunchTemplate\", new CfnLaunchTemplateProps {\n    LaunchTemplateData = new LaunchTemplateDataProperty {\n        InstanceType = \"t3.small\",\n        UserData = Fn.Base64(userData)\n    }\n});\n\ncluster.AddNodegroupCapacity(\"extra-ng\", new NodegroupOptions {\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = lt.Ref,\n        Version = lt.AttrLatestVersionNumber\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\nString userData = \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\";\nCfnLaunchTemplate lt = CfnLaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .launchTemplateData(LaunchTemplateDataProperty.builder()\n                .instanceType(\"t3.small\")\n                .userData(Fn.base64(userData))\n                .build())\n        .build();\n\ncluster.addNodegroupCapacity(\"extra-ng\", NodegroupOptions.builder()\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(lt.getRef())\n                .version(lt.getAttrLatestVersionNumber())\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nuserData := \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\"\nlt := ec2.NewCfnLaunchTemplate(this, jsii.String(\"LaunchTemplate\"), &cfnLaunchTemplateProps{\n\tlaunchTemplateData: &launchTemplateDataProperty{\n\t\tinstanceType: jsii.String(\"t3.small\"),\n\t\tuserData: fn.base64(userData),\n\t},\n})\n\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng\"), &nodegroupOptions{\n\tlaunchTemplateSpec: &launchTemplateSpec{\n\t\tid: lt.ref,\n\t\tversion: lt.attrLatestVersionNumber,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate",
        "@aws-cdk/aws-ec2.CfnLaunchTemplate#attrLatestVersionNumber",
        "@aws-cdk/aws-ec2.CfnLaunchTemplateProps",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Fn#base64"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "75f95d684b90070a6a815a98461a178f257b181cece7dbe3a099e8b0da9fdc6f"
    },
    "bdc28859c604505df89786b0719e1b842aedacc762a9c9473e905d69b624a86a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\naccelerator_count_property = ec2.CfnLaunchTemplate.AcceleratorCountProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAcceleratorCountProperty acceleratorCountProperty = new AcceleratorCountProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAcceleratorCountProperty acceleratorCountProperty = AcceleratorCountProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nacceleratorCountProperty := &acceleratorCountProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst acceleratorCountProperty: ec2.CfnLaunchTemplate.AcceleratorCountProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.AcceleratorCountProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.AcceleratorCountProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorCountProperty: ec2.CfnLaunchTemplate.AcceleratorCountProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "14edddf3c8757d0f0fc6ac9466f78d46a123e91b9d747bf581f1a5a14a19fabd"
    },
    "95300ffbb64f35b918612214c317df0d2a14b98e501b603cea465907230e7a1c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\naccelerator_total_memory_mi_bProperty = ec2.CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAcceleratorTotalMemoryMiBProperty acceleratorTotalMemoryMiBProperty = new AcceleratorTotalMemoryMiBProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAcceleratorTotalMemoryMiBProperty acceleratorTotalMemoryMiBProperty = AcceleratorTotalMemoryMiBProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nacceleratorTotalMemoryMiBProperty := &acceleratorTotalMemoryMiBProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst acceleratorTotalMemoryMiBProperty: ec2.CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorTotalMemoryMiBProperty: ec2.CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "cf9d56d185be2a73d336b191843ecd6c5e6b1c3f87928d3a513453637ef58ec8"
    },
    "3162c55eb016e54721b253bc52b633572eab7176c7758c6546de0f2d6656798f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nbaseline_ebs_bandwidth_mbps_property = ec2.CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nBaselineEbsBandwidthMbpsProperty baselineEbsBandwidthMbpsProperty = new BaselineEbsBandwidthMbpsProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nBaselineEbsBandwidthMbpsProperty baselineEbsBandwidthMbpsProperty = BaselineEbsBandwidthMbpsProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nbaselineEbsBandwidthMbpsProperty := &baselineEbsBandwidthMbpsProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst baselineEbsBandwidthMbpsProperty: ec2.CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baselineEbsBandwidthMbpsProperty: ec2.CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f016d167180f7a1a1a21a78b815478d9151f313df06d26c207691b570a02d77c"
    },
    "5bfb842fe10f4ee1d94b5528f01384f4713316e90c3fe898a9150283643c3837": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nblock_device_mapping_property = ec2.CfnLaunchTemplate.BlockDeviceMappingProperty(\n    device_name=\"deviceName\",\n    ebs=ec2.CfnLaunchTemplate.EbsProperty(\n        delete_on_termination=False,\n        encrypted=False,\n        iops=123,\n        kms_key_id=\"kmsKeyId\",\n        snapshot_id=\"snapshotId\",\n        throughput=123,\n        volume_size=123,\n        volume_type=\"volumeType\"\n    ),\n    no_device=\"noDevice\",\n    virtual_name=\"virtualName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nBlockDeviceMappingProperty blockDeviceMappingProperty = new BlockDeviceMappingProperty {\n    DeviceName = \"deviceName\",\n    Ebs = new EbsProperty {\n        DeleteOnTermination = false,\n        Encrypted = false,\n        Iops = 123,\n        KmsKeyId = \"kmsKeyId\",\n        SnapshotId = \"snapshotId\",\n        Throughput = 123,\n        VolumeSize = 123,\n        VolumeType = \"volumeType\"\n    },\n    NoDevice = \"noDevice\",\n    VirtualName = \"virtualName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nBlockDeviceMappingProperty blockDeviceMappingProperty = BlockDeviceMappingProperty.builder()\n        .deviceName(\"deviceName\")\n        .ebs(EbsProperty.builder()\n                .deleteOnTermination(false)\n                .encrypted(false)\n                .iops(123)\n                .kmsKeyId(\"kmsKeyId\")\n                .snapshotId(\"snapshotId\")\n                .throughput(123)\n                .volumeSize(123)\n                .volumeType(\"volumeType\")\n                .build())\n        .noDevice(\"noDevice\")\n        .virtualName(\"virtualName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nblockDeviceMappingProperty := &blockDeviceMappingProperty{\n\tdeviceName: jsii.String(\"deviceName\"),\n\tebs: &ebsProperty{\n\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\tencrypted: jsii.Boolean(false),\n\t\tiops: jsii.Number(123),\n\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\tthroughput: jsii.Number(123),\n\t\tvolumeSize: jsii.Number(123),\n\t\tvolumeType: jsii.String(\"volumeType\"),\n\t},\n\tnoDevice: jsii.String(\"noDevice\"),\n\tvirtualName: jsii.String(\"virtualName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst blockDeviceMappingProperty: ec2.CfnLaunchTemplate.BlockDeviceMappingProperty = {\n  deviceName: 'deviceName',\n  ebs: {\n    deleteOnTermination: false,\n    encrypted: false,\n    iops: 123,\n    kmsKeyId: 'kmsKeyId',\n    snapshotId: 'snapshotId',\n    throughput: 123,\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  noDevice: 'noDevice',\n  virtualName: 'virtualName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.BlockDeviceMappingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.BlockDeviceMappingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst blockDeviceMappingProperty: ec2.CfnLaunchTemplate.BlockDeviceMappingProperty = {\n  deviceName: 'deviceName',\n  ebs: {\n    deleteOnTermination: false,\n    encrypted: false,\n    iops: 123,\n    kmsKeyId: 'kmsKeyId',\n    snapshotId: 'snapshotId',\n    throughput: 123,\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  noDevice: 'noDevice',\n  virtualName: 'virtualName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 17,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "8cd541b9aa9406d10707ad16dd85e01355db67fa34881d1c8d5edec962f22eaa"
    },
    "a6e66eaaf0c5582e201020ec2e794363e59c69dd189bf7d91bb0f47dc9582345": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncapacity_reservation_specification_property = ec2.CfnLaunchTemplate.CapacityReservationSpecificationProperty(\n    capacity_reservation_preference=\"capacityReservationPreference\",\n    capacity_reservation_target=ec2.CfnLaunchTemplate.CapacityReservationTargetProperty(\n        capacity_reservation_id=\"capacityReservationId\",\n        capacity_reservation_resource_group_arn=\"capacityReservationResourceGroupArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCapacityReservationSpecificationProperty capacityReservationSpecificationProperty = new CapacityReservationSpecificationProperty {\n    CapacityReservationPreference = \"capacityReservationPreference\",\n    CapacityReservationTarget = new CapacityReservationTargetProperty {\n        CapacityReservationId = \"capacityReservationId\",\n        CapacityReservationResourceGroupArn = \"capacityReservationResourceGroupArn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCapacityReservationSpecificationProperty capacityReservationSpecificationProperty = CapacityReservationSpecificationProperty.builder()\n        .capacityReservationPreference(\"capacityReservationPreference\")\n        .capacityReservationTarget(CapacityReservationTargetProperty.builder()\n                .capacityReservationId(\"capacityReservationId\")\n                .capacityReservationResourceGroupArn(\"capacityReservationResourceGroupArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncapacityReservationSpecificationProperty := &capacityReservationSpecificationProperty{\n\tcapacityReservationPreference: jsii.String(\"capacityReservationPreference\"),\n\tcapacityReservationTarget: &capacityReservationTargetProperty{\n\t\tcapacityReservationId: jsii.String(\"capacityReservationId\"),\n\t\tcapacityReservationResourceGroupArn: jsii.String(\"capacityReservationResourceGroupArn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst capacityReservationSpecificationProperty: ec2.CfnLaunchTemplate.CapacityReservationSpecificationProperty = {\n  capacityReservationPreference: 'capacityReservationPreference',\n  capacityReservationTarget: {\n    capacityReservationId: 'capacityReservationId',\n    capacityReservationResourceGroupArn: 'capacityReservationResourceGroupArn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.CapacityReservationSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.CapacityReservationSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityReservationSpecificationProperty: ec2.CfnLaunchTemplate.CapacityReservationSpecificationProperty = {\n  capacityReservationPreference: 'capacityReservationPreference',\n  capacityReservationTarget: {\n    capacityReservationId: 'capacityReservationId',\n    capacityReservationResourceGroupArn: 'capacityReservationResourceGroupArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9dc73f560dd78a116e57dbfc534cd1d1540333a718b617979a2cb7bea8e7d11e"
    },
    "36cb17fcd15326a81fa31a5d395c4eab80a6ba71679b92f68967827d40d79272": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncapacity_reservation_target_property = ec2.CfnLaunchTemplate.CapacityReservationTargetProperty(\n    capacity_reservation_id=\"capacityReservationId\",\n    capacity_reservation_resource_group_arn=\"capacityReservationResourceGroupArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCapacityReservationTargetProperty capacityReservationTargetProperty = new CapacityReservationTargetProperty {\n    CapacityReservationId = \"capacityReservationId\",\n    CapacityReservationResourceGroupArn = \"capacityReservationResourceGroupArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCapacityReservationTargetProperty capacityReservationTargetProperty = CapacityReservationTargetProperty.builder()\n        .capacityReservationId(\"capacityReservationId\")\n        .capacityReservationResourceGroupArn(\"capacityReservationResourceGroupArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncapacityReservationTargetProperty := &capacityReservationTargetProperty{\n\tcapacityReservationId: jsii.String(\"capacityReservationId\"),\n\tcapacityReservationResourceGroupArn: jsii.String(\"capacityReservationResourceGroupArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst capacityReservationTargetProperty: ec2.CfnLaunchTemplate.CapacityReservationTargetProperty = {\n  capacityReservationId: 'capacityReservationId',\n  capacityReservationResourceGroupArn: 'capacityReservationResourceGroupArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.CapacityReservationTargetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.CapacityReservationTargetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityReservationTargetProperty: ec2.CfnLaunchTemplate.CapacityReservationTargetProperty = {\n  capacityReservationId: 'capacityReservationId',\n  capacityReservationResourceGroupArn: 'capacityReservationResourceGroupArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "198d606e2b49ccfb820294d0ccbe389c371c98e62a7ce1c45c2f5b651e1e085c"
    },
    "41aa9f036e5efce40c329751fa73f6335f877ffbd9dac2816fe7c8155e7b4dcd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncpu_options_property = ec2.CfnLaunchTemplate.CpuOptionsProperty(\n    core_count=123,\n    threads_per_core=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCpuOptionsProperty cpuOptionsProperty = new CpuOptionsProperty {\n    CoreCount = 123,\n    ThreadsPerCore = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCpuOptionsProperty cpuOptionsProperty = CpuOptionsProperty.builder()\n        .coreCount(123)\n        .threadsPerCore(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncpuOptionsProperty := &cpuOptionsProperty{\n\tcoreCount: jsii.Number(123),\n\tthreadsPerCore: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cpuOptionsProperty: ec2.CfnLaunchTemplate.CpuOptionsProperty = {\n  coreCount: 123,\n  threadsPerCore: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.CpuOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.CpuOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cpuOptionsProperty: ec2.CfnLaunchTemplate.CpuOptionsProperty = {\n  coreCount: 123,\n  threadsPerCore: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "53191eb7ce0a1f20f8c32de8b5112f31c2853479c846ece40829baf467deb140"
    },
    "74a167f87f1502d82bebc78ff6d9dd6e4d1915999992c5dbdbe01c622812b600": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncredit_specification_property = ec2.CfnLaunchTemplate.CreditSpecificationProperty(\n    cpu_credits=\"cpuCredits\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCreditSpecificationProperty creditSpecificationProperty = new CreditSpecificationProperty {\n    CpuCredits = \"cpuCredits\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCreditSpecificationProperty creditSpecificationProperty = CreditSpecificationProperty.builder()\n        .cpuCredits(\"cpuCredits\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncreditSpecificationProperty := &creditSpecificationProperty{\n\tcpuCredits: jsii.String(\"cpuCredits\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst creditSpecificationProperty: ec2.CfnLaunchTemplate.CreditSpecificationProperty = {\n  cpuCredits: 'cpuCredits',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.CreditSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.CreditSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst creditSpecificationProperty: ec2.CfnLaunchTemplate.CreditSpecificationProperty = {\n  cpuCredits: 'cpuCredits',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e54c1825b3d488784ae885dd440b3dd373d1c206a0d865f20092d73ea669dd90"
    },
    "62be63d5aa67f93c8084d664c3c5e36466ae142389a4d902f7e6af62df3d3ae4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nebs_property = ec2.CfnLaunchTemplate.EbsProperty(\n    delete_on_termination=False,\n    encrypted=False,\n    iops=123,\n    kms_key_id=\"kmsKeyId\",\n    snapshot_id=\"snapshotId\",\n    throughput=123,\n    volume_size=123,\n    volume_type=\"volumeType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEbsProperty ebsProperty = new EbsProperty {\n    DeleteOnTermination = false,\n    Encrypted = false,\n    Iops = 123,\n    KmsKeyId = \"kmsKeyId\",\n    SnapshotId = \"snapshotId\",\n    Throughput = 123,\n    VolumeSize = 123,\n    VolumeType = \"volumeType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEbsProperty ebsProperty = EbsProperty.builder()\n        .deleteOnTermination(false)\n        .encrypted(false)\n        .iops(123)\n        .kmsKeyId(\"kmsKeyId\")\n        .snapshotId(\"snapshotId\")\n        .throughput(123)\n        .volumeSize(123)\n        .volumeType(\"volumeType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nebsProperty := &ebsProperty{\n\tdeleteOnTermination: jsii.Boolean(false),\n\tencrypted: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tsnapshotId: jsii.String(\"snapshotId\"),\n\tthroughput: jsii.Number(123),\n\tvolumeSize: jsii.Number(123),\n\tvolumeType: jsii.String(\"volumeType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ebsProperty: ec2.CfnLaunchTemplate.EbsProperty = {\n  deleteOnTermination: false,\n  encrypted: false,\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  snapshotId: 'snapshotId',\n  throughput: 123,\n  volumeSize: 123,\n  volumeType: 'volumeType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.EbsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.EbsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ebsProperty: ec2.CfnLaunchTemplate.EbsProperty = {\n  deleteOnTermination: false,\n  encrypted: false,\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  snapshotId: 'snapshotId',\n  throughput: 123,\n  volumeSize: 123,\n  volumeType: 'volumeType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 13,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "06ed84b0503682a3de1775151207b39c0e08008365048544dc4723239b7783e9"
    },
    "9e6df309e42fe09e26d49b50efe26debfafe00e8a1cddda02fd6f98bb9c74878": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nelastic_gpu_specification_property = ec2.CfnLaunchTemplate.ElasticGpuSpecificationProperty(\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nElasticGpuSpecificationProperty elasticGpuSpecificationProperty = new ElasticGpuSpecificationProperty {\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nElasticGpuSpecificationProperty elasticGpuSpecificationProperty = ElasticGpuSpecificationProperty.builder()\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nelasticGpuSpecificationProperty := &elasticGpuSpecificationProperty{\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst elasticGpuSpecificationProperty: ec2.CfnLaunchTemplate.ElasticGpuSpecificationProperty = {\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.ElasticGpuSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.ElasticGpuSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticGpuSpecificationProperty: ec2.CfnLaunchTemplate.ElasticGpuSpecificationProperty = {\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "24dfdbe454bc4cf3c89992ff534c686bd069618fefeec002529d3785c6e816fd"
    },
    "121ca389557595a3f3386753de2591c2df106a9488a0838355ced68ea4c3982c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nenclave_options_property = ec2.CfnLaunchTemplate.EnclaveOptionsProperty(\n    enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEnclaveOptionsProperty enclaveOptionsProperty = new EnclaveOptionsProperty {\n    Enabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEnclaveOptionsProperty enclaveOptionsProperty = EnclaveOptionsProperty.builder()\n        .enabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nenclaveOptionsProperty := &enclaveOptionsProperty{\n\tenabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst enclaveOptionsProperty: ec2.CfnLaunchTemplate.EnclaveOptionsProperty = {\n  enabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.EnclaveOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.EnclaveOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst enclaveOptionsProperty: ec2.CfnLaunchTemplate.EnclaveOptionsProperty = {\n  enabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "942f8c3a92e1024ee019c6faaacd1ad9cb32db997ef9adc2c739660f533e73cf"
    },
    "e13edc1d3d140ec772e1a33aaf2a048612e76025de21723855a937e8a6ef876c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nhibernation_options_property = ec2.CfnLaunchTemplate.HibernationOptionsProperty(\n    configured=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nHibernationOptionsProperty hibernationOptionsProperty = new HibernationOptionsProperty {\n    Configured = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nHibernationOptionsProperty hibernationOptionsProperty = HibernationOptionsProperty.builder()\n        .configured(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nhibernationOptionsProperty := &hibernationOptionsProperty{\n\tconfigured: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst hibernationOptionsProperty: ec2.CfnLaunchTemplate.HibernationOptionsProperty = {\n  configured: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.HibernationOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.HibernationOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst hibernationOptionsProperty: ec2.CfnLaunchTemplate.HibernationOptionsProperty = {\n  configured: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1bcea2d163661463d4830b8c6acdb31342fa7db7a4fc485c884e05b6015e1560"
    },
    "87830332339872396569f925d3ec4f3b838f782a27ac8d6985682384397f7ec4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\niam_instance_profile_property = ec2.CfnLaunchTemplate.IamInstanceProfileProperty(\n    arn=\"arn\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIamInstanceProfileProperty iamInstanceProfileProperty = new IamInstanceProfileProperty {\n    Arn = \"arn\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIamInstanceProfileProperty iamInstanceProfileProperty = IamInstanceProfileProperty.builder()\n        .arn(\"arn\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\niamInstanceProfileProperty := &iamInstanceProfileProperty{\n\tarn: jsii.String(\"arn\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst iamInstanceProfileProperty: ec2.CfnLaunchTemplate.IamInstanceProfileProperty = {\n  arn: 'arn',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.IamInstanceProfileProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.IamInstanceProfileProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst iamInstanceProfileProperty: ec2.CfnLaunchTemplate.IamInstanceProfileProperty = {\n  arn: 'arn',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6fd5a61dd4ac5d4ad047eed8f8002d47f269897622414fe10dca2c8ead9855b9"
    },
    "a7148f89df7c5dbde61563d9ff926c413e195e680afc340968ae446ec9effff6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_market_options_property = ec2.CfnLaunchTemplate.InstanceMarketOptionsProperty(\n    market_type=\"marketType\",\n    spot_options=ec2.CfnLaunchTemplate.SpotOptionsProperty(\n        block_duration_minutes=123,\n        instance_interruption_behavior=\"instanceInterruptionBehavior\",\n        max_price=\"maxPrice\",\n        spot_instance_type=\"spotInstanceType\",\n        valid_until=\"validUntil\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceMarketOptionsProperty instanceMarketOptionsProperty = new InstanceMarketOptionsProperty {\n    MarketType = \"marketType\",\n    SpotOptions = new SpotOptionsProperty {\n        BlockDurationMinutes = 123,\n        InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n        MaxPrice = \"maxPrice\",\n        SpotInstanceType = \"spotInstanceType\",\n        ValidUntil = \"validUntil\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceMarketOptionsProperty instanceMarketOptionsProperty = InstanceMarketOptionsProperty.builder()\n        .marketType(\"marketType\")\n        .spotOptions(SpotOptionsProperty.builder()\n                .blockDurationMinutes(123)\n                .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n                .maxPrice(\"maxPrice\")\n                .spotInstanceType(\"spotInstanceType\")\n                .validUntil(\"validUntil\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceMarketOptionsProperty := &instanceMarketOptionsProperty{\n\tmarketType: jsii.String(\"marketType\"),\n\tspotOptions: &spotOptionsProperty{\n\t\tblockDurationMinutes: jsii.Number(123),\n\t\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\t\tmaxPrice: jsii.String(\"maxPrice\"),\n\t\tspotInstanceType: jsii.String(\"spotInstanceType\"),\n\t\tvalidUntil: jsii.String(\"validUntil\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceMarketOptionsProperty: ec2.CfnLaunchTemplate.InstanceMarketOptionsProperty = {\n  marketType: 'marketType',\n  spotOptions: {\n    blockDurationMinutes: 123,\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    maxPrice: 'maxPrice',\n    spotInstanceType: 'spotInstanceType',\n    validUntil: 'validUntil',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.InstanceMarketOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.InstanceMarketOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceMarketOptionsProperty: ec2.CfnLaunchTemplate.InstanceMarketOptionsProperty = {\n  marketType: 'marketType',\n  spotOptions: {\n    blockDurationMinutes: 123,\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    maxPrice: 'maxPrice',\n    spotInstanceType: 'spotInstanceType',\n    validUntil: 'validUntil',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 12,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "b468ecad9facd2402d9479abf732317ace53938a1a49e4ba642a5d7d01bac907"
    },
    "86bad947de78250c3a98c632be3b30c8f97253f652961078684358645605fe87": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_requirements_property = ec2.CfnLaunchTemplate.InstanceRequirementsProperty(\n    accelerator_count=ec2.CfnLaunchTemplate.AcceleratorCountProperty(\n        max=123,\n        min=123\n    ),\n    accelerator_manufacturers=[\"acceleratorManufacturers\"],\n    accelerator_names=[\"acceleratorNames\"],\n    accelerator_total_memory_mi_b=ec2.CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty(\n        max=123,\n        min=123\n    ),\n    accelerator_types=[\"acceleratorTypes\"],\n    bare_metal=\"bareMetal\",\n    baseline_ebs_bandwidth_mbps=ec2.CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty(\n        max=123,\n        min=123\n    ),\n    burstable_performance=\"burstablePerformance\",\n    cpu_manufacturers=[\"cpuManufacturers\"],\n    excluded_instance_types=[\"excludedInstanceTypes\"],\n    instance_generations=[\"instanceGenerations\"],\n    local_storage=\"localStorage\",\n    local_storage_types=[\"localStorageTypes\"],\n    memory_gi_bPer_vCpu=ec2.CfnLaunchTemplate.MemoryGiBPerVCpuProperty(\n        max=123,\n        min=123\n    ),\n    memory_mi_b=ec2.CfnLaunchTemplate.MemoryMiBProperty(\n        max=123,\n        min=123\n    ),\n    network_interface_count=ec2.CfnLaunchTemplate.NetworkInterfaceCountProperty(\n        max=123,\n        min=123\n    ),\n    on_demand_max_price_percentage_over_lowest_price=123,\n    require_hibernate_support=False,\n    spot_max_price_percentage_over_lowest_price=123,\n    total_local_storage_gb=ec2.CfnLaunchTemplate.TotalLocalStorageGBProperty(\n        max=123,\n        min=123\n    ),\n    v_cpu_count=ec2.CfnLaunchTemplate.VCpuCountProperty(\n        max=123,\n        min=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceRequirementsProperty instanceRequirementsProperty = new InstanceRequirementsProperty {\n    AcceleratorCount = new AcceleratorCountProperty {\n        Max = 123,\n        Min = 123\n    },\n    AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n    AcceleratorNames = new [] { \"acceleratorNames\" },\n    AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBProperty {\n        Max = 123,\n        Min = 123\n    },\n    AcceleratorTypes = new [] { \"acceleratorTypes\" },\n    BareMetal = \"bareMetal\",\n    BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsProperty {\n        Max = 123,\n        Min = 123\n    },\n    BurstablePerformance = \"burstablePerformance\",\n    CpuManufacturers = new [] { \"cpuManufacturers\" },\n    ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n    InstanceGenerations = new [] { \"instanceGenerations\" },\n    LocalStorage = \"localStorage\",\n    LocalStorageTypes = new [] { \"localStorageTypes\" },\n    MemoryGiBPerVCpu = new MemoryGiBPerVCpuProperty {\n        Max = 123,\n        Min = 123\n    },\n    MemoryMiB = new MemoryMiBProperty {\n        Max = 123,\n        Min = 123\n    },\n    NetworkInterfaceCount = new NetworkInterfaceCountProperty {\n        Max = 123,\n        Min = 123\n    },\n    OnDemandMaxPricePercentageOverLowestPrice = 123,\n    RequireHibernateSupport = false,\n    SpotMaxPricePercentageOverLowestPrice = 123,\n    TotalLocalStorageGb = new TotalLocalStorageGBProperty {\n        Max = 123,\n        Min = 123\n    },\n    VCpuCount = new VCpuCountProperty {\n        Max = 123,\n        Min = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceRequirementsProperty instanceRequirementsProperty = InstanceRequirementsProperty.builder()\n        .acceleratorCount(AcceleratorCountProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n        .acceleratorNames(List.of(\"acceleratorNames\"))\n        .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .acceleratorTypes(List.of(\"acceleratorTypes\"))\n        .bareMetal(\"bareMetal\")\n        .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .burstablePerformance(\"burstablePerformance\")\n        .cpuManufacturers(List.of(\"cpuManufacturers\"))\n        .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n        .instanceGenerations(List.of(\"instanceGenerations\"))\n        .localStorage(\"localStorage\")\n        .localStorageTypes(List.of(\"localStorageTypes\"))\n        .memoryGiBPerVCpu(MemoryGiBPerVCpuProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .memoryMiB(MemoryMiBProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .networkInterfaceCount(NetworkInterfaceCountProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .onDemandMaxPricePercentageOverLowestPrice(123)\n        .requireHibernateSupport(false)\n        .spotMaxPricePercentageOverLowestPrice(123)\n        .totalLocalStorageGb(TotalLocalStorageGBProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .vCpuCount(VCpuCountProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceRequirementsProperty := &instanceRequirementsProperty{\n\tacceleratorCount: &acceleratorCountProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tacceleratorManufacturers: []*string{\n\t\tjsii.String(\"acceleratorManufacturers\"),\n\t},\n\tacceleratorNames: []*string{\n\t\tjsii.String(\"acceleratorNames\"),\n\t},\n\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tacceleratorTypes: []*string{\n\t\tjsii.String(\"acceleratorTypes\"),\n\t},\n\tbareMetal: jsii.String(\"bareMetal\"),\n\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\tcpuManufacturers: []*string{\n\t\tjsii.String(\"cpuManufacturers\"),\n\t},\n\texcludedInstanceTypes: []*string{\n\t\tjsii.String(\"excludedInstanceTypes\"),\n\t},\n\tinstanceGenerations: []*string{\n\t\tjsii.String(\"instanceGenerations\"),\n\t},\n\tlocalStorage: jsii.String(\"localStorage\"),\n\tlocalStorageTypes: []*string{\n\t\tjsii.String(\"localStorageTypes\"),\n\t},\n\tmemoryGiBPerVCpu: &memoryGiBPerVCpuProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tmemoryMiB: &memoryMiBProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tnetworkInterfaceCount: &networkInterfaceCountProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\trequireHibernateSupport: jsii.Boolean(false),\n\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\ttotalLocalStorageGb: &totalLocalStorageGBProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tvCpuCount: &vCpuCountProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceRequirementsProperty: ec2.CfnLaunchTemplate.InstanceRequirementsProperty = {\n  acceleratorCount: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorManufacturers: ['acceleratorManufacturers'],\n  acceleratorNames: ['acceleratorNames'],\n  acceleratorTotalMemoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorTypes: ['acceleratorTypes'],\n  bareMetal: 'bareMetal',\n  baselineEbsBandwidthMbps: {\n    max: 123,\n    min: 123,\n  },\n  burstablePerformance: 'burstablePerformance',\n  cpuManufacturers: ['cpuManufacturers'],\n  excludedInstanceTypes: ['excludedInstanceTypes'],\n  instanceGenerations: ['instanceGenerations'],\n  localStorage: 'localStorage',\n  localStorageTypes: ['localStorageTypes'],\n  memoryGiBPerVCpu: {\n    max: 123,\n    min: 123,\n  },\n  memoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  networkInterfaceCount: {\n    max: 123,\n    min: 123,\n  },\n  onDemandMaxPricePercentageOverLowestPrice: 123,\n  requireHibernateSupport: false,\n  spotMaxPricePercentageOverLowestPrice: 123,\n  totalLocalStorageGb: {\n    max: 123,\n    min: 123,\n  },\n  vCpuCount: {\n    max: 123,\n    min: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.InstanceRequirementsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.InstanceRequirementsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceRequirementsProperty: ec2.CfnLaunchTemplate.InstanceRequirementsProperty = {\n  acceleratorCount: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorManufacturers: ['acceleratorManufacturers'],\n  acceleratorNames: ['acceleratorNames'],\n  acceleratorTotalMemoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorTypes: ['acceleratorTypes'],\n  bareMetal: 'bareMetal',\n  baselineEbsBandwidthMbps: {\n    max: 123,\n    min: 123,\n  },\n  burstablePerformance: 'burstablePerformance',\n  cpuManufacturers: ['cpuManufacturers'],\n  excludedInstanceTypes: ['excludedInstanceTypes'],\n  instanceGenerations: ['instanceGenerations'],\n  localStorage: 'localStorage',\n  localStorageTypes: ['localStorageTypes'],\n  memoryGiBPerVCpu: {\n    max: 123,\n    min: 123,\n  },\n  memoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  networkInterfaceCount: {\n    max: 123,\n    min: 123,\n  },\n  onDemandMaxPricePercentageOverLowestPrice: 123,\n  requireHibernateSupport: false,\n  spotMaxPricePercentageOverLowestPrice: 123,\n  totalLocalStorageGb: {\n    max: 123,\n    min: 123,\n  },\n  vCpuCount: {\n    max: 123,\n    min: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 18,
        "10": 11,
        "75": 42,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 7,
        "193": 9,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 37,
        "290": 1
      },
      "fqnsFingerprint": "2f81b9b1408e5b4c90ac08d5adde538fa34411f8f9d3a3479aa03066fc7ac3dc"
    },
    "2b251747723dbc1fafba73bf49fe5da3369666cc45794384596b743280c4f2ab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nipv4_prefix_specification_property = ec2.CfnLaunchTemplate.Ipv4PrefixSpecificationProperty(\n    ipv4_prefix=\"ipv4Prefix\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIpv4PrefixSpecificationProperty ipv4PrefixSpecificationProperty = new Ipv4PrefixSpecificationProperty {\n    Ipv4Prefix = \"ipv4Prefix\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIpv4PrefixSpecificationProperty ipv4PrefixSpecificationProperty = Ipv4PrefixSpecificationProperty.builder()\n        .ipv4Prefix(\"ipv4Prefix\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nipv4PrefixSpecificationProperty := &ipv4PrefixSpecificationProperty{\n\tipv4Prefix: jsii.String(\"ipv4Prefix\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ipv4PrefixSpecificationProperty: ec2.CfnLaunchTemplate.Ipv4PrefixSpecificationProperty = {\n  ipv4Prefix: 'ipv4Prefix',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.Ipv4PrefixSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.Ipv4PrefixSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ipv4PrefixSpecificationProperty: ec2.CfnLaunchTemplate.Ipv4PrefixSpecificationProperty = {\n  ipv4Prefix: 'ipv4Prefix',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c3cbcc64b2b00064696f4acc52d399488fa8c14114d7948ceaaa1a410cca36d0"
    },
    "4920e8f4e790b4155d57d5e404a405fa5ae47cbca1c2f52e1c182f91001574dd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nipv6_add_property = ec2.CfnLaunchTemplate.Ipv6AddProperty(\n    ipv6_address=\"ipv6Address\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIpv6AddProperty ipv6AddProperty = new Ipv6AddProperty {\n    Ipv6Address = \"ipv6Address\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIpv6AddProperty ipv6AddProperty = Ipv6AddProperty.builder()\n        .ipv6Address(\"ipv6Address\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nipv6AddProperty := &ipv6AddProperty{\n\tipv6Address: jsii.String(\"ipv6Address\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ipv6AddProperty: ec2.CfnLaunchTemplate.Ipv6AddProperty = {\n  ipv6Address: 'ipv6Address',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.Ipv6AddProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.Ipv6AddProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ipv6AddProperty: ec2.CfnLaunchTemplate.Ipv6AddProperty = {\n  ipv6Address: 'ipv6Address',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "510d8e6ee3b90cb476b97eb43c003f48b7007e62b7e5cf98789ffaf1f4111533"
    },
    "ea46eb741e90bcc15fe4b5f364c01c827d93dd87a8274a5071e00e297d7fa5e1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nipv6_prefix_specification_property = ec2.CfnLaunchTemplate.Ipv6PrefixSpecificationProperty(\n    ipv6_prefix=\"ipv6Prefix\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIpv6PrefixSpecificationProperty ipv6PrefixSpecificationProperty = new Ipv6PrefixSpecificationProperty {\n    Ipv6Prefix = \"ipv6Prefix\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIpv6PrefixSpecificationProperty ipv6PrefixSpecificationProperty = Ipv6PrefixSpecificationProperty.builder()\n        .ipv6Prefix(\"ipv6Prefix\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nipv6PrefixSpecificationProperty := &ipv6PrefixSpecificationProperty{\n\tipv6Prefix: jsii.String(\"ipv6Prefix\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ipv6PrefixSpecificationProperty: ec2.CfnLaunchTemplate.Ipv6PrefixSpecificationProperty = {\n  ipv6Prefix: 'ipv6Prefix',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.Ipv6PrefixSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.Ipv6PrefixSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ipv6PrefixSpecificationProperty: ec2.CfnLaunchTemplate.Ipv6PrefixSpecificationProperty = {\n  ipv6Prefix: 'ipv6Prefix',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0c828816b6a69b1bf3fd2528759870a3c906a3492550b6f9666bd72076e3af68"
    },
    "ee84e65f43aedadbe352d75d34e5481fd150ebe833994fa5e5a66954e8a7536f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_data_property = ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n    block_device_mappings=[ec2.CfnLaunchTemplate.BlockDeviceMappingProperty(\n        device_name=\"deviceName\",\n        ebs=ec2.CfnLaunchTemplate.EbsProperty(\n            delete_on_termination=False,\n            encrypted=False,\n            iops=123,\n            kms_key_id=\"kmsKeyId\",\n            snapshot_id=\"snapshotId\",\n            throughput=123,\n            volume_size=123,\n            volume_type=\"volumeType\"\n        ),\n        no_device=\"noDevice\",\n        virtual_name=\"virtualName\"\n    )],\n    capacity_reservation_specification=ec2.CfnLaunchTemplate.CapacityReservationSpecificationProperty(\n        capacity_reservation_preference=\"capacityReservationPreference\",\n        capacity_reservation_target=ec2.CfnLaunchTemplate.CapacityReservationTargetProperty(\n            capacity_reservation_id=\"capacityReservationId\",\n            capacity_reservation_resource_group_arn=\"capacityReservationResourceGroupArn\"\n        )\n    ),\n    cpu_options=ec2.CfnLaunchTemplate.CpuOptionsProperty(\n        core_count=123,\n        threads_per_core=123\n    ),\n    credit_specification=ec2.CfnLaunchTemplate.CreditSpecificationProperty(\n        cpu_credits=\"cpuCredits\"\n    ),\n    disable_api_termination=False,\n    ebs_optimized=False,\n    elastic_gpu_specifications=[ec2.CfnLaunchTemplate.ElasticGpuSpecificationProperty(\n        type=\"type\"\n    )],\n    elastic_inference_accelerators=[ec2.CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty(\n        count=123,\n        type=\"type\"\n    )],\n    enclave_options=ec2.CfnLaunchTemplate.EnclaveOptionsProperty(\n        enabled=False\n    ),\n    hibernation_options=ec2.CfnLaunchTemplate.HibernationOptionsProperty(\n        configured=False\n    ),\n    iam_instance_profile=ec2.CfnLaunchTemplate.IamInstanceProfileProperty(\n        arn=\"arn\",\n        name=\"name\"\n    ),\n    image_id=\"imageId\",\n    instance_initiated_shutdown_behavior=\"instanceInitiatedShutdownBehavior\",\n    instance_market_options=ec2.CfnLaunchTemplate.InstanceMarketOptionsProperty(\n        market_type=\"marketType\",\n        spot_options=ec2.CfnLaunchTemplate.SpotOptionsProperty(\n            block_duration_minutes=123,\n            instance_interruption_behavior=\"instanceInterruptionBehavior\",\n            max_price=\"maxPrice\",\n            spot_instance_type=\"spotInstanceType\",\n            valid_until=\"validUntil\"\n        )\n    ),\n    instance_requirements=ec2.CfnLaunchTemplate.InstanceRequirementsProperty(\n        accelerator_count=ec2.CfnLaunchTemplate.AcceleratorCountProperty(\n            max=123,\n            min=123\n        ),\n        accelerator_manufacturers=[\"acceleratorManufacturers\"],\n        accelerator_names=[\"acceleratorNames\"],\n        accelerator_total_memory_mi_b=ec2.CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty(\n            max=123,\n            min=123\n        ),\n        accelerator_types=[\"acceleratorTypes\"],\n        bare_metal=\"bareMetal\",\n        baseline_ebs_bandwidth_mbps=ec2.CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty(\n            max=123,\n            min=123\n        ),\n        burstable_performance=\"burstablePerformance\",\n        cpu_manufacturers=[\"cpuManufacturers\"],\n        excluded_instance_types=[\"excludedInstanceTypes\"],\n        instance_generations=[\"instanceGenerations\"],\n        local_storage=\"localStorage\",\n        local_storage_types=[\"localStorageTypes\"],\n        memory_gi_bPer_vCpu=ec2.CfnLaunchTemplate.MemoryGiBPerVCpuProperty(\n            max=123,\n            min=123\n        ),\n        memory_mi_b=ec2.CfnLaunchTemplate.MemoryMiBProperty(\n            max=123,\n            min=123\n        ),\n        network_interface_count=ec2.CfnLaunchTemplate.NetworkInterfaceCountProperty(\n            max=123,\n            min=123\n        ),\n        on_demand_max_price_percentage_over_lowest_price=123,\n        require_hibernate_support=False,\n        spot_max_price_percentage_over_lowest_price=123,\n        total_local_storage_gb=ec2.CfnLaunchTemplate.TotalLocalStorageGBProperty(\n            max=123,\n            min=123\n        ),\n        v_cpu_count=ec2.CfnLaunchTemplate.VCpuCountProperty(\n            max=123,\n            min=123\n        )\n    ),\n    instance_type=\"instanceType\",\n    kernel_id=\"kernelId\",\n    key_name=\"keyName\",\n    license_specifications=[ec2.CfnLaunchTemplate.LicenseSpecificationProperty(\n        license_configuration_arn=\"licenseConfigurationArn\"\n    )],\n    maintenance_options=ec2.CfnLaunchTemplate.MaintenanceOptionsProperty(\n        auto_recovery=\"autoRecovery\"\n    ),\n    metadata_options=ec2.CfnLaunchTemplate.MetadataOptionsProperty(\n        http_endpoint=\"httpEndpoint\",\n        http_protocol_ipv6=\"httpProtocolIpv6\",\n        http_put_response_hop_limit=123,\n        http_tokens=\"httpTokens\",\n        instance_metadata_tags=\"instanceMetadataTags\"\n    ),\n    monitoring=ec2.CfnLaunchTemplate.MonitoringProperty(\n        enabled=False\n    ),\n    network_interfaces=[ec2.CfnLaunchTemplate.NetworkInterfaceProperty(\n        associate_carrier_ip_address=False,\n        associate_public_ip_address=False,\n        delete_on_termination=False,\n        description=\"description\",\n        device_index=123,\n        groups=[\"groups\"],\n        interface_type=\"interfaceType\",\n        ipv4_prefix_count=123,\n        ipv4_prefixes=[ec2.CfnLaunchTemplate.Ipv4PrefixSpecificationProperty(\n            ipv4_prefix=\"ipv4Prefix\"\n        )],\n        ipv6_address_count=123,\n        ipv6_addresses=[ec2.CfnLaunchTemplate.Ipv6AddProperty(\n            ipv6_address=\"ipv6Address\"\n        )],\n        ipv6_prefix_count=123,\n        ipv6_prefixes=[ec2.CfnLaunchTemplate.Ipv6PrefixSpecificationProperty(\n            ipv6_prefix=\"ipv6Prefix\"\n        )],\n        network_card_index=123,\n        network_interface_id=\"networkInterfaceId\",\n        private_ip_address=\"privateIpAddress\",\n        private_ip_addresses=[ec2.CfnLaunchTemplate.PrivateIpAddProperty(\n            primary=False,\n            private_ip_address=\"privateIpAddress\"\n        )],\n        secondary_private_ip_address_count=123,\n        subnet_id=\"subnetId\"\n    )],\n    placement=ec2.CfnLaunchTemplate.PlacementProperty(\n        affinity=\"affinity\",\n        availability_zone=\"availabilityZone\",\n        group_name=\"groupName\",\n        host_id=\"hostId\",\n        host_resource_group_arn=\"hostResourceGroupArn\",\n        partition_number=123,\n        spread_domain=\"spreadDomain\",\n        tenancy=\"tenancy\"\n    ),\n    private_dns_name_options=ec2.CfnLaunchTemplate.PrivateDnsNameOptionsProperty(\n        enable_resource_name_dns_aaaa_record=False,\n        enable_resource_name_dns_aRecord=False,\n        hostname_type=\"hostnameType\"\n    ),\n    ram_disk_id=\"ramDiskId\",\n    security_group_ids=[\"securityGroupIds\"],\n    security_groups=[\"securityGroups\"],\n    tag_specifications=[ec2.CfnLaunchTemplate.TagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    user_data=\"userData\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateDataProperty launchTemplateDataProperty = new LaunchTemplateDataProperty {\n    BlockDeviceMappings = new [] { new BlockDeviceMappingProperty {\n        DeviceName = \"deviceName\",\n        Ebs = new EbsProperty {\n            DeleteOnTermination = false,\n            Encrypted = false,\n            Iops = 123,\n            KmsKeyId = \"kmsKeyId\",\n            SnapshotId = \"snapshotId\",\n            Throughput = 123,\n            VolumeSize = 123,\n            VolumeType = \"volumeType\"\n        },\n        NoDevice = \"noDevice\",\n        VirtualName = \"virtualName\"\n    } },\n    CapacityReservationSpecification = new CapacityReservationSpecificationProperty {\n        CapacityReservationPreference = \"capacityReservationPreference\",\n        CapacityReservationTarget = new CapacityReservationTargetProperty {\n            CapacityReservationId = \"capacityReservationId\",\n            CapacityReservationResourceGroupArn = \"capacityReservationResourceGroupArn\"\n        }\n    },\n    CpuOptions = new CpuOptionsProperty {\n        CoreCount = 123,\n        ThreadsPerCore = 123\n    },\n    CreditSpecification = new CreditSpecificationProperty {\n        CpuCredits = \"cpuCredits\"\n    },\n    DisableApiTermination = false,\n    EbsOptimized = false,\n    ElasticGpuSpecifications = new [] { new ElasticGpuSpecificationProperty {\n        Type = \"type\"\n    } },\n    ElasticInferenceAccelerators = new [] { new LaunchTemplateElasticInferenceAcceleratorProperty {\n        Count = 123,\n        Type = \"type\"\n    } },\n    EnclaveOptions = new EnclaveOptionsProperty {\n        Enabled = false\n    },\n    HibernationOptions = new HibernationOptionsProperty {\n        Configured = false\n    },\n    IamInstanceProfile = new IamInstanceProfileProperty {\n        Arn = \"arn\",\n        Name = \"name\"\n    },\n    ImageId = \"imageId\",\n    InstanceInitiatedShutdownBehavior = \"instanceInitiatedShutdownBehavior\",\n    InstanceMarketOptions = new InstanceMarketOptionsProperty {\n        MarketType = \"marketType\",\n        SpotOptions = new SpotOptionsProperty {\n            BlockDurationMinutes = 123,\n            InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n            MaxPrice = \"maxPrice\",\n            SpotInstanceType = \"spotInstanceType\",\n            ValidUntil = \"validUntil\"\n        }\n    },\n    InstanceRequirements = new InstanceRequirementsProperty {\n        AcceleratorCount = new AcceleratorCountProperty {\n            Max = 123,\n            Min = 123\n        },\n        AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n        AcceleratorNames = new [] { \"acceleratorNames\" },\n        AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBProperty {\n            Max = 123,\n            Min = 123\n        },\n        AcceleratorTypes = new [] { \"acceleratorTypes\" },\n        BareMetal = \"bareMetal\",\n        BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsProperty {\n            Max = 123,\n            Min = 123\n        },\n        BurstablePerformance = \"burstablePerformance\",\n        CpuManufacturers = new [] { \"cpuManufacturers\" },\n        ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n        InstanceGenerations = new [] { \"instanceGenerations\" },\n        LocalStorage = \"localStorage\",\n        LocalStorageTypes = new [] { \"localStorageTypes\" },\n        MemoryGiBPerVCpu = new MemoryGiBPerVCpuProperty {\n            Max = 123,\n            Min = 123\n        },\n        MemoryMiB = new MemoryMiBProperty {\n            Max = 123,\n            Min = 123\n        },\n        NetworkInterfaceCount = new NetworkInterfaceCountProperty {\n            Max = 123,\n            Min = 123\n        },\n        OnDemandMaxPricePercentageOverLowestPrice = 123,\n        RequireHibernateSupport = false,\n        SpotMaxPricePercentageOverLowestPrice = 123,\n        TotalLocalStorageGb = new TotalLocalStorageGBProperty {\n            Max = 123,\n            Min = 123\n        },\n        VCpuCount = new VCpuCountProperty {\n            Max = 123,\n            Min = 123\n        }\n    },\n    InstanceType = \"instanceType\",\n    KernelId = \"kernelId\",\n    KeyName = \"keyName\",\n    LicenseSpecifications = new [] { new LicenseSpecificationProperty {\n        LicenseConfigurationArn = \"licenseConfigurationArn\"\n    } },\n    MaintenanceOptions = new MaintenanceOptionsProperty {\n        AutoRecovery = \"autoRecovery\"\n    },\n    MetadataOptions = new MetadataOptionsProperty {\n        HttpEndpoint = \"httpEndpoint\",\n        HttpProtocolIpv6 = \"httpProtocolIpv6\",\n        HttpPutResponseHopLimit = 123,\n        HttpTokens = \"httpTokens\",\n        InstanceMetadataTags = \"instanceMetadataTags\"\n    },\n    Monitoring = new MonitoringProperty {\n        Enabled = false\n    },\n    NetworkInterfaces = new [] { new NetworkInterfaceProperty {\n        AssociateCarrierIpAddress = false,\n        AssociatePublicIpAddress = false,\n        DeleteOnTermination = false,\n        Description = \"description\",\n        DeviceIndex = 123,\n        Groups = new [] { \"groups\" },\n        InterfaceType = \"interfaceType\",\n        Ipv4PrefixCount = 123,\n        Ipv4Prefixes = new [] { new Ipv4PrefixSpecificationProperty {\n            Ipv4Prefix = \"ipv4Prefix\"\n        } },\n        Ipv6AddressCount = 123,\n        Ipv6Addresses = new [] { new Ipv6AddProperty {\n            Ipv6Address = \"ipv6Address\"\n        } },\n        Ipv6PrefixCount = 123,\n        Ipv6Prefixes = new [] { new Ipv6PrefixSpecificationProperty {\n            Ipv6Prefix = \"ipv6Prefix\"\n        } },\n        NetworkCardIndex = 123,\n        NetworkInterfaceId = \"networkInterfaceId\",\n        PrivateIpAddress = \"privateIpAddress\",\n        PrivateIpAddresses = new [] { new PrivateIpAddProperty {\n            Primary = false,\n            PrivateIpAddress = \"privateIpAddress\"\n        } },\n        SecondaryPrivateIpAddressCount = 123,\n        SubnetId = \"subnetId\"\n    } },\n    Placement = new PlacementProperty {\n        Affinity = \"affinity\",\n        AvailabilityZone = \"availabilityZone\",\n        GroupName = \"groupName\",\n        HostId = \"hostId\",\n        HostResourceGroupArn = \"hostResourceGroupArn\",\n        PartitionNumber = 123,\n        SpreadDomain = \"spreadDomain\",\n        Tenancy = \"tenancy\"\n    },\n    PrivateDnsNameOptions = new PrivateDnsNameOptionsProperty {\n        EnableResourceNameDnsAaaaRecord = false,\n        EnableResourceNameDnsARecord = false,\n        HostnameType = \"hostnameType\"\n    },\n    RamDiskId = \"ramDiskId\",\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SecurityGroups = new [] { \"securityGroups\" },\n    TagSpecifications = new [] { new TagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    UserData = \"userData\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateDataProperty launchTemplateDataProperty = LaunchTemplateDataProperty.builder()\n        .blockDeviceMappings(List.of(BlockDeviceMappingProperty.builder()\n                .deviceName(\"deviceName\")\n                .ebs(EbsProperty.builder()\n                        .deleteOnTermination(false)\n                        .encrypted(false)\n                        .iops(123)\n                        .kmsKeyId(\"kmsKeyId\")\n                        .snapshotId(\"snapshotId\")\n                        .throughput(123)\n                        .volumeSize(123)\n                        .volumeType(\"volumeType\")\n                        .build())\n                .noDevice(\"noDevice\")\n                .virtualName(\"virtualName\")\n                .build()))\n        .capacityReservationSpecification(CapacityReservationSpecificationProperty.builder()\n                .capacityReservationPreference(\"capacityReservationPreference\")\n                .capacityReservationTarget(CapacityReservationTargetProperty.builder()\n                        .capacityReservationId(\"capacityReservationId\")\n                        .capacityReservationResourceGroupArn(\"capacityReservationResourceGroupArn\")\n                        .build())\n                .build())\n        .cpuOptions(CpuOptionsProperty.builder()\n                .coreCount(123)\n                .threadsPerCore(123)\n                .build())\n        .creditSpecification(CreditSpecificationProperty.builder()\n                .cpuCredits(\"cpuCredits\")\n                .build())\n        .disableApiTermination(false)\n        .ebsOptimized(false)\n        .elasticGpuSpecifications(List.of(ElasticGpuSpecificationProperty.builder()\n                .type(\"type\")\n                .build()))\n        .elasticInferenceAccelerators(List.of(LaunchTemplateElasticInferenceAcceleratorProperty.builder()\n                .count(123)\n                .type(\"type\")\n                .build()))\n        .enclaveOptions(EnclaveOptionsProperty.builder()\n                .enabled(false)\n                .build())\n        .hibernationOptions(HibernationOptionsProperty.builder()\n                .configured(false)\n                .build())\n        .iamInstanceProfile(IamInstanceProfileProperty.builder()\n                .arn(\"arn\")\n                .name(\"name\")\n                .build())\n        .imageId(\"imageId\")\n        .instanceInitiatedShutdownBehavior(\"instanceInitiatedShutdownBehavior\")\n        .instanceMarketOptions(InstanceMarketOptionsProperty.builder()\n                .marketType(\"marketType\")\n                .spotOptions(SpotOptionsProperty.builder()\n                        .blockDurationMinutes(123)\n                        .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n                        .maxPrice(\"maxPrice\")\n                        .spotInstanceType(\"spotInstanceType\")\n                        .validUntil(\"validUntil\")\n                        .build())\n                .build())\n        .instanceRequirements(InstanceRequirementsProperty.builder()\n                .acceleratorCount(AcceleratorCountProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                .acceleratorNames(List.of(\"acceleratorNames\"))\n                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                .bareMetal(\"bareMetal\")\n                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .burstablePerformance(\"burstablePerformance\")\n                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                .instanceGenerations(List.of(\"instanceGenerations\"))\n                .localStorage(\"localStorage\")\n                .localStorageTypes(List.of(\"localStorageTypes\"))\n                .memoryGiBPerVCpu(MemoryGiBPerVCpuProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .memoryMiB(MemoryMiBProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .networkInterfaceCount(NetworkInterfaceCountProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .onDemandMaxPricePercentageOverLowestPrice(123)\n                .requireHibernateSupport(false)\n                .spotMaxPricePercentageOverLowestPrice(123)\n                .totalLocalStorageGb(TotalLocalStorageGBProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .vCpuCount(VCpuCountProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .build())\n        .instanceType(\"instanceType\")\n        .kernelId(\"kernelId\")\n        .keyName(\"keyName\")\n        .licenseSpecifications(List.of(LicenseSpecificationProperty.builder()\n                .licenseConfigurationArn(\"licenseConfigurationArn\")\n                .build()))\n        .maintenanceOptions(MaintenanceOptionsProperty.builder()\n                .autoRecovery(\"autoRecovery\")\n                .build())\n        .metadataOptions(MetadataOptionsProperty.builder()\n                .httpEndpoint(\"httpEndpoint\")\n                .httpProtocolIpv6(\"httpProtocolIpv6\")\n                .httpPutResponseHopLimit(123)\n                .httpTokens(\"httpTokens\")\n                .instanceMetadataTags(\"instanceMetadataTags\")\n                .build())\n        .monitoring(MonitoringProperty.builder()\n                .enabled(false)\n                .build())\n        .networkInterfaces(List.of(NetworkInterfaceProperty.builder()\n                .associateCarrierIpAddress(false)\n                .associatePublicIpAddress(false)\n                .deleteOnTermination(false)\n                .description(\"description\")\n                .deviceIndex(123)\n                .groups(List.of(\"groups\"))\n                .interfaceType(\"interfaceType\")\n                .ipv4PrefixCount(123)\n                .ipv4Prefixes(List.of(Ipv4PrefixSpecificationProperty.builder()\n                        .ipv4Prefix(\"ipv4Prefix\")\n                        .build()))\n                .ipv6AddressCount(123)\n                .ipv6Addresses(List.of(Ipv6AddProperty.builder()\n                        .ipv6Address(\"ipv6Address\")\n                        .build()))\n                .ipv6PrefixCount(123)\n                .ipv6Prefixes(List.of(Ipv6PrefixSpecificationProperty.builder()\n                        .ipv6Prefix(\"ipv6Prefix\")\n                        .build()))\n                .networkCardIndex(123)\n                .networkInterfaceId(\"networkInterfaceId\")\n                .privateIpAddress(\"privateIpAddress\")\n                .privateIpAddresses(List.of(PrivateIpAddProperty.builder()\n                        .primary(false)\n                        .privateIpAddress(\"privateIpAddress\")\n                        .build()))\n                .secondaryPrivateIpAddressCount(123)\n                .subnetId(\"subnetId\")\n                .build()))\n        .placement(PlacementProperty.builder()\n                .affinity(\"affinity\")\n                .availabilityZone(\"availabilityZone\")\n                .groupName(\"groupName\")\n                .hostId(\"hostId\")\n                .hostResourceGroupArn(\"hostResourceGroupArn\")\n                .partitionNumber(123)\n                .spreadDomain(\"spreadDomain\")\n                .tenancy(\"tenancy\")\n                .build())\n        .privateDnsNameOptions(PrivateDnsNameOptionsProperty.builder()\n                .enableResourceNameDnsAaaaRecord(false)\n                .enableResourceNameDnsARecord(false)\n                .hostnameType(\"hostnameType\")\n                .build())\n        .ramDiskId(\"ramDiskId\")\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .securityGroups(List.of(\"securityGroups\"))\n        .tagSpecifications(List.of(TagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .userData(\"userData\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateDataProperty := &launchTemplateDataProperty{\n\tblockDeviceMappings: []interface{}{\n\t\t&blockDeviceMappingProperty{\n\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\t\t\tebs: &ebsProperty{\n\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\tencrypted: jsii.Boolean(false),\n\t\t\t\tiops: jsii.Number(123),\n\t\t\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t\t\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\t\t\tthroughput: jsii.Number(123),\n\t\t\t\tvolumeSize: jsii.Number(123),\n\t\t\t\tvolumeType: jsii.String(\"volumeType\"),\n\t\t\t},\n\t\t\tnoDevice: jsii.String(\"noDevice\"),\n\t\t\tvirtualName: jsii.String(\"virtualName\"),\n\t\t},\n\t},\n\tcapacityReservationSpecification: &capacityReservationSpecificationProperty{\n\t\tcapacityReservationPreference: jsii.String(\"capacityReservationPreference\"),\n\t\tcapacityReservationTarget: &capacityReservationTargetProperty{\n\t\t\tcapacityReservationId: jsii.String(\"capacityReservationId\"),\n\t\t\tcapacityReservationResourceGroupArn: jsii.String(\"capacityReservationResourceGroupArn\"),\n\t\t},\n\t},\n\tcpuOptions: &cpuOptionsProperty{\n\t\tcoreCount: jsii.Number(123),\n\t\tthreadsPerCore: jsii.Number(123),\n\t},\n\tcreditSpecification: &creditSpecificationProperty{\n\t\tcpuCredits: jsii.String(\"cpuCredits\"),\n\t},\n\tdisableApiTermination: jsii.Boolean(false),\n\tebsOptimized: jsii.Boolean(false),\n\telasticGpuSpecifications: []interface{}{\n\t\t&elasticGpuSpecificationProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\telasticInferenceAccelerators: []interface{}{\n\t\t&launchTemplateElasticInferenceAcceleratorProperty{\n\t\t\tcount: jsii.Number(123),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tenclaveOptions: &enclaveOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t},\n\thibernationOptions: &hibernationOptionsProperty{\n\t\tconfigured: jsii.Boolean(false),\n\t},\n\tiamInstanceProfile: &iamInstanceProfileProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tname: jsii.String(\"name\"),\n\t},\n\timageId: jsii.String(\"imageId\"),\n\tinstanceInitiatedShutdownBehavior: jsii.String(\"instanceInitiatedShutdownBehavior\"),\n\tinstanceMarketOptions: &instanceMarketOptionsProperty{\n\t\tmarketType: jsii.String(\"marketType\"),\n\t\tspotOptions: &spotOptionsProperty{\n\t\t\tblockDurationMinutes: jsii.Number(123),\n\t\t\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\t\t\tmaxPrice: jsii.String(\"maxPrice\"),\n\t\t\tspotInstanceType: jsii.String(\"spotInstanceType\"),\n\t\t\tvalidUntil: jsii.String(\"validUntil\"),\n\t\t},\n\t},\n\tinstanceRequirements: &instanceRequirementsProperty{\n\t\tacceleratorCount: &acceleratorCountProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tacceleratorManufacturers: []*string{\n\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t},\n\t\tacceleratorNames: []*string{\n\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t},\n\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tacceleratorTypes: []*string{\n\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t},\n\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\tcpuManufacturers: []*string{\n\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t},\n\t\texcludedInstanceTypes: []*string{\n\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t},\n\t\tinstanceGenerations: []*string{\n\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t},\n\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\tlocalStorageTypes: []*string{\n\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t},\n\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tmemoryMiB: &memoryMiBProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tnetworkInterfaceCount: &networkInterfaceCountProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\ttotalLocalStorageGb: &totalLocalStorageGBProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tvCpuCount: &vCpuCountProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t},\n\tinstanceType: jsii.String(\"instanceType\"),\n\tkernelId: jsii.String(\"kernelId\"),\n\tkeyName: jsii.String(\"keyName\"),\n\tlicenseSpecifications: []interface{}{\n\t\t&licenseSpecificationProperty{\n\t\t\tlicenseConfigurationArn: jsii.String(\"licenseConfigurationArn\"),\n\t\t},\n\t},\n\tmaintenanceOptions: &maintenanceOptionsProperty{\n\t\tautoRecovery: jsii.String(\"autoRecovery\"),\n\t},\n\tmetadataOptions: &metadataOptionsProperty{\n\t\thttpEndpoint: jsii.String(\"httpEndpoint\"),\n\t\thttpProtocolIpv6: jsii.String(\"httpProtocolIpv6\"),\n\t\thttpPutResponseHopLimit: jsii.Number(123),\n\t\thttpTokens: jsii.String(\"httpTokens\"),\n\t\tinstanceMetadataTags: jsii.String(\"instanceMetadataTags\"),\n\t},\n\tmonitoring: &monitoringProperty{\n\t\tenabled: jsii.Boolean(false),\n\t},\n\tnetworkInterfaces: []interface{}{\n\t\t&networkInterfaceProperty{\n\t\t\tassociateCarrierIpAddress: jsii.Boolean(false),\n\t\t\tassociatePublicIpAddress: jsii.Boolean(false),\n\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tdeviceIndex: jsii.Number(123),\n\t\t\tgroups: []*string{\n\t\t\t\tjsii.String(\"groups\"),\n\t\t\t},\n\t\t\tinterfaceType: jsii.String(\"interfaceType\"),\n\t\t\tipv4PrefixCount: jsii.Number(123),\n\t\t\tipv4Prefixes: []interface{}{\n\t\t\t\t&ipv4PrefixSpecificationProperty{\n\t\t\t\t\tipv4Prefix: jsii.String(\"ipv4Prefix\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tipv6AddressCount: jsii.Number(123),\n\t\t\tipv6Addresses: []interface{}{\n\t\t\t\t&ipv6AddProperty{\n\t\t\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tipv6PrefixCount: jsii.Number(123),\n\t\t\tipv6Prefixes: []interface{}{\n\t\t\t\t&ipv6PrefixSpecificationProperty{\n\t\t\t\t\tipv6Prefix: jsii.String(\"ipv6Prefix\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tnetworkCardIndex: jsii.Number(123),\n\t\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t\tprivateIpAddresses: []interface{}{\n\t\t\t\t&privateIpAddProperty{\n\t\t\t\t\tprimary: jsii.Boolean(false),\n\t\t\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t},\n\t},\n\tplacement: &placementProperty{\n\t\taffinity: jsii.String(\"affinity\"),\n\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\tgroupName: jsii.String(\"groupName\"),\n\t\thostId: jsii.String(\"hostId\"),\n\t\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\t\tpartitionNumber: jsii.Number(123),\n\t\tspreadDomain: jsii.String(\"spreadDomain\"),\n\t\ttenancy: jsii.String(\"tenancy\"),\n\t},\n\tprivateDnsNameOptions: &privateDnsNameOptionsProperty{\n\t\tenableResourceNameDnsAaaaRecord: jsii.Boolean(false),\n\t\tenableResourceNameDnsARecord: jsii.Boolean(false),\n\t\thostnameType: jsii.String(\"hostnameType\"),\n\t},\n\tramDiskId: jsii.String(\"ramDiskId\"),\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\ttagSpecifications: []interface{}{\n\t\t&tagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tuserData: jsii.String(\"userData\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateDataProperty: ec2.CfnLaunchTemplate.LaunchTemplateDataProperty = {\n  blockDeviceMappings: [{\n    deviceName: 'deviceName',\n    ebs: {\n      deleteOnTermination: false,\n      encrypted: false,\n      iops: 123,\n      kmsKeyId: 'kmsKeyId',\n      snapshotId: 'snapshotId',\n      throughput: 123,\n      volumeSize: 123,\n      volumeType: 'volumeType',\n    },\n    noDevice: 'noDevice',\n    virtualName: 'virtualName',\n  }],\n  capacityReservationSpecification: {\n    capacityReservationPreference: 'capacityReservationPreference',\n    capacityReservationTarget: {\n      capacityReservationId: 'capacityReservationId',\n      capacityReservationResourceGroupArn: 'capacityReservationResourceGroupArn',\n    },\n  },\n  cpuOptions: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  creditSpecification: {\n    cpuCredits: 'cpuCredits',\n  },\n  disableApiTermination: false,\n  ebsOptimized: false,\n  elasticGpuSpecifications: [{\n    type: 'type',\n  }],\n  elasticInferenceAccelerators: [{\n    count: 123,\n    type: 'type',\n  }],\n  enclaveOptions: {\n    enabled: false,\n  },\n  hibernationOptions: {\n    configured: false,\n  },\n  iamInstanceProfile: {\n    arn: 'arn',\n    name: 'name',\n  },\n  imageId: 'imageId',\n  instanceInitiatedShutdownBehavior: 'instanceInitiatedShutdownBehavior',\n  instanceMarketOptions: {\n    marketType: 'marketType',\n    spotOptions: {\n      blockDurationMinutes: 123,\n      instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n      maxPrice: 'maxPrice',\n      spotInstanceType: 'spotInstanceType',\n      validUntil: 'validUntil',\n    },\n  },\n  instanceRequirements: {\n    acceleratorCount: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorManufacturers: ['acceleratorManufacturers'],\n    acceleratorNames: ['acceleratorNames'],\n    acceleratorTotalMemoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorTypes: ['acceleratorTypes'],\n    bareMetal: 'bareMetal',\n    baselineEbsBandwidthMbps: {\n      max: 123,\n      min: 123,\n    },\n    burstablePerformance: 'burstablePerformance',\n    cpuManufacturers: ['cpuManufacturers'],\n    excludedInstanceTypes: ['excludedInstanceTypes'],\n    instanceGenerations: ['instanceGenerations'],\n    localStorage: 'localStorage',\n    localStorageTypes: ['localStorageTypes'],\n    memoryGiBPerVCpu: {\n      max: 123,\n      min: 123,\n    },\n    memoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    networkInterfaceCount: {\n      max: 123,\n      min: 123,\n    },\n    onDemandMaxPricePercentageOverLowestPrice: 123,\n    requireHibernateSupport: false,\n    spotMaxPricePercentageOverLowestPrice: 123,\n    totalLocalStorageGb: {\n      max: 123,\n      min: 123,\n    },\n    vCpuCount: {\n      max: 123,\n      min: 123,\n    },\n  },\n  instanceType: 'instanceType',\n  kernelId: 'kernelId',\n  keyName: 'keyName',\n  licenseSpecifications: [{\n    licenseConfigurationArn: 'licenseConfigurationArn',\n  }],\n  maintenanceOptions: {\n    autoRecovery: 'autoRecovery',\n  },\n  metadataOptions: {\n    httpEndpoint: 'httpEndpoint',\n    httpProtocolIpv6: 'httpProtocolIpv6',\n    httpPutResponseHopLimit: 123,\n    httpTokens: 'httpTokens',\n    instanceMetadataTags: 'instanceMetadataTags',\n  },\n  monitoring: {\n    enabled: false,\n  },\n  networkInterfaces: [{\n    associateCarrierIpAddress: false,\n    associatePublicIpAddress: false,\n    deleteOnTermination: false,\n    description: 'description',\n    deviceIndex: 123,\n    groups: ['groups'],\n    interfaceType: 'interfaceType',\n    ipv4PrefixCount: 123,\n    ipv4Prefixes: [{\n      ipv4Prefix: 'ipv4Prefix',\n    }],\n    ipv6AddressCount: 123,\n    ipv6Addresses: [{\n      ipv6Address: 'ipv6Address',\n    }],\n    ipv6PrefixCount: 123,\n    ipv6Prefixes: [{\n      ipv6Prefix: 'ipv6Prefix',\n    }],\n    networkCardIndex: 123,\n    networkInterfaceId: 'networkInterfaceId',\n    privateIpAddress: 'privateIpAddress',\n    privateIpAddresses: [{\n      primary: false,\n      privateIpAddress: 'privateIpAddress',\n    }],\n    secondaryPrivateIpAddressCount: 123,\n    subnetId: 'subnetId',\n  }],\n  placement: {\n    affinity: 'affinity',\n    availabilityZone: 'availabilityZone',\n    groupName: 'groupName',\n    hostId: 'hostId',\n    hostResourceGroupArn: 'hostResourceGroupArn',\n    partitionNumber: 123,\n    spreadDomain: 'spreadDomain',\n    tenancy: 'tenancy',\n  },\n  privateDnsNameOptions: {\n    enableResourceNameDnsAaaaRecord: false,\n    enableResourceNameDnsARecord: false,\n    hostnameType: 'hostnameType',\n  },\n  ramDiskId: 'ramDiskId',\n  securityGroupIds: ['securityGroupIds'],\n  securityGroups: ['securityGroups'],\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  userData: 'userData',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.LaunchTemplateDataProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.LaunchTemplateDataProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateDataProperty: ec2.CfnLaunchTemplate.LaunchTemplateDataProperty = {\n  blockDeviceMappings: [{\n    deviceName: 'deviceName',\n    ebs: {\n      deleteOnTermination: false,\n      encrypted: false,\n      iops: 123,\n      kmsKeyId: 'kmsKeyId',\n      snapshotId: 'snapshotId',\n      throughput: 123,\n      volumeSize: 123,\n      volumeType: 'volumeType',\n    },\n    noDevice: 'noDevice',\n    virtualName: 'virtualName',\n  }],\n  capacityReservationSpecification: {\n    capacityReservationPreference: 'capacityReservationPreference',\n    capacityReservationTarget: {\n      capacityReservationId: 'capacityReservationId',\n      capacityReservationResourceGroupArn: 'capacityReservationResourceGroupArn',\n    },\n  },\n  cpuOptions: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  creditSpecification: {\n    cpuCredits: 'cpuCredits',\n  },\n  disableApiTermination: false,\n  ebsOptimized: false,\n  elasticGpuSpecifications: [{\n    type: 'type',\n  }],\n  elasticInferenceAccelerators: [{\n    count: 123,\n    type: 'type',\n  }],\n  enclaveOptions: {\n    enabled: false,\n  },\n  hibernationOptions: {\n    configured: false,\n  },\n  iamInstanceProfile: {\n    arn: 'arn',\n    name: 'name',\n  },\n  imageId: 'imageId',\n  instanceInitiatedShutdownBehavior: 'instanceInitiatedShutdownBehavior',\n  instanceMarketOptions: {\n    marketType: 'marketType',\n    spotOptions: {\n      blockDurationMinutes: 123,\n      instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n      maxPrice: 'maxPrice',\n      spotInstanceType: 'spotInstanceType',\n      validUntil: 'validUntil',\n    },\n  },\n  instanceRequirements: {\n    acceleratorCount: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorManufacturers: ['acceleratorManufacturers'],\n    acceleratorNames: ['acceleratorNames'],\n    acceleratorTotalMemoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorTypes: ['acceleratorTypes'],\n    bareMetal: 'bareMetal',\n    baselineEbsBandwidthMbps: {\n      max: 123,\n      min: 123,\n    },\n    burstablePerformance: 'burstablePerformance',\n    cpuManufacturers: ['cpuManufacturers'],\n    excludedInstanceTypes: ['excludedInstanceTypes'],\n    instanceGenerations: ['instanceGenerations'],\n    localStorage: 'localStorage',\n    localStorageTypes: ['localStorageTypes'],\n    memoryGiBPerVCpu: {\n      max: 123,\n      min: 123,\n    },\n    memoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    networkInterfaceCount: {\n      max: 123,\n      min: 123,\n    },\n    onDemandMaxPricePercentageOverLowestPrice: 123,\n    requireHibernateSupport: false,\n    spotMaxPricePercentageOverLowestPrice: 123,\n    totalLocalStorageGb: {\n      max: 123,\n      min: 123,\n    },\n    vCpuCount: {\n      max: 123,\n      min: 123,\n    },\n  },\n  instanceType: 'instanceType',\n  kernelId: 'kernelId',\n  keyName: 'keyName',\n  licenseSpecifications: [{\n    licenseConfigurationArn: 'licenseConfigurationArn',\n  }],\n  maintenanceOptions: {\n    autoRecovery: 'autoRecovery',\n  },\n  metadataOptions: {\n    httpEndpoint: 'httpEndpoint',\n    httpProtocolIpv6: 'httpProtocolIpv6',\n    httpPutResponseHopLimit: 123,\n    httpTokens: 'httpTokens',\n    instanceMetadataTags: 'instanceMetadataTags',\n  },\n  monitoring: {\n    enabled: false,\n  },\n  networkInterfaces: [{\n    associateCarrierIpAddress: false,\n    associatePublicIpAddress: false,\n    deleteOnTermination: false,\n    description: 'description',\n    deviceIndex: 123,\n    groups: ['groups'],\n    interfaceType: 'interfaceType',\n    ipv4PrefixCount: 123,\n    ipv4Prefixes: [{\n      ipv4Prefix: 'ipv4Prefix',\n    }],\n    ipv6AddressCount: 123,\n    ipv6Addresses: [{\n      ipv6Address: 'ipv6Address',\n    }],\n    ipv6PrefixCount: 123,\n    ipv6Prefixes: [{\n      ipv6Prefix: 'ipv6Prefix',\n    }],\n    networkCardIndex: 123,\n    networkInterfaceId: 'networkInterfaceId',\n    privateIpAddress: 'privateIpAddress',\n    privateIpAddresses: [{\n      primary: false,\n      privateIpAddress: 'privateIpAddress',\n    }],\n    secondaryPrivateIpAddressCount: 123,\n    subnetId: 'subnetId',\n  }],\n  placement: {\n    affinity: 'affinity',\n    availabilityZone: 'availabilityZone',\n    groupName: 'groupName',\n    hostId: 'hostId',\n    hostResourceGroupArn: 'hostResourceGroupArn',\n    partitionNumber: 123,\n    spreadDomain: 'spreadDomain',\n    tenancy: 'tenancy',\n  },\n  privateDnsNameOptions: {\n    enableResourceNameDnsAaaaRecord: false,\n    enableResourceNameDnsARecord: false,\n    hostnameType: 'hostnameType',\n  },\n  ramDiskId: 'ramDiskId',\n  securityGroupIds: ['securityGroupIds'],\n  securityGroups: ['securityGroups'],\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  userData: 'userData',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 33,
        "10": 66,
        "75": 152,
        "91": 14,
        "153": 2,
        "169": 1,
        "192": 21,
        "193": 36,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 147,
        "290": 1
      },
      "fqnsFingerprint": "de8e9c0e33f63caa458760dd63a23e5b677221b8eff483564e1deb05d221d5af"
    },
    "de22d9297bcd10e2bd315a5a9b76b7a2e78b85ec198ef8f32d98602b5fb8a94d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_elastic_inference_accelerator_property = ec2.CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty(\n    count=123,\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateElasticInferenceAcceleratorProperty launchTemplateElasticInferenceAcceleratorProperty = new LaunchTemplateElasticInferenceAcceleratorProperty {\n    Count = 123,\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateElasticInferenceAcceleratorProperty launchTemplateElasticInferenceAcceleratorProperty = LaunchTemplateElasticInferenceAcceleratorProperty.builder()\n        .count(123)\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateElasticInferenceAcceleratorProperty := &launchTemplateElasticInferenceAcceleratorProperty{\n\tcount: jsii.Number(123),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateElasticInferenceAcceleratorProperty: ec2.CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty = {\n  count: 123,\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateElasticInferenceAcceleratorProperty: ec2.CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty = {\n  count: 123,\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c584910014c7adc52a447d805235fdc8d42ce64f1121d4e74482f4d2e4047c1b"
    },
    "150f08c16f06cf6c3eb051115b0469b97c250ec34e6233be200e88bd1dfc9f5c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_tag_specification_property = ec2.CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty(\n    resource_type=\"resourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateTagSpecificationProperty launchTemplateTagSpecificationProperty = new LaunchTemplateTagSpecificationProperty {\n    ResourceType = \"resourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateTagSpecificationProperty launchTemplateTagSpecificationProperty = LaunchTemplateTagSpecificationProperty.builder()\n        .resourceType(\"resourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateTagSpecificationProperty := &launchTemplateTagSpecificationProperty{\n\tresourceType: jsii.String(\"resourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateTagSpecificationProperty: ec2.CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateTagSpecificationProperty: ec2.CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "30a001d823dc30630560ec817e6b8a4f253ef3df1c9f0812972c31a69e3c6d28"
    },
    "4f273d5bc736fa075cff4ef3eda605b4d57ab1fe50619b016cf67c8af698852c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlicense_specification_property = ec2.CfnLaunchTemplate.LicenseSpecificationProperty(\n    license_configuration_arn=\"licenseConfigurationArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLicenseSpecificationProperty licenseSpecificationProperty = new LicenseSpecificationProperty {\n    LicenseConfigurationArn = \"licenseConfigurationArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLicenseSpecificationProperty licenseSpecificationProperty = LicenseSpecificationProperty.builder()\n        .licenseConfigurationArn(\"licenseConfigurationArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlicenseSpecificationProperty := &licenseSpecificationProperty{\n\tlicenseConfigurationArn: jsii.String(\"licenseConfigurationArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst licenseSpecificationProperty: ec2.CfnLaunchTemplate.LicenseSpecificationProperty = {\n  licenseConfigurationArn: 'licenseConfigurationArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.LicenseSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.LicenseSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst licenseSpecificationProperty: ec2.CfnLaunchTemplate.LicenseSpecificationProperty = {\n  licenseConfigurationArn: 'licenseConfigurationArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6e4a6fefcebfef891544ce5dbcb0549fd77e4bfe09fe659c7bbaa5534bce45c1"
    },
    "0feb38536029981053c179fd216dd7a74cdc7152078ab503125157738c867377": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmaintenance_options_property = ec2.CfnLaunchTemplate.MaintenanceOptionsProperty(\n    auto_recovery=\"autoRecovery\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMaintenanceOptionsProperty maintenanceOptionsProperty = new MaintenanceOptionsProperty {\n    AutoRecovery = \"autoRecovery\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMaintenanceOptionsProperty maintenanceOptionsProperty = MaintenanceOptionsProperty.builder()\n        .autoRecovery(\"autoRecovery\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmaintenanceOptionsProperty := &maintenanceOptionsProperty{\n\tautoRecovery: jsii.String(\"autoRecovery\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst maintenanceOptionsProperty: ec2.CfnLaunchTemplate.MaintenanceOptionsProperty = {\n  autoRecovery: 'autoRecovery',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.MaintenanceOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.MaintenanceOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst maintenanceOptionsProperty: ec2.CfnLaunchTemplate.MaintenanceOptionsProperty = {\n  autoRecovery: 'autoRecovery',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "209b040f76c98585ab93aa1d609bf64695101742819477ccd035536fc9a2d0aa"
    },
    "565322f88ffb1091b0917b232030278da47c4322f0d0807dc064eb17cf5fdd0f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmemory_gi_bPer_vCpu_property = ec2.CfnLaunchTemplate.MemoryGiBPerVCpuProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMemoryGiBPerVCpuProperty memoryGiBPerVCpuProperty = new MemoryGiBPerVCpuProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMemoryGiBPerVCpuProperty memoryGiBPerVCpuProperty = MemoryGiBPerVCpuProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmemoryGiBPerVCpuProperty := &memoryGiBPerVCpuProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst memoryGiBPerVCpuProperty: ec2.CfnLaunchTemplate.MemoryGiBPerVCpuProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.MemoryGiBPerVCpuProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.MemoryGiBPerVCpuProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst memoryGiBPerVCpuProperty: ec2.CfnLaunchTemplate.MemoryGiBPerVCpuProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "739af673fb5c97fb2036017cf24f75e6f420906a17ba1dd5007fdeea4aa09410"
    },
    "84d4c27b6fd22673739d086caab6724e236799421173ee7d7e1093f0f856c482": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmemory_mi_bProperty = ec2.CfnLaunchTemplate.MemoryMiBProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMemoryMiBProperty memoryMiBProperty = new MemoryMiBProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMemoryMiBProperty memoryMiBProperty = MemoryMiBProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmemoryMiBProperty := &memoryMiBProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst memoryMiBProperty: ec2.CfnLaunchTemplate.MemoryMiBProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.MemoryMiBProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.MemoryMiBProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst memoryMiBProperty: ec2.CfnLaunchTemplate.MemoryMiBProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d852f10f03cab9625417d3c0aaf28ba68c05faa1251633a8a0eea4bf3d797d82"
    },
    "ee008a9f588f1f4d20004ca06ca833b90420d792860eab526c14825287f66a3d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmetadata_options_property = ec2.CfnLaunchTemplate.MetadataOptionsProperty(\n    http_endpoint=\"httpEndpoint\",\n    http_protocol_ipv6=\"httpProtocolIpv6\",\n    http_put_response_hop_limit=123,\n    http_tokens=\"httpTokens\",\n    instance_metadata_tags=\"instanceMetadataTags\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMetadataOptionsProperty metadataOptionsProperty = new MetadataOptionsProperty {\n    HttpEndpoint = \"httpEndpoint\",\n    HttpProtocolIpv6 = \"httpProtocolIpv6\",\n    HttpPutResponseHopLimit = 123,\n    HttpTokens = \"httpTokens\",\n    InstanceMetadataTags = \"instanceMetadataTags\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMetadataOptionsProperty metadataOptionsProperty = MetadataOptionsProperty.builder()\n        .httpEndpoint(\"httpEndpoint\")\n        .httpProtocolIpv6(\"httpProtocolIpv6\")\n        .httpPutResponseHopLimit(123)\n        .httpTokens(\"httpTokens\")\n        .instanceMetadataTags(\"instanceMetadataTags\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmetadataOptionsProperty := &metadataOptionsProperty{\n\thttpEndpoint: jsii.String(\"httpEndpoint\"),\n\thttpProtocolIpv6: jsii.String(\"httpProtocolIpv6\"),\n\thttpPutResponseHopLimit: jsii.Number(123),\n\thttpTokens: jsii.String(\"httpTokens\"),\n\tinstanceMetadataTags: jsii.String(\"instanceMetadataTags\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst metadataOptionsProperty: ec2.CfnLaunchTemplate.MetadataOptionsProperty = {\n  httpEndpoint: 'httpEndpoint',\n  httpProtocolIpv6: 'httpProtocolIpv6',\n  httpPutResponseHopLimit: 123,\n  httpTokens: 'httpTokens',\n  instanceMetadataTags: 'instanceMetadataTags',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.MetadataOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.MetadataOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metadataOptionsProperty: ec2.CfnLaunchTemplate.MetadataOptionsProperty = {\n  httpEndpoint: 'httpEndpoint',\n  httpProtocolIpv6: 'httpProtocolIpv6',\n  httpPutResponseHopLimit: 123,\n  httpTokens: 'httpTokens',\n  instanceMetadataTags: 'instanceMetadataTags',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "82220a3d159bc209e83086d038b6f4aa099044a9f455c63971d997d8095de42e"
    },
    "b1a2080b5812e3591f166bc2bdfd2239e2516639620a3fa0f4a2e6c2fcdff793": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmonitoring_property = ec2.CfnLaunchTemplate.MonitoringProperty(\n    enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMonitoringProperty monitoringProperty = new MonitoringProperty {\n    Enabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMonitoringProperty monitoringProperty = MonitoringProperty.builder()\n        .enabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmonitoringProperty := &monitoringProperty{\n\tenabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst monitoringProperty: ec2.CfnLaunchTemplate.MonitoringProperty = {\n  enabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.MonitoringProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.MonitoringProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst monitoringProperty: ec2.CfnLaunchTemplate.MonitoringProperty = {\n  enabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "352a0e1335ed24955e82f9fc2e22cc88f5ff7a06bd1ff85683ba0e449f42f8d4"
    },
    "82de1afe3f36e8a22d80d2ac5f355dfa8c25febb1611859f42ed1a021c962309": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nnetwork_interface_count_property = ec2.CfnLaunchTemplate.NetworkInterfaceCountProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNetworkInterfaceCountProperty networkInterfaceCountProperty = new NetworkInterfaceCountProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNetworkInterfaceCountProperty networkInterfaceCountProperty = NetworkInterfaceCountProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nnetworkInterfaceCountProperty := &networkInterfaceCountProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst networkInterfaceCountProperty: ec2.CfnLaunchTemplate.NetworkInterfaceCountProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.NetworkInterfaceCountProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.NetworkInterfaceCountProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkInterfaceCountProperty: ec2.CfnLaunchTemplate.NetworkInterfaceCountProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "629c3d7494c09bf71883a634857ce493cba7968554efc84566334d0a06574a97"
    },
    "03eb9fc468d5785a309b73cf509e98cb97e73bf3c75148e1412e985f559e5c29": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nnetwork_interface_property = ec2.CfnLaunchTemplate.NetworkInterfaceProperty(\n    associate_carrier_ip_address=False,\n    associate_public_ip_address=False,\n    delete_on_termination=False,\n    description=\"description\",\n    device_index=123,\n    groups=[\"groups\"],\n    interface_type=\"interfaceType\",\n    ipv4_prefix_count=123,\n    ipv4_prefixes=[ec2.CfnLaunchTemplate.Ipv4PrefixSpecificationProperty(\n        ipv4_prefix=\"ipv4Prefix\"\n    )],\n    ipv6_address_count=123,\n    ipv6_addresses=[ec2.CfnLaunchTemplate.Ipv6AddProperty(\n        ipv6_address=\"ipv6Address\"\n    )],\n    ipv6_prefix_count=123,\n    ipv6_prefixes=[ec2.CfnLaunchTemplate.Ipv6PrefixSpecificationProperty(\n        ipv6_prefix=\"ipv6Prefix\"\n    )],\n    network_card_index=123,\n    network_interface_id=\"networkInterfaceId\",\n    private_ip_address=\"privateIpAddress\",\n    private_ip_addresses=[ec2.CfnLaunchTemplate.PrivateIpAddProperty(\n        primary=False,\n        private_ip_address=\"privateIpAddress\"\n    )],\n    secondary_private_ip_address_count=123,\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNetworkInterfaceProperty networkInterfaceProperty = new NetworkInterfaceProperty {\n    AssociateCarrierIpAddress = false,\n    AssociatePublicIpAddress = false,\n    DeleteOnTermination = false,\n    Description = \"description\",\n    DeviceIndex = 123,\n    Groups = new [] { \"groups\" },\n    InterfaceType = \"interfaceType\",\n    Ipv4PrefixCount = 123,\n    Ipv4Prefixes = new [] { new Ipv4PrefixSpecificationProperty {\n        Ipv4Prefix = \"ipv4Prefix\"\n    } },\n    Ipv6AddressCount = 123,\n    Ipv6Addresses = new [] { new Ipv6AddProperty {\n        Ipv6Address = \"ipv6Address\"\n    } },\n    Ipv6PrefixCount = 123,\n    Ipv6Prefixes = new [] { new Ipv6PrefixSpecificationProperty {\n        Ipv6Prefix = \"ipv6Prefix\"\n    } },\n    NetworkCardIndex = 123,\n    NetworkInterfaceId = \"networkInterfaceId\",\n    PrivateIpAddress = \"privateIpAddress\",\n    PrivateIpAddresses = new [] { new PrivateIpAddProperty {\n        Primary = false,\n        PrivateIpAddress = \"privateIpAddress\"\n    } },\n    SecondaryPrivateIpAddressCount = 123,\n    SubnetId = \"subnetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNetworkInterfaceProperty networkInterfaceProperty = NetworkInterfaceProperty.builder()\n        .associateCarrierIpAddress(false)\n        .associatePublicIpAddress(false)\n        .deleteOnTermination(false)\n        .description(\"description\")\n        .deviceIndex(123)\n        .groups(List.of(\"groups\"))\n        .interfaceType(\"interfaceType\")\n        .ipv4PrefixCount(123)\n        .ipv4Prefixes(List.of(Ipv4PrefixSpecificationProperty.builder()\n                .ipv4Prefix(\"ipv4Prefix\")\n                .build()))\n        .ipv6AddressCount(123)\n        .ipv6Addresses(List.of(Ipv6AddProperty.builder()\n                .ipv6Address(\"ipv6Address\")\n                .build()))\n        .ipv6PrefixCount(123)\n        .ipv6Prefixes(List.of(Ipv6PrefixSpecificationProperty.builder()\n                .ipv6Prefix(\"ipv6Prefix\")\n                .build()))\n        .networkCardIndex(123)\n        .networkInterfaceId(\"networkInterfaceId\")\n        .privateIpAddress(\"privateIpAddress\")\n        .privateIpAddresses(List.of(PrivateIpAddProperty.builder()\n                .primary(false)\n                .privateIpAddress(\"privateIpAddress\")\n                .build()))\n        .secondaryPrivateIpAddressCount(123)\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nnetworkInterfaceProperty := &networkInterfaceProperty{\n\tassociateCarrierIpAddress: jsii.Boolean(false),\n\tassociatePublicIpAddress: jsii.Boolean(false),\n\tdeleteOnTermination: jsii.Boolean(false),\n\tdescription: jsii.String(\"description\"),\n\tdeviceIndex: jsii.Number(123),\n\tgroups: []*string{\n\t\tjsii.String(\"groups\"),\n\t},\n\tinterfaceType: jsii.String(\"interfaceType\"),\n\tipv4PrefixCount: jsii.Number(123),\n\tipv4Prefixes: []interface{}{\n\t\t&ipv4PrefixSpecificationProperty{\n\t\t\tipv4Prefix: jsii.String(\"ipv4Prefix\"),\n\t\t},\n\t},\n\tipv6AddressCount: jsii.Number(123),\n\tipv6Addresses: []interface{}{\n\t\t&ipv6AddProperty{\n\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t},\n\t},\n\tipv6PrefixCount: jsii.Number(123),\n\tipv6Prefixes: []interface{}{\n\t\t&ipv6PrefixSpecificationProperty{\n\t\t\tipv6Prefix: jsii.String(\"ipv6Prefix\"),\n\t\t},\n\t},\n\tnetworkCardIndex: jsii.Number(123),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\tprivateIpAddresses: []interface{}{\n\t\t&privateIpAddProperty{\n\t\t\tprimary: jsii.Boolean(false),\n\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t},\n\t},\n\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\tsubnetId: jsii.String(\"subnetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst networkInterfaceProperty: ec2.CfnLaunchTemplate.NetworkInterfaceProperty = {\n  associateCarrierIpAddress: false,\n  associatePublicIpAddress: false,\n  deleteOnTermination: false,\n  description: 'description',\n  deviceIndex: 123,\n  groups: ['groups'],\n  interfaceType: 'interfaceType',\n  ipv4PrefixCount: 123,\n  ipv4Prefixes: [{\n    ipv4Prefix: 'ipv4Prefix',\n  }],\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  ipv6PrefixCount: 123,\n  ipv6Prefixes: [{\n    ipv6Prefix: 'ipv6Prefix',\n  }],\n  networkCardIndex: 123,\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddress: 'privateIpAddress',\n  privateIpAddresses: [{\n    primary: false,\n    privateIpAddress: 'privateIpAddress',\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  subnetId: 'subnetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.NetworkInterfaceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.NetworkInterfaceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkInterfaceProperty: ec2.CfnLaunchTemplate.NetworkInterfaceProperty = {\n  associateCarrierIpAddress: false,\n  associatePublicIpAddress: false,\n  deleteOnTermination: false,\n  description: 'description',\n  deviceIndex: 123,\n  groups: ['groups'],\n  interfaceType: 'interfaceType',\n  ipv4PrefixCount: 123,\n  ipv4Prefixes: [{\n    ipv4Prefix: 'ipv4Prefix',\n  }],\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  ipv6PrefixCount: 123,\n  ipv6Prefixes: [{\n    ipv6Prefix: 'ipv6Prefix',\n  }],\n  networkCardIndex: 123,\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddress: 'privateIpAddress',\n  privateIpAddresses: [{\n    primary: false,\n    privateIpAddress: 'privateIpAddress',\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  subnetId: 'subnetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 11,
        "75": 29,
        "91": 4,
        "153": 2,
        "169": 1,
        "192": 5,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "a1d2281277f878b1007c99128264ad4f2206db6fe1b0fbecc118465c905181bb"
    },
    "05577ff03f64c858fa979fae763731fa4f7d8054ddb94c4a5457c838484c06d9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nplacement_property = ec2.CfnLaunchTemplate.PlacementProperty(\n    affinity=\"affinity\",\n    availability_zone=\"availabilityZone\",\n    group_name=\"groupName\",\n    host_id=\"hostId\",\n    host_resource_group_arn=\"hostResourceGroupArn\",\n    partition_number=123,\n    spread_domain=\"spreadDomain\",\n    tenancy=\"tenancy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPlacementProperty placementProperty = new PlacementProperty {\n    Affinity = \"affinity\",\n    AvailabilityZone = \"availabilityZone\",\n    GroupName = \"groupName\",\n    HostId = \"hostId\",\n    HostResourceGroupArn = \"hostResourceGroupArn\",\n    PartitionNumber = 123,\n    SpreadDomain = \"spreadDomain\",\n    Tenancy = \"tenancy\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPlacementProperty placementProperty = PlacementProperty.builder()\n        .affinity(\"affinity\")\n        .availabilityZone(\"availabilityZone\")\n        .groupName(\"groupName\")\n        .hostId(\"hostId\")\n        .hostResourceGroupArn(\"hostResourceGroupArn\")\n        .partitionNumber(123)\n        .spreadDomain(\"spreadDomain\")\n        .tenancy(\"tenancy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nplacementProperty := &placementProperty{\n\taffinity: jsii.String(\"affinity\"),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tgroupName: jsii.String(\"groupName\"),\n\thostId: jsii.String(\"hostId\"),\n\thostResourceGroupArn: jsii.String(\"hostResourceGroupArn\"),\n\tpartitionNumber: jsii.Number(123),\n\tspreadDomain: jsii.String(\"spreadDomain\"),\n\ttenancy: jsii.String(\"tenancy\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst placementProperty: ec2.CfnLaunchTemplate.PlacementProperty = {\n  affinity: 'affinity',\n  availabilityZone: 'availabilityZone',\n  groupName: 'groupName',\n  hostId: 'hostId',\n  hostResourceGroupArn: 'hostResourceGroupArn',\n  partitionNumber: 123,\n  spreadDomain: 'spreadDomain',\n  tenancy: 'tenancy',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.PlacementProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.PlacementProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst placementProperty: ec2.CfnLaunchTemplate.PlacementProperty = {\n  affinity: 'affinity',\n  availabilityZone: 'availabilityZone',\n  groupName: 'groupName',\n  hostId: 'hostId',\n  hostResourceGroupArn: 'hostResourceGroupArn',\n  partitionNumber: 123,\n  spreadDomain: 'spreadDomain',\n  tenancy: 'tenancy',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 13,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "8c2ea73a5bab4de8fb241c22615f69fb719477814c2d0138eea220c975394950"
    },
    "d30375f4affa86399f1a6423e43dc3127c2fb0cc6095b7e5a4dc4819921cdb1e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_dns_name_options_property = ec2.CfnLaunchTemplate.PrivateDnsNameOptionsProperty(\n    enable_resource_name_dns_aaaa_record=False,\n    enable_resource_name_dns_aRecord=False,\n    hostname_type=\"hostnameType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateDnsNameOptionsProperty privateDnsNameOptionsProperty = new PrivateDnsNameOptionsProperty {\n    EnableResourceNameDnsAaaaRecord = false,\n    EnableResourceNameDnsARecord = false,\n    HostnameType = \"hostnameType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateDnsNameOptionsProperty privateDnsNameOptionsProperty = PrivateDnsNameOptionsProperty.builder()\n        .enableResourceNameDnsAaaaRecord(false)\n        .enableResourceNameDnsARecord(false)\n        .hostnameType(\"hostnameType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateDnsNameOptionsProperty := &privateDnsNameOptionsProperty{\n\tenableResourceNameDnsAaaaRecord: jsii.Boolean(false),\n\tenableResourceNameDnsARecord: jsii.Boolean(false),\n\thostnameType: jsii.String(\"hostnameType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateDnsNameOptionsProperty: ec2.CfnLaunchTemplate.PrivateDnsNameOptionsProperty = {\n  enableResourceNameDnsAaaaRecord: false,\n  enableResourceNameDnsARecord: false,\n  hostnameType: 'hostnameType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.PrivateDnsNameOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.PrivateDnsNameOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateDnsNameOptionsProperty: ec2.CfnLaunchTemplate.PrivateDnsNameOptionsProperty = {\n  enableResourceNameDnsAaaaRecord: false,\n  enableResourceNameDnsARecord: false,\n  hostnameType: 'hostnameType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d64c9a78d1277d41d9ce2b9184111c7e687d6217fa4e244d385aa1022dc2f220"
    },
    "99a00374d4f862367db8fc3cc5bc6af6a25a6f91f696c9cee19f28c630a64170": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_ip_add_property = ec2.CfnLaunchTemplate.PrivateIpAddProperty(\n    primary=False,\n    private_ip_address=\"privateIpAddress\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateIpAddProperty privateIpAddProperty = new PrivateIpAddProperty {\n    Primary = false,\n    PrivateIpAddress = \"privateIpAddress\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateIpAddProperty privateIpAddProperty = PrivateIpAddProperty.builder()\n        .primary(false)\n        .privateIpAddress(\"privateIpAddress\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateIpAddProperty := &privateIpAddProperty{\n\tprimary: jsii.Boolean(false),\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateIpAddProperty: ec2.CfnLaunchTemplate.PrivateIpAddProperty = {\n  primary: false,\n  privateIpAddress: 'privateIpAddress',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.PrivateIpAddProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.PrivateIpAddProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateIpAddProperty: ec2.CfnLaunchTemplate.PrivateIpAddProperty = {\n  primary: false,\n  privateIpAddress: 'privateIpAddress',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8bcb33264e5598be0c93c681bee31204ed34daf4abec937362c8a710a4edc490"
    },
    "d74e71376d60430e888ccf81cb74f84a4e763fa8cd4771bd9d9c1e06ea6ae0f9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_options_property = ec2.CfnLaunchTemplate.SpotOptionsProperty(\n    block_duration_minutes=123,\n    instance_interruption_behavior=\"instanceInterruptionBehavior\",\n    max_price=\"maxPrice\",\n    spot_instance_type=\"spotInstanceType\",\n    valid_until=\"validUntil\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotOptionsProperty spotOptionsProperty = new SpotOptionsProperty {\n    BlockDurationMinutes = 123,\n    InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n    MaxPrice = \"maxPrice\",\n    SpotInstanceType = \"spotInstanceType\",\n    ValidUntil = \"validUntil\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotOptionsProperty spotOptionsProperty = SpotOptionsProperty.builder()\n        .blockDurationMinutes(123)\n        .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n        .maxPrice(\"maxPrice\")\n        .spotInstanceType(\"spotInstanceType\")\n        .validUntil(\"validUntil\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotOptionsProperty := &spotOptionsProperty{\n\tblockDurationMinutes: jsii.Number(123),\n\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\tmaxPrice: jsii.String(\"maxPrice\"),\n\tspotInstanceType: jsii.String(\"spotInstanceType\"),\n\tvalidUntil: jsii.String(\"validUntil\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotOptionsProperty: ec2.CfnLaunchTemplate.SpotOptionsProperty = {\n  blockDurationMinutes: 123,\n  instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n  maxPrice: 'maxPrice',\n  spotInstanceType: 'spotInstanceType',\n  validUntil: 'validUntil',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.SpotOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.SpotOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotOptionsProperty: ec2.CfnLaunchTemplate.SpotOptionsProperty = {\n  blockDurationMinutes: 123,\n  instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n  maxPrice: 'maxPrice',\n  spotInstanceType: 'spotInstanceType',\n  validUntil: 'validUntil',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e7427a037db53bf41783f0b3250a6fcfb8006d798a12e16f657db86b7c306cf5"
    },
    "f2c15342881b0a1639e5f7992ab4c5aef8ab5b6bf4e07ff2ac5550afcc4fe980": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntag_specification_property = ec2.CfnLaunchTemplate.TagSpecificationProperty(\n    resource_type=\"resourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTagSpecificationProperty tagSpecificationProperty = new TagSpecificationProperty {\n    ResourceType = \"resourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTagSpecificationProperty tagSpecificationProperty = TagSpecificationProperty.builder()\n        .resourceType(\"resourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntagSpecificationProperty := &tagSpecificationProperty{\n\tresourceType: jsii.String(\"resourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst tagSpecificationProperty: ec2.CfnLaunchTemplate.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.TagSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.TagSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagSpecificationProperty: ec2.CfnLaunchTemplate.TagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "50f52319f24482a7806ce89ca66a63f7a0976d3083d7c0c5e6cee0f35a7fa1a1"
    },
    "2ba6274afe51fbe290a3deb4d06557f9e727bd4610f6e2c93d06d9ab4a889b81": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntotal_local_storage_gBProperty = ec2.CfnLaunchTemplate.TotalLocalStorageGBProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTotalLocalStorageGBProperty totalLocalStorageGBProperty = new TotalLocalStorageGBProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTotalLocalStorageGBProperty totalLocalStorageGBProperty = TotalLocalStorageGBProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntotalLocalStorageGBProperty := &totalLocalStorageGBProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst totalLocalStorageGBProperty: ec2.CfnLaunchTemplate.TotalLocalStorageGBProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.TotalLocalStorageGBProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.TotalLocalStorageGBProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst totalLocalStorageGBProperty: ec2.CfnLaunchTemplate.TotalLocalStorageGBProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5f1afe598185827d6526a93041f5e267df221bbdda4875d325a29273705e2cee"
    },
    "cbeff27d4224d17db1f4090a386bbe2964b9cbfa7a1588cf3ad569be242acb28": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nv_cpu_count_property = ec2.CfnLaunchTemplate.VCpuCountProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nVCpuCountProperty vCpuCountProperty = new VCpuCountProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nVCpuCountProperty vCpuCountProperty = VCpuCountProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nvCpuCountProperty := &vCpuCountProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst vCpuCountProperty: ec2.CfnLaunchTemplate.VCpuCountProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate.VCpuCountProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate.VCpuCountProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vCpuCountProperty: ec2.CfnLaunchTemplate.VCpuCountProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "53ac4f01080c7bc4513f36f5de8e2f3be66b8440bfe127b2d5387779f1f325b7"
    },
    "1e3d906121cf4d2364982a85357a7edbdd4e2dd45e1cc82d9942b928fd108943": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n\nuser_data = \"\"\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n\"\"\"\nlt = ec2.CfnLaunchTemplate(self, \"LaunchTemplate\",\n    launch_template_data=ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n        instance_type=\"t3.small\",\n        user_data=Fn.base64(user_data)\n    )\n)\n\ncluster.add_nodegroup_capacity(\"extra-ng\",\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=lt.ref,\n        version=lt.attr_latest_version_number\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\nstring userData = @\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"\"==MYBOUNDARY==\"\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"\"us-ascii\"\"\n\n#!/bin/bash\necho \"\"Running custom user data script\"\"\n\n--==MYBOUNDARY==--\\\n\";\nCfnLaunchTemplate lt = new CfnLaunchTemplate(this, \"LaunchTemplate\", new CfnLaunchTemplateProps {\n    LaunchTemplateData = new LaunchTemplateDataProperty {\n        InstanceType = \"t3.small\",\n        UserData = Fn.Base64(userData)\n    }\n});\n\ncluster.AddNodegroupCapacity(\"extra-ng\", new NodegroupOptions {\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = lt.Ref,\n        Version = lt.AttrLatestVersionNumber\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\nString userData = \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\";\nCfnLaunchTemplate lt = CfnLaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .launchTemplateData(LaunchTemplateDataProperty.builder()\n                .instanceType(\"t3.small\")\n                .userData(Fn.base64(userData))\n                .build())\n        .build();\n\ncluster.addNodegroupCapacity(\"extra-ng\", NodegroupOptions.builder()\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(lt.getRef())\n                .version(lt.getAttrLatestVersionNumber())\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nuserData := \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\"\nlt := ec2.NewCfnLaunchTemplate(this, jsii.String(\"LaunchTemplate\"), &cfnLaunchTemplateProps{\n\tlaunchTemplateData: &launchTemplateDataProperty{\n\t\tinstanceType: jsii.String(\"t3.small\"),\n\t\tuserData: fn.base64(userData),\n\t},\n})\n\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng\"), &nodegroupOptions{\n\tlaunchTemplateSpec: &launchTemplateSpec{\n\t\tid: lt.ref,\n\t\tversion: lt.attrLatestVersionNumber,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate",
        "@aws-cdk/aws-ec2.CfnLaunchTemplate#attrLatestVersionNumber",
        "@aws-cdk/aws-ec2.CfnLaunchTemplateProps",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Fn#base64"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "75f95d684b90070a6a815a98461a178f257b181cece7dbe3a099e8b0da9fdc6f"
    },
    "4138cbb799f575777550b96178d0d5f7efca9e89f1e1f5fb29a5633a07ca4976": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_local_gateway_route = ec2.CfnLocalGatewayRoute(self, \"MyCfnLocalGatewayRoute\",\n    destination_cidr_block=\"destinationCidrBlock\",\n    local_gateway_route_table_id=\"localGatewayRouteTableId\",\n    local_gateway_virtual_interface_group_id=\"localGatewayVirtualInterfaceGroupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnLocalGatewayRoute cfnLocalGatewayRoute = new CfnLocalGatewayRoute(this, \"MyCfnLocalGatewayRoute\", new CfnLocalGatewayRouteProps {\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    LocalGatewayRouteTableId = \"localGatewayRouteTableId\",\n    LocalGatewayVirtualInterfaceGroupId = \"localGatewayVirtualInterfaceGroupId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnLocalGatewayRoute cfnLocalGatewayRoute = CfnLocalGatewayRoute.Builder.create(this, \"MyCfnLocalGatewayRoute\")\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .localGatewayRouteTableId(\"localGatewayRouteTableId\")\n        .localGatewayVirtualInterfaceGroupId(\"localGatewayVirtualInterfaceGroupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnLocalGatewayRoute := ec2.NewCfnLocalGatewayRoute(this, jsii.String(\"MyCfnLocalGatewayRoute\"), &cfnLocalGatewayRouteProps{\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\tlocalGatewayRouteTableId: jsii.String(\"localGatewayRouteTableId\"),\n\tlocalGatewayVirtualInterfaceGroupId: jsii.String(\"localGatewayVirtualInterfaceGroupId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnLocalGatewayRoute = new ec2.CfnLocalGatewayRoute(this, 'MyCfnLocalGatewayRoute', {\n  destinationCidrBlock: 'destinationCidrBlock',\n  localGatewayRouteTableId: 'localGatewayRouteTableId',\n  localGatewayVirtualInterfaceGroupId: 'localGatewayVirtualInterfaceGroupId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLocalGatewayRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLocalGatewayRoute",
        "@aws-cdk/aws-ec2.CfnLocalGatewayRouteProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLocalGatewayRoute = new ec2.CfnLocalGatewayRoute(this, 'MyCfnLocalGatewayRoute', {\n  destinationCidrBlock: 'destinationCidrBlock',\n  localGatewayRouteTableId: 'localGatewayRouteTableId',\n  localGatewayVirtualInterfaceGroupId: 'localGatewayVirtualInterfaceGroupId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7fccf9bf1ca35ec0436e0e7e6b1c23311d249af073b5635f28ab24f482096496"
    },
    "16310f2493ee06da7f9100e7701b274f09a6e3136d5a48c54700e6fe29235bc0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_local_gateway_route_props = ec2.CfnLocalGatewayRouteProps(\n    destination_cidr_block=\"destinationCidrBlock\",\n    local_gateway_route_table_id=\"localGatewayRouteTableId\",\n    local_gateway_virtual_interface_group_id=\"localGatewayVirtualInterfaceGroupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnLocalGatewayRouteProps cfnLocalGatewayRouteProps = new CfnLocalGatewayRouteProps {\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    LocalGatewayRouteTableId = \"localGatewayRouteTableId\",\n    LocalGatewayVirtualInterfaceGroupId = \"localGatewayVirtualInterfaceGroupId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnLocalGatewayRouteProps cfnLocalGatewayRouteProps = CfnLocalGatewayRouteProps.builder()\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .localGatewayRouteTableId(\"localGatewayRouteTableId\")\n        .localGatewayVirtualInterfaceGroupId(\"localGatewayVirtualInterfaceGroupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnLocalGatewayRouteProps := &cfnLocalGatewayRouteProps{\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\tlocalGatewayRouteTableId: jsii.String(\"localGatewayRouteTableId\"),\n\tlocalGatewayVirtualInterfaceGroupId: jsii.String(\"localGatewayVirtualInterfaceGroupId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnLocalGatewayRouteProps: ec2.CfnLocalGatewayRouteProps = {\n  destinationCidrBlock: 'destinationCidrBlock',\n  localGatewayRouteTableId: 'localGatewayRouteTableId',\n  localGatewayVirtualInterfaceGroupId: 'localGatewayVirtualInterfaceGroupId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLocalGatewayRouteProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLocalGatewayRouteProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLocalGatewayRouteProps: ec2.CfnLocalGatewayRouteProps = {\n  destinationCidrBlock: 'destinationCidrBlock',\n  localGatewayRouteTableId: 'localGatewayRouteTableId',\n  localGatewayVirtualInterfaceGroupId: 'localGatewayVirtualInterfaceGroupId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "dcd0d8d9e87d0583c64fedefea9496fd5d66fa39dbf27ce94f1107897136a8bf"
    },
    "c9e4c6a8dbec6321cb6ccf89e8d3fe445677331253838569650b0611b62010b5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_local_gateway_route_table_vPCAssociation = ec2.CfnLocalGatewayRouteTableVPCAssociation(self, \"MyCfnLocalGatewayRouteTableVPCAssociation\",\n    local_gateway_route_table_id=\"localGatewayRouteTableId\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnLocalGatewayRouteTableVPCAssociation cfnLocalGatewayRouteTableVPCAssociation = new CfnLocalGatewayRouteTableVPCAssociation(this, \"MyCfnLocalGatewayRouteTableVPCAssociation\", new CfnLocalGatewayRouteTableVPCAssociationProps {\n    LocalGatewayRouteTableId = \"localGatewayRouteTableId\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnLocalGatewayRouteTableVPCAssociation cfnLocalGatewayRouteTableVPCAssociation = CfnLocalGatewayRouteTableVPCAssociation.Builder.create(this, \"MyCfnLocalGatewayRouteTableVPCAssociation\")\n        .localGatewayRouteTableId(\"localGatewayRouteTableId\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnLocalGatewayRouteTableVPCAssociation := ec2.NewCfnLocalGatewayRouteTableVPCAssociation(this, jsii.String(\"MyCfnLocalGatewayRouteTableVPCAssociation\"), &cfnLocalGatewayRouteTableVPCAssociationProps{\n\tlocalGatewayRouteTableId: jsii.String(\"localGatewayRouteTableId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnLocalGatewayRouteTableVPCAssociation = new ec2.CfnLocalGatewayRouteTableVPCAssociation(this, 'MyCfnLocalGatewayRouteTableVPCAssociation', {\n  localGatewayRouteTableId: 'localGatewayRouteTableId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLocalGatewayRouteTableVPCAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLocalGatewayRouteTableVPCAssociation",
        "@aws-cdk/aws-ec2.CfnLocalGatewayRouteTableVPCAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLocalGatewayRouteTableVPCAssociation = new ec2.CfnLocalGatewayRouteTableVPCAssociation(this, 'MyCfnLocalGatewayRouteTableVPCAssociation', {\n  localGatewayRouteTableId: 'localGatewayRouteTableId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "3ae6bc32e37ff5ef0e5a0be40013724f58858025f625a50dbe65ba8d7fcf917c"
    },
    "e972901f3d6e9e2426956a683ccd7d9cff5a52c5e309f5bf5bd4c734578be710": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_local_gateway_route_table_vPCAssociation_props = ec2.CfnLocalGatewayRouteTableVPCAssociationProps(\n    local_gateway_route_table_id=\"localGatewayRouteTableId\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnLocalGatewayRouteTableVPCAssociationProps cfnLocalGatewayRouteTableVPCAssociationProps = new CfnLocalGatewayRouteTableVPCAssociationProps {\n    LocalGatewayRouteTableId = \"localGatewayRouteTableId\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnLocalGatewayRouteTableVPCAssociationProps cfnLocalGatewayRouteTableVPCAssociationProps = CfnLocalGatewayRouteTableVPCAssociationProps.builder()\n        .localGatewayRouteTableId(\"localGatewayRouteTableId\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnLocalGatewayRouteTableVPCAssociationProps := &cfnLocalGatewayRouteTableVPCAssociationProps{\n\tlocalGatewayRouteTableId: jsii.String(\"localGatewayRouteTableId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnLocalGatewayRouteTableVPCAssociationProps: ec2.CfnLocalGatewayRouteTableVPCAssociationProps = {\n  localGatewayRouteTableId: 'localGatewayRouteTableId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLocalGatewayRouteTableVPCAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLocalGatewayRouteTableVPCAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLocalGatewayRouteTableVPCAssociationProps: ec2.CfnLocalGatewayRouteTableVPCAssociationProps = {\n  localGatewayRouteTableId: 'localGatewayRouteTableId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "4b4c0c4280afa828d806ffd5b8153c8bbfb918c9674565e0c107d0e17942d3bb"
    },
    "728a5935075db81c08def34a0518b0f3516cd1bdcb359fa5fefbe205947d8e0e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_nat_gateway = ec2.CfnNatGateway(self, \"MyCfnNatGateway\",\n    subnet_id=\"subnetId\",\n\n    # the properties below are optional\n    allocation_id=\"allocationId\",\n    connectivity_type=\"connectivityType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNatGateway cfnNatGateway = new CfnNatGateway(this, \"MyCfnNatGateway\", new CfnNatGatewayProps {\n    SubnetId = \"subnetId\",\n\n    // the properties below are optional\n    AllocationId = \"allocationId\",\n    ConnectivityType = \"connectivityType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNatGateway cfnNatGateway = CfnNatGateway.Builder.create(this, \"MyCfnNatGateway\")\n        .subnetId(\"subnetId\")\n\n        // the properties below are optional\n        .allocationId(\"allocationId\")\n        .connectivityType(\"connectivityType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNatGateway := ec2.NewCfnNatGateway(this, jsii.String(\"MyCfnNatGateway\"), &cfnNatGatewayProps{\n\tsubnetId: jsii.String(\"subnetId\"),\n\n\t// the properties below are optional\n\tallocationId: jsii.String(\"allocationId\"),\n\tconnectivityType: jsii.String(\"connectivityType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNatGateway = new ec2.CfnNatGateway(this, 'MyCfnNatGateway', {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  allocationId: 'allocationId',\n  connectivityType: 'connectivityType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNatGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNatGateway",
        "@aws-cdk/aws-ec2.CfnNatGatewayProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNatGateway = new ec2.CfnNatGateway(this, 'MyCfnNatGateway', {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  allocationId: 'allocationId',\n  connectivityType: 'connectivityType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "b39d4a7f03dfb308c97bb5c811d03fac40793007ffc04633fa32cddc6e6644cb"
    },
    "6d6e72f878abfde1064e00088734dc215d7febfd5bb2eb257e9592c918f27dcb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_nat_gateway_props = ec2.CfnNatGatewayProps(\n    subnet_id=\"subnetId\",\n\n    # the properties below are optional\n    allocation_id=\"allocationId\",\n    connectivity_type=\"connectivityType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNatGatewayProps cfnNatGatewayProps = new CfnNatGatewayProps {\n    SubnetId = \"subnetId\",\n\n    // the properties below are optional\n    AllocationId = \"allocationId\",\n    ConnectivityType = \"connectivityType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNatGatewayProps cfnNatGatewayProps = CfnNatGatewayProps.builder()\n        .subnetId(\"subnetId\")\n\n        // the properties below are optional\n        .allocationId(\"allocationId\")\n        .connectivityType(\"connectivityType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNatGatewayProps := &cfnNatGatewayProps{\n\tsubnetId: jsii.String(\"subnetId\"),\n\n\t// the properties below are optional\n\tallocationId: jsii.String(\"allocationId\"),\n\tconnectivityType: jsii.String(\"connectivityType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNatGatewayProps: ec2.CfnNatGatewayProps = {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  allocationId: 'allocationId',\n  connectivityType: 'connectivityType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNatGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNatGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNatGatewayProps: ec2.CfnNatGatewayProps = {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  allocationId: 'allocationId',\n  connectivityType: 'connectivityType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c77915de3b1421b38d06a92ee45841fc570b503e7cad7bb7ee097d38d4b35e40"
    },
    "e5a82f61dc468cdeaa7d6e19d8fa04bb3460bb2874e72294a707fd658845f2e4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_acl = ec2.CfnNetworkAcl(self, \"MyCfnNetworkAcl\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkAcl cfnNetworkAcl = new CfnNetworkAcl(this, \"MyCfnNetworkAcl\", new CfnNetworkAclProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkAcl cfnNetworkAcl = CfnNetworkAcl.Builder.create(this, \"MyCfnNetworkAcl\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkAcl := ec2.NewCfnNetworkAcl(this, jsii.String(\"MyCfnNetworkAcl\"), &cfnNetworkAclProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkAcl = new ec2.CfnNetworkAcl(this, 'MyCfnNetworkAcl', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkAcl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkAcl",
        "@aws-cdk/aws-ec2.CfnNetworkAclProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkAcl = new ec2.CfnNetworkAcl(this, 'MyCfnNetworkAcl', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3e8d277bf4f31082ed55a94fcaaf4d11a6b172b75db7e72952e980c542636976"
    },
    "f2bf5663c6973e34617004f2d453c90ba9438e910cf24a283c258c037166efa5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_acl_entry = ec2.CfnNetworkAclEntry(self, \"MyCfnNetworkAclEntry\",\n    network_acl_id=\"networkAclId\",\n    protocol=123,\n    rule_action=\"ruleAction\",\n    rule_number=123,\n\n    # the properties below are optional\n    cidr_block=\"cidrBlock\",\n    egress=False,\n    icmp=ec2.CfnNetworkAclEntry.IcmpProperty(\n        code=123,\n        type=123\n    ),\n    ipv6_cidr_block=\"ipv6CidrBlock\",\n    port_range=ec2.CfnNetworkAclEntry.PortRangeProperty(\n        from=123,\n        to=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkAclEntry cfnNetworkAclEntry = new CfnNetworkAclEntry(this, \"MyCfnNetworkAclEntry\", new CfnNetworkAclEntryProps {\n    NetworkAclId = \"networkAclId\",\n    Protocol = 123,\n    RuleAction = \"ruleAction\",\n    RuleNumber = 123,\n\n    // the properties below are optional\n    CidrBlock = \"cidrBlock\",\n    Egress = false,\n    Icmp = new IcmpProperty {\n        Code = 123,\n        Type = 123\n    },\n    Ipv6CidrBlock = \"ipv6CidrBlock\",\n    PortRange = new PortRangeProperty {\n        From = 123,\n        To = 123\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkAclEntry cfnNetworkAclEntry = CfnNetworkAclEntry.Builder.create(this, \"MyCfnNetworkAclEntry\")\n        .networkAclId(\"networkAclId\")\n        .protocol(123)\n        .ruleAction(\"ruleAction\")\n        .ruleNumber(123)\n\n        // the properties below are optional\n        .cidrBlock(\"cidrBlock\")\n        .egress(false)\n        .icmp(IcmpProperty.builder()\n                .code(123)\n                .type(123)\n                .build())\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .portRange(PortRangeProperty.builder()\n                .from(123)\n                .to(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkAclEntry := ec2.NewCfnNetworkAclEntry(this, jsii.String(\"MyCfnNetworkAclEntry\"), &cfnNetworkAclEntryProps{\n\tnetworkAclId: jsii.String(\"networkAclId\"),\n\tprotocol: jsii.Number(123),\n\truleAction: jsii.String(\"ruleAction\"),\n\truleNumber: jsii.Number(123),\n\n\t// the properties below are optional\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tegress: jsii.Boolean(false),\n\ticmp: &icmpProperty{\n\t\tcode: jsii.Number(123),\n\t\ttype: jsii.Number(123),\n\t},\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n\tportRange: &portRangeProperty{\n\t\tfrom: jsii.Number(123),\n\t\tto: jsii.Number(123),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkAclEntry = new ec2.CfnNetworkAclEntry(this, 'MyCfnNetworkAclEntry', {\n  networkAclId: 'networkAclId',\n  protocol: 123,\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n\n  // the properties below are optional\n  cidrBlock: 'cidrBlock',\n  egress: false,\n  icmp: {\n    code: 123,\n    type: 123,\n  },\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkAclEntry"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkAclEntry",
        "@aws-cdk/aws-ec2.CfnNetworkAclEntryProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkAclEntry = new ec2.CfnNetworkAclEntry(this, 'MyCfnNetworkAclEntry', {\n  networkAclId: 'networkAclId',\n  protocol: 123,\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n\n  // the properties below are optional\n  cidrBlock: 'cidrBlock',\n  egress: false,\n  icmp: {\n    code: 123,\n    type: 123,\n  },\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 6,
        "75": 17,
        "91": 1,
        "104": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "5c1cdce3a95088012a6cda7fd1cd1e13756e10001e8c9c50c7f5ef79d40824b2"
    },
    "78674d33a3c8b7b39f2e532dae01fcf32dd832bd4ca485f8f3843f1da7408d3d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nicmp_property = ec2.CfnNetworkAclEntry.IcmpProperty(\n    code=123,\n    type=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIcmpProperty icmpProperty = new IcmpProperty {\n    Code = 123,\n    Type = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIcmpProperty icmpProperty = IcmpProperty.builder()\n        .code(123)\n        .type(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nicmpProperty := &icmpProperty{\n\tcode: jsii.Number(123),\n\ttype: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst icmpProperty: ec2.CfnNetworkAclEntry.IcmpProperty = {\n  code: 123,\n  type: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkAclEntry.IcmpProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkAclEntry.IcmpProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst icmpProperty: ec2.CfnNetworkAclEntry.IcmpProperty = {\n  code: 123,\n  type: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "46b7e6dd29fbeaa242b84c9415ce586e668a947d41b36a30e4b0e298753324fe"
    },
    "b760a5c07ed2a0d278f9e582ec15c20339d08fb8c97ddc1a17dde70c790c7715": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nport_range_property = ec2.CfnNetworkAclEntry.PortRangeProperty(\n    from=123,\n    to=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPortRangeProperty portRangeProperty = new PortRangeProperty {\n    From = 123,\n    To = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPortRangeProperty portRangeProperty = PortRangeProperty.builder()\n        .from(123)\n        .to(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nportRangeProperty := &portRangeProperty{\n\tfrom: jsii.Number(123),\n\tto: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst portRangeProperty: ec2.CfnNetworkAclEntry.PortRangeProperty = {\n  from: 123,\n  to: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkAclEntry.PortRangeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkAclEntry.PortRangeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst portRangeProperty: ec2.CfnNetworkAclEntry.PortRangeProperty = {\n  from: 123,\n  to: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "84d9e375d4136c1682f3ec90f9fd2231ed8e07c368171adf7ecc33c973360a29"
    },
    "2a161327b604a614fa1a1a468b078c5bbdb458cca1840ec9e0cf430e4a869b0c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_acl_entry_props = ec2.CfnNetworkAclEntryProps(\n    network_acl_id=\"networkAclId\",\n    protocol=123,\n    rule_action=\"ruleAction\",\n    rule_number=123,\n\n    # the properties below are optional\n    cidr_block=\"cidrBlock\",\n    egress=False,\n    icmp=ec2.CfnNetworkAclEntry.IcmpProperty(\n        code=123,\n        type=123\n    ),\n    ipv6_cidr_block=\"ipv6CidrBlock\",\n    port_range=ec2.CfnNetworkAclEntry.PortRangeProperty(\n        from=123,\n        to=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkAclEntryProps cfnNetworkAclEntryProps = new CfnNetworkAclEntryProps {\n    NetworkAclId = \"networkAclId\",\n    Protocol = 123,\n    RuleAction = \"ruleAction\",\n    RuleNumber = 123,\n\n    // the properties below are optional\n    CidrBlock = \"cidrBlock\",\n    Egress = false,\n    Icmp = new IcmpProperty {\n        Code = 123,\n        Type = 123\n    },\n    Ipv6CidrBlock = \"ipv6CidrBlock\",\n    PortRange = new PortRangeProperty {\n        From = 123,\n        To = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkAclEntryProps cfnNetworkAclEntryProps = CfnNetworkAclEntryProps.builder()\n        .networkAclId(\"networkAclId\")\n        .protocol(123)\n        .ruleAction(\"ruleAction\")\n        .ruleNumber(123)\n\n        // the properties below are optional\n        .cidrBlock(\"cidrBlock\")\n        .egress(false)\n        .icmp(IcmpProperty.builder()\n                .code(123)\n                .type(123)\n                .build())\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .portRange(PortRangeProperty.builder()\n                .from(123)\n                .to(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkAclEntryProps := &cfnNetworkAclEntryProps{\n\tnetworkAclId: jsii.String(\"networkAclId\"),\n\tprotocol: jsii.Number(123),\n\truleAction: jsii.String(\"ruleAction\"),\n\truleNumber: jsii.Number(123),\n\n\t// the properties below are optional\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tegress: jsii.Boolean(false),\n\ticmp: &icmpProperty{\n\t\tcode: jsii.Number(123),\n\t\ttype: jsii.Number(123),\n\t},\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n\tportRange: &portRangeProperty{\n\t\tfrom: jsii.Number(123),\n\t\tto: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkAclEntryProps: ec2.CfnNetworkAclEntryProps = {\n  networkAclId: 'networkAclId',\n  protocol: 123,\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n\n  // the properties below are optional\n  cidrBlock: 'cidrBlock',\n  egress: false,\n  icmp: {\n    code: 123,\n    type: 123,\n  },\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkAclEntryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkAclEntryProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkAclEntryProps: ec2.CfnNetworkAclEntryProps = {\n  networkAclId: 'networkAclId',\n  protocol: 123,\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n\n  // the properties below are optional\n  cidrBlock: 'cidrBlock',\n  egress: false,\n  icmp: {\n    code: 123,\n    type: 123,\n  },\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 5,
        "75": 17,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "1689d3f366736f0a31d7960bc5fc7a3a2198fbeaf7faf83130002c08ec221d29"
    },
    "382511e5e4fb47f5eb05fafd47b17b61a017e8ac8299731f880962651e14f9ed": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_acl_props = ec2.CfnNetworkAclProps(\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkAclProps cfnNetworkAclProps = new CfnNetworkAclProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkAclProps cfnNetworkAclProps = CfnNetworkAclProps.builder()\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkAclProps := &cfnNetworkAclProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkAclProps: ec2.CfnNetworkAclProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkAclProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkAclProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkAclProps: ec2.CfnNetworkAclProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "6183fc866cb7c1e31f26d03e91822d78a5d4af29d5c0ba70dcd0f83f78ed946a"
    },
    "93cbcb8621859d968c0b68964f3828a5e5724823735d0e1a67c524b2f8e2b720": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_insights_access_scope = ec2.CfnNetworkInsightsAccessScope(self, \"MyCfnNetworkInsightsAccessScope\",\n    exclude_paths=[ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty(\n        destination=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n            packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n                destination_addresses=[\"destinationAddresses\"],\n                destination_ports=[\"destinationPorts\"],\n                destination_prefix_lists=[\"destinationPrefixLists\"],\n                protocols=[\"protocols\"],\n                source_addresses=[\"sourceAddresses\"],\n                source_ports=[\"sourcePorts\"],\n                source_prefix_lists=[\"sourcePrefixLists\"]\n            ),\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        ),\n        source=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n            packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n                destination_addresses=[\"destinationAddresses\"],\n                destination_ports=[\"destinationPorts\"],\n                destination_prefix_lists=[\"destinationPrefixLists\"],\n                protocols=[\"protocols\"],\n                source_addresses=[\"sourceAddresses\"],\n                source_ports=[\"sourcePorts\"],\n                source_prefix_lists=[\"sourcePrefixLists\"]\n            ),\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        ),\n        through_resources=[ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty(\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        )]\n    )],\n    match_paths=[ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty(\n        destination=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n            packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n                destination_addresses=[\"destinationAddresses\"],\n                destination_ports=[\"destinationPorts\"],\n                destination_prefix_lists=[\"destinationPrefixLists\"],\n                protocols=[\"protocols\"],\n                source_addresses=[\"sourceAddresses\"],\n                source_ports=[\"sourcePorts\"],\n                source_prefix_lists=[\"sourcePrefixLists\"]\n            ),\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        ),\n        source=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n            packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n                destination_addresses=[\"destinationAddresses\"],\n                destination_ports=[\"destinationPorts\"],\n                destination_prefix_lists=[\"destinationPrefixLists\"],\n                protocols=[\"protocols\"],\n                source_addresses=[\"sourceAddresses\"],\n                source_ports=[\"sourcePorts\"],\n                source_prefix_lists=[\"sourcePrefixLists\"]\n            ),\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        ),\n        through_resources=[ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty(\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        )]\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInsightsAccessScope cfnNetworkInsightsAccessScope = new CfnNetworkInsightsAccessScope(this, \"MyCfnNetworkInsightsAccessScope\", new CfnNetworkInsightsAccessScopeProps {\n    ExcludePaths = new [] { new AccessScopePathRequestProperty {\n        Destination = new PathStatementRequestProperty {\n            PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n                DestinationAddresses = new [] { \"destinationAddresses\" },\n                DestinationPorts = new [] { \"destinationPorts\" },\n                DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n                Protocols = new [] { \"protocols\" },\n                SourceAddresses = new [] { \"sourceAddresses\" },\n                SourcePorts = new [] { \"sourcePorts\" },\n                SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n            },\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        },\n        Source = new PathStatementRequestProperty {\n            PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n                DestinationAddresses = new [] { \"destinationAddresses\" },\n                DestinationPorts = new [] { \"destinationPorts\" },\n                DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n                Protocols = new [] { \"protocols\" },\n                SourceAddresses = new [] { \"sourceAddresses\" },\n                SourcePorts = new [] { \"sourcePorts\" },\n                SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n            },\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        },\n        ThroughResources = new [] { new ThroughResourcesStatementRequestProperty {\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        } }\n    } },\n    MatchPaths = new [] { new AccessScopePathRequestProperty {\n        Destination = new PathStatementRequestProperty {\n            PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n                DestinationAddresses = new [] { \"destinationAddresses\" },\n                DestinationPorts = new [] { \"destinationPorts\" },\n                DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n                Protocols = new [] { \"protocols\" },\n                SourceAddresses = new [] { \"sourceAddresses\" },\n                SourcePorts = new [] { \"sourcePorts\" },\n                SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n            },\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        },\n        Source = new PathStatementRequestProperty {\n            PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n                DestinationAddresses = new [] { \"destinationAddresses\" },\n                DestinationPorts = new [] { \"destinationPorts\" },\n                DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n                Protocols = new [] { \"protocols\" },\n                SourceAddresses = new [] { \"sourceAddresses\" },\n                SourcePorts = new [] { \"sourcePorts\" },\n                SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n            },\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        },\n        ThroughResources = new [] { new ThroughResourcesStatementRequestProperty {\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        } }\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInsightsAccessScope cfnNetworkInsightsAccessScope = CfnNetworkInsightsAccessScope.Builder.create(this, \"MyCfnNetworkInsightsAccessScope\")\n        .excludePaths(List.of(AccessScopePathRequestProperty.builder()\n                .destination(PathStatementRequestProperty.builder()\n                        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                                .destinationAddresses(List.of(\"destinationAddresses\"))\n                                .destinationPorts(List.of(\"destinationPorts\"))\n                                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                                .protocols(List.of(\"protocols\"))\n                                .sourceAddresses(List.of(\"sourceAddresses\"))\n                                .sourcePorts(List.of(\"sourcePorts\"))\n                                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                                .build())\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build())\n                .source(PathStatementRequestProperty.builder()\n                        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                                .destinationAddresses(List.of(\"destinationAddresses\"))\n                                .destinationPorts(List.of(\"destinationPorts\"))\n                                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                                .protocols(List.of(\"protocols\"))\n                                .sourceAddresses(List.of(\"sourceAddresses\"))\n                                .sourcePorts(List.of(\"sourcePorts\"))\n                                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                                .build())\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build())\n                .throughResources(List.of(ThroughResourcesStatementRequestProperty.builder()\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build()))\n                .build()))\n        .matchPaths(List.of(AccessScopePathRequestProperty.builder()\n                .destination(PathStatementRequestProperty.builder()\n                        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                                .destinationAddresses(List.of(\"destinationAddresses\"))\n                                .destinationPorts(List.of(\"destinationPorts\"))\n                                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                                .protocols(List.of(\"protocols\"))\n                                .sourceAddresses(List.of(\"sourceAddresses\"))\n                                .sourcePorts(List.of(\"sourcePorts\"))\n                                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                                .build())\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build())\n                .source(PathStatementRequestProperty.builder()\n                        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                                .destinationAddresses(List.of(\"destinationAddresses\"))\n                                .destinationPorts(List.of(\"destinationPorts\"))\n                                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                                .protocols(List.of(\"protocols\"))\n                                .sourceAddresses(List.of(\"sourceAddresses\"))\n                                .sourcePorts(List.of(\"sourcePorts\"))\n                                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                                .build())\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build())\n                .throughResources(List.of(ThroughResourcesStatementRequestProperty.builder()\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build()))\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInsightsAccessScope := ec2.NewCfnNetworkInsightsAccessScope(this, jsii.String(\"MyCfnNetworkInsightsAccessScope\"), &cfnNetworkInsightsAccessScopeProps{\n\texcludePaths: []interface{}{\n\t\t&accessScopePathRequestProperty{\n\t\t\tdestination: &pathStatementRequestProperty{\n\t\t\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\t\t\tdestinationAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPorts: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t\tprotocols: []*string{\n\t\t\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourceAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePorts: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t},\n\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tsource: &pathStatementRequestProperty{\n\t\t\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\t\t\tdestinationAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPorts: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t\tprotocols: []*string{\n\t\t\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourceAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePorts: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t},\n\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tthroughResources: []interface{}{\n\t\t\t\t&throughResourcesStatementRequestProperty{\n\t\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tmatchPaths: []interface{}{\n\t\t&accessScopePathRequestProperty{\n\t\t\tdestination: &pathStatementRequestProperty{\n\t\t\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\t\t\tdestinationAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPorts: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t\tprotocols: []*string{\n\t\t\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourceAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePorts: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t},\n\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tsource: &pathStatementRequestProperty{\n\t\t\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\t\t\tdestinationAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPorts: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t\tprotocols: []*string{\n\t\t\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourceAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePorts: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t},\n\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tthroughResources: []interface{}{\n\t\t\t\t&throughResourcesStatementRequestProperty{\n\t\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInsightsAccessScope = new ec2.CfnNetworkInsightsAccessScope(this, 'MyCfnNetworkInsightsAccessScope', /* all optional props */ {\n  excludePaths: [{\n    destination: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    source: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    throughResources: [{\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    }],\n  }],\n  matchPaths: [{\n    destination: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    source: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    throughResources: [{\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope",
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScopeProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInsightsAccessScope = new ec2.CfnNetworkInsightsAccessScope(this, 'MyCfnNetworkInsightsAccessScope', /* all optional props */ {\n  excludePaths: [{\n    destination: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    source: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    throughResources: [{\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    }],\n  }],\n  matchPaths: [{\n    destination: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    source: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    throughResources: [{\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 44,
        "75": 65,
        "104": 1,
        "192": 45,
        "193": 20,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 61,
        "290": 1
      },
      "fqnsFingerprint": "b2bef297613355d1fab6e5698ccf1a0d9f2304307b6c88b2c2ada51a56a68917"
    },
    "97b043e9d2fb8b9354c9bec3328881683cea2c52e94137a44368a2d9c5111ded": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\naccess_scope_path_request_property = ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty(\n    destination=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n        packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n            destination_addresses=[\"destinationAddresses\"],\n            destination_ports=[\"destinationPorts\"],\n            destination_prefix_lists=[\"destinationPrefixLists\"],\n            protocols=[\"protocols\"],\n            source_addresses=[\"sourceAddresses\"],\n            source_ports=[\"sourcePorts\"],\n            source_prefix_lists=[\"sourcePrefixLists\"]\n        ),\n        resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n            resources=[\"resources\"],\n            resource_types=[\"resourceTypes\"]\n        )\n    ),\n    source=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n        packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n            destination_addresses=[\"destinationAddresses\"],\n            destination_ports=[\"destinationPorts\"],\n            destination_prefix_lists=[\"destinationPrefixLists\"],\n            protocols=[\"protocols\"],\n            source_addresses=[\"sourceAddresses\"],\n            source_ports=[\"sourcePorts\"],\n            source_prefix_lists=[\"sourcePrefixLists\"]\n        ),\n        resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n            resources=[\"resources\"],\n            resource_types=[\"resourceTypes\"]\n        )\n    ),\n    through_resources=[ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty(\n        resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n            resources=[\"resources\"],\n            resource_types=[\"resourceTypes\"]\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAccessScopePathRequestProperty accessScopePathRequestProperty = new AccessScopePathRequestProperty {\n    Destination = new PathStatementRequestProperty {\n        PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n            DestinationAddresses = new [] { \"destinationAddresses\" },\n            DestinationPorts = new [] { \"destinationPorts\" },\n            DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n            Protocols = new [] { \"protocols\" },\n            SourceAddresses = new [] { \"sourceAddresses\" },\n            SourcePorts = new [] { \"sourcePorts\" },\n            SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n        },\n        ResourceStatement = new ResourceStatementRequestProperty {\n            Resources = new [] { \"resources\" },\n            ResourceTypes = new [] { \"resourceTypes\" }\n        }\n    },\n    Source = new PathStatementRequestProperty {\n        PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n            DestinationAddresses = new [] { \"destinationAddresses\" },\n            DestinationPorts = new [] { \"destinationPorts\" },\n            DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n            Protocols = new [] { \"protocols\" },\n            SourceAddresses = new [] { \"sourceAddresses\" },\n            SourcePorts = new [] { \"sourcePorts\" },\n            SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n        },\n        ResourceStatement = new ResourceStatementRequestProperty {\n            Resources = new [] { \"resources\" },\n            ResourceTypes = new [] { \"resourceTypes\" }\n        }\n    },\n    ThroughResources = new [] { new ThroughResourcesStatementRequestProperty {\n        ResourceStatement = new ResourceStatementRequestProperty {\n            Resources = new [] { \"resources\" },\n            ResourceTypes = new [] { \"resourceTypes\" }\n        }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAccessScopePathRequestProperty accessScopePathRequestProperty = AccessScopePathRequestProperty.builder()\n        .destination(PathStatementRequestProperty.builder()\n                .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                        .destinationAddresses(List.of(\"destinationAddresses\"))\n                        .destinationPorts(List.of(\"destinationPorts\"))\n                        .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                        .protocols(List.of(\"protocols\"))\n                        .sourceAddresses(List.of(\"sourceAddresses\"))\n                        .sourcePorts(List.of(\"sourcePorts\"))\n                        .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                        .build())\n                .resourceStatement(ResourceStatementRequestProperty.builder()\n                        .resources(List.of(\"resources\"))\n                        .resourceTypes(List.of(\"resourceTypes\"))\n                        .build())\n                .build())\n        .source(PathStatementRequestProperty.builder()\n                .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                        .destinationAddresses(List.of(\"destinationAddresses\"))\n                        .destinationPorts(List.of(\"destinationPorts\"))\n                        .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                        .protocols(List.of(\"protocols\"))\n                        .sourceAddresses(List.of(\"sourceAddresses\"))\n                        .sourcePorts(List.of(\"sourcePorts\"))\n                        .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                        .build())\n                .resourceStatement(ResourceStatementRequestProperty.builder()\n                        .resources(List.of(\"resources\"))\n                        .resourceTypes(List.of(\"resourceTypes\"))\n                        .build())\n                .build())\n        .throughResources(List.of(ThroughResourcesStatementRequestProperty.builder()\n                .resourceStatement(ResourceStatementRequestProperty.builder()\n                        .resources(List.of(\"resources\"))\n                        .resourceTypes(List.of(\"resourceTypes\"))\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\naccessScopePathRequestProperty := &accessScopePathRequestProperty{\n\tdestination: &pathStatementRequestProperty{\n\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\tdestinationAddresses: []*string{\n\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t},\n\t\t\tdestinationPorts: []*string{\n\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t},\n\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t},\n\t\t\tprotocols: []*string{\n\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t},\n\t\t\tsourceAddresses: []*string{\n\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t},\n\t\t\tsourcePorts: []*string{\n\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t},\n\t\t\tsourcePrefixLists: []*string{\n\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t},\n\t\t},\n\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\tresources: []*string{\n\t\t\t\tjsii.String(\"resources\"),\n\t\t\t},\n\t\t\tresourceTypes: []*string{\n\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t},\n\t\t},\n\t},\n\tsource: &pathStatementRequestProperty{\n\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\tdestinationAddresses: []*string{\n\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t},\n\t\t\tdestinationPorts: []*string{\n\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t},\n\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t},\n\t\t\tprotocols: []*string{\n\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t},\n\t\t\tsourceAddresses: []*string{\n\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t},\n\t\t\tsourcePorts: []*string{\n\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t},\n\t\t\tsourcePrefixLists: []*string{\n\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t},\n\t\t},\n\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\tresources: []*string{\n\t\t\t\tjsii.String(\"resources\"),\n\t\t\t},\n\t\t\tresourceTypes: []*string{\n\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t},\n\t\t},\n\t},\n\tthroughResources: []interface{}{\n\t\t&throughResourcesStatementRequestProperty{\n\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\tresources: []*string{\n\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t},\n\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst accessScopePathRequestProperty: ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty = {\n  destination: {\n    packetHeaderStatement: {\n      destinationAddresses: ['destinationAddresses'],\n      destinationPorts: ['destinationPorts'],\n      destinationPrefixLists: ['destinationPrefixLists'],\n      protocols: ['protocols'],\n      sourceAddresses: ['sourceAddresses'],\n      sourcePorts: ['sourcePorts'],\n      sourcePrefixLists: ['sourcePrefixLists'],\n    },\n    resourceStatement: {\n      resources: ['resources'],\n      resourceTypes: ['resourceTypes'],\n    },\n  },\n  source: {\n    packetHeaderStatement: {\n      destinationAddresses: ['destinationAddresses'],\n      destinationPorts: ['destinationPorts'],\n      destinationPrefixLists: ['destinationPrefixLists'],\n      protocols: ['protocols'],\n      sourceAddresses: ['sourceAddresses'],\n      sourcePorts: ['sourcePorts'],\n      sourcePrefixLists: ['sourcePrefixLists'],\n    },\n    resourceStatement: {\n      resources: ['resources'],\n      resourceTypes: ['resourceTypes'],\n    },\n  },\n  throughResources: [{\n    resourceStatement: {\n      resources: ['resources'],\n      resourceTypes: ['resourceTypes'],\n    },\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessScopePathRequestProperty: ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty = {\n  destination: {\n    packetHeaderStatement: {\n      destinationAddresses: ['destinationAddresses'],\n      destinationPorts: ['destinationPorts'],\n      destinationPrefixLists: ['destinationPrefixLists'],\n      protocols: ['protocols'],\n      sourceAddresses: ['sourceAddresses'],\n      sourcePorts: ['sourcePorts'],\n      sourcePrefixLists: ['sourcePrefixLists'],\n    },\n    resourceStatement: {\n      resources: ['resources'],\n      resourceTypes: ['resourceTypes'],\n    },\n  },\n  source: {\n    packetHeaderStatement: {\n      destinationAddresses: ['destinationAddresses'],\n      destinationPorts: ['destinationPorts'],\n      destinationPrefixLists: ['destinationPrefixLists'],\n      protocols: ['protocols'],\n      sourceAddresses: ['sourceAddresses'],\n      sourcePorts: ['sourcePorts'],\n      sourcePrefixLists: ['sourcePrefixLists'],\n    },\n    resourceStatement: {\n      resources: ['resources'],\n      resourceTypes: ['resourceTypes'],\n    },\n  },\n  throughResources: [{\n    resourceStatement: {\n      resources: ['resources'],\n      resourceTypes: ['resourceTypes'],\n    },\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 21,
        "75": 33,
        "153": 2,
        "169": 1,
        "192": 21,
        "193": 9,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 28,
        "290": 1
      },
      "fqnsFingerprint": "69527926037b40d8ced4b5a73d45ab3a3513ae674bb25bb27eed8bb19413da63"
    },
    "866c388db4be3af39ffbe85a5c0ca715f5b41efd51c58db0a28ba4401a60b351": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\npacket_header_statement_request_property = ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n    destination_addresses=[\"destinationAddresses\"],\n    destination_ports=[\"destinationPorts\"],\n    destination_prefix_lists=[\"destinationPrefixLists\"],\n    protocols=[\"protocols\"],\n    source_addresses=[\"sourceAddresses\"],\n    source_ports=[\"sourcePorts\"],\n    source_prefix_lists=[\"sourcePrefixLists\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPacketHeaderStatementRequestProperty packetHeaderStatementRequestProperty = new PacketHeaderStatementRequestProperty {\n    DestinationAddresses = new [] { \"destinationAddresses\" },\n    DestinationPorts = new [] { \"destinationPorts\" },\n    DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n    Protocols = new [] { \"protocols\" },\n    SourceAddresses = new [] { \"sourceAddresses\" },\n    SourcePorts = new [] { \"sourcePorts\" },\n    SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPacketHeaderStatementRequestProperty packetHeaderStatementRequestProperty = PacketHeaderStatementRequestProperty.builder()\n        .destinationAddresses(List.of(\"destinationAddresses\"))\n        .destinationPorts(List.of(\"destinationPorts\"))\n        .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n        .protocols(List.of(\"protocols\"))\n        .sourceAddresses(List.of(\"sourceAddresses\"))\n        .sourcePorts(List.of(\"sourcePorts\"))\n        .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\npacketHeaderStatementRequestProperty := &packetHeaderStatementRequestProperty{\n\tdestinationAddresses: []*string{\n\t\tjsii.String(\"destinationAddresses\"),\n\t},\n\tdestinationPorts: []*string{\n\t\tjsii.String(\"destinationPorts\"),\n\t},\n\tdestinationPrefixLists: []*string{\n\t\tjsii.String(\"destinationPrefixLists\"),\n\t},\n\tprotocols: []*string{\n\t\tjsii.String(\"protocols\"),\n\t},\n\tsourceAddresses: []*string{\n\t\tjsii.String(\"sourceAddresses\"),\n\t},\n\tsourcePorts: []*string{\n\t\tjsii.String(\"sourcePorts\"),\n\t},\n\tsourcePrefixLists: []*string{\n\t\tjsii.String(\"sourcePrefixLists\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst packetHeaderStatementRequestProperty: ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty = {\n  destinationAddresses: ['destinationAddresses'],\n  destinationPorts: ['destinationPorts'],\n  destinationPrefixLists: ['destinationPrefixLists'],\n  protocols: ['protocols'],\n  sourceAddresses: ['sourceAddresses'],\n  sourcePorts: ['sourcePorts'],\n  sourcePrefixLists: ['sourcePrefixLists'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst packetHeaderStatementRequestProperty: ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty = {\n  destinationAddresses: ['destinationAddresses'],\n  destinationPorts: ['destinationPorts'],\n  destinationPrefixLists: ['destinationPrefixLists'],\n  protocols: ['protocols'],\n  sourceAddresses: ['sourceAddresses'],\n  sourcePorts: ['sourcePorts'],\n  sourcePrefixLists: ['sourcePrefixLists'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 12,
        "153": 2,
        "169": 1,
        "192": 7,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "3bcb9f3d787d3ee35682b8c50359062b593131a7e6f3817f357d83b2b00decff"
    },
    "481bbc7f14c18356b7e1185d91b1635d8462180e9ee7b4b0df01dad3a86fd4c2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\npath_statement_request_property = ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n    packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n        destination_addresses=[\"destinationAddresses\"],\n        destination_ports=[\"destinationPorts\"],\n        destination_prefix_lists=[\"destinationPrefixLists\"],\n        protocols=[\"protocols\"],\n        source_addresses=[\"sourceAddresses\"],\n        source_ports=[\"sourcePorts\"],\n        source_prefix_lists=[\"sourcePrefixLists\"]\n    ),\n    resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n        resources=[\"resources\"],\n        resource_types=[\"resourceTypes\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPathStatementRequestProperty pathStatementRequestProperty = new PathStatementRequestProperty {\n    PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n        DestinationAddresses = new [] { \"destinationAddresses\" },\n        DestinationPorts = new [] { \"destinationPorts\" },\n        DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n        Protocols = new [] { \"protocols\" },\n        SourceAddresses = new [] { \"sourceAddresses\" },\n        SourcePorts = new [] { \"sourcePorts\" },\n        SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n    },\n    ResourceStatement = new ResourceStatementRequestProperty {\n        Resources = new [] { \"resources\" },\n        ResourceTypes = new [] { \"resourceTypes\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPathStatementRequestProperty pathStatementRequestProperty = PathStatementRequestProperty.builder()\n        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                .destinationAddresses(List.of(\"destinationAddresses\"))\n                .destinationPorts(List.of(\"destinationPorts\"))\n                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                .protocols(List.of(\"protocols\"))\n                .sourceAddresses(List.of(\"sourceAddresses\"))\n                .sourcePorts(List.of(\"sourcePorts\"))\n                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                .build())\n        .resourceStatement(ResourceStatementRequestProperty.builder()\n                .resources(List.of(\"resources\"))\n                .resourceTypes(List.of(\"resourceTypes\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\npathStatementRequestProperty := &pathStatementRequestProperty{\n\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\tdestinationAddresses: []*string{\n\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t},\n\t\tdestinationPorts: []*string{\n\t\t\tjsii.String(\"destinationPorts\"),\n\t\t},\n\t\tdestinationPrefixLists: []*string{\n\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t},\n\t\tprotocols: []*string{\n\t\t\tjsii.String(\"protocols\"),\n\t\t},\n\t\tsourceAddresses: []*string{\n\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t},\n\t\tsourcePorts: []*string{\n\t\t\tjsii.String(\"sourcePorts\"),\n\t\t},\n\t\tsourcePrefixLists: []*string{\n\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t},\n\t},\n\tresourceStatement: &resourceStatementRequestProperty{\n\t\tresources: []*string{\n\t\t\tjsii.String(\"resources\"),\n\t\t},\n\t\tresourceTypes: []*string{\n\t\t\tjsii.String(\"resourceTypes\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst pathStatementRequestProperty: ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty = {\n  packetHeaderStatement: {\n    destinationAddresses: ['destinationAddresses'],\n    destinationPorts: ['destinationPorts'],\n    destinationPrefixLists: ['destinationPrefixLists'],\n    protocols: ['protocols'],\n    sourceAddresses: ['sourceAddresses'],\n    sourcePorts: ['sourcePorts'],\n    sourcePrefixLists: ['sourcePrefixLists'],\n  },\n  resourceStatement: {\n    resources: ['resources'],\n    resourceTypes: ['resourceTypes'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst pathStatementRequestProperty: ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty = {\n  packetHeaderStatement: {\n    destinationAddresses: ['destinationAddresses'],\n    destinationPorts: ['destinationPorts'],\n    destinationPrefixLists: ['destinationPrefixLists'],\n    protocols: ['protocols'],\n    sourceAddresses: ['sourceAddresses'],\n    sourcePorts: ['sourcePorts'],\n    sourcePrefixLists: ['sourcePrefixLists'],\n  },\n  resourceStatement: {\n    resources: ['resources'],\n    resourceTypes: ['resourceTypes'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 16,
        "153": 2,
        "169": 1,
        "192": 9,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "6d52e5f64726ceadecc873ab800e4eb2bb60ec86560aedc6de513e803b8948cf"
    },
    "53aec7b982f29cfc827c2e9c231428d8b8e78aa69b86bb94ca7ef9cf9c8d867f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nresource_statement_request_property = ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n    resources=[\"resources\"],\n    resource_types=[\"resourceTypes\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nResourceStatementRequestProperty resourceStatementRequestProperty = new ResourceStatementRequestProperty {\n    Resources = new [] { \"resources\" },\n    ResourceTypes = new [] { \"resourceTypes\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nResourceStatementRequestProperty resourceStatementRequestProperty = ResourceStatementRequestProperty.builder()\n        .resources(List.of(\"resources\"))\n        .resourceTypes(List.of(\"resourceTypes\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nresourceStatementRequestProperty := &resourceStatementRequestProperty{\n\tresources: []*string{\n\t\tjsii.String(\"resources\"),\n\t},\n\tresourceTypes: []*string{\n\t\tjsii.String(\"resourceTypes\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst resourceStatementRequestProperty: ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty = {\n  resources: ['resources'],\n  resourceTypes: ['resourceTypes'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceStatementRequestProperty: ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty = {\n  resources: ['resources'],\n  resourceTypes: ['resourceTypes'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d76738c045c640008379ecde7fd0f36796efd92900af7ad82839a1abbc36a371"
    },
    "99d0e967ec1275df7b282e551a129bf9513a98837015f959c367f2a410df5eba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nthrough_resources_statement_request_property = ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty(\n    resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n        resources=[\"resources\"],\n        resource_types=[\"resourceTypes\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nThroughResourcesStatementRequestProperty throughResourcesStatementRequestProperty = new ThroughResourcesStatementRequestProperty {\n    ResourceStatement = new ResourceStatementRequestProperty {\n        Resources = new [] { \"resources\" },\n        ResourceTypes = new [] { \"resourceTypes\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nThroughResourcesStatementRequestProperty throughResourcesStatementRequestProperty = ThroughResourcesStatementRequestProperty.builder()\n        .resourceStatement(ResourceStatementRequestProperty.builder()\n                .resources(List.of(\"resources\"))\n                .resourceTypes(List.of(\"resourceTypes\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nthroughResourcesStatementRequestProperty := &throughResourcesStatementRequestProperty{\n\tresourceStatement: &resourceStatementRequestProperty{\n\t\tresources: []*string{\n\t\t\tjsii.String(\"resources\"),\n\t\t},\n\t\tresourceTypes: []*string{\n\t\t\tjsii.String(\"resourceTypes\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst throughResourcesStatementRequestProperty: ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty = {\n  resourceStatement: {\n    resources: ['resources'],\n    resourceTypes: ['resourceTypes'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst throughResourcesStatementRequestProperty: ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty = {\n  resourceStatement: {\n    resources: ['resources'],\n    resourceTypes: ['resourceTypes'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "87059288bb3176b9a1b9f7546e6bd8fd50997de2ac081bd4323625ec7d46605f"
    },
    "485aa46f271afa7c70708e1615d423f49204f108a754b57d6541701e1fdf1555": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_insights_access_scope_analysis = ec2.CfnNetworkInsightsAccessScopeAnalysis(self, \"MyCfnNetworkInsightsAccessScopeAnalysis\",\n    network_insights_access_scope_id=\"networkInsightsAccessScopeId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInsightsAccessScopeAnalysis cfnNetworkInsightsAccessScopeAnalysis = new CfnNetworkInsightsAccessScopeAnalysis(this, \"MyCfnNetworkInsightsAccessScopeAnalysis\", new CfnNetworkInsightsAccessScopeAnalysisProps {\n    NetworkInsightsAccessScopeId = \"networkInsightsAccessScopeId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInsightsAccessScopeAnalysis cfnNetworkInsightsAccessScopeAnalysis = CfnNetworkInsightsAccessScopeAnalysis.Builder.create(this, \"MyCfnNetworkInsightsAccessScopeAnalysis\")\n        .networkInsightsAccessScopeId(\"networkInsightsAccessScopeId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInsightsAccessScopeAnalysis := ec2.NewCfnNetworkInsightsAccessScopeAnalysis(this, jsii.String(\"MyCfnNetworkInsightsAccessScopeAnalysis\"), &cfnNetworkInsightsAccessScopeAnalysisProps{\n\tnetworkInsightsAccessScopeId: jsii.String(\"networkInsightsAccessScopeId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInsightsAccessScopeAnalysis = new ec2.CfnNetworkInsightsAccessScopeAnalysis(this, 'MyCfnNetworkInsightsAccessScopeAnalysis', {\n  networkInsightsAccessScopeId: 'networkInsightsAccessScopeId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScopeAnalysis"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScopeAnalysis",
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScopeAnalysisProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInsightsAccessScopeAnalysis = new ec2.CfnNetworkInsightsAccessScopeAnalysis(this, 'MyCfnNetworkInsightsAccessScopeAnalysis', {\n  networkInsightsAccessScopeId: 'networkInsightsAccessScopeId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "55bdd6486933bd9af5d633e5ca2220c2a7f0f2c5575b05de2cf4af04f4f6df2f"
    },
    "ad6c719d02d2de6cb8b3fcadbff925f311f5c6cf835dfdf9c1c60ff705487429": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_insights_access_scope_analysis_props = ec2.CfnNetworkInsightsAccessScopeAnalysisProps(\n    network_insights_access_scope_id=\"networkInsightsAccessScopeId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInsightsAccessScopeAnalysisProps cfnNetworkInsightsAccessScopeAnalysisProps = new CfnNetworkInsightsAccessScopeAnalysisProps {\n    NetworkInsightsAccessScopeId = \"networkInsightsAccessScopeId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInsightsAccessScopeAnalysisProps cfnNetworkInsightsAccessScopeAnalysisProps = CfnNetworkInsightsAccessScopeAnalysisProps.builder()\n        .networkInsightsAccessScopeId(\"networkInsightsAccessScopeId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInsightsAccessScopeAnalysisProps := &cfnNetworkInsightsAccessScopeAnalysisProps{\n\tnetworkInsightsAccessScopeId: jsii.String(\"networkInsightsAccessScopeId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInsightsAccessScopeAnalysisProps: ec2.CfnNetworkInsightsAccessScopeAnalysisProps = {\n  networkInsightsAccessScopeId: 'networkInsightsAccessScopeId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScopeAnalysisProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScopeAnalysisProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInsightsAccessScopeAnalysisProps: ec2.CfnNetworkInsightsAccessScopeAnalysisProps = {\n  networkInsightsAccessScopeId: 'networkInsightsAccessScopeId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "f555b449347e3ff6310365c27be78b259796c098a0cebc1747323494765e34cb"
    },
    "b93e33649492ee6719fafa298fa4203199fc9b99d4a15fdd828bedca5ae6019c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_insights_access_scope_props = ec2.CfnNetworkInsightsAccessScopeProps(\n    exclude_paths=[ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty(\n        destination=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n            packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n                destination_addresses=[\"destinationAddresses\"],\n                destination_ports=[\"destinationPorts\"],\n                destination_prefix_lists=[\"destinationPrefixLists\"],\n                protocols=[\"protocols\"],\n                source_addresses=[\"sourceAddresses\"],\n                source_ports=[\"sourcePorts\"],\n                source_prefix_lists=[\"sourcePrefixLists\"]\n            ),\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        ),\n        source=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n            packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n                destination_addresses=[\"destinationAddresses\"],\n                destination_ports=[\"destinationPorts\"],\n                destination_prefix_lists=[\"destinationPrefixLists\"],\n                protocols=[\"protocols\"],\n                source_addresses=[\"sourceAddresses\"],\n                source_ports=[\"sourcePorts\"],\n                source_prefix_lists=[\"sourcePrefixLists\"]\n            ),\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        ),\n        through_resources=[ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty(\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        )]\n    )],\n    match_paths=[ec2.CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty(\n        destination=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n            packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n                destination_addresses=[\"destinationAddresses\"],\n                destination_ports=[\"destinationPorts\"],\n                destination_prefix_lists=[\"destinationPrefixLists\"],\n                protocols=[\"protocols\"],\n                source_addresses=[\"sourceAddresses\"],\n                source_ports=[\"sourcePorts\"],\n                source_prefix_lists=[\"sourcePrefixLists\"]\n            ),\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        ),\n        source=ec2.CfnNetworkInsightsAccessScope.PathStatementRequestProperty(\n            packet_header_statement=ec2.CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty(\n                destination_addresses=[\"destinationAddresses\"],\n                destination_ports=[\"destinationPorts\"],\n                destination_prefix_lists=[\"destinationPrefixLists\"],\n                protocols=[\"protocols\"],\n                source_addresses=[\"sourceAddresses\"],\n                source_ports=[\"sourcePorts\"],\n                source_prefix_lists=[\"sourcePrefixLists\"]\n            ),\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        ),\n        through_resources=[ec2.CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty(\n            resource_statement=ec2.CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty(\n                resources=[\"resources\"],\n                resource_types=[\"resourceTypes\"]\n            )\n        )]\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInsightsAccessScopeProps cfnNetworkInsightsAccessScopeProps = new CfnNetworkInsightsAccessScopeProps {\n    ExcludePaths = new [] { new AccessScopePathRequestProperty {\n        Destination = new PathStatementRequestProperty {\n            PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n                DestinationAddresses = new [] { \"destinationAddresses\" },\n                DestinationPorts = new [] { \"destinationPorts\" },\n                DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n                Protocols = new [] { \"protocols\" },\n                SourceAddresses = new [] { \"sourceAddresses\" },\n                SourcePorts = new [] { \"sourcePorts\" },\n                SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n            },\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        },\n        Source = new PathStatementRequestProperty {\n            PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n                DestinationAddresses = new [] { \"destinationAddresses\" },\n                DestinationPorts = new [] { \"destinationPorts\" },\n                DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n                Protocols = new [] { \"protocols\" },\n                SourceAddresses = new [] { \"sourceAddresses\" },\n                SourcePorts = new [] { \"sourcePorts\" },\n                SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n            },\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        },\n        ThroughResources = new [] { new ThroughResourcesStatementRequestProperty {\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        } }\n    } },\n    MatchPaths = new [] { new AccessScopePathRequestProperty {\n        Destination = new PathStatementRequestProperty {\n            PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n                DestinationAddresses = new [] { \"destinationAddresses\" },\n                DestinationPorts = new [] { \"destinationPorts\" },\n                DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n                Protocols = new [] { \"protocols\" },\n                SourceAddresses = new [] { \"sourceAddresses\" },\n                SourcePorts = new [] { \"sourcePorts\" },\n                SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n            },\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        },\n        Source = new PathStatementRequestProperty {\n            PacketHeaderStatement = new PacketHeaderStatementRequestProperty {\n                DestinationAddresses = new [] { \"destinationAddresses\" },\n                DestinationPorts = new [] { \"destinationPorts\" },\n                DestinationPrefixLists = new [] { \"destinationPrefixLists\" },\n                Protocols = new [] { \"protocols\" },\n                SourceAddresses = new [] { \"sourceAddresses\" },\n                SourcePorts = new [] { \"sourcePorts\" },\n                SourcePrefixLists = new [] { \"sourcePrefixLists\" }\n            },\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        },\n        ThroughResources = new [] { new ThroughResourcesStatementRequestProperty {\n            ResourceStatement = new ResourceStatementRequestProperty {\n                Resources = new [] { \"resources\" },\n                ResourceTypes = new [] { \"resourceTypes\" }\n            }\n        } }\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInsightsAccessScopeProps cfnNetworkInsightsAccessScopeProps = CfnNetworkInsightsAccessScopeProps.builder()\n        .excludePaths(List.of(AccessScopePathRequestProperty.builder()\n                .destination(PathStatementRequestProperty.builder()\n                        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                                .destinationAddresses(List.of(\"destinationAddresses\"))\n                                .destinationPorts(List.of(\"destinationPorts\"))\n                                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                                .protocols(List.of(\"protocols\"))\n                                .sourceAddresses(List.of(\"sourceAddresses\"))\n                                .sourcePorts(List.of(\"sourcePorts\"))\n                                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                                .build())\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build())\n                .source(PathStatementRequestProperty.builder()\n                        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                                .destinationAddresses(List.of(\"destinationAddresses\"))\n                                .destinationPorts(List.of(\"destinationPorts\"))\n                                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                                .protocols(List.of(\"protocols\"))\n                                .sourceAddresses(List.of(\"sourceAddresses\"))\n                                .sourcePorts(List.of(\"sourcePorts\"))\n                                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                                .build())\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build())\n                .throughResources(List.of(ThroughResourcesStatementRequestProperty.builder()\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build()))\n                .build()))\n        .matchPaths(List.of(AccessScopePathRequestProperty.builder()\n                .destination(PathStatementRequestProperty.builder()\n                        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                                .destinationAddresses(List.of(\"destinationAddresses\"))\n                                .destinationPorts(List.of(\"destinationPorts\"))\n                                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                                .protocols(List.of(\"protocols\"))\n                                .sourceAddresses(List.of(\"sourceAddresses\"))\n                                .sourcePorts(List.of(\"sourcePorts\"))\n                                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                                .build())\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build())\n                .source(PathStatementRequestProperty.builder()\n                        .packetHeaderStatement(PacketHeaderStatementRequestProperty.builder()\n                                .destinationAddresses(List.of(\"destinationAddresses\"))\n                                .destinationPorts(List.of(\"destinationPorts\"))\n                                .destinationPrefixLists(List.of(\"destinationPrefixLists\"))\n                                .protocols(List.of(\"protocols\"))\n                                .sourceAddresses(List.of(\"sourceAddresses\"))\n                                .sourcePorts(List.of(\"sourcePorts\"))\n                                .sourcePrefixLists(List.of(\"sourcePrefixLists\"))\n                                .build())\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build())\n                .throughResources(List.of(ThroughResourcesStatementRequestProperty.builder()\n                        .resourceStatement(ResourceStatementRequestProperty.builder()\n                                .resources(List.of(\"resources\"))\n                                .resourceTypes(List.of(\"resourceTypes\"))\n                                .build())\n                        .build()))\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInsightsAccessScopeProps := &cfnNetworkInsightsAccessScopeProps{\n\texcludePaths: []interface{}{\n\t\t&accessScopePathRequestProperty{\n\t\t\tdestination: &pathStatementRequestProperty{\n\t\t\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\t\t\tdestinationAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPorts: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t\tprotocols: []*string{\n\t\t\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourceAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePorts: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t},\n\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tsource: &pathStatementRequestProperty{\n\t\t\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\t\t\tdestinationAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPorts: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t\tprotocols: []*string{\n\t\t\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourceAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePorts: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t},\n\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tthroughResources: []interface{}{\n\t\t\t\t&throughResourcesStatementRequestProperty{\n\t\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tmatchPaths: []interface{}{\n\t\t&accessScopePathRequestProperty{\n\t\t\tdestination: &pathStatementRequestProperty{\n\t\t\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\t\t\tdestinationAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPorts: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t\tprotocols: []*string{\n\t\t\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourceAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePorts: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t},\n\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tsource: &pathStatementRequestProperty{\n\t\t\t\tpacketHeaderStatement: &packetHeaderStatementRequestProperty{\n\t\t\t\t\tdestinationAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPorts: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tdestinationPrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"destinationPrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t\tprotocols: []*string{\n\t\t\t\t\t\tjsii.String(\"protocols\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourceAddresses: []*string{\n\t\t\t\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePorts: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePorts\"),\n\t\t\t\t\t},\n\t\t\t\t\tsourcePrefixLists: []*string{\n\t\t\t\t\t\tjsii.String(\"sourcePrefixLists\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t},\n\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tthroughResources: []interface{}{\n\t\t\t\t&throughResourcesStatementRequestProperty{\n\t\t\t\t\tresourceStatement: &resourceStatementRequestProperty{\n\t\t\t\t\t\tresources: []*string{\n\t\t\t\t\t\t\tjsii.String(\"resources\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresourceTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"resourceTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInsightsAccessScopeProps: ec2.CfnNetworkInsightsAccessScopeProps = {\n  excludePaths: [{\n    destination: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    source: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    throughResources: [{\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    }],\n  }],\n  matchPaths: [{\n    destination: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    source: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    throughResources: [{\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScopeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAccessScopeProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInsightsAccessScopeProps: ec2.CfnNetworkInsightsAccessScopeProps = {\n  excludePaths: [{\n    destination: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    source: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    throughResources: [{\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    }],\n  }],\n  matchPaths: [{\n    destination: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    source: {\n      packetHeaderStatement: {\n        destinationAddresses: ['destinationAddresses'],\n        destinationPorts: ['destinationPorts'],\n        destinationPrefixLists: ['destinationPrefixLists'],\n        protocols: ['protocols'],\n        sourceAddresses: ['sourceAddresses'],\n        sourcePorts: ['sourcePorts'],\n        sourcePrefixLists: ['sourcePrefixLists'],\n      },\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    },\n    throughResources: [{\n      resourceStatement: {\n        resources: ['resources'],\n        resourceTypes: ['resourceTypes'],\n      },\n    }],\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 43,
        "75": 65,
        "153": 1,
        "169": 1,
        "192": 45,
        "193": 20,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 61,
        "290": 1
      },
      "fqnsFingerprint": "5164dda5c411bc37d83812ed003e1d3d1f118fa2cd587a491c938bdc5a0a0568"
    },
    "cf6143b403bd07b477a52f2ec656f69f184cf9e2624a593fe52a4007a4436107": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_insights_analysis = ec2.CfnNetworkInsightsAnalysis(self, \"MyCfnNetworkInsightsAnalysis\",\n    network_insights_path_id=\"networkInsightsPathId\",\n\n    # the properties below are optional\n    filter_in_arns=[\"filterInArns\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInsightsAnalysis cfnNetworkInsightsAnalysis = new CfnNetworkInsightsAnalysis(this, \"MyCfnNetworkInsightsAnalysis\", new CfnNetworkInsightsAnalysisProps {\n    NetworkInsightsPathId = \"networkInsightsPathId\",\n\n    // the properties below are optional\n    FilterInArns = new [] { \"filterInArns\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInsightsAnalysis cfnNetworkInsightsAnalysis = CfnNetworkInsightsAnalysis.Builder.create(this, \"MyCfnNetworkInsightsAnalysis\")\n        .networkInsightsPathId(\"networkInsightsPathId\")\n\n        // the properties below are optional\n        .filterInArns(List.of(\"filterInArns\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInsightsAnalysis := ec2.NewCfnNetworkInsightsAnalysis(this, jsii.String(\"MyCfnNetworkInsightsAnalysis\"), &cfnNetworkInsightsAnalysisProps{\n\tnetworkInsightsPathId: jsii.String(\"networkInsightsPathId\"),\n\n\t// the properties below are optional\n\tfilterInArns: []*string{\n\t\tjsii.String(\"filterInArns\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInsightsAnalysis = new ec2.CfnNetworkInsightsAnalysis(this, 'MyCfnNetworkInsightsAnalysis', {\n  networkInsightsPathId: 'networkInsightsPathId',\n\n  // the properties below are optional\n  filterInArns: ['filterInArns'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis",
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysisProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInsightsAnalysis = new ec2.CfnNetworkInsightsAnalysis(this, 'MyCfnNetworkInsightsAnalysis', {\n  networkInsightsPathId: 'networkInsightsPathId',\n\n  // the properties below are optional\n  filterInArns: ['filterInArns'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "58a5a52bae2d90216e7c104b6187cb7377c14217a3fc718496a2d748b44ea7a8"
    },
    "86c767ae2ad2746b7ba5f97ab9637effd00af4e4aece9e1a50ea11767b200f5b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nalternate_path_hint_property = ec2.CfnNetworkInsightsAnalysis.AlternatePathHintProperty(\n    component_arn=\"componentArn\",\n    component_id=\"componentId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAlternatePathHintProperty alternatePathHintProperty = new AlternatePathHintProperty {\n    ComponentArn = \"componentArn\",\n    ComponentId = \"componentId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAlternatePathHintProperty alternatePathHintProperty = AlternatePathHintProperty.builder()\n        .componentArn(\"componentArn\")\n        .componentId(\"componentId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nalternatePathHintProperty := &alternatePathHintProperty{\n\tcomponentArn: jsii.String(\"componentArn\"),\n\tcomponentId: jsii.String(\"componentId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst alternatePathHintProperty: ec2.CfnNetworkInsightsAnalysis.AlternatePathHintProperty = {\n  componentArn: 'componentArn',\n  componentId: 'componentId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AlternatePathHintProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AlternatePathHintProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst alternatePathHintProperty: ec2.CfnNetworkInsightsAnalysis.AlternatePathHintProperty = {\n  componentArn: 'componentArn',\n  componentId: 'componentId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "60a7c2df31268c58fcdf42ec11d0b9611d61976fac4a39d37e69b91123f72378"
    },
    "beda4cb0004562acc35dd192e74e2a741b3ce9623144395bcca612171bb567d1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nanalysis_acl_rule_property = ec2.CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty(\n    cidr=\"cidr\",\n    egress=False,\n    port_range=ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n        from=123,\n        to=123\n    ),\n    protocol=\"protocol\",\n    rule_action=\"ruleAction\",\n    rule_number=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAnalysisAclRuleProperty analysisAclRuleProperty = new AnalysisAclRuleProperty {\n    Cidr = \"cidr\",\n    Egress = false,\n    PortRange = new PortRangeProperty {\n        From = 123,\n        To = 123\n    },\n    Protocol = \"protocol\",\n    RuleAction = \"ruleAction\",\n    RuleNumber = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAnalysisAclRuleProperty analysisAclRuleProperty = AnalysisAclRuleProperty.builder()\n        .cidr(\"cidr\")\n        .egress(false)\n        .portRange(PortRangeProperty.builder()\n                .from(123)\n                .to(123)\n                .build())\n        .protocol(\"protocol\")\n        .ruleAction(\"ruleAction\")\n        .ruleNumber(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nanalysisAclRuleProperty := &analysisAclRuleProperty{\n\tcidr: jsii.String(\"cidr\"),\n\tegress: jsii.Boolean(false),\n\tportRange: &portRangeProperty{\n\t\tfrom: jsii.Number(123),\n\t\tto: jsii.Number(123),\n\t},\n\tprotocol: jsii.String(\"protocol\"),\n\truleAction: jsii.String(\"ruleAction\"),\n\truleNumber: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst analysisAclRuleProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty = {\n  cidr: 'cidr',\n  egress: false,\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n  protocol: 'protocol',\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisAclRuleProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty = {\n  cidr: 'cidr',\n  egress: false,\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n  protocol: 'protocol',\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 13,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "f680566fd03dcf2784a898f598ed57c043391ec3f23fb436c60ac4eada67aee6"
    },
    "8e74f9c5fa61506c5b7890f8ada16b575dd3b8faadff33877cb10fd614128bb9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nanalysis_component_property = ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n    arn=\"arn\",\n    id=\"id\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAnalysisComponentProperty analysisComponentProperty = new AnalysisComponentProperty {\n    Arn = \"arn\",\n    Id = \"id\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAnalysisComponentProperty analysisComponentProperty = AnalysisComponentProperty.builder()\n        .arn(\"arn\")\n        .id(\"id\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nanalysisComponentProperty := &analysisComponentProperty{\n\tarn: jsii.String(\"arn\"),\n\tid: jsii.String(\"id\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst analysisComponentProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty = {\n  arn: 'arn',\n  id: 'id',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisComponentProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty = {\n  arn: 'arn',\n  id: 'id',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d9cbc97369fccf79fc62d2939d9a3bcd7d06ec59c0b9b7733e33f52a8182ae4a"
    },
    "df3d0b8e47aed795f5dcbf3960ab1cd31b3c5e64e59bc7770e24eabfebd5cfc4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nanalysis_load_balancer_listener_property = ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty(\n    instance_port=123,\n    load_balancer_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAnalysisLoadBalancerListenerProperty analysisLoadBalancerListenerProperty = new AnalysisLoadBalancerListenerProperty {\n    InstancePort = 123,\n    LoadBalancerPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAnalysisLoadBalancerListenerProperty analysisLoadBalancerListenerProperty = AnalysisLoadBalancerListenerProperty.builder()\n        .instancePort(123)\n        .loadBalancerPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nanalysisLoadBalancerListenerProperty := &analysisLoadBalancerListenerProperty{\n\tinstancePort: jsii.Number(123),\n\tloadBalancerPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst analysisLoadBalancerListenerProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty = {\n  instancePort: 123,\n  loadBalancerPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisLoadBalancerListenerProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty = {\n  instancePort: 123,\n  loadBalancerPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0e76d88d390e5a073ec2abfdf86113e9414daccf3a76018b980a2977d699241b"
    },
    "68e107291a62a328c4162ed90c310215dd87dde1ef2ec0e8162163751f78d8b9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nanalysis_load_balancer_target_property = ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty(\n    address=\"address\",\n    availability_zone=\"availabilityZone\",\n    instance=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAnalysisLoadBalancerTargetProperty analysisLoadBalancerTargetProperty = new AnalysisLoadBalancerTargetProperty {\n    Address = \"address\",\n    AvailabilityZone = \"availabilityZone\",\n    Instance = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAnalysisLoadBalancerTargetProperty analysisLoadBalancerTargetProperty = AnalysisLoadBalancerTargetProperty.builder()\n        .address(\"address\")\n        .availabilityZone(\"availabilityZone\")\n        .instance(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nanalysisLoadBalancerTargetProperty := &analysisLoadBalancerTargetProperty{\n\taddress: jsii.String(\"address\"),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tinstance: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst analysisLoadBalancerTargetProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty = {\n  address: 'address',\n  availabilityZone: 'availabilityZone',\n  instance: {\n    arn: 'arn',\n    id: 'id',\n  },\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisLoadBalancerTargetProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty = {\n  address: 'address',\n  availabilityZone: 'availabilityZone',\n  instance: {\n    arn: 'arn',\n    id: 'id',\n  },\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 11,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "b387b966e0a8f61c35b3f65f523ee5c55f51e4eded4ebec7826254eda70af0ca"
    },
    "9bfb1c96256a5010cb05e8bf4fe792c273a81579084550978309a08af03e3a42": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nanalysis_packet_header_property = ec2.CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty(\n    destination_addresses=[\"destinationAddresses\"],\n    destination_port_ranges=[ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n        from=123,\n        to=123\n    )],\n    protocol=\"protocol\",\n    source_addresses=[\"sourceAddresses\"],\n    source_port_ranges=[ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n        from=123,\n        to=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAnalysisPacketHeaderProperty analysisPacketHeaderProperty = new AnalysisPacketHeaderProperty {\n    DestinationAddresses = new [] { \"destinationAddresses\" },\n    DestinationPortRanges = new [] { new PortRangeProperty {\n        From = 123,\n        To = 123\n    } },\n    Protocol = \"protocol\",\n    SourceAddresses = new [] { \"sourceAddresses\" },\n    SourcePortRanges = new [] { new PortRangeProperty {\n        From = 123,\n        To = 123\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAnalysisPacketHeaderProperty analysisPacketHeaderProperty = AnalysisPacketHeaderProperty.builder()\n        .destinationAddresses(List.of(\"destinationAddresses\"))\n        .destinationPortRanges(List.of(PortRangeProperty.builder()\n                .from(123)\n                .to(123)\n                .build()))\n        .protocol(\"protocol\")\n        .sourceAddresses(List.of(\"sourceAddresses\"))\n        .sourcePortRanges(List.of(PortRangeProperty.builder()\n                .from(123)\n                .to(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nanalysisPacketHeaderProperty := &analysisPacketHeaderProperty{\n\tdestinationAddresses: []*string{\n\t\tjsii.String(\"destinationAddresses\"),\n\t},\n\tdestinationPortRanges: []interface{}{\n\t\t&portRangeProperty{\n\t\t\tfrom: jsii.Number(123),\n\t\t\tto: jsii.Number(123),\n\t\t},\n\t},\n\tprotocol: jsii.String(\"protocol\"),\n\tsourceAddresses: []*string{\n\t\tjsii.String(\"sourceAddresses\"),\n\t},\n\tsourcePortRanges: []interface{}{\n\t\t&portRangeProperty{\n\t\t\tfrom: jsii.Number(123),\n\t\t\tto: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst analysisPacketHeaderProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty = {\n  destinationAddresses: ['destinationAddresses'],\n  destinationPortRanges: [{\n    from: 123,\n    to: 123,\n  }],\n  protocol: 'protocol',\n  sourceAddresses: ['sourceAddresses'],\n  sourcePortRanges: [{\n    from: 123,\n    to: 123,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisPacketHeaderProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty = {\n  destinationAddresses: ['destinationAddresses'],\n  destinationPortRanges: [{\n    from: 123,\n    to: 123,\n  }],\n  protocol: 'protocol',\n  sourceAddresses: ['sourceAddresses'],\n  sourcePortRanges: [{\n    from: 123,\n    to: 123,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 4,
        "75": 14,
        "153": 2,
        "169": 1,
        "192": 4,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "baa9704f19b8883c2ce28fda096121952d599b23d8b90680bf3e29ac875884b7"
    },
    "3a0fb9f1ad52a38f868e2344626c469049d424c342a2fb7adaf5789d4c9fd347": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nanalysis_route_table_route_property = ec2.CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty(\n    destination_cidr=\"destinationCidr\",\n    destination_prefix_list_id=\"destinationPrefixListId\",\n    egress_only_internet_gateway_id=\"egressOnlyInternetGatewayId\",\n    gateway_id=\"gatewayId\",\n    instance_id=\"instanceId\",\n    nat_gateway_id=\"natGatewayId\",\n    network_interface_id=\"networkInterfaceId\",\n    origin=\"origin\",\n    transit_gateway_id=\"transitGatewayId\",\n    vpc_peering_connection_id=\"vpcPeeringConnectionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAnalysisRouteTableRouteProperty analysisRouteTableRouteProperty = new AnalysisRouteTableRouteProperty {\n    DestinationCidr = \"destinationCidr\",\n    DestinationPrefixListId = \"destinationPrefixListId\",\n    EgressOnlyInternetGatewayId = \"egressOnlyInternetGatewayId\",\n    GatewayId = \"gatewayId\",\n    InstanceId = \"instanceId\",\n    NatGatewayId = \"natGatewayId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    Origin = \"origin\",\n    TransitGatewayId = \"transitGatewayId\",\n    VpcPeeringConnectionId = \"vpcPeeringConnectionId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAnalysisRouteTableRouteProperty analysisRouteTableRouteProperty = AnalysisRouteTableRouteProperty.builder()\n        .destinationCidr(\"destinationCidr\")\n        .destinationPrefixListId(\"destinationPrefixListId\")\n        .egressOnlyInternetGatewayId(\"egressOnlyInternetGatewayId\")\n        .gatewayId(\"gatewayId\")\n        .instanceId(\"instanceId\")\n        .natGatewayId(\"natGatewayId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .origin(\"origin\")\n        .transitGatewayId(\"transitGatewayId\")\n        .vpcPeeringConnectionId(\"vpcPeeringConnectionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nanalysisRouteTableRouteProperty := &analysisRouteTableRouteProperty{\n\tdestinationCidr: jsii.String(\"destinationCidr\"),\n\tdestinationPrefixListId: jsii.String(\"destinationPrefixListId\"),\n\tegressOnlyInternetGatewayId: jsii.String(\"egressOnlyInternetGatewayId\"),\n\tgatewayId: jsii.String(\"gatewayId\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tnatGatewayId: jsii.String(\"natGatewayId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\torigin: jsii.String(\"origin\"),\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpcPeeringConnectionId: jsii.String(\"vpcPeeringConnectionId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst analysisRouteTableRouteProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty = {\n  destinationCidr: 'destinationCidr',\n  destinationPrefixListId: 'destinationPrefixListId',\n  egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n  gatewayId: 'gatewayId',\n  instanceId: 'instanceId',\n  natGatewayId: 'natGatewayId',\n  networkInterfaceId: 'networkInterfaceId',\n  origin: 'origin',\n  transitGatewayId: 'transitGatewayId',\n  vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisRouteTableRouteProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty = {\n  destinationCidr: 'destinationCidr',\n  destinationPrefixListId: 'destinationPrefixListId',\n  egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n  gatewayId: 'gatewayId',\n  instanceId: 'instanceId',\n  natGatewayId: 'natGatewayId',\n  networkInterfaceId: 'networkInterfaceId',\n  origin: 'origin',\n  transitGatewayId: 'transitGatewayId',\n  vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 15,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "68237b28f673128a44c10e8058eaf8fe0df23e6115467ad53625bd06bfa03435"
    },
    "5cbb63ca3f7462cb4fec8dc7fef96f9b9ff43dd0b9cb0c1d1eefb73149d05118": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nanalysis_security_group_rule_property = ec2.CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty(\n    cidr=\"cidr\",\n    direction=\"direction\",\n    port_range=ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n        from=123,\n        to=123\n    ),\n    prefix_list_id=\"prefixListId\",\n    protocol=\"protocol\",\n    security_group_id=\"securityGroupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAnalysisSecurityGroupRuleProperty analysisSecurityGroupRuleProperty = new AnalysisSecurityGroupRuleProperty {\n    Cidr = \"cidr\",\n    Direction = \"direction\",\n    PortRange = new PortRangeProperty {\n        From = 123,\n        To = 123\n    },\n    PrefixListId = \"prefixListId\",\n    Protocol = \"protocol\",\n    SecurityGroupId = \"securityGroupId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAnalysisSecurityGroupRuleProperty analysisSecurityGroupRuleProperty = AnalysisSecurityGroupRuleProperty.builder()\n        .cidr(\"cidr\")\n        .direction(\"direction\")\n        .portRange(PortRangeProperty.builder()\n                .from(123)\n                .to(123)\n                .build())\n        .prefixListId(\"prefixListId\")\n        .protocol(\"protocol\")\n        .securityGroupId(\"securityGroupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nanalysisSecurityGroupRuleProperty := &analysisSecurityGroupRuleProperty{\n\tcidr: jsii.String(\"cidr\"),\n\tdirection: jsii.String(\"direction\"),\n\tportRange: &portRangeProperty{\n\t\tfrom: jsii.Number(123),\n\t\tto: jsii.Number(123),\n\t},\n\tprefixListId: jsii.String(\"prefixListId\"),\n\tprotocol: jsii.String(\"protocol\"),\n\tsecurityGroupId: jsii.String(\"securityGroupId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst analysisSecurityGroupRuleProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty = {\n  cidr: 'cidr',\n  direction: 'direction',\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n  prefixListId: 'prefixListId',\n  protocol: 'protocol',\n  securityGroupId: 'securityGroupId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisSecurityGroupRuleProperty: ec2.CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty = {\n  cidr: 'cidr',\n  direction: 'direction',\n  portRange: {\n    from: 123,\n    to: 123,\n  },\n  prefixListId: 'prefixListId',\n  protocol: 'protocol',\n  securityGroupId: 'securityGroupId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 13,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "8a12a2ebd3bda22a13b37c56a8b59286d5e91bdd2f6af65b228243bd739cb022"
    },
    "2f5016c353c7531f593f3d4b04340a89877a6f8e8251cc9754d0bb45c4292680": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nexplanation_property = ec2.CfnNetworkInsightsAnalysis.ExplanationProperty(\n    acl=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    acl_rule=ec2.CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty(\n        cidr=\"cidr\",\n        egress=False,\n        port_range=ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n            from=123,\n            to=123\n        ),\n        protocol=\"protocol\",\n        rule_action=\"ruleAction\",\n        rule_number=123\n    ),\n    address=\"address\",\n    addresses=[\"addresses\"],\n    attached_to=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    availability_zones=[\"availabilityZones\"],\n    cidrs=[\"cidrs\"],\n    classic_load_balancer_listener=ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty(\n        instance_port=123,\n        load_balancer_port=123\n    ),\n    component=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    customer_gateway=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    destination=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    destination_vpc=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    direction=\"direction\",\n    elastic_load_balancer_listener=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    explanation_code=\"explanationCode\",\n    ingress_route_table=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    internet_gateway=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    load_balancer_arn=\"loadBalancerArn\",\n    load_balancer_listener_port=123,\n    load_balancer_target=ec2.CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty(\n        address=\"address\",\n        availability_zone=\"availabilityZone\",\n        instance=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n            arn=\"arn\",\n            id=\"id\"\n        ),\n        port=123\n    ),\n    load_balancer_target_group=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    load_balancer_target_groups=[ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    )],\n    load_balancer_target_port=123,\n    missing_component=\"missingComponent\",\n    nat_gateway=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    network_interface=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    packet_field=\"packetField\",\n    port=123,\n    port_ranges=[ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n        from=123,\n        to=123\n    )],\n    prefix_list=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    protocols=[\"protocols\"],\n    route_table=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    route_table_route=ec2.CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty(\n        destination_cidr=\"destinationCidr\",\n        destination_prefix_list_id=\"destinationPrefixListId\",\n        egress_only_internet_gateway_id=\"egressOnlyInternetGatewayId\",\n        gateway_id=\"gatewayId\",\n        instance_id=\"instanceId\",\n        nat_gateway_id=\"natGatewayId\",\n        network_interface_id=\"networkInterfaceId\",\n        origin=\"origin\",\n        transit_gateway_id=\"transitGatewayId\",\n        vpc_peering_connection_id=\"vpcPeeringConnectionId\"\n    ),\n    security_group=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    security_group_rule=ec2.CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty(\n        cidr=\"cidr\",\n        direction=\"direction\",\n        port_range=ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n            from=123,\n            to=123\n        ),\n        prefix_list_id=\"prefixListId\",\n        protocol=\"protocol\",\n        security_group_id=\"securityGroupId\"\n    ),\n    security_groups=[ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    )],\n    source_vpc=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    state=\"state\",\n    subnet=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    subnet_route_table=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    vpc=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    vpc_endpoint=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    vpc_peering_connection=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    vpn_connection=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    vpn_gateway=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nExplanationProperty explanationProperty = new ExplanationProperty {\n    Acl = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    AclRule = new AnalysisAclRuleProperty {\n        Cidr = \"cidr\",\n        Egress = false,\n        PortRange = new PortRangeProperty {\n            From = 123,\n            To = 123\n        },\n        Protocol = \"protocol\",\n        RuleAction = \"ruleAction\",\n        RuleNumber = 123\n    },\n    Address = \"address\",\n    Addresses = new [] { \"addresses\" },\n    AttachedTo = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    AvailabilityZones = new [] { \"availabilityZones\" },\n    Cidrs = new [] { \"cidrs\" },\n    ClassicLoadBalancerListener = new AnalysisLoadBalancerListenerProperty {\n        InstancePort = 123,\n        LoadBalancerPort = 123\n    },\n    Component = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    CustomerGateway = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    Destination = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    DestinationVpc = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    Direction = \"direction\",\n    ElasticLoadBalancerListener = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    ExplanationCode = \"explanationCode\",\n    IngressRouteTable = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    InternetGateway = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    LoadBalancerArn = \"loadBalancerArn\",\n    LoadBalancerListenerPort = 123,\n    LoadBalancerTarget = new AnalysisLoadBalancerTargetProperty {\n        Address = \"address\",\n        AvailabilityZone = \"availabilityZone\",\n        Instance = new AnalysisComponentProperty {\n            Arn = \"arn\",\n            Id = \"id\"\n        },\n        Port = 123\n    },\n    LoadBalancerTargetGroup = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    LoadBalancerTargetGroups = new [] { new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    } },\n    LoadBalancerTargetPort = 123,\n    MissingComponent = \"missingComponent\",\n    NatGateway = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    NetworkInterface = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    PacketField = \"packetField\",\n    Port = 123,\n    PortRanges = new [] { new PortRangeProperty {\n        From = 123,\n        To = 123\n    } },\n    PrefixList = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    Protocols = new [] { \"protocols\" },\n    RouteTable = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    RouteTableRoute = new AnalysisRouteTableRouteProperty {\n        DestinationCidr = \"destinationCidr\",\n        DestinationPrefixListId = \"destinationPrefixListId\",\n        EgressOnlyInternetGatewayId = \"egressOnlyInternetGatewayId\",\n        GatewayId = \"gatewayId\",\n        InstanceId = \"instanceId\",\n        NatGatewayId = \"natGatewayId\",\n        NetworkInterfaceId = \"networkInterfaceId\",\n        Origin = \"origin\",\n        TransitGatewayId = \"transitGatewayId\",\n        VpcPeeringConnectionId = \"vpcPeeringConnectionId\"\n    },\n    SecurityGroup = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    SecurityGroupRule = new AnalysisSecurityGroupRuleProperty {\n        Cidr = \"cidr\",\n        Direction = \"direction\",\n        PortRange = new PortRangeProperty {\n            From = 123,\n            To = 123\n        },\n        PrefixListId = \"prefixListId\",\n        Protocol = \"protocol\",\n        SecurityGroupId = \"securityGroupId\"\n    },\n    SecurityGroups = new [] { new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    } },\n    SourceVpc = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    State = \"state\",\n    Subnet = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    SubnetRouteTable = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    Vpc = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    VpcEndpoint = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    VpcPeeringConnection = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    VpnConnection = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    VpnGateway = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nExplanationProperty explanationProperty = ExplanationProperty.builder()\n        .acl(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .aclRule(AnalysisAclRuleProperty.builder()\n                .cidr(\"cidr\")\n                .egress(false)\n                .portRange(PortRangeProperty.builder()\n                        .from(123)\n                        .to(123)\n                        .build())\n                .protocol(\"protocol\")\n                .ruleAction(\"ruleAction\")\n                .ruleNumber(123)\n                .build())\n        .address(\"address\")\n        .addresses(List.of(\"addresses\"))\n        .attachedTo(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .availabilityZones(List.of(\"availabilityZones\"))\n        .cidrs(List.of(\"cidrs\"))\n        .classicLoadBalancerListener(AnalysisLoadBalancerListenerProperty.builder()\n                .instancePort(123)\n                .loadBalancerPort(123)\n                .build())\n        .component(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .customerGateway(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .destination(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .destinationVpc(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .direction(\"direction\")\n        .elasticLoadBalancerListener(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .explanationCode(\"explanationCode\")\n        .ingressRouteTable(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .internetGateway(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .loadBalancerArn(\"loadBalancerArn\")\n        .loadBalancerListenerPort(123)\n        .loadBalancerTarget(AnalysisLoadBalancerTargetProperty.builder()\n                .address(\"address\")\n                .availabilityZone(\"availabilityZone\")\n                .instance(AnalysisComponentProperty.builder()\n                        .arn(\"arn\")\n                        .id(\"id\")\n                        .build())\n                .port(123)\n                .build())\n        .loadBalancerTargetGroup(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .loadBalancerTargetGroups(List.of(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build()))\n        .loadBalancerTargetPort(123)\n        .missingComponent(\"missingComponent\")\n        .natGateway(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .networkInterface(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .packetField(\"packetField\")\n        .port(123)\n        .portRanges(List.of(PortRangeProperty.builder()\n                .from(123)\n                .to(123)\n                .build()))\n        .prefixList(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .protocols(List.of(\"protocols\"))\n        .routeTable(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .routeTableRoute(AnalysisRouteTableRouteProperty.builder()\n                .destinationCidr(\"destinationCidr\")\n                .destinationPrefixListId(\"destinationPrefixListId\")\n                .egressOnlyInternetGatewayId(\"egressOnlyInternetGatewayId\")\n                .gatewayId(\"gatewayId\")\n                .instanceId(\"instanceId\")\n                .natGatewayId(\"natGatewayId\")\n                .networkInterfaceId(\"networkInterfaceId\")\n                .origin(\"origin\")\n                .transitGatewayId(\"transitGatewayId\")\n                .vpcPeeringConnectionId(\"vpcPeeringConnectionId\")\n                .build())\n        .securityGroup(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .securityGroupRule(AnalysisSecurityGroupRuleProperty.builder()\n                .cidr(\"cidr\")\n                .direction(\"direction\")\n                .portRange(PortRangeProperty.builder()\n                        .from(123)\n                        .to(123)\n                        .build())\n                .prefixListId(\"prefixListId\")\n                .protocol(\"protocol\")\n                .securityGroupId(\"securityGroupId\")\n                .build())\n        .securityGroups(List.of(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build()))\n        .sourceVpc(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .state(\"state\")\n        .subnet(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .subnetRouteTable(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .vpc(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .vpcEndpoint(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .vpcPeeringConnection(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .vpnConnection(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .vpnGateway(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nexplanationProperty := &explanationProperty{\n\tacl: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\taclRule: &analysisAclRuleProperty{\n\t\tcidr: jsii.String(\"cidr\"),\n\t\tegress: jsii.Boolean(false),\n\t\tportRange: &portRangeProperty{\n\t\t\tfrom: jsii.Number(123),\n\t\t\tto: jsii.Number(123),\n\t\t},\n\t\tprotocol: jsii.String(\"protocol\"),\n\t\truleAction: jsii.String(\"ruleAction\"),\n\t\truleNumber: jsii.Number(123),\n\t},\n\taddress: jsii.String(\"address\"),\n\taddresses: []*string{\n\t\tjsii.String(\"addresses\"),\n\t},\n\tattachedTo: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"availabilityZones\"),\n\t},\n\tcidrs: []*string{\n\t\tjsii.String(\"cidrs\"),\n\t},\n\tclassicLoadBalancerListener: &analysisLoadBalancerListenerProperty{\n\t\tinstancePort: jsii.Number(123),\n\t\tloadBalancerPort: jsii.Number(123),\n\t},\n\tcomponent: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tcustomerGateway: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tdestination: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tdestinationVpc: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tdirection: jsii.String(\"direction\"),\n\telasticLoadBalancerListener: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\texplanationCode: jsii.String(\"explanationCode\"),\n\tingressRouteTable: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tinternetGateway: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tloadBalancerArn: jsii.String(\"loadBalancerArn\"),\n\tloadBalancerListenerPort: jsii.Number(123),\n\tloadBalancerTarget: &analysisLoadBalancerTargetProperty{\n\t\taddress: jsii.String(\"address\"),\n\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\tinstance: &analysisComponentProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tid: jsii.String(\"id\"),\n\t\t},\n\t\tport: jsii.Number(123),\n\t},\n\tloadBalancerTargetGroup: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tloadBalancerTargetGroups: []interface{}{\n\t\t&analysisComponentProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tid: jsii.String(\"id\"),\n\t\t},\n\t},\n\tloadBalancerTargetPort: jsii.Number(123),\n\tmissingComponent: jsii.String(\"missingComponent\"),\n\tnatGateway: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tnetworkInterface: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tpacketField: jsii.String(\"packetField\"),\n\tport: jsii.Number(123),\n\tportRanges: []interface{}{\n\t\t&portRangeProperty{\n\t\t\tfrom: jsii.Number(123),\n\t\t\tto: jsii.Number(123),\n\t\t},\n\t},\n\tprefixList: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tprotocols: []*string{\n\t\tjsii.String(\"protocols\"),\n\t},\n\trouteTable: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\trouteTableRoute: &analysisRouteTableRouteProperty{\n\t\tdestinationCidr: jsii.String(\"destinationCidr\"),\n\t\tdestinationPrefixListId: jsii.String(\"destinationPrefixListId\"),\n\t\tegressOnlyInternetGatewayId: jsii.String(\"egressOnlyInternetGatewayId\"),\n\t\tgatewayId: jsii.String(\"gatewayId\"),\n\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\tnatGatewayId: jsii.String(\"natGatewayId\"),\n\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\torigin: jsii.String(\"origin\"),\n\t\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\t\tvpcPeeringConnectionId: jsii.String(\"vpcPeeringConnectionId\"),\n\t},\n\tsecurityGroup: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tsecurityGroupRule: &analysisSecurityGroupRuleProperty{\n\t\tcidr: jsii.String(\"cidr\"),\n\t\tdirection: jsii.String(\"direction\"),\n\t\tportRange: &portRangeProperty{\n\t\t\tfrom: jsii.Number(123),\n\t\t\tto: jsii.Number(123),\n\t\t},\n\t\tprefixListId: jsii.String(\"prefixListId\"),\n\t\tprotocol: jsii.String(\"protocol\"),\n\t\tsecurityGroupId: jsii.String(\"securityGroupId\"),\n\t},\n\tsecurityGroups: []interface{}{\n\t\t&analysisComponentProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tid: jsii.String(\"id\"),\n\t\t},\n\t},\n\tsourceVpc: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tstate: jsii.String(\"state\"),\n\tsubnet: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tsubnetRouteTable: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tvpc: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tvpcEndpoint: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tvpcPeeringConnection: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tvpnConnection: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tvpnGateway: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst explanationProperty: ec2.CfnNetworkInsightsAnalysis.ExplanationProperty = {\n  acl: {\n    arn: 'arn',\n    id: 'id',\n  },\n  aclRule: {\n    cidr: 'cidr',\n    egress: false,\n    portRange: {\n      from: 123,\n      to: 123,\n    },\n    protocol: 'protocol',\n    ruleAction: 'ruleAction',\n    ruleNumber: 123,\n  },\n  address: 'address',\n  addresses: ['addresses'],\n  attachedTo: {\n    arn: 'arn',\n    id: 'id',\n  },\n  availabilityZones: ['availabilityZones'],\n  cidrs: ['cidrs'],\n  classicLoadBalancerListener: {\n    instancePort: 123,\n    loadBalancerPort: 123,\n  },\n  component: {\n    arn: 'arn',\n    id: 'id',\n  },\n  customerGateway: {\n    arn: 'arn',\n    id: 'id',\n  },\n  destination: {\n    arn: 'arn',\n    id: 'id',\n  },\n  destinationVpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  direction: 'direction',\n  elasticLoadBalancerListener: {\n    arn: 'arn',\n    id: 'id',\n  },\n  explanationCode: 'explanationCode',\n  ingressRouteTable: {\n    arn: 'arn',\n    id: 'id',\n  },\n  internetGateway: {\n    arn: 'arn',\n    id: 'id',\n  },\n  loadBalancerArn: 'loadBalancerArn',\n  loadBalancerListenerPort: 123,\n  loadBalancerTarget: {\n    address: 'address',\n    availabilityZone: 'availabilityZone',\n    instance: {\n      arn: 'arn',\n      id: 'id',\n    },\n    port: 123,\n  },\n  loadBalancerTargetGroup: {\n    arn: 'arn',\n    id: 'id',\n  },\n  loadBalancerTargetGroups: [{\n    arn: 'arn',\n    id: 'id',\n  }],\n  loadBalancerTargetPort: 123,\n  missingComponent: 'missingComponent',\n  natGateway: {\n    arn: 'arn',\n    id: 'id',\n  },\n  networkInterface: {\n    arn: 'arn',\n    id: 'id',\n  },\n  packetField: 'packetField',\n  port: 123,\n  portRanges: [{\n    from: 123,\n    to: 123,\n  }],\n  prefixList: {\n    arn: 'arn',\n    id: 'id',\n  },\n  protocols: ['protocols'],\n  routeTable: {\n    arn: 'arn',\n    id: 'id',\n  },\n  routeTableRoute: {\n    destinationCidr: 'destinationCidr',\n    destinationPrefixListId: 'destinationPrefixListId',\n    egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n    gatewayId: 'gatewayId',\n    instanceId: 'instanceId',\n    natGatewayId: 'natGatewayId',\n    networkInterfaceId: 'networkInterfaceId',\n    origin: 'origin',\n    transitGatewayId: 'transitGatewayId',\n    vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n  },\n  securityGroup: {\n    arn: 'arn',\n    id: 'id',\n  },\n  securityGroupRule: {\n    cidr: 'cidr',\n    direction: 'direction',\n    portRange: {\n      from: 123,\n      to: 123,\n    },\n    prefixListId: 'prefixListId',\n    protocol: 'protocol',\n    securityGroupId: 'securityGroupId',\n  },\n  securityGroups: [{\n    arn: 'arn',\n    id: 'id',\n  }],\n  sourceVpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  state: 'state',\n  subnet: {\n    arn: 'arn',\n    id: 'id',\n  },\n  subnetRouteTable: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpcEndpoint: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpcPeeringConnection: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpnConnection: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpnGateway: {\n    arn: 'arn',\n    id: 'id',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.ExplanationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.ExplanationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst explanationProperty: ec2.CfnNetworkInsightsAnalysis.ExplanationProperty = {\n  acl: {\n    arn: 'arn',\n    id: 'id',\n  },\n  aclRule: {\n    cidr: 'cidr',\n    egress: false,\n    portRange: {\n      from: 123,\n      to: 123,\n    },\n    protocol: 'protocol',\n    ruleAction: 'ruleAction',\n    ruleNumber: 123,\n  },\n  address: 'address',\n  addresses: ['addresses'],\n  attachedTo: {\n    arn: 'arn',\n    id: 'id',\n  },\n  availabilityZones: ['availabilityZones'],\n  cidrs: ['cidrs'],\n  classicLoadBalancerListener: {\n    instancePort: 123,\n    loadBalancerPort: 123,\n  },\n  component: {\n    arn: 'arn',\n    id: 'id',\n  },\n  customerGateway: {\n    arn: 'arn',\n    id: 'id',\n  },\n  destination: {\n    arn: 'arn',\n    id: 'id',\n  },\n  destinationVpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  direction: 'direction',\n  elasticLoadBalancerListener: {\n    arn: 'arn',\n    id: 'id',\n  },\n  explanationCode: 'explanationCode',\n  ingressRouteTable: {\n    arn: 'arn',\n    id: 'id',\n  },\n  internetGateway: {\n    arn: 'arn',\n    id: 'id',\n  },\n  loadBalancerArn: 'loadBalancerArn',\n  loadBalancerListenerPort: 123,\n  loadBalancerTarget: {\n    address: 'address',\n    availabilityZone: 'availabilityZone',\n    instance: {\n      arn: 'arn',\n      id: 'id',\n    },\n    port: 123,\n  },\n  loadBalancerTargetGroup: {\n    arn: 'arn',\n    id: 'id',\n  },\n  loadBalancerTargetGroups: [{\n    arn: 'arn',\n    id: 'id',\n  }],\n  loadBalancerTargetPort: 123,\n  missingComponent: 'missingComponent',\n  natGateway: {\n    arn: 'arn',\n    id: 'id',\n  },\n  networkInterface: {\n    arn: 'arn',\n    id: 'id',\n  },\n  packetField: 'packetField',\n  port: 123,\n  portRanges: [{\n    from: 123,\n    to: 123,\n  }],\n  prefixList: {\n    arn: 'arn',\n    id: 'id',\n  },\n  protocols: ['protocols'],\n  routeTable: {\n    arn: 'arn',\n    id: 'id',\n  },\n  routeTableRoute: {\n    destinationCidr: 'destinationCidr',\n    destinationPrefixListId: 'destinationPrefixListId',\n    egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n    gatewayId: 'gatewayId',\n    instanceId: 'instanceId',\n    natGatewayId: 'natGatewayId',\n    networkInterfaceId: 'networkInterfaceId',\n    origin: 'origin',\n    transitGatewayId: 'transitGatewayId',\n    vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n  },\n  securityGroup: {\n    arn: 'arn',\n    id: 'id',\n  },\n  securityGroupRule: {\n    cidr: 'cidr',\n    direction: 'direction',\n    portRange: {\n      from: 123,\n      to: 123,\n    },\n    prefixListId: 'prefixListId',\n    protocol: 'protocol',\n    securityGroupId: 'securityGroupId',\n  },\n  securityGroups: [{\n    arn: 'arn',\n    id: 'id',\n  }],\n  sourceVpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  state: 'state',\n  subnet: {\n    arn: 'arn',\n    id: 'id',\n  },\n  subnetRouteTable: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpcEndpoint: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpcPeeringConnection: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpnConnection: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpnGateway: {\n    arn: 'arn',\n    id: 'id',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 13,
        "10": 84,
        "75": 136,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 7,
        "193": 35,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 131,
        "290": 1
      },
      "fqnsFingerprint": "43985938e5d759e87f6bbf3339767ebc2afee573df18ca9fc7dff28a13c27c42"
    },
    "cbd9863e6b00c34ccc139c4d43b7d89a1ab58b4b2daf61cf8fcf34891d026583": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\npath_component_property = ec2.CfnNetworkInsightsAnalysis.PathComponentProperty(\n    acl_rule=ec2.CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty(\n        cidr=\"cidr\",\n        egress=False,\n        port_range=ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n            from=123,\n            to=123\n        ),\n        protocol=\"protocol\",\n        rule_action=\"ruleAction\",\n        rule_number=123\n    ),\n    component=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    destination_vpc=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    inbound_header=ec2.CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty(\n        destination_addresses=[\"destinationAddresses\"],\n        destination_port_ranges=[ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n            from=123,\n            to=123\n        )],\n        protocol=\"protocol\",\n        source_addresses=[\"sourceAddresses\"],\n        source_port_ranges=[ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n            from=123,\n            to=123\n        )]\n    ),\n    outbound_header=ec2.CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty(\n        destination_addresses=[\"destinationAddresses\"],\n        destination_port_ranges=[ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n            from=123,\n            to=123\n        )],\n        protocol=\"protocol\",\n        source_addresses=[\"sourceAddresses\"],\n        source_port_ranges=[ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n            from=123,\n            to=123\n        )]\n    ),\n    route_table_route=ec2.CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty(\n        destination_cidr=\"destinationCidr\",\n        destination_prefix_list_id=\"destinationPrefixListId\",\n        egress_only_internet_gateway_id=\"egressOnlyInternetGatewayId\",\n        gateway_id=\"gatewayId\",\n        instance_id=\"instanceId\",\n        nat_gateway_id=\"natGatewayId\",\n        network_interface_id=\"networkInterfaceId\",\n        origin=\"origin\",\n        transit_gateway_id=\"transitGatewayId\",\n        vpc_peering_connection_id=\"vpcPeeringConnectionId\"\n    ),\n    security_group_rule=ec2.CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty(\n        cidr=\"cidr\",\n        direction=\"direction\",\n        port_range=ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n            from=123,\n            to=123\n        ),\n        prefix_list_id=\"prefixListId\",\n        protocol=\"protocol\",\n        security_group_id=\"securityGroupId\"\n    ),\n    sequence_number=123,\n    source_vpc=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    subnet=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    ),\n    vpc=ec2.CfnNetworkInsightsAnalysis.AnalysisComponentProperty(\n        arn=\"arn\",\n        id=\"id\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPathComponentProperty pathComponentProperty = new PathComponentProperty {\n    AclRule = new AnalysisAclRuleProperty {\n        Cidr = \"cidr\",\n        Egress = false,\n        PortRange = new PortRangeProperty {\n            From = 123,\n            To = 123\n        },\n        Protocol = \"protocol\",\n        RuleAction = \"ruleAction\",\n        RuleNumber = 123\n    },\n    Component = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    DestinationVpc = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    InboundHeader = new AnalysisPacketHeaderProperty {\n        DestinationAddresses = new [] { \"destinationAddresses\" },\n        DestinationPortRanges = new [] { new PortRangeProperty {\n            From = 123,\n            To = 123\n        } },\n        Protocol = \"protocol\",\n        SourceAddresses = new [] { \"sourceAddresses\" },\n        SourcePortRanges = new [] { new PortRangeProperty {\n            From = 123,\n            To = 123\n        } }\n    },\n    OutboundHeader = new AnalysisPacketHeaderProperty {\n        DestinationAddresses = new [] { \"destinationAddresses\" },\n        DestinationPortRanges = new [] { new PortRangeProperty {\n            From = 123,\n            To = 123\n        } },\n        Protocol = \"protocol\",\n        SourceAddresses = new [] { \"sourceAddresses\" },\n        SourcePortRanges = new [] { new PortRangeProperty {\n            From = 123,\n            To = 123\n        } }\n    },\n    RouteTableRoute = new AnalysisRouteTableRouteProperty {\n        DestinationCidr = \"destinationCidr\",\n        DestinationPrefixListId = \"destinationPrefixListId\",\n        EgressOnlyInternetGatewayId = \"egressOnlyInternetGatewayId\",\n        GatewayId = \"gatewayId\",\n        InstanceId = \"instanceId\",\n        NatGatewayId = \"natGatewayId\",\n        NetworkInterfaceId = \"networkInterfaceId\",\n        Origin = \"origin\",\n        TransitGatewayId = \"transitGatewayId\",\n        VpcPeeringConnectionId = \"vpcPeeringConnectionId\"\n    },\n    SecurityGroupRule = new AnalysisSecurityGroupRuleProperty {\n        Cidr = \"cidr\",\n        Direction = \"direction\",\n        PortRange = new PortRangeProperty {\n            From = 123,\n            To = 123\n        },\n        PrefixListId = \"prefixListId\",\n        Protocol = \"protocol\",\n        SecurityGroupId = \"securityGroupId\"\n    },\n    SequenceNumber = 123,\n    SourceVpc = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    Subnet = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    },\n    Vpc = new AnalysisComponentProperty {\n        Arn = \"arn\",\n        Id = \"id\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPathComponentProperty pathComponentProperty = PathComponentProperty.builder()\n        .aclRule(AnalysisAclRuleProperty.builder()\n                .cidr(\"cidr\")\n                .egress(false)\n                .portRange(PortRangeProperty.builder()\n                        .from(123)\n                        .to(123)\n                        .build())\n                .protocol(\"protocol\")\n                .ruleAction(\"ruleAction\")\n                .ruleNumber(123)\n                .build())\n        .component(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .destinationVpc(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .inboundHeader(AnalysisPacketHeaderProperty.builder()\n                .destinationAddresses(List.of(\"destinationAddresses\"))\n                .destinationPortRanges(List.of(PortRangeProperty.builder()\n                        .from(123)\n                        .to(123)\n                        .build()))\n                .protocol(\"protocol\")\n                .sourceAddresses(List.of(\"sourceAddresses\"))\n                .sourcePortRanges(List.of(PortRangeProperty.builder()\n                        .from(123)\n                        .to(123)\n                        .build()))\n                .build())\n        .outboundHeader(AnalysisPacketHeaderProperty.builder()\n                .destinationAddresses(List.of(\"destinationAddresses\"))\n                .destinationPortRanges(List.of(PortRangeProperty.builder()\n                        .from(123)\n                        .to(123)\n                        .build()))\n                .protocol(\"protocol\")\n                .sourceAddresses(List.of(\"sourceAddresses\"))\n                .sourcePortRanges(List.of(PortRangeProperty.builder()\n                        .from(123)\n                        .to(123)\n                        .build()))\n                .build())\n        .routeTableRoute(AnalysisRouteTableRouteProperty.builder()\n                .destinationCidr(\"destinationCidr\")\n                .destinationPrefixListId(\"destinationPrefixListId\")\n                .egressOnlyInternetGatewayId(\"egressOnlyInternetGatewayId\")\n                .gatewayId(\"gatewayId\")\n                .instanceId(\"instanceId\")\n                .natGatewayId(\"natGatewayId\")\n                .networkInterfaceId(\"networkInterfaceId\")\n                .origin(\"origin\")\n                .transitGatewayId(\"transitGatewayId\")\n                .vpcPeeringConnectionId(\"vpcPeeringConnectionId\")\n                .build())\n        .securityGroupRule(AnalysisSecurityGroupRuleProperty.builder()\n                .cidr(\"cidr\")\n                .direction(\"direction\")\n                .portRange(PortRangeProperty.builder()\n                        .from(123)\n                        .to(123)\n                        .build())\n                .prefixListId(\"prefixListId\")\n                .protocol(\"protocol\")\n                .securityGroupId(\"securityGroupId\")\n                .build())\n        .sequenceNumber(123)\n        .sourceVpc(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .subnet(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .vpc(AnalysisComponentProperty.builder()\n                .arn(\"arn\")\n                .id(\"id\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\npathComponentProperty := &pathComponentProperty{\n\taclRule: &analysisAclRuleProperty{\n\t\tcidr: jsii.String(\"cidr\"),\n\t\tegress: jsii.Boolean(false),\n\t\tportRange: &portRangeProperty{\n\t\t\tfrom: jsii.Number(123),\n\t\t\tto: jsii.Number(123),\n\t\t},\n\t\tprotocol: jsii.String(\"protocol\"),\n\t\truleAction: jsii.String(\"ruleAction\"),\n\t\truleNumber: jsii.Number(123),\n\t},\n\tcomponent: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tdestinationVpc: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tinboundHeader: &analysisPacketHeaderProperty{\n\t\tdestinationAddresses: []*string{\n\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t},\n\t\tdestinationPortRanges: []interface{}{\n\t\t\t&portRangeProperty{\n\t\t\t\tfrom: jsii.Number(123),\n\t\t\t\tto: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tprotocol: jsii.String(\"protocol\"),\n\t\tsourceAddresses: []*string{\n\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t},\n\t\tsourcePortRanges: []interface{}{\n\t\t\t&portRangeProperty{\n\t\t\t\tfrom: jsii.Number(123),\n\t\t\t\tto: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\toutboundHeader: &analysisPacketHeaderProperty{\n\t\tdestinationAddresses: []*string{\n\t\t\tjsii.String(\"destinationAddresses\"),\n\t\t},\n\t\tdestinationPortRanges: []interface{}{\n\t\t\t&portRangeProperty{\n\t\t\t\tfrom: jsii.Number(123),\n\t\t\t\tto: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tprotocol: jsii.String(\"protocol\"),\n\t\tsourceAddresses: []*string{\n\t\t\tjsii.String(\"sourceAddresses\"),\n\t\t},\n\t\tsourcePortRanges: []interface{}{\n\t\t\t&portRangeProperty{\n\t\t\t\tfrom: jsii.Number(123),\n\t\t\t\tto: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\trouteTableRoute: &analysisRouteTableRouteProperty{\n\t\tdestinationCidr: jsii.String(\"destinationCidr\"),\n\t\tdestinationPrefixListId: jsii.String(\"destinationPrefixListId\"),\n\t\tegressOnlyInternetGatewayId: jsii.String(\"egressOnlyInternetGatewayId\"),\n\t\tgatewayId: jsii.String(\"gatewayId\"),\n\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\tnatGatewayId: jsii.String(\"natGatewayId\"),\n\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\torigin: jsii.String(\"origin\"),\n\t\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\t\tvpcPeeringConnectionId: jsii.String(\"vpcPeeringConnectionId\"),\n\t},\n\tsecurityGroupRule: &analysisSecurityGroupRuleProperty{\n\t\tcidr: jsii.String(\"cidr\"),\n\t\tdirection: jsii.String(\"direction\"),\n\t\tportRange: &portRangeProperty{\n\t\t\tfrom: jsii.Number(123),\n\t\t\tto: jsii.Number(123),\n\t\t},\n\t\tprefixListId: jsii.String(\"prefixListId\"),\n\t\tprotocol: jsii.String(\"protocol\"),\n\t\tsecurityGroupId: jsii.String(\"securityGroupId\"),\n\t},\n\tsequenceNumber: jsii.Number(123),\n\tsourceVpc: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tsubnet: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n\tvpc: &analysisComponentProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tid: jsii.String(\"id\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst pathComponentProperty: ec2.CfnNetworkInsightsAnalysis.PathComponentProperty = {\n  aclRule: {\n    cidr: 'cidr',\n    egress: false,\n    portRange: {\n      from: 123,\n      to: 123,\n    },\n    protocol: 'protocol',\n    ruleAction: 'ruleAction',\n    ruleNumber: 123,\n  },\n  component: {\n    arn: 'arn',\n    id: 'id',\n  },\n  destinationVpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  inboundHeader: {\n    destinationAddresses: ['destinationAddresses'],\n    destinationPortRanges: [{\n      from: 123,\n      to: 123,\n    }],\n    protocol: 'protocol',\n    sourceAddresses: ['sourceAddresses'],\n    sourcePortRanges: [{\n      from: 123,\n      to: 123,\n    }],\n  },\n  outboundHeader: {\n    destinationAddresses: ['destinationAddresses'],\n    destinationPortRanges: [{\n      from: 123,\n      to: 123,\n    }],\n    protocol: 'protocol',\n    sourceAddresses: ['sourceAddresses'],\n    sourcePortRanges: [{\n      from: 123,\n      to: 123,\n    }],\n  },\n  routeTableRoute: {\n    destinationCidr: 'destinationCidr',\n    destinationPrefixListId: 'destinationPrefixListId',\n    egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n    gatewayId: 'gatewayId',\n    instanceId: 'instanceId',\n    natGatewayId: 'natGatewayId',\n    networkInterfaceId: 'networkInterfaceId',\n    origin: 'origin',\n    transitGatewayId: 'transitGatewayId',\n    vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n  },\n  securityGroupRule: {\n    cidr: 'cidr',\n    direction: 'direction',\n    portRange: {\n      from: 123,\n      to: 123,\n    },\n    prefixListId: 'prefixListId',\n    protocol: 'protocol',\n    securityGroupId: 'securityGroupId',\n  },\n  sequenceNumber: 123,\n  sourceVpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  subnet: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.PathComponentProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.PathComponentProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst pathComponentProperty: ec2.CfnNetworkInsightsAnalysis.PathComponentProperty = {\n  aclRule: {\n    cidr: 'cidr',\n    egress: false,\n    portRange: {\n      from: 123,\n      to: 123,\n    },\n    protocol: 'protocol',\n    ruleAction: 'ruleAction',\n    ruleNumber: 123,\n  },\n  component: {\n    arn: 'arn',\n    id: 'id',\n  },\n  destinationVpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  inboundHeader: {\n    destinationAddresses: ['destinationAddresses'],\n    destinationPortRanges: [{\n      from: 123,\n      to: 123,\n    }],\n    protocol: 'protocol',\n    sourceAddresses: ['sourceAddresses'],\n    sourcePortRanges: [{\n      from: 123,\n      to: 123,\n    }],\n  },\n  outboundHeader: {\n    destinationAddresses: ['destinationAddresses'],\n    destinationPortRanges: [{\n      from: 123,\n      to: 123,\n    }],\n    protocol: 'protocol',\n    sourceAddresses: ['sourceAddresses'],\n    sourcePortRanges: [{\n      from: 123,\n      to: 123,\n    }],\n  },\n  routeTableRoute: {\n    destinationCidr: 'destinationCidr',\n    destinationPrefixListId: 'destinationPrefixListId',\n    egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n    gatewayId: 'gatewayId',\n    instanceId: 'instanceId',\n    natGatewayId: 'natGatewayId',\n    networkInterfaceId: 'networkInterfaceId',\n    origin: 'origin',\n    transitGatewayId: 'transitGatewayId',\n    vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n  },\n  securityGroupRule: {\n    cidr: 'cidr',\n    direction: 'direction',\n    portRange: {\n      from: 123,\n      to: 123,\n    },\n    prefixListId: 'prefixListId',\n    protocol: 'protocol',\n    securityGroupId: 'securityGroupId',\n  },\n  sequenceNumber: 123,\n  sourceVpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n  subnet: {\n    arn: 'arn',\n    id: 'id',\n  },\n  vpc: {\n    arn: 'arn',\n    id: 'id',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 14,
        "10": 35,
        "75": 70,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 8,
        "193": 17,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 65,
        "290": 1
      },
      "fqnsFingerprint": "3ad6ebcc56f5e272a681a4aa419e760d7017f21e5594851b48423a09b3a12961"
    },
    "98e5fba7508add914d6055bafb835b4c1b684eec2fb766cb40fb56b475d890da": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nport_range_property = ec2.CfnNetworkInsightsAnalysis.PortRangeProperty(\n    from=123,\n    to=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPortRangeProperty portRangeProperty = new PortRangeProperty {\n    From = 123,\n    To = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPortRangeProperty portRangeProperty = PortRangeProperty.builder()\n        .from(123)\n        .to(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nportRangeProperty := &portRangeProperty{\n\tfrom: jsii.Number(123),\n\tto: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst portRangeProperty: ec2.CfnNetworkInsightsAnalysis.PortRangeProperty = {\n  from: 123,\n  to: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.PortRangeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis.PortRangeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst portRangeProperty: ec2.CfnNetworkInsightsAnalysis.PortRangeProperty = {\n  from: 123,\n  to: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "da736c804645cb43d29e9ce73d84d95199786f454f6868e35945d16bbaccda45"
    },
    "b5f5a5af8f1b954c75626a90f26ba9195b5b160228e74cc4aff91f6b9ce930ef": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_insights_analysis_props = ec2.CfnNetworkInsightsAnalysisProps(\n    network_insights_path_id=\"networkInsightsPathId\",\n\n    # the properties below are optional\n    filter_in_arns=[\"filterInArns\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInsightsAnalysisProps cfnNetworkInsightsAnalysisProps = new CfnNetworkInsightsAnalysisProps {\n    NetworkInsightsPathId = \"networkInsightsPathId\",\n\n    // the properties below are optional\n    FilterInArns = new [] { \"filterInArns\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInsightsAnalysisProps cfnNetworkInsightsAnalysisProps = CfnNetworkInsightsAnalysisProps.builder()\n        .networkInsightsPathId(\"networkInsightsPathId\")\n\n        // the properties below are optional\n        .filterInArns(List.of(\"filterInArns\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInsightsAnalysisProps := &cfnNetworkInsightsAnalysisProps{\n\tnetworkInsightsPathId: jsii.String(\"networkInsightsPathId\"),\n\n\t// the properties below are optional\n\tfilterInArns: []*string{\n\t\tjsii.String(\"filterInArns\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInsightsAnalysisProps: ec2.CfnNetworkInsightsAnalysisProps = {\n  networkInsightsPathId: 'networkInsightsPathId',\n\n  // the properties below are optional\n  filterInArns: ['filterInArns'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysisProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysisProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInsightsAnalysisProps: ec2.CfnNetworkInsightsAnalysisProps = {\n  networkInsightsPathId: 'networkInsightsPathId',\n\n  // the properties below are optional\n  filterInArns: ['filterInArns'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "dfca9d4cc39eadccb354ab5e7c0d1571369d9a4c50c4c7f43796d0630039911a"
    },
    "ebf0ee584c1f6153e001bd75ccc2380c8e513fd0816a914f10dde7c7ff49695b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_insights_path = ec2.CfnNetworkInsightsPath(self, \"MyCfnNetworkInsightsPath\",\n    destination=\"destination\",\n    protocol=\"protocol\",\n    source=\"source\",\n\n    # the properties below are optional\n    destination_ip=\"destinationIp\",\n    destination_port=123,\n    source_ip=\"sourceIp\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInsightsPath cfnNetworkInsightsPath = new CfnNetworkInsightsPath(this, \"MyCfnNetworkInsightsPath\", new CfnNetworkInsightsPathProps {\n    Destination = \"destination\",\n    Protocol = \"protocol\",\n    Source = \"source\",\n\n    // the properties below are optional\n    DestinationIp = \"destinationIp\",\n    DestinationPort = 123,\n    SourceIp = \"sourceIp\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInsightsPath cfnNetworkInsightsPath = CfnNetworkInsightsPath.Builder.create(this, \"MyCfnNetworkInsightsPath\")\n        .destination(\"destination\")\n        .protocol(\"protocol\")\n        .source(\"source\")\n\n        // the properties below are optional\n        .destinationIp(\"destinationIp\")\n        .destinationPort(123)\n        .sourceIp(\"sourceIp\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInsightsPath := ec2.NewCfnNetworkInsightsPath(this, jsii.String(\"MyCfnNetworkInsightsPath\"), &cfnNetworkInsightsPathProps{\n\tdestination: jsii.String(\"destination\"),\n\tprotocol: jsii.String(\"protocol\"),\n\tsource: jsii.String(\"source\"),\n\n\t// the properties below are optional\n\tdestinationIp: jsii.String(\"destinationIp\"),\n\tdestinationPort: jsii.Number(123),\n\tsourceIp: jsii.String(\"sourceIp\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInsightsPath = new ec2.CfnNetworkInsightsPath(this, 'MyCfnNetworkInsightsPath', {\n  destination: 'destination',\n  protocol: 'protocol',\n  source: 'source',\n\n  // the properties below are optional\n  destinationIp: 'destinationIp',\n  destinationPort: 123,\n  sourceIp: 'sourceIp',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsPath"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsPath",
        "@aws-cdk/aws-ec2.CfnNetworkInsightsPathProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInsightsPath = new ec2.CfnNetworkInsightsPath(this, 'MyCfnNetworkInsightsPath', {\n  destination: 'destination',\n  protocol: 'protocol',\n  source: 'source',\n\n  // the properties below are optional\n  destinationIp: 'destinationIp',\n  destinationPort: 123,\n  sourceIp: 'sourceIp',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 13,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "9381b70a5d309f2b749092971bd402ad6dd9a72888645debc28b47ebc685c357"
    },
    "016618a841fb6d68bbab4d57a0cdf8097534cff66d2448ba46366d0e6a4b1813": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_insights_path_props = ec2.CfnNetworkInsightsPathProps(\n    destination=\"destination\",\n    protocol=\"protocol\",\n    source=\"source\",\n\n    # the properties below are optional\n    destination_ip=\"destinationIp\",\n    destination_port=123,\n    source_ip=\"sourceIp\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInsightsPathProps cfnNetworkInsightsPathProps = new CfnNetworkInsightsPathProps {\n    Destination = \"destination\",\n    Protocol = \"protocol\",\n    Source = \"source\",\n\n    // the properties below are optional\n    DestinationIp = \"destinationIp\",\n    DestinationPort = 123,\n    SourceIp = \"sourceIp\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInsightsPathProps cfnNetworkInsightsPathProps = CfnNetworkInsightsPathProps.builder()\n        .destination(\"destination\")\n        .protocol(\"protocol\")\n        .source(\"source\")\n\n        // the properties below are optional\n        .destinationIp(\"destinationIp\")\n        .destinationPort(123)\n        .sourceIp(\"sourceIp\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInsightsPathProps := &cfnNetworkInsightsPathProps{\n\tdestination: jsii.String(\"destination\"),\n\tprotocol: jsii.String(\"protocol\"),\n\tsource: jsii.String(\"source\"),\n\n\t// the properties below are optional\n\tdestinationIp: jsii.String(\"destinationIp\"),\n\tdestinationPort: jsii.Number(123),\n\tsourceIp: jsii.String(\"sourceIp\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInsightsPathProps: ec2.CfnNetworkInsightsPathProps = {\n  destination: 'destination',\n  protocol: 'protocol',\n  source: 'source',\n\n  // the properties below are optional\n  destinationIp: 'destinationIp',\n  destinationPort: 123,\n  sourceIp: 'sourceIp',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInsightsPathProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInsightsPathProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInsightsPathProps: ec2.CfnNetworkInsightsPathProps = {\n  destination: 'destination',\n  protocol: 'protocol',\n  source: 'source',\n\n  // the properties below are optional\n  destinationIp: 'destinationIp',\n  destinationPort: 123,\n  sourceIp: 'sourceIp',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 13,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "0ea7a66a155e174dab04c725ba777cc2df965d5bdb774ebce9cfee850da9bdde"
    },
    "cce0848db808cd3ee5f4a2098975c03bba1c80ab36c4f91ae7559f0a5b122526": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_interface = ec2.CfnNetworkInterface(self, \"MyCfnNetworkInterface\",\n    subnet_id=\"subnetId\",\n\n    # the properties below are optional\n    description=\"description\",\n    group_set=[\"groupSet\"],\n    interface_type=\"interfaceType\",\n    ipv6_address_count=123,\n    ipv6_addresses=[ec2.CfnNetworkInterface.InstanceIpv6AddressProperty(\n        ipv6_address=\"ipv6Address\"\n    )],\n    private_ip_address=\"privateIpAddress\",\n    private_ip_addresses=[ec2.CfnNetworkInterface.PrivateIpAddressSpecificationProperty(\n        primary=False,\n        private_ip_address=\"privateIpAddress\"\n    )],\n    secondary_private_ip_address_count=123,\n    source_dest_check=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInterface cfnNetworkInterface = new CfnNetworkInterface(this, \"MyCfnNetworkInterface\", new CfnNetworkInterfaceProps {\n    SubnetId = \"subnetId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    GroupSet = new [] { \"groupSet\" },\n    InterfaceType = \"interfaceType\",\n    Ipv6AddressCount = 123,\n    Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n        Ipv6Address = \"ipv6Address\"\n    } },\n    PrivateIpAddress = \"privateIpAddress\",\n    PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n        Primary = false,\n        PrivateIpAddress = \"privateIpAddress\"\n    } },\n    SecondaryPrivateIpAddressCount = 123,\n    SourceDestCheck = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInterface cfnNetworkInterface = CfnNetworkInterface.Builder.create(this, \"MyCfnNetworkInterface\")\n        .subnetId(\"subnetId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .groupSet(List.of(\"groupSet\"))\n        .interfaceType(\"interfaceType\")\n        .ipv6AddressCount(123)\n        .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                .ipv6Address(\"ipv6Address\")\n                .build()))\n        .privateIpAddress(\"privateIpAddress\")\n        .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                .primary(false)\n                .privateIpAddress(\"privateIpAddress\")\n                .build()))\n        .secondaryPrivateIpAddressCount(123)\n        .sourceDestCheck(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInterface := ec2.NewCfnNetworkInterface(this, jsii.String(\"MyCfnNetworkInterface\"), &cfnNetworkInterfaceProps{\n\tsubnetId: jsii.String(\"subnetId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tgroupSet: []*string{\n\t\tjsii.String(\"groupSet\"),\n\t},\n\tinterfaceType: jsii.String(\"interfaceType\"),\n\tipv6AddressCount: jsii.Number(123),\n\tipv6Addresses: []interface{}{\n\t\t&instanceIpv6AddressProperty{\n\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t},\n\t},\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\tprivateIpAddresses: []interface{}{\n\t\t&privateIpAddressSpecificationProperty{\n\t\t\tprimary: jsii.Boolean(false),\n\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t},\n\t},\n\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\tsourceDestCheck: jsii.Boolean(false),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInterface = new ec2.CfnNetworkInterface(this, 'MyCfnNetworkInterface', {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  description: 'description',\n  groupSet: ['groupSet'],\n  interfaceType: 'interfaceType',\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  privateIpAddress: 'privateIpAddress',\n  privateIpAddresses: [{\n    primary: false,\n    privateIpAddress: 'privateIpAddress',\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  sourceDestCheck: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInterface"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInterface",
        "@aws-cdk/aws-ec2.CfnNetworkInterfaceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInterface = new ec2.CfnNetworkInterface(this, 'MyCfnNetworkInterface', {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  description: 'description',\n  groupSet: ['groupSet'],\n  interfaceType: 'interfaceType',\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  privateIpAddress: 'privateIpAddress',\n  privateIpAddresses: [{\n    primary: false,\n    privateIpAddress: 'privateIpAddress',\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  sourceDestCheck: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 20,
        "91": 2,
        "104": 1,
        "192": 4,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "c83c771d4aa295a14506cb1eba837676d60f6e22bcf5b626d8060bad7f2964ce"
    },
    "5d6a1e6f63b987851794d18b1a531d5c15ab4d4be3bf97080607fd376f116173": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_ipv6_address_property = ec2.CfnNetworkInterface.InstanceIpv6AddressProperty(\n    ipv6_address=\"ipv6Address\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceIpv6AddressProperty instanceIpv6AddressProperty = new InstanceIpv6AddressProperty {\n    Ipv6Address = \"ipv6Address\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceIpv6AddressProperty instanceIpv6AddressProperty = InstanceIpv6AddressProperty.builder()\n        .ipv6Address(\"ipv6Address\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceIpv6AddressProperty := &instanceIpv6AddressProperty{\n\tipv6Address: jsii.String(\"ipv6Address\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceIpv6AddressProperty: ec2.CfnNetworkInterface.InstanceIpv6AddressProperty = {\n  ipv6Address: 'ipv6Address',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInterface.InstanceIpv6AddressProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInterface.InstanceIpv6AddressProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceIpv6AddressProperty: ec2.CfnNetworkInterface.InstanceIpv6AddressProperty = {\n  ipv6Address: 'ipv6Address',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7e594ea70713cf7a13af1edbfbe4191d7c7134ea0cea5a4edc749ba4fd078a61"
    },
    "36d552cac16916bfe66b730d5771f5feb10d52e6b01947e7e72f23e7cb14b2ab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_ip_address_specification_property = ec2.CfnNetworkInterface.PrivateIpAddressSpecificationProperty(\n    primary=False,\n    private_ip_address=\"privateIpAddress\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateIpAddressSpecificationProperty privateIpAddressSpecificationProperty = new PrivateIpAddressSpecificationProperty {\n    Primary = false,\n    PrivateIpAddress = \"privateIpAddress\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateIpAddressSpecificationProperty privateIpAddressSpecificationProperty = PrivateIpAddressSpecificationProperty.builder()\n        .primary(false)\n        .privateIpAddress(\"privateIpAddress\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateIpAddressSpecificationProperty := &privateIpAddressSpecificationProperty{\n\tprimary: jsii.Boolean(false),\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateIpAddressSpecificationProperty: ec2.CfnNetworkInterface.PrivateIpAddressSpecificationProperty = {\n  primary: false,\n  privateIpAddress: 'privateIpAddress',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInterface.PrivateIpAddressSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInterface.PrivateIpAddressSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateIpAddressSpecificationProperty: ec2.CfnNetworkInterface.PrivateIpAddressSpecificationProperty = {\n  primary: false,\n  privateIpAddress: 'privateIpAddress',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d7e4b11a6a98e9e606053b43fe0e2ead3f305b207cac11f2dae22dd188afd354"
    },
    "967761333848e89347ebcad0dd0e27e562a9bf16589299b25a91f9445a2c7fd6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_interface_attachment = ec2.CfnNetworkInterfaceAttachment(self, \"MyCfnNetworkInterfaceAttachment\",\n    device_index=\"deviceIndex\",\n    instance_id=\"instanceId\",\n    network_interface_id=\"networkInterfaceId\",\n\n    # the properties below are optional\n    delete_on_termination=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInterfaceAttachment cfnNetworkInterfaceAttachment = new CfnNetworkInterfaceAttachment(this, \"MyCfnNetworkInterfaceAttachment\", new CfnNetworkInterfaceAttachmentProps {\n    DeviceIndex = \"deviceIndex\",\n    InstanceId = \"instanceId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n\n    // the properties below are optional\n    DeleteOnTermination = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInterfaceAttachment cfnNetworkInterfaceAttachment = CfnNetworkInterfaceAttachment.Builder.create(this, \"MyCfnNetworkInterfaceAttachment\")\n        .deviceIndex(\"deviceIndex\")\n        .instanceId(\"instanceId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n\n        // the properties below are optional\n        .deleteOnTermination(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInterfaceAttachment := ec2.NewCfnNetworkInterfaceAttachment(this, jsii.String(\"MyCfnNetworkInterfaceAttachment\"), &cfnNetworkInterfaceAttachmentProps{\n\tdeviceIndex: jsii.String(\"deviceIndex\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\n\t// the properties below are optional\n\tdeleteOnTermination: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInterfaceAttachment = new ec2.CfnNetworkInterfaceAttachment(this, 'MyCfnNetworkInterfaceAttachment', {\n  deviceIndex: 'deviceIndex',\n  instanceId: 'instanceId',\n  networkInterfaceId: 'networkInterfaceId',\n\n  // the properties below are optional\n  deleteOnTermination: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInterfaceAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInterfaceAttachment",
        "@aws-cdk/aws-ec2.CfnNetworkInterfaceAttachmentProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInterfaceAttachment = new ec2.CfnNetworkInterfaceAttachment(this, 'MyCfnNetworkInterfaceAttachment', {\n  deviceIndex: 'deviceIndex',\n  instanceId: 'instanceId',\n  networkInterfaceId: 'networkInterfaceId',\n\n  // the properties below are optional\n  deleteOnTermination: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "811c5481f75b3c5f6d391f192387a8eab65c23012419db9e3831075e8055a234"
    },
    "d31842a3ae72da7fab52ab201d543457f72908e0b49d64dfa94c9fce2ab5c291": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_interface_attachment_props = ec2.CfnNetworkInterfaceAttachmentProps(\n    device_index=\"deviceIndex\",\n    instance_id=\"instanceId\",\n    network_interface_id=\"networkInterfaceId\",\n\n    # the properties below are optional\n    delete_on_termination=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInterfaceAttachmentProps cfnNetworkInterfaceAttachmentProps = new CfnNetworkInterfaceAttachmentProps {\n    DeviceIndex = \"deviceIndex\",\n    InstanceId = \"instanceId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n\n    // the properties below are optional\n    DeleteOnTermination = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInterfaceAttachmentProps cfnNetworkInterfaceAttachmentProps = CfnNetworkInterfaceAttachmentProps.builder()\n        .deviceIndex(\"deviceIndex\")\n        .instanceId(\"instanceId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n\n        // the properties below are optional\n        .deleteOnTermination(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInterfaceAttachmentProps := &cfnNetworkInterfaceAttachmentProps{\n\tdeviceIndex: jsii.String(\"deviceIndex\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\n\t// the properties below are optional\n\tdeleteOnTermination: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInterfaceAttachmentProps: ec2.CfnNetworkInterfaceAttachmentProps = {\n  deviceIndex: 'deviceIndex',\n  instanceId: 'instanceId',\n  networkInterfaceId: 'networkInterfaceId',\n\n  // the properties below are optional\n  deleteOnTermination: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInterfaceAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInterfaceAttachmentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInterfaceAttachmentProps: ec2.CfnNetworkInterfaceAttachmentProps = {\n  deviceIndex: 'deviceIndex',\n  instanceId: 'instanceId',\n  networkInterfaceId: 'networkInterfaceId',\n\n  // the properties below are optional\n  deleteOnTermination: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "aba9d25e6099deaec2a21e5d6db6a1deeb3d921762afa8556ac164265d62b5c3"
    },
    "4b4e5e3c337fd6895a9e758c172bc3e6694c2ab80541c97e70dfaeaf464d27a8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_interface_permission = ec2.CfnNetworkInterfacePermission(self, \"MyCfnNetworkInterfacePermission\",\n    aws_account_id=\"awsAccountId\",\n    network_interface_id=\"networkInterfaceId\",\n    permission=\"permission\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInterfacePermission cfnNetworkInterfacePermission = new CfnNetworkInterfacePermission(this, \"MyCfnNetworkInterfacePermission\", new CfnNetworkInterfacePermissionProps {\n    AwsAccountId = \"awsAccountId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    Permission = \"permission\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInterfacePermission cfnNetworkInterfacePermission = CfnNetworkInterfacePermission.Builder.create(this, \"MyCfnNetworkInterfacePermission\")\n        .awsAccountId(\"awsAccountId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .permission(\"permission\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInterfacePermission := ec2.NewCfnNetworkInterfacePermission(this, jsii.String(\"MyCfnNetworkInterfacePermission\"), &cfnNetworkInterfacePermissionProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tpermission: jsii.String(\"permission\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInterfacePermission = new ec2.CfnNetworkInterfacePermission(this, 'MyCfnNetworkInterfacePermission', {\n  awsAccountId: 'awsAccountId',\n  networkInterfaceId: 'networkInterfaceId',\n  permission: 'permission',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInterfacePermission"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInterfacePermission",
        "@aws-cdk/aws-ec2.CfnNetworkInterfacePermissionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInterfacePermission = new ec2.CfnNetworkInterfacePermission(this, 'MyCfnNetworkInterfacePermission', {\n  awsAccountId: 'awsAccountId',\n  networkInterfaceId: 'networkInterfaceId',\n  permission: 'permission',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d33caada8b62cc9ec0df98354ecfe688ddc318bdccab9384463ae47cbbefc07c"
    },
    "542f75a2244464fa71004746d16061c669a3e53a5b9f2ce664f7514e5848771c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_interface_permission_props = ec2.CfnNetworkInterfacePermissionProps(\n    aws_account_id=\"awsAccountId\",\n    network_interface_id=\"networkInterfaceId\",\n    permission=\"permission\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInterfacePermissionProps cfnNetworkInterfacePermissionProps = new CfnNetworkInterfacePermissionProps {\n    AwsAccountId = \"awsAccountId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    Permission = \"permission\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInterfacePermissionProps cfnNetworkInterfacePermissionProps = CfnNetworkInterfacePermissionProps.builder()\n        .awsAccountId(\"awsAccountId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .permission(\"permission\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInterfacePermissionProps := &cfnNetworkInterfacePermissionProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tpermission: jsii.String(\"permission\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInterfacePermissionProps: ec2.CfnNetworkInterfacePermissionProps = {\n  awsAccountId: 'awsAccountId',\n  networkInterfaceId: 'networkInterfaceId',\n  permission: 'permission',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInterfacePermissionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInterfacePermissionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInterfacePermissionProps: ec2.CfnNetworkInterfacePermissionProps = {\n  awsAccountId: 'awsAccountId',\n  networkInterfaceId: 'networkInterfaceId',\n  permission: 'permission',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8b6582ba94ce9492d3af9eb64d5ce024c0536da5721041a36112cc231a5b31de"
    },
    "c2a1f748c860eef2d29f8c5368946ecdec1e6e5d360dd654019160e24e94f7ae": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_network_interface_props = ec2.CfnNetworkInterfaceProps(\n    subnet_id=\"subnetId\",\n\n    # the properties below are optional\n    description=\"description\",\n    group_set=[\"groupSet\"],\n    interface_type=\"interfaceType\",\n    ipv6_address_count=123,\n    ipv6_addresses=[ec2.CfnNetworkInterface.InstanceIpv6AddressProperty(\n        ipv6_address=\"ipv6Address\"\n    )],\n    private_ip_address=\"privateIpAddress\",\n    private_ip_addresses=[ec2.CfnNetworkInterface.PrivateIpAddressSpecificationProperty(\n        primary=False,\n        private_ip_address=\"privateIpAddress\"\n    )],\n    secondary_private_ip_address_count=123,\n    source_dest_check=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnNetworkInterfaceProps cfnNetworkInterfaceProps = new CfnNetworkInterfaceProps {\n    SubnetId = \"subnetId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    GroupSet = new [] { \"groupSet\" },\n    InterfaceType = \"interfaceType\",\n    Ipv6AddressCount = 123,\n    Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n        Ipv6Address = \"ipv6Address\"\n    } },\n    PrivateIpAddress = \"privateIpAddress\",\n    PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n        Primary = false,\n        PrivateIpAddress = \"privateIpAddress\"\n    } },\n    SecondaryPrivateIpAddressCount = 123,\n    SourceDestCheck = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnNetworkInterfaceProps cfnNetworkInterfaceProps = CfnNetworkInterfaceProps.builder()\n        .subnetId(\"subnetId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .groupSet(List.of(\"groupSet\"))\n        .interfaceType(\"interfaceType\")\n        .ipv6AddressCount(123)\n        .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                .ipv6Address(\"ipv6Address\")\n                .build()))\n        .privateIpAddress(\"privateIpAddress\")\n        .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                .primary(false)\n                .privateIpAddress(\"privateIpAddress\")\n                .build()))\n        .secondaryPrivateIpAddressCount(123)\n        .sourceDestCheck(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnNetworkInterfaceProps := &cfnNetworkInterfaceProps{\n\tsubnetId: jsii.String(\"subnetId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tgroupSet: []*string{\n\t\tjsii.String(\"groupSet\"),\n\t},\n\tinterfaceType: jsii.String(\"interfaceType\"),\n\tipv6AddressCount: jsii.Number(123),\n\tipv6Addresses: []interface{}{\n\t\t&instanceIpv6AddressProperty{\n\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t},\n\t},\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\tprivateIpAddresses: []interface{}{\n\t\t&privateIpAddressSpecificationProperty{\n\t\t\tprimary: jsii.Boolean(false),\n\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\t\t},\n\t},\n\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\tsourceDestCheck: jsii.Boolean(false),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnNetworkInterfaceProps: ec2.CfnNetworkInterfaceProps = {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  description: 'description',\n  groupSet: ['groupSet'],\n  interfaceType: 'interfaceType',\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  privateIpAddress: 'privateIpAddress',\n  privateIpAddresses: [{\n    primary: false,\n    privateIpAddress: 'privateIpAddress',\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  sourceDestCheck: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnNetworkInterfaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnNetworkInterfaceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNetworkInterfaceProps: ec2.CfnNetworkInterfaceProps = {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  description: 'description',\n  groupSet: ['groupSet'],\n  interfaceType: 'interfaceType',\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  privateIpAddress: 'privateIpAddress',\n  privateIpAddresses: [{\n    primary: false,\n    privateIpAddress: 'privateIpAddress',\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  sourceDestCheck: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 20,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "5d045eb4afeaa9c220696ee2ae8678c6cb8160f170ad6dfa47c4b6838494d404"
    },
    "6eec8563d779c3c317275f06592558acfb1e1e913e7bc9b88347a4dcf9ab682c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_placement_group = ec2.CfnPlacementGroup(self, \"MyCfnPlacementGroup\",\n    strategy=\"strategy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnPlacementGroup cfnPlacementGroup = new CfnPlacementGroup(this, \"MyCfnPlacementGroup\", new CfnPlacementGroupProps {\n    Strategy = \"strategy\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnPlacementGroup cfnPlacementGroup = CfnPlacementGroup.Builder.create(this, \"MyCfnPlacementGroup\")\n        .strategy(\"strategy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnPlacementGroup := ec2.NewCfnPlacementGroup(this, jsii.String(\"MyCfnPlacementGroup\"), &cfnPlacementGroupProps{\n\tstrategy: jsii.String(\"strategy\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnPlacementGroup = new ec2.CfnPlacementGroup(this, 'MyCfnPlacementGroup', /* all optional props */ {\n  strategy: 'strategy',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnPlacementGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnPlacementGroup",
        "@aws-cdk/aws-ec2.CfnPlacementGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPlacementGroup = new ec2.CfnPlacementGroup(this, 'MyCfnPlacementGroup', /* all optional props */ {\n  strategy: 'strategy',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "47ca5f3e3b7e0dd949860bcb0ea500e4af0d1273d731d7f630a77abd0bf52ac2"
    },
    "8595d0ccd56c44acdac02a7ea30ab0f5b664f3a63d1f9c5a517be96bf0db0b2f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_placement_group_props = ec2.CfnPlacementGroupProps(\n    strategy=\"strategy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnPlacementGroupProps cfnPlacementGroupProps = new CfnPlacementGroupProps {\n    Strategy = \"strategy\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnPlacementGroupProps cfnPlacementGroupProps = CfnPlacementGroupProps.builder()\n        .strategy(\"strategy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnPlacementGroupProps := &cfnPlacementGroupProps{\n\tstrategy: jsii.String(\"strategy\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnPlacementGroupProps: ec2.CfnPlacementGroupProps = {\n  strategy: 'strategy',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnPlacementGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnPlacementGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPlacementGroupProps: ec2.CfnPlacementGroupProps = {\n  strategy: 'strategy',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "27fad51cb1ec93432fd06535b22cb1466b2ab0fa1b7acc45ad3770488ef19686"
    },
    "d57f81bcc7f30f6f7a9ed3ab77a9be898b07a05557a782c8732fc346f94cd55f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_prefix_list = ec2.CfnPrefixList(self, \"MyCfnPrefixList\",\n    address_family=\"addressFamily\",\n    max_entries=123,\n    prefix_list_name=\"prefixListName\",\n\n    # the properties below are optional\n    entries=[ec2.CfnPrefixList.EntryProperty(\n        cidr=\"cidr\",\n\n        # the properties below are optional\n        description=\"description\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnPrefixList cfnPrefixList = new CfnPrefixList(this, \"MyCfnPrefixList\", new CfnPrefixListProps {\n    AddressFamily = \"addressFamily\",\n    MaxEntries = 123,\n    PrefixListName = \"prefixListName\",\n\n    // the properties below are optional\n    Entries = new [] { new EntryProperty {\n        Cidr = \"cidr\",\n\n        // the properties below are optional\n        Description = \"description\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnPrefixList cfnPrefixList = CfnPrefixList.Builder.create(this, \"MyCfnPrefixList\")\n        .addressFamily(\"addressFamily\")\n        .maxEntries(123)\n        .prefixListName(\"prefixListName\")\n\n        // the properties below are optional\n        .entries(List.of(EntryProperty.builder()\n                .cidr(\"cidr\")\n\n                // the properties below are optional\n                .description(\"description\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnPrefixList := ec2.NewCfnPrefixList(this, jsii.String(\"MyCfnPrefixList\"), &cfnPrefixListProps{\n\taddressFamily: jsii.String(\"addressFamily\"),\n\tmaxEntries: jsii.Number(123),\n\tprefixListName: jsii.String(\"prefixListName\"),\n\n\t// the properties below are optional\n\tentries: []interface{}{\n\t\t&entryProperty{\n\t\t\tcidr: jsii.String(\"cidr\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnPrefixList = new ec2.CfnPrefixList(this, 'MyCfnPrefixList', {\n  addressFamily: 'addressFamily',\n  maxEntries: 123,\n  prefixListName: 'prefixListName',\n\n  // the properties below are optional\n  entries: [{\n    cidr: 'cidr',\n\n    // the properties below are optional\n    description: 'description',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnPrefixList"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnPrefixList",
        "@aws-cdk/aws-ec2.CfnPrefixListProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPrefixList = new ec2.CfnPrefixList(this, 'MyCfnPrefixList', {\n  addressFamily: 'addressFamily',\n  maxEntries: 123,\n  prefixListName: 'prefixListName',\n\n  // the properties below are optional\n  entries: [{\n    cidr: 'cidr',\n\n    // the properties below are optional\n    description: 'description',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 13,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "8ac08f3131d8f3eeba7dd84892c6aae6c8398ef34cd5a03a62c49bd333f7f08e"
    },
    "33fcbad1027040e588ac8f2ea752f47ee92b9b196fa1fc367aac237f6ad10918": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nentry_property = ec2.CfnPrefixList.EntryProperty(\n    cidr=\"cidr\",\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEntryProperty entryProperty = new EntryProperty {\n    Cidr = \"cidr\",\n\n    // the properties below are optional\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEntryProperty entryProperty = EntryProperty.builder()\n        .cidr(\"cidr\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nentryProperty := &entryProperty{\n\tcidr: jsii.String(\"cidr\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst entryProperty: ec2.CfnPrefixList.EntryProperty = {\n  cidr: 'cidr',\n\n  // the properties below are optional\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnPrefixList.EntryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnPrefixList.EntryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst entryProperty: ec2.CfnPrefixList.EntryProperty = {\n  cidr: 'cidr',\n\n  // the properties below are optional\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "24440f1fae8ea3565b8f711db84e8ddc1d47d3b288782fd01bb853bb1536906c"
    },
    "07f17b349df79914e46c06277e959bbfcd298240fc9840af4afd8f79b3ed4fc6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_prefix_list_props = ec2.CfnPrefixListProps(\n    address_family=\"addressFamily\",\n    max_entries=123,\n    prefix_list_name=\"prefixListName\",\n\n    # the properties below are optional\n    entries=[ec2.CfnPrefixList.EntryProperty(\n        cidr=\"cidr\",\n\n        # the properties below are optional\n        description=\"description\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnPrefixListProps cfnPrefixListProps = new CfnPrefixListProps {\n    AddressFamily = \"addressFamily\",\n    MaxEntries = 123,\n    PrefixListName = \"prefixListName\",\n\n    // the properties below are optional\n    Entries = new [] { new EntryProperty {\n        Cidr = \"cidr\",\n\n        // the properties below are optional\n        Description = \"description\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnPrefixListProps cfnPrefixListProps = CfnPrefixListProps.builder()\n        .addressFamily(\"addressFamily\")\n        .maxEntries(123)\n        .prefixListName(\"prefixListName\")\n\n        // the properties below are optional\n        .entries(List.of(EntryProperty.builder()\n                .cidr(\"cidr\")\n\n                // the properties below are optional\n                .description(\"description\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnPrefixListProps := &cfnPrefixListProps{\n\taddressFamily: jsii.String(\"addressFamily\"),\n\tmaxEntries: jsii.Number(123),\n\tprefixListName: jsii.String(\"prefixListName\"),\n\n\t// the properties below are optional\n\tentries: []interface{}{\n\t\t&entryProperty{\n\t\t\tcidr: jsii.String(\"cidr\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnPrefixListProps: ec2.CfnPrefixListProps = {\n  addressFamily: 'addressFamily',\n  maxEntries: 123,\n  prefixListName: 'prefixListName',\n\n  // the properties below are optional\n  entries: [{\n    cidr: 'cidr',\n\n    // the properties below are optional\n    description: 'description',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnPrefixListProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnPrefixListProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPrefixListProps: ec2.CfnPrefixListProps = {\n  addressFamily: 'addressFamily',\n  maxEntries: 123,\n  prefixListName: 'prefixListName',\n\n  // the properties below are optional\n  entries: [{\n    cidr: 'cidr',\n\n    // the properties below are optional\n    description: 'description',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 13,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "883d916ece4b30befd33c15d48eade0b2cb93b391951d94f397d4549609bd0ed"
    },
    "d899dd665d7e3cff39a35137fef89f686ec6668b7ae648bbc84e96a7cb4c4c83": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_route = ec2.CfnRoute(self, \"MyCfnRoute\",\n    route_table_id=\"routeTableId\",\n\n    # the properties below are optional\n    carrier_gateway_id=\"carrierGatewayId\",\n    destination_cidr_block=\"destinationCidrBlock\",\n    destination_ipv6_cidr_block=\"destinationIpv6CidrBlock\",\n    egress_only_internet_gateway_id=\"egressOnlyInternetGatewayId\",\n    gateway_id=\"gatewayId\",\n    instance_id=\"instanceId\",\n    local_gateway_id=\"localGatewayId\",\n    nat_gateway_id=\"natGatewayId\",\n    network_interface_id=\"networkInterfaceId\",\n    transit_gateway_id=\"transitGatewayId\",\n    vpc_endpoint_id=\"vpcEndpointId\",\n    vpc_peering_connection_id=\"vpcPeeringConnectionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnRoute cfnRoute = new CfnRoute(this, \"MyCfnRoute\", new CfnRouteProps {\n    RouteTableId = \"routeTableId\",\n\n    // the properties below are optional\n    CarrierGatewayId = \"carrierGatewayId\",\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    DestinationIpv6CidrBlock = \"destinationIpv6CidrBlock\",\n    EgressOnlyInternetGatewayId = \"egressOnlyInternetGatewayId\",\n    GatewayId = \"gatewayId\",\n    InstanceId = \"instanceId\",\n    LocalGatewayId = \"localGatewayId\",\n    NatGatewayId = \"natGatewayId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    TransitGatewayId = \"transitGatewayId\",\n    VpcEndpointId = \"vpcEndpointId\",\n    VpcPeeringConnectionId = \"vpcPeeringConnectionId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnRoute cfnRoute = CfnRoute.Builder.create(this, \"MyCfnRoute\")\n        .routeTableId(\"routeTableId\")\n\n        // the properties below are optional\n        .carrierGatewayId(\"carrierGatewayId\")\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .destinationIpv6CidrBlock(\"destinationIpv6CidrBlock\")\n        .egressOnlyInternetGatewayId(\"egressOnlyInternetGatewayId\")\n        .gatewayId(\"gatewayId\")\n        .instanceId(\"instanceId\")\n        .localGatewayId(\"localGatewayId\")\n        .natGatewayId(\"natGatewayId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .transitGatewayId(\"transitGatewayId\")\n        .vpcEndpointId(\"vpcEndpointId\")\n        .vpcPeeringConnectionId(\"vpcPeeringConnectionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnRoute := ec2.NewCfnRoute(this, jsii.String(\"MyCfnRoute\"), &cfnRouteProps{\n\trouteTableId: jsii.String(\"routeTableId\"),\n\n\t// the properties below are optional\n\tcarrierGatewayId: jsii.String(\"carrierGatewayId\"),\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\tdestinationIpv6CidrBlock: jsii.String(\"destinationIpv6CidrBlock\"),\n\tegressOnlyInternetGatewayId: jsii.String(\"egressOnlyInternetGatewayId\"),\n\tgatewayId: jsii.String(\"gatewayId\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tlocalGatewayId: jsii.String(\"localGatewayId\"),\n\tnatGatewayId: jsii.String(\"natGatewayId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpcEndpointId: jsii.String(\"vpcEndpointId\"),\n\tvpcPeeringConnectionId: jsii.String(\"vpcPeeringConnectionId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnRoute = new ec2.CfnRoute(this, 'MyCfnRoute', {\n  routeTableId: 'routeTableId',\n\n  // the properties below are optional\n  carrierGatewayId: 'carrierGatewayId',\n  destinationCidrBlock: 'destinationCidrBlock',\n  destinationIpv6CidrBlock: 'destinationIpv6CidrBlock',\n  egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n  gatewayId: 'gatewayId',\n  instanceId: 'instanceId',\n  localGatewayId: 'localGatewayId',\n  natGatewayId: 'natGatewayId',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayId: 'transitGatewayId',\n  vpcEndpointId: 'vpcEndpointId',\n  vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnRoute",
        "@aws-cdk/aws-ec2.CfnRouteProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRoute = new ec2.CfnRoute(this, 'MyCfnRoute', {\n  routeTableId: 'routeTableId',\n\n  // the properties below are optional\n  carrierGatewayId: 'carrierGatewayId',\n  destinationCidrBlock: 'destinationCidrBlock',\n  destinationIpv6CidrBlock: 'destinationIpv6CidrBlock',\n  egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n  gatewayId: 'gatewayId',\n  instanceId: 'instanceId',\n  localGatewayId: 'localGatewayId',\n  natGatewayId: 'natGatewayId',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayId: 'transitGatewayId',\n  vpcEndpointId: 'vpcEndpointId',\n  vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 17,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "1a48bd4b83977ff85307ce60124fd20eb8f9a8ea3de3188ef3b777047e665d32"
    },
    "8c5b148225525c19eece11a0ed0a919077af159f3df67f3989900d8e04023d3f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_route_props = ec2.CfnRouteProps(\n    route_table_id=\"routeTableId\",\n\n    # the properties below are optional\n    carrier_gateway_id=\"carrierGatewayId\",\n    destination_cidr_block=\"destinationCidrBlock\",\n    destination_ipv6_cidr_block=\"destinationIpv6CidrBlock\",\n    egress_only_internet_gateway_id=\"egressOnlyInternetGatewayId\",\n    gateway_id=\"gatewayId\",\n    instance_id=\"instanceId\",\n    local_gateway_id=\"localGatewayId\",\n    nat_gateway_id=\"natGatewayId\",\n    network_interface_id=\"networkInterfaceId\",\n    transit_gateway_id=\"transitGatewayId\",\n    vpc_endpoint_id=\"vpcEndpointId\",\n    vpc_peering_connection_id=\"vpcPeeringConnectionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnRouteProps cfnRouteProps = new CfnRouteProps {\n    RouteTableId = \"routeTableId\",\n\n    // the properties below are optional\n    CarrierGatewayId = \"carrierGatewayId\",\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    DestinationIpv6CidrBlock = \"destinationIpv6CidrBlock\",\n    EgressOnlyInternetGatewayId = \"egressOnlyInternetGatewayId\",\n    GatewayId = \"gatewayId\",\n    InstanceId = \"instanceId\",\n    LocalGatewayId = \"localGatewayId\",\n    NatGatewayId = \"natGatewayId\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    TransitGatewayId = \"transitGatewayId\",\n    VpcEndpointId = \"vpcEndpointId\",\n    VpcPeeringConnectionId = \"vpcPeeringConnectionId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnRouteProps cfnRouteProps = CfnRouteProps.builder()\n        .routeTableId(\"routeTableId\")\n\n        // the properties below are optional\n        .carrierGatewayId(\"carrierGatewayId\")\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .destinationIpv6CidrBlock(\"destinationIpv6CidrBlock\")\n        .egressOnlyInternetGatewayId(\"egressOnlyInternetGatewayId\")\n        .gatewayId(\"gatewayId\")\n        .instanceId(\"instanceId\")\n        .localGatewayId(\"localGatewayId\")\n        .natGatewayId(\"natGatewayId\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .transitGatewayId(\"transitGatewayId\")\n        .vpcEndpointId(\"vpcEndpointId\")\n        .vpcPeeringConnectionId(\"vpcPeeringConnectionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnRouteProps := &cfnRouteProps{\n\trouteTableId: jsii.String(\"routeTableId\"),\n\n\t// the properties below are optional\n\tcarrierGatewayId: jsii.String(\"carrierGatewayId\"),\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\tdestinationIpv6CidrBlock: jsii.String(\"destinationIpv6CidrBlock\"),\n\tegressOnlyInternetGatewayId: jsii.String(\"egressOnlyInternetGatewayId\"),\n\tgatewayId: jsii.String(\"gatewayId\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tlocalGatewayId: jsii.String(\"localGatewayId\"),\n\tnatGatewayId: jsii.String(\"natGatewayId\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpcEndpointId: jsii.String(\"vpcEndpointId\"),\n\tvpcPeeringConnectionId: jsii.String(\"vpcPeeringConnectionId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnRouteProps: ec2.CfnRouteProps = {\n  routeTableId: 'routeTableId',\n\n  // the properties below are optional\n  carrierGatewayId: 'carrierGatewayId',\n  destinationCidrBlock: 'destinationCidrBlock',\n  destinationIpv6CidrBlock: 'destinationIpv6CidrBlock',\n  egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n  gatewayId: 'gatewayId',\n  instanceId: 'instanceId',\n  localGatewayId: 'localGatewayId',\n  natGatewayId: 'natGatewayId',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayId: 'transitGatewayId',\n  vpcEndpointId: 'vpcEndpointId',\n  vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnRouteProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnRouteProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteProps: ec2.CfnRouteProps = {\n  routeTableId: 'routeTableId',\n\n  // the properties below are optional\n  carrierGatewayId: 'carrierGatewayId',\n  destinationCidrBlock: 'destinationCidrBlock',\n  destinationIpv6CidrBlock: 'destinationIpv6CidrBlock',\n  egressOnlyInternetGatewayId: 'egressOnlyInternetGatewayId',\n  gatewayId: 'gatewayId',\n  instanceId: 'instanceId',\n  localGatewayId: 'localGatewayId',\n  natGatewayId: 'natGatewayId',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayId: 'transitGatewayId',\n  vpcEndpointId: 'vpcEndpointId',\n  vpcPeeringConnectionId: 'vpcPeeringConnectionId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 17,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "556342acd7affef92f3f7b6e42fa2877a5a9fa2b75d6c03f1d728edcf7749d00"
    },
    "d79e6407d1e29b09c3a259ea6b534bbd931ae7d1357c62fa048bd2e9b2f46ce4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_route_table = ec2.CfnRouteTable(self, \"MyCfnRouteTable\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnRouteTable cfnRouteTable = new CfnRouteTable(this, \"MyCfnRouteTable\", new CfnRouteTableProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnRouteTable cfnRouteTable = CfnRouteTable.Builder.create(this, \"MyCfnRouteTable\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnRouteTable := ec2.NewCfnRouteTable(this, jsii.String(\"MyCfnRouteTable\"), &cfnRouteTableProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnRouteTable = new ec2.CfnRouteTable(this, 'MyCfnRouteTable', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnRouteTable"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnRouteTable",
        "@aws-cdk/aws-ec2.CfnRouteTableProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteTable = new ec2.CfnRouteTable(this, 'MyCfnRouteTable', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "dac19708cbcee1e7e3b848decf5d777df5291c00b6ab05c3dafaaef8ef6202e1"
    },
    "47bbcd717071ed34ab2270af424c4ec02a9b465a6a92c24e321f41b7068f0231": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_route_table_props = ec2.CfnRouteTableProps(\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnRouteTableProps cfnRouteTableProps = new CfnRouteTableProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnRouteTableProps cfnRouteTableProps = CfnRouteTableProps.builder()\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnRouteTableProps := &cfnRouteTableProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnRouteTableProps: ec2.CfnRouteTableProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnRouteTableProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnRouteTableProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteTableProps: ec2.CfnRouteTableProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8ba545b35f9852c4b6ea83966e98b2e5707751aa322e25e29b851a47a4e3a165"
    },
    "f4804e7ff93e8774dbbe062c942c9b32e3a1a41453b5f5176b8f29957db40e04": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_security_group = ec2.CfnSecurityGroup(self, \"MyCfnSecurityGroup\",\n    group_description=\"groupDescription\",\n\n    # the properties below are optional\n    group_name=\"groupName\",\n    security_group_egress=[ec2.CfnSecurityGroup.EgressProperty(\n        ip_protocol=\"ipProtocol\",\n\n        # the properties below are optional\n        cidr_ip=\"cidrIp\",\n        cidr_ipv6=\"cidrIpv6\",\n        description=\"description\",\n        destination_prefix_list_id=\"destinationPrefixListId\",\n        destination_security_group_id=\"destinationSecurityGroupId\",\n        from_port=123,\n        to_port=123\n    )],\n    security_group_ingress=[ec2.CfnSecurityGroup.IngressProperty(\n        ip_protocol=\"ipProtocol\",\n\n        # the properties below are optional\n        cidr_ip=\"cidrIp\",\n        cidr_ipv6=\"cidrIpv6\",\n        description=\"description\",\n        from_port=123,\n        source_prefix_list_id=\"sourcePrefixListId\",\n        source_security_group_id=\"sourceSecurityGroupId\",\n        source_security_group_name=\"sourceSecurityGroupName\",\n        source_security_group_owner_id=\"sourceSecurityGroupOwnerId\",\n        to_port=123\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_id=\"vpcId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSecurityGroup cfnSecurityGroup = new CfnSecurityGroup(this, \"MyCfnSecurityGroup\", new CfnSecurityGroupProps {\n    GroupDescription = \"groupDescription\",\n\n    // the properties below are optional\n    GroupName = \"groupName\",\n    SecurityGroupEgress = new [] { new EgressProperty {\n        IpProtocol = \"ipProtocol\",\n\n        // the properties below are optional\n        CidrIp = \"cidrIp\",\n        CidrIpv6 = \"cidrIpv6\",\n        Description = \"description\",\n        DestinationPrefixListId = \"destinationPrefixListId\",\n        DestinationSecurityGroupId = \"destinationSecurityGroupId\",\n        FromPort = 123,\n        ToPort = 123\n    } },\n    SecurityGroupIngress = new [] { new IngressProperty {\n        IpProtocol = \"ipProtocol\",\n\n        // the properties below are optional\n        CidrIp = \"cidrIp\",\n        CidrIpv6 = \"cidrIpv6\",\n        Description = \"description\",\n        FromPort = 123,\n        SourcePrefixListId = \"sourcePrefixListId\",\n        SourceSecurityGroupId = \"sourceSecurityGroupId\",\n        SourceSecurityGroupName = \"sourceSecurityGroupName\",\n        SourceSecurityGroupOwnerId = \"sourceSecurityGroupOwnerId\",\n        ToPort = 123\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcId = \"vpcId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSecurityGroup cfnSecurityGroup = CfnSecurityGroup.Builder.create(this, \"MyCfnSecurityGroup\")\n        .groupDescription(\"groupDescription\")\n\n        // the properties below are optional\n        .groupName(\"groupName\")\n        .securityGroupEgress(List.of(EgressProperty.builder()\n                .ipProtocol(\"ipProtocol\")\n\n                // the properties below are optional\n                .cidrIp(\"cidrIp\")\n                .cidrIpv6(\"cidrIpv6\")\n                .description(\"description\")\n                .destinationPrefixListId(\"destinationPrefixListId\")\n                .destinationSecurityGroupId(\"destinationSecurityGroupId\")\n                .fromPort(123)\n                .toPort(123)\n                .build()))\n        .securityGroupIngress(List.of(IngressProperty.builder()\n                .ipProtocol(\"ipProtocol\")\n\n                // the properties below are optional\n                .cidrIp(\"cidrIp\")\n                .cidrIpv6(\"cidrIpv6\")\n                .description(\"description\")\n                .fromPort(123)\n                .sourcePrefixListId(\"sourcePrefixListId\")\n                .sourceSecurityGroupId(\"sourceSecurityGroupId\")\n                .sourceSecurityGroupName(\"sourceSecurityGroupName\")\n                .sourceSecurityGroupOwnerId(\"sourceSecurityGroupOwnerId\")\n                .toPort(123)\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcId(\"vpcId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSecurityGroup := ec2.NewCfnSecurityGroup(this, jsii.String(\"MyCfnSecurityGroup\"), &cfnSecurityGroupProps{\n\tgroupDescription: jsii.String(\"groupDescription\"),\n\n\t// the properties below are optional\n\tgroupName: jsii.String(\"groupName\"),\n\tsecurityGroupEgress: []interface{}{\n\t\t&egressProperty{\n\t\t\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcidrIp: jsii.String(\"cidrIp\"),\n\t\t\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tdestinationPrefixListId: jsii.String(\"destinationPrefixListId\"),\n\t\t\tdestinationSecurityGroupId: jsii.String(\"destinationSecurityGroupId\"),\n\t\t\tfromPort: jsii.Number(123),\n\t\t\ttoPort: jsii.Number(123),\n\t\t},\n\t},\n\tsecurityGroupIngress: []interface{}{\n\t\t&ingressProperty{\n\t\t\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcidrIp: jsii.String(\"cidrIp\"),\n\t\t\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tfromPort: jsii.Number(123),\n\t\t\tsourcePrefixListId: jsii.String(\"sourcePrefixListId\"),\n\t\t\tsourceSecurityGroupId: jsii.String(\"sourceSecurityGroupId\"),\n\t\t\tsourceSecurityGroupName: jsii.String(\"sourceSecurityGroupName\"),\n\t\t\tsourceSecurityGroupOwnerId: jsii.String(\"sourceSecurityGroupOwnerId\"),\n\t\t\ttoPort: jsii.Number(123),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcId: jsii.String(\"vpcId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSecurityGroup = new ec2.CfnSecurityGroup(this, 'MyCfnSecurityGroup', {\n  groupDescription: 'groupDescription',\n\n  // the properties below are optional\n  groupName: 'groupName',\n  securityGroupEgress: [{\n    ipProtocol: 'ipProtocol',\n\n    // the properties below are optional\n    cidrIp: 'cidrIp',\n    cidrIpv6: 'cidrIpv6',\n    description: 'description',\n    destinationPrefixListId: 'destinationPrefixListId',\n    destinationSecurityGroupId: 'destinationSecurityGroupId',\n    fromPort: 123,\n    toPort: 123,\n  }],\n  securityGroupIngress: [{\n    ipProtocol: 'ipProtocol',\n\n    // the properties below are optional\n    cidrIp: 'cidrIp',\n    cidrIpv6: 'cidrIpv6',\n    description: 'description',\n    fromPort: 123,\n    sourcePrefixListId: 'sourcePrefixListId',\n    sourceSecurityGroupId: 'sourceSecurityGroupId',\n    sourceSecurityGroupName: 'sourceSecurityGroupName',\n    sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n    toPort: 123,\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcId: 'vpcId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSecurityGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSecurityGroup",
        "@aws-cdk/aws-ec2.CfnSecurityGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecurityGroup = new ec2.CfnSecurityGroup(this, 'MyCfnSecurityGroup', {\n  groupDescription: 'groupDescription',\n\n  // the properties below are optional\n  groupName: 'groupName',\n  securityGroupEgress: [{\n    ipProtocol: 'ipProtocol',\n\n    // the properties below are optional\n    cidrIp: 'cidrIp',\n    cidrIpv6: 'cidrIpv6',\n    description: 'description',\n    destinationPrefixListId: 'destinationPrefixListId',\n    destinationSecurityGroupId: 'destinationSecurityGroupId',\n    fromPort: 123,\n    toPort: 123,\n  }],\n  securityGroupIngress: [{\n    ipProtocol: 'ipProtocol',\n\n    // the properties below are optional\n    cidrIp: 'cidrIp',\n    cidrIpv6: 'cidrIpv6',\n    description: 'description',\n    fromPort: 123,\n    sourcePrefixListId: 'sourcePrefixListId',\n    sourceSecurityGroupId: 'sourceSecurityGroupId',\n    sourceSecurityGroupName: 'sourceSecurityGroupName',\n    sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n    toPort: 123,\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcId: 'vpcId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 21,
        "75": 30,
        "104": 1,
        "192": 3,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "569772b822961fc8528643134bf603043b826c9fc7bad7fce6847ffb489cdb93"
    },
    "286ca37a7f89bb53e7cf8c666b923f1d9a9fbe3b1f3659b56e2185faa0b352ab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\negress_property = ec2.CfnSecurityGroup.EgressProperty(\n    ip_protocol=\"ipProtocol\",\n\n    # the properties below are optional\n    cidr_ip=\"cidrIp\",\n    cidr_ipv6=\"cidrIpv6\",\n    description=\"description\",\n    destination_prefix_list_id=\"destinationPrefixListId\",\n    destination_security_group_id=\"destinationSecurityGroupId\",\n    from_port=123,\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEgressProperty egressProperty = new EgressProperty {\n    IpProtocol = \"ipProtocol\",\n\n    // the properties below are optional\n    CidrIp = \"cidrIp\",\n    CidrIpv6 = \"cidrIpv6\",\n    Description = \"description\",\n    DestinationPrefixListId = \"destinationPrefixListId\",\n    DestinationSecurityGroupId = \"destinationSecurityGroupId\",\n    FromPort = 123,\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEgressProperty egressProperty = EgressProperty.builder()\n        .ipProtocol(\"ipProtocol\")\n\n        // the properties below are optional\n        .cidrIp(\"cidrIp\")\n        .cidrIpv6(\"cidrIpv6\")\n        .description(\"description\")\n        .destinationPrefixListId(\"destinationPrefixListId\")\n        .destinationSecurityGroupId(\"destinationSecurityGroupId\")\n        .fromPort(123)\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\negressProperty := &egressProperty{\n\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t// the properties below are optional\n\tcidrIp: jsii.String(\"cidrIp\"),\n\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\tdescription: jsii.String(\"description\"),\n\tdestinationPrefixListId: jsii.String(\"destinationPrefixListId\"),\n\tdestinationSecurityGroupId: jsii.String(\"destinationSecurityGroupId\"),\n\tfromPort: jsii.Number(123),\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst egressProperty: ec2.CfnSecurityGroup.EgressProperty = {\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  destinationPrefixListId: 'destinationPrefixListId',\n  destinationSecurityGroupId: 'destinationSecurityGroupId',\n  fromPort: 123,\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSecurityGroup.EgressProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSecurityGroup.EgressProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst egressProperty: ec2.CfnSecurityGroup.EgressProperty = {\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  destinationPrefixListId: 'destinationPrefixListId',\n  destinationSecurityGroupId: 'destinationSecurityGroupId',\n  fromPort: 123,\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 13,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "76ea2775ea24654f4c03dd7aee31301c4a2de7c999cad3b0c4bed55d2d9a1d6e"
    },
    "72abfc3241afb443259b3f57f8c9218dc7b41d128da7a342fac3908c94c8fbc1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ningress_property = ec2.CfnSecurityGroup.IngressProperty(\n    ip_protocol=\"ipProtocol\",\n\n    # the properties below are optional\n    cidr_ip=\"cidrIp\",\n    cidr_ipv6=\"cidrIpv6\",\n    description=\"description\",\n    from_port=123,\n    source_prefix_list_id=\"sourcePrefixListId\",\n    source_security_group_id=\"sourceSecurityGroupId\",\n    source_security_group_name=\"sourceSecurityGroupName\",\n    source_security_group_owner_id=\"sourceSecurityGroupOwnerId\",\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIngressProperty ingressProperty = new IngressProperty {\n    IpProtocol = \"ipProtocol\",\n\n    // the properties below are optional\n    CidrIp = \"cidrIp\",\n    CidrIpv6 = \"cidrIpv6\",\n    Description = \"description\",\n    FromPort = 123,\n    SourcePrefixListId = \"sourcePrefixListId\",\n    SourceSecurityGroupId = \"sourceSecurityGroupId\",\n    SourceSecurityGroupName = \"sourceSecurityGroupName\",\n    SourceSecurityGroupOwnerId = \"sourceSecurityGroupOwnerId\",\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIngressProperty ingressProperty = IngressProperty.builder()\n        .ipProtocol(\"ipProtocol\")\n\n        // the properties below are optional\n        .cidrIp(\"cidrIp\")\n        .cidrIpv6(\"cidrIpv6\")\n        .description(\"description\")\n        .fromPort(123)\n        .sourcePrefixListId(\"sourcePrefixListId\")\n        .sourceSecurityGroupId(\"sourceSecurityGroupId\")\n        .sourceSecurityGroupName(\"sourceSecurityGroupName\")\n        .sourceSecurityGroupOwnerId(\"sourceSecurityGroupOwnerId\")\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ningressProperty := &ingressProperty{\n\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t// the properties below are optional\n\tcidrIp: jsii.String(\"cidrIp\"),\n\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\tdescription: jsii.String(\"description\"),\n\tfromPort: jsii.Number(123),\n\tsourcePrefixListId: jsii.String(\"sourcePrefixListId\"),\n\tsourceSecurityGroupId: jsii.String(\"sourceSecurityGroupId\"),\n\tsourceSecurityGroupName: jsii.String(\"sourceSecurityGroupName\"),\n\tsourceSecurityGroupOwnerId: jsii.String(\"sourceSecurityGroupOwnerId\"),\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ingressProperty: ec2.CfnSecurityGroup.IngressProperty = {\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  fromPort: 123,\n  sourcePrefixListId: 'sourcePrefixListId',\n  sourceSecurityGroupId: 'sourceSecurityGroupId',\n  sourceSecurityGroupName: 'sourceSecurityGroupName',\n  sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSecurityGroup.IngressProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSecurityGroup.IngressProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ingressProperty: ec2.CfnSecurityGroup.IngressProperty = {\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  fromPort: 123,\n  sourcePrefixListId: 'sourcePrefixListId',\n  sourceSecurityGroupId: 'sourceSecurityGroupId',\n  sourceSecurityGroupName: 'sourceSecurityGroupName',\n  sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 15,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "6f4e50c5c8034f343d01f1ea77d61ebbfe1ac6940b61d6e4e9b264fa87288d74"
    },
    "4f9f1c2bcf9bf6c302f89689b32d8a99c15221170b44e1b94f2aad75942fb923": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_security_group_egress = ec2.CfnSecurityGroupEgress(self, \"MyCfnSecurityGroupEgress\",\n    group_id=\"groupId\",\n    ip_protocol=\"ipProtocol\",\n\n    # the properties below are optional\n    cidr_ip=\"cidrIp\",\n    cidr_ipv6=\"cidrIpv6\",\n    description=\"description\",\n    destination_prefix_list_id=\"destinationPrefixListId\",\n    destination_security_group_id=\"destinationSecurityGroupId\",\n    from_port=123,\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSecurityGroupEgress cfnSecurityGroupEgress = new CfnSecurityGroupEgress(this, \"MyCfnSecurityGroupEgress\", new CfnSecurityGroupEgressProps {\n    GroupId = \"groupId\",\n    IpProtocol = \"ipProtocol\",\n\n    // the properties below are optional\n    CidrIp = \"cidrIp\",\n    CidrIpv6 = \"cidrIpv6\",\n    Description = \"description\",\n    DestinationPrefixListId = \"destinationPrefixListId\",\n    DestinationSecurityGroupId = \"destinationSecurityGroupId\",\n    FromPort = 123,\n    ToPort = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSecurityGroupEgress cfnSecurityGroupEgress = CfnSecurityGroupEgress.Builder.create(this, \"MyCfnSecurityGroupEgress\")\n        .groupId(\"groupId\")\n        .ipProtocol(\"ipProtocol\")\n\n        // the properties below are optional\n        .cidrIp(\"cidrIp\")\n        .cidrIpv6(\"cidrIpv6\")\n        .description(\"description\")\n        .destinationPrefixListId(\"destinationPrefixListId\")\n        .destinationSecurityGroupId(\"destinationSecurityGroupId\")\n        .fromPort(123)\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSecurityGroupEgress := ec2.NewCfnSecurityGroupEgress(this, jsii.String(\"MyCfnSecurityGroupEgress\"), &cfnSecurityGroupEgressProps{\n\tgroupId: jsii.String(\"groupId\"),\n\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t// the properties below are optional\n\tcidrIp: jsii.String(\"cidrIp\"),\n\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\tdescription: jsii.String(\"description\"),\n\tdestinationPrefixListId: jsii.String(\"destinationPrefixListId\"),\n\tdestinationSecurityGroupId: jsii.String(\"destinationSecurityGroupId\"),\n\tfromPort: jsii.Number(123),\n\ttoPort: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSecurityGroupEgress = new ec2.CfnSecurityGroupEgress(this, 'MyCfnSecurityGroupEgress', {\n  groupId: 'groupId',\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  destinationPrefixListId: 'destinationPrefixListId',\n  destinationSecurityGroupId: 'destinationSecurityGroupId',\n  fromPort: 123,\n  toPort: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSecurityGroupEgress"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSecurityGroupEgress",
        "@aws-cdk/aws-ec2.CfnSecurityGroupEgressProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecurityGroupEgress = new ec2.CfnSecurityGroupEgress(this, 'MyCfnSecurityGroupEgress', {\n  groupId: 'groupId',\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  destinationPrefixListId: 'destinationPrefixListId',\n  destinationSecurityGroupId: 'destinationSecurityGroupId',\n  fromPort: 123,\n  toPort: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 13,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "d2fec231618ac666250a73f055287a1bf8c1525ae6a8ebb17a5a0c84e100c578"
    },
    "7363a8af32f7a785eaa904e7f9442f68955907ca163d58aeacd276c724ca7481": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_security_group_egress_props = ec2.CfnSecurityGroupEgressProps(\n    group_id=\"groupId\",\n    ip_protocol=\"ipProtocol\",\n\n    # the properties below are optional\n    cidr_ip=\"cidrIp\",\n    cidr_ipv6=\"cidrIpv6\",\n    description=\"description\",\n    destination_prefix_list_id=\"destinationPrefixListId\",\n    destination_security_group_id=\"destinationSecurityGroupId\",\n    from_port=123,\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSecurityGroupEgressProps cfnSecurityGroupEgressProps = new CfnSecurityGroupEgressProps {\n    GroupId = \"groupId\",\n    IpProtocol = \"ipProtocol\",\n\n    // the properties below are optional\n    CidrIp = \"cidrIp\",\n    CidrIpv6 = \"cidrIpv6\",\n    Description = \"description\",\n    DestinationPrefixListId = \"destinationPrefixListId\",\n    DestinationSecurityGroupId = \"destinationSecurityGroupId\",\n    FromPort = 123,\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSecurityGroupEgressProps cfnSecurityGroupEgressProps = CfnSecurityGroupEgressProps.builder()\n        .groupId(\"groupId\")\n        .ipProtocol(\"ipProtocol\")\n\n        // the properties below are optional\n        .cidrIp(\"cidrIp\")\n        .cidrIpv6(\"cidrIpv6\")\n        .description(\"description\")\n        .destinationPrefixListId(\"destinationPrefixListId\")\n        .destinationSecurityGroupId(\"destinationSecurityGroupId\")\n        .fromPort(123)\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSecurityGroupEgressProps := &cfnSecurityGroupEgressProps{\n\tgroupId: jsii.String(\"groupId\"),\n\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t// the properties below are optional\n\tcidrIp: jsii.String(\"cidrIp\"),\n\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\tdescription: jsii.String(\"description\"),\n\tdestinationPrefixListId: jsii.String(\"destinationPrefixListId\"),\n\tdestinationSecurityGroupId: jsii.String(\"destinationSecurityGroupId\"),\n\tfromPort: jsii.Number(123),\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSecurityGroupEgressProps: ec2.CfnSecurityGroupEgressProps = {\n  groupId: 'groupId',\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  destinationPrefixListId: 'destinationPrefixListId',\n  destinationSecurityGroupId: 'destinationSecurityGroupId',\n  fromPort: 123,\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSecurityGroupEgressProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSecurityGroupEgressProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecurityGroupEgressProps: ec2.CfnSecurityGroupEgressProps = {\n  groupId: 'groupId',\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  destinationPrefixListId: 'destinationPrefixListId',\n  destinationSecurityGroupId: 'destinationSecurityGroupId',\n  fromPort: 123,\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 13,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "748c645326c26e09f5897ec76fec4d22b9837c4fcac42591dd79ec531700954d"
    },
    "041b5274b34173e9dbe1cb65a4c91cd8c4d67d03f16e960af4067ff69c052cf0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_security_group_ingress = ec2.CfnSecurityGroupIngress(self, \"MyCfnSecurityGroupIngress\",\n    ip_protocol=\"ipProtocol\",\n\n    # the properties below are optional\n    cidr_ip=\"cidrIp\",\n    cidr_ipv6=\"cidrIpv6\",\n    description=\"description\",\n    from_port=123,\n    group_id=\"groupId\",\n    group_name=\"groupName\",\n    source_prefix_list_id=\"sourcePrefixListId\",\n    source_security_group_id=\"sourceSecurityGroupId\",\n    source_security_group_name=\"sourceSecurityGroupName\",\n    source_security_group_owner_id=\"sourceSecurityGroupOwnerId\",\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSecurityGroupIngress cfnSecurityGroupIngress = new CfnSecurityGroupIngress(this, \"MyCfnSecurityGroupIngress\", new CfnSecurityGroupIngressProps {\n    IpProtocol = \"ipProtocol\",\n\n    // the properties below are optional\n    CidrIp = \"cidrIp\",\n    CidrIpv6 = \"cidrIpv6\",\n    Description = \"description\",\n    FromPort = 123,\n    GroupId = \"groupId\",\n    GroupName = \"groupName\",\n    SourcePrefixListId = \"sourcePrefixListId\",\n    SourceSecurityGroupId = \"sourceSecurityGroupId\",\n    SourceSecurityGroupName = \"sourceSecurityGroupName\",\n    SourceSecurityGroupOwnerId = \"sourceSecurityGroupOwnerId\",\n    ToPort = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSecurityGroupIngress cfnSecurityGroupIngress = CfnSecurityGroupIngress.Builder.create(this, \"MyCfnSecurityGroupIngress\")\n        .ipProtocol(\"ipProtocol\")\n\n        // the properties below are optional\n        .cidrIp(\"cidrIp\")\n        .cidrIpv6(\"cidrIpv6\")\n        .description(\"description\")\n        .fromPort(123)\n        .groupId(\"groupId\")\n        .groupName(\"groupName\")\n        .sourcePrefixListId(\"sourcePrefixListId\")\n        .sourceSecurityGroupId(\"sourceSecurityGroupId\")\n        .sourceSecurityGroupName(\"sourceSecurityGroupName\")\n        .sourceSecurityGroupOwnerId(\"sourceSecurityGroupOwnerId\")\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSecurityGroupIngress := ec2.NewCfnSecurityGroupIngress(this, jsii.String(\"MyCfnSecurityGroupIngress\"), &cfnSecurityGroupIngressProps{\n\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t// the properties below are optional\n\tcidrIp: jsii.String(\"cidrIp\"),\n\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\tdescription: jsii.String(\"description\"),\n\tfromPort: jsii.Number(123),\n\tgroupId: jsii.String(\"groupId\"),\n\tgroupName: jsii.String(\"groupName\"),\n\tsourcePrefixListId: jsii.String(\"sourcePrefixListId\"),\n\tsourceSecurityGroupId: jsii.String(\"sourceSecurityGroupId\"),\n\tsourceSecurityGroupName: jsii.String(\"sourceSecurityGroupName\"),\n\tsourceSecurityGroupOwnerId: jsii.String(\"sourceSecurityGroupOwnerId\"),\n\ttoPort: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSecurityGroupIngress = new ec2.CfnSecurityGroupIngress(this, 'MyCfnSecurityGroupIngress', {\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  fromPort: 123,\n  groupId: 'groupId',\n  groupName: 'groupName',\n  sourcePrefixListId: 'sourcePrefixListId',\n  sourceSecurityGroupId: 'sourceSecurityGroupId',\n  sourceSecurityGroupName: 'sourceSecurityGroupName',\n  sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n  toPort: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSecurityGroupIngress"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSecurityGroupIngress",
        "@aws-cdk/aws-ec2.CfnSecurityGroupIngressProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecurityGroupIngress = new ec2.CfnSecurityGroupIngress(this, 'MyCfnSecurityGroupIngress', {\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  fromPort: 123,\n  groupId: 'groupId',\n  groupName: 'groupName',\n  sourcePrefixListId: 'sourcePrefixListId',\n  sourceSecurityGroupId: 'sourceSecurityGroupId',\n  sourceSecurityGroupName: 'sourceSecurityGroupName',\n  sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n  toPort: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 12,
        "75": 16,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "980bf57ca8ea6ec37866862ef506c85ec25d4ae99b3b0af9735955ea308e1844"
    },
    "ef2bf7b27943766106388440a863266c423bc5276b5296274705c46ec35b2c63": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_security_group_ingress_props = ec2.CfnSecurityGroupIngressProps(\n    ip_protocol=\"ipProtocol\",\n\n    # the properties below are optional\n    cidr_ip=\"cidrIp\",\n    cidr_ipv6=\"cidrIpv6\",\n    description=\"description\",\n    from_port=123,\n    group_id=\"groupId\",\n    group_name=\"groupName\",\n    source_prefix_list_id=\"sourcePrefixListId\",\n    source_security_group_id=\"sourceSecurityGroupId\",\n    source_security_group_name=\"sourceSecurityGroupName\",\n    source_security_group_owner_id=\"sourceSecurityGroupOwnerId\",\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSecurityGroupIngressProps cfnSecurityGroupIngressProps = new CfnSecurityGroupIngressProps {\n    IpProtocol = \"ipProtocol\",\n\n    // the properties below are optional\n    CidrIp = \"cidrIp\",\n    CidrIpv6 = \"cidrIpv6\",\n    Description = \"description\",\n    FromPort = 123,\n    GroupId = \"groupId\",\n    GroupName = \"groupName\",\n    SourcePrefixListId = \"sourcePrefixListId\",\n    SourceSecurityGroupId = \"sourceSecurityGroupId\",\n    SourceSecurityGroupName = \"sourceSecurityGroupName\",\n    SourceSecurityGroupOwnerId = \"sourceSecurityGroupOwnerId\",\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSecurityGroupIngressProps cfnSecurityGroupIngressProps = CfnSecurityGroupIngressProps.builder()\n        .ipProtocol(\"ipProtocol\")\n\n        // the properties below are optional\n        .cidrIp(\"cidrIp\")\n        .cidrIpv6(\"cidrIpv6\")\n        .description(\"description\")\n        .fromPort(123)\n        .groupId(\"groupId\")\n        .groupName(\"groupName\")\n        .sourcePrefixListId(\"sourcePrefixListId\")\n        .sourceSecurityGroupId(\"sourceSecurityGroupId\")\n        .sourceSecurityGroupName(\"sourceSecurityGroupName\")\n        .sourceSecurityGroupOwnerId(\"sourceSecurityGroupOwnerId\")\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSecurityGroupIngressProps := &cfnSecurityGroupIngressProps{\n\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t// the properties below are optional\n\tcidrIp: jsii.String(\"cidrIp\"),\n\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\tdescription: jsii.String(\"description\"),\n\tfromPort: jsii.Number(123),\n\tgroupId: jsii.String(\"groupId\"),\n\tgroupName: jsii.String(\"groupName\"),\n\tsourcePrefixListId: jsii.String(\"sourcePrefixListId\"),\n\tsourceSecurityGroupId: jsii.String(\"sourceSecurityGroupId\"),\n\tsourceSecurityGroupName: jsii.String(\"sourceSecurityGroupName\"),\n\tsourceSecurityGroupOwnerId: jsii.String(\"sourceSecurityGroupOwnerId\"),\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSecurityGroupIngressProps: ec2.CfnSecurityGroupIngressProps = {\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  fromPort: 123,\n  groupId: 'groupId',\n  groupName: 'groupName',\n  sourcePrefixListId: 'sourcePrefixListId',\n  sourceSecurityGroupId: 'sourceSecurityGroupId',\n  sourceSecurityGroupName: 'sourceSecurityGroupName',\n  sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSecurityGroupIngressProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSecurityGroupIngressProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecurityGroupIngressProps: ec2.CfnSecurityGroupIngressProps = {\n  ipProtocol: 'ipProtocol',\n\n  // the properties below are optional\n  cidrIp: 'cidrIp',\n  cidrIpv6: 'cidrIpv6',\n  description: 'description',\n  fromPort: 123,\n  groupId: 'groupId',\n  groupName: 'groupName',\n  sourcePrefixListId: 'sourcePrefixListId',\n  sourceSecurityGroupId: 'sourceSecurityGroupId',\n  sourceSecurityGroupName: 'sourceSecurityGroupName',\n  sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 16,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "0f791b16009673914ad083a92fa44efad328f5c5fb8af71d25ad2e39e940f965"
    },
    "2f20b11ad961bfa03c9f90b6269e5724ed729ea3d80ea0ba5a3d4d2c755e073f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_security_group_props = ec2.CfnSecurityGroupProps(\n    group_description=\"groupDescription\",\n\n    # the properties below are optional\n    group_name=\"groupName\",\n    security_group_egress=[ec2.CfnSecurityGroup.EgressProperty(\n        ip_protocol=\"ipProtocol\",\n\n        # the properties below are optional\n        cidr_ip=\"cidrIp\",\n        cidr_ipv6=\"cidrIpv6\",\n        description=\"description\",\n        destination_prefix_list_id=\"destinationPrefixListId\",\n        destination_security_group_id=\"destinationSecurityGroupId\",\n        from_port=123,\n        to_port=123\n    )],\n    security_group_ingress=[ec2.CfnSecurityGroup.IngressProperty(\n        ip_protocol=\"ipProtocol\",\n\n        # the properties below are optional\n        cidr_ip=\"cidrIp\",\n        cidr_ipv6=\"cidrIpv6\",\n        description=\"description\",\n        from_port=123,\n        source_prefix_list_id=\"sourcePrefixListId\",\n        source_security_group_id=\"sourceSecurityGroupId\",\n        source_security_group_name=\"sourceSecurityGroupName\",\n        source_security_group_owner_id=\"sourceSecurityGroupOwnerId\",\n        to_port=123\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_id=\"vpcId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSecurityGroupProps cfnSecurityGroupProps = new CfnSecurityGroupProps {\n    GroupDescription = \"groupDescription\",\n\n    // the properties below are optional\n    GroupName = \"groupName\",\n    SecurityGroupEgress = new [] { new EgressProperty {\n        IpProtocol = \"ipProtocol\",\n\n        // the properties below are optional\n        CidrIp = \"cidrIp\",\n        CidrIpv6 = \"cidrIpv6\",\n        Description = \"description\",\n        DestinationPrefixListId = \"destinationPrefixListId\",\n        DestinationSecurityGroupId = \"destinationSecurityGroupId\",\n        FromPort = 123,\n        ToPort = 123\n    } },\n    SecurityGroupIngress = new [] { new IngressProperty {\n        IpProtocol = \"ipProtocol\",\n\n        // the properties below are optional\n        CidrIp = \"cidrIp\",\n        CidrIpv6 = \"cidrIpv6\",\n        Description = \"description\",\n        FromPort = 123,\n        SourcePrefixListId = \"sourcePrefixListId\",\n        SourceSecurityGroupId = \"sourceSecurityGroupId\",\n        SourceSecurityGroupName = \"sourceSecurityGroupName\",\n        SourceSecurityGroupOwnerId = \"sourceSecurityGroupOwnerId\",\n        ToPort = 123\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcId = \"vpcId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSecurityGroupProps cfnSecurityGroupProps = CfnSecurityGroupProps.builder()\n        .groupDescription(\"groupDescription\")\n\n        // the properties below are optional\n        .groupName(\"groupName\")\n        .securityGroupEgress(List.of(EgressProperty.builder()\n                .ipProtocol(\"ipProtocol\")\n\n                // the properties below are optional\n                .cidrIp(\"cidrIp\")\n                .cidrIpv6(\"cidrIpv6\")\n                .description(\"description\")\n                .destinationPrefixListId(\"destinationPrefixListId\")\n                .destinationSecurityGroupId(\"destinationSecurityGroupId\")\n                .fromPort(123)\n                .toPort(123)\n                .build()))\n        .securityGroupIngress(List.of(IngressProperty.builder()\n                .ipProtocol(\"ipProtocol\")\n\n                // the properties below are optional\n                .cidrIp(\"cidrIp\")\n                .cidrIpv6(\"cidrIpv6\")\n                .description(\"description\")\n                .fromPort(123)\n                .sourcePrefixListId(\"sourcePrefixListId\")\n                .sourceSecurityGroupId(\"sourceSecurityGroupId\")\n                .sourceSecurityGroupName(\"sourceSecurityGroupName\")\n                .sourceSecurityGroupOwnerId(\"sourceSecurityGroupOwnerId\")\n                .toPort(123)\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcId(\"vpcId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSecurityGroupProps := &cfnSecurityGroupProps{\n\tgroupDescription: jsii.String(\"groupDescription\"),\n\n\t// the properties below are optional\n\tgroupName: jsii.String(\"groupName\"),\n\tsecurityGroupEgress: []interface{}{\n\t\t&egressProperty{\n\t\t\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcidrIp: jsii.String(\"cidrIp\"),\n\t\t\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tdestinationPrefixListId: jsii.String(\"destinationPrefixListId\"),\n\t\t\tdestinationSecurityGroupId: jsii.String(\"destinationSecurityGroupId\"),\n\t\t\tfromPort: jsii.Number(123),\n\t\t\ttoPort: jsii.Number(123),\n\t\t},\n\t},\n\tsecurityGroupIngress: []interface{}{\n\t\t&ingressProperty{\n\t\t\tipProtocol: jsii.String(\"ipProtocol\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcidrIp: jsii.String(\"cidrIp\"),\n\t\t\tcidrIpv6: jsii.String(\"cidrIpv6\"),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tfromPort: jsii.Number(123),\n\t\t\tsourcePrefixListId: jsii.String(\"sourcePrefixListId\"),\n\t\t\tsourceSecurityGroupId: jsii.String(\"sourceSecurityGroupId\"),\n\t\t\tsourceSecurityGroupName: jsii.String(\"sourceSecurityGroupName\"),\n\t\t\tsourceSecurityGroupOwnerId: jsii.String(\"sourceSecurityGroupOwnerId\"),\n\t\t\ttoPort: jsii.Number(123),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcId: jsii.String(\"vpcId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSecurityGroupProps: ec2.CfnSecurityGroupProps = {\n  groupDescription: 'groupDescription',\n\n  // the properties below are optional\n  groupName: 'groupName',\n  securityGroupEgress: [{\n    ipProtocol: 'ipProtocol',\n\n    // the properties below are optional\n    cidrIp: 'cidrIp',\n    cidrIpv6: 'cidrIpv6',\n    description: 'description',\n    destinationPrefixListId: 'destinationPrefixListId',\n    destinationSecurityGroupId: 'destinationSecurityGroupId',\n    fromPort: 123,\n    toPort: 123,\n  }],\n  securityGroupIngress: [{\n    ipProtocol: 'ipProtocol',\n\n    // the properties below are optional\n    cidrIp: 'cidrIp',\n    cidrIpv6: 'cidrIpv6',\n    description: 'description',\n    fromPort: 123,\n    sourcePrefixListId: 'sourcePrefixListId',\n    sourceSecurityGroupId: 'sourceSecurityGroupId',\n    sourceSecurityGroupName: 'sourceSecurityGroupName',\n    sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n    toPort: 123,\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcId: 'vpcId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSecurityGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecurityGroupProps: ec2.CfnSecurityGroupProps = {\n  groupDescription: 'groupDescription',\n\n  // the properties below are optional\n  groupName: 'groupName',\n  securityGroupEgress: [{\n    ipProtocol: 'ipProtocol',\n\n    // the properties below are optional\n    cidrIp: 'cidrIp',\n    cidrIpv6: 'cidrIpv6',\n    description: 'description',\n    destinationPrefixListId: 'destinationPrefixListId',\n    destinationSecurityGroupId: 'destinationSecurityGroupId',\n    fromPort: 123,\n    toPort: 123,\n  }],\n  securityGroupIngress: [{\n    ipProtocol: 'ipProtocol',\n\n    // the properties below are optional\n    cidrIp: 'cidrIp',\n    cidrIpv6: 'cidrIpv6',\n    description: 'description',\n    fromPort: 123,\n    sourcePrefixListId: 'sourcePrefixListId',\n    sourceSecurityGroupId: 'sourceSecurityGroupId',\n    sourceSecurityGroupName: 'sourceSecurityGroupName',\n    sourceSecurityGroupOwnerId: 'sourceSecurityGroupOwnerId',\n    toPort: 123,\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcId: 'vpcId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 20,
        "75": 30,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "619d92fe1fdb5bb03164318e3777a9cfeb124b641f730d2bf6f130a7905469a4"
    },
    "8b1d93206825d61aceebd24c2e162afd7631671a24434dae0f95a26f76a077e0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_spot_fleet = ec2.CfnSpotFleet(self, \"MyCfnSpotFleet\",\n    spot_fleet_request_config_data=ec2.CfnSpotFleet.SpotFleetRequestConfigDataProperty(\n        iam_fleet_role=\"iamFleetRole\",\n        target_capacity=123,\n\n        # the properties below are optional\n        allocation_strategy=\"allocationStrategy\",\n        context=\"context\",\n        excess_capacity_termination_policy=\"excessCapacityTerminationPolicy\",\n        instance_interruption_behavior=\"instanceInterruptionBehavior\",\n        instance_pools_to_use_count=123,\n        launch_specifications=[ec2.CfnSpotFleet.SpotFleetLaunchSpecificationProperty(\n            image_id=\"imageId\",\n\n            # the properties below are optional\n            block_device_mappings=[ec2.CfnSpotFleet.BlockDeviceMappingProperty(\n                device_name=\"deviceName\",\n\n                # the properties below are optional\n                ebs=ec2.CfnSpotFleet.EbsBlockDeviceProperty(\n                    delete_on_termination=False,\n                    encrypted=False,\n                    iops=123,\n                    snapshot_id=\"snapshotId\",\n                    volume_size=123,\n                    volume_type=\"volumeType\"\n                ),\n                no_device=\"noDevice\",\n                virtual_name=\"virtualName\"\n            )],\n            ebs_optimized=False,\n            iam_instance_profile=ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty(\n                arn=\"arn\"\n            ),\n            instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n                accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_manufacturers=[\"acceleratorManufacturers\"],\n                accelerator_names=[\"acceleratorNames\"],\n                accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_types=[\"acceleratorTypes\"],\n                bare_metal=\"bareMetal\",\n                baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                burstable_performance=\"burstablePerformance\",\n                cpu_manufacturers=[\"cpuManufacturers\"],\n                excluded_instance_types=[\"excludedInstanceTypes\"],\n                instance_generations=[\"instanceGenerations\"],\n                local_storage=\"localStorage\",\n                local_storage_types=[\"localStorageTypes\"],\n                memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                on_demand_max_price_percentage_over_lowest_price=123,\n                require_hibernate_support=False,\n                spot_max_price_percentage_over_lowest_price=123,\n                total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n                    max=123,\n                    min=123\n                )\n            ),\n            instance_type=\"instanceType\",\n            kernel_id=\"kernelId\",\n            key_name=\"keyName\",\n            monitoring=ec2.CfnSpotFleet.SpotFleetMonitoringProperty(\n                enabled=False\n            ),\n            network_interfaces=[ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty(\n                associate_public_ip_address=False,\n                delete_on_termination=False,\n                description=\"description\",\n                device_index=123,\n                groups=[\"groups\"],\n                ipv6_address_count=123,\n                ipv6_addresses=[ec2.CfnSpotFleet.InstanceIpv6AddressProperty(\n                    ipv6_address=\"ipv6Address\"\n                )],\n                network_interface_id=\"networkInterfaceId\",\n                private_ip_addresses=[ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty(\n                    private_ip_address=\"privateIpAddress\",\n\n                    # the properties below are optional\n                    primary=False\n                )],\n                secondary_private_ip_address_count=123,\n                subnet_id=\"subnetId\"\n            )],\n            placement=ec2.CfnSpotFleet.SpotPlacementProperty(\n                availability_zone=\"availabilityZone\",\n                group_name=\"groupName\",\n                tenancy=\"tenancy\"\n            ),\n            ramdisk_id=\"ramdiskId\",\n            security_groups=[ec2.CfnSpotFleet.GroupIdentifierProperty(\n                group_id=\"groupId\"\n            )],\n            spot_price=\"spotPrice\",\n            subnet_id=\"subnetId\",\n            tag_specifications=[ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty(\n                resource_type=\"resourceType\",\n                tags=[CfnTag(\n                    key=\"key\",\n                    value=\"value\"\n                )]\n            )],\n            user_data=\"userData\",\n            weighted_capacity=123\n        )],\n        launch_template_configs=[ec2.CfnSpotFleet.LaunchTemplateConfigProperty(\n            launch_template_specification=ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty(\n                version=\"version\",\n\n                # the properties below are optional\n                launch_template_id=\"launchTemplateId\",\n                launch_template_name=\"launchTemplateName\"\n            ),\n            overrides=[ec2.CfnSpotFleet.LaunchTemplateOverridesProperty(\n                availability_zone=\"availabilityZone\",\n                instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n                    accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    accelerator_manufacturers=[\"acceleratorManufacturers\"],\n                    accelerator_names=[\"acceleratorNames\"],\n                    accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    accelerator_types=[\"acceleratorTypes\"],\n                    bare_metal=\"bareMetal\",\n                    baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    burstable_performance=\"burstablePerformance\",\n                    cpu_manufacturers=[\"cpuManufacturers\"],\n                    excluded_instance_types=[\"excludedInstanceTypes\"],\n                    instance_generations=[\"instanceGenerations\"],\n                    local_storage=\"localStorage\",\n                    local_storage_types=[\"localStorageTypes\"],\n                    memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    on_demand_max_price_percentage_over_lowest_price=123,\n                    require_hibernate_support=False,\n                    spot_max_price_percentage_over_lowest_price=123,\n                    total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n                        max=123,\n                        min=123\n                    )\n                ),\n                instance_type=\"instanceType\",\n                priority=123,\n                spot_price=\"spotPrice\",\n                subnet_id=\"subnetId\",\n                weighted_capacity=123\n            )]\n        )],\n        load_balancers_config=ec2.CfnSpotFleet.LoadBalancersConfigProperty(\n            classic_load_balancers_config=ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty(\n                classic_load_balancers=[ec2.CfnSpotFleet.ClassicLoadBalancerProperty(\n                    name=\"name\"\n                )]\n            ),\n            target_groups_config=ec2.CfnSpotFleet.TargetGroupsConfigProperty(\n                target_groups=[ec2.CfnSpotFleet.TargetGroupProperty(\n                    arn=\"arn\"\n                )]\n            )\n        ),\n        on_demand_allocation_strategy=\"onDemandAllocationStrategy\",\n        on_demand_max_total_price=\"onDemandMaxTotalPrice\",\n        on_demand_target_capacity=123,\n        replace_unhealthy_instances=False,\n        spot_maintenance_strategies=ec2.CfnSpotFleet.SpotMaintenanceStrategiesProperty(\n            capacity_rebalance=ec2.CfnSpotFleet.SpotCapacityRebalanceProperty(\n                replacement_strategy=\"replacementStrategy\",\n                termination_delay=123\n            )\n        ),\n        spot_max_total_price=\"spotMaxTotalPrice\",\n        spot_price=\"spotPrice\",\n        target_capacity_unit_type=\"targetCapacityUnitType\",\n        terminate_instances_with_expiration=False,\n        type=\"type\",\n        valid_from=\"validFrom\",\n        valid_until=\"validUntil\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSpotFleet cfnSpotFleet = new CfnSpotFleet(this, \"MyCfnSpotFleet\", new CfnSpotFleetProps {\n    SpotFleetRequestConfigData = new SpotFleetRequestConfigDataProperty {\n        IamFleetRole = \"iamFleetRole\",\n        TargetCapacity = 123,\n\n        // the properties below are optional\n        AllocationStrategy = \"allocationStrategy\",\n        Context = \"context\",\n        ExcessCapacityTerminationPolicy = \"excessCapacityTerminationPolicy\",\n        InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n        InstancePoolsToUseCount = 123,\n        LaunchSpecifications = new [] { new SpotFleetLaunchSpecificationProperty {\n            ImageId = \"imageId\",\n\n            // the properties below are optional\n            BlockDeviceMappings = new [] { new BlockDeviceMappingProperty {\n                DeviceName = \"deviceName\",\n\n                // the properties below are optional\n                Ebs = new EbsBlockDeviceProperty {\n                    DeleteOnTermination = false,\n                    Encrypted = false,\n                    Iops = 123,\n                    SnapshotId = \"snapshotId\",\n                    VolumeSize = 123,\n                    VolumeType = \"volumeType\"\n                },\n                NoDevice = \"noDevice\",\n                VirtualName = \"virtualName\"\n            } },\n            EbsOptimized = false,\n            IamInstanceProfile = new IamInstanceProfileSpecificationProperty {\n                Arn = \"arn\"\n            },\n            InstanceRequirements = new InstanceRequirementsRequestProperty {\n                AcceleratorCount = new AcceleratorCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n                AcceleratorNames = new [] { \"acceleratorNames\" },\n                AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorTypes = new [] { \"acceleratorTypes\" },\n                BareMetal = \"bareMetal\",\n                BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                BurstablePerformance = \"burstablePerformance\",\n                CpuManufacturers = new [] { \"cpuManufacturers\" },\n                ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n                InstanceGenerations = new [] { \"instanceGenerations\" },\n                LocalStorage = \"localStorage\",\n                LocalStorageTypes = new [] { \"localStorageTypes\" },\n                MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                MemoryMiB = new MemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                OnDemandMaxPricePercentageOverLowestPrice = 123,\n                RequireHibernateSupport = false,\n                SpotMaxPricePercentageOverLowestPrice = 123,\n                TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                VCpuCount = new VCpuCountRangeRequestProperty {\n                    Max = 123,\n                    Min = 123\n                }\n            },\n            InstanceType = \"instanceType\",\n            KernelId = \"kernelId\",\n            KeyName = \"keyName\",\n            Monitoring = new SpotFleetMonitoringProperty {\n                Enabled = false\n            },\n            NetworkInterfaces = new [] { new InstanceNetworkInterfaceSpecificationProperty {\n                AssociatePublicIpAddress = false,\n                DeleteOnTermination = false,\n                Description = \"description\",\n                DeviceIndex = 123,\n                Groups = new [] { \"groups\" },\n                Ipv6AddressCount = 123,\n                Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n                    Ipv6Address = \"ipv6Address\"\n                } },\n                NetworkInterfaceId = \"networkInterfaceId\",\n                PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n                    PrivateIpAddress = \"privateIpAddress\",\n\n                    // the properties below are optional\n                    Primary = false\n                } },\n                SecondaryPrivateIpAddressCount = 123,\n                SubnetId = \"subnetId\"\n            } },\n            Placement = new SpotPlacementProperty {\n                AvailabilityZone = \"availabilityZone\",\n                GroupName = \"groupName\",\n                Tenancy = \"tenancy\"\n            },\n            RamdiskId = \"ramdiskId\",\n            SecurityGroups = new [] { new GroupIdentifierProperty {\n                GroupId = \"groupId\"\n            } },\n            SpotPrice = \"spotPrice\",\n            SubnetId = \"subnetId\",\n            TagSpecifications = new [] { new SpotFleetTagSpecificationProperty {\n                ResourceType = \"resourceType\",\n                Tags = new [] { new CfnTag {\n                    Key = \"key\",\n                    Value = \"value\"\n                } }\n            } },\n            UserData = \"userData\",\n            WeightedCapacity = 123\n        } },\n        LaunchTemplateConfigs = new [] { new LaunchTemplateConfigProperty {\n            LaunchTemplateSpecification = new FleetLaunchTemplateSpecificationProperty {\n                Version = \"version\",\n\n                // the properties below are optional\n                LaunchTemplateId = \"launchTemplateId\",\n                LaunchTemplateName = \"launchTemplateName\"\n            },\n            Overrides = new [] { new LaunchTemplateOverridesProperty {\n                AvailabilityZone = \"availabilityZone\",\n                InstanceRequirements = new InstanceRequirementsRequestProperty {\n                    AcceleratorCount = new AcceleratorCountRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n                    AcceleratorNames = new [] { \"acceleratorNames\" },\n                    AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    AcceleratorTypes = new [] { \"acceleratorTypes\" },\n                    BareMetal = \"bareMetal\",\n                    BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    BurstablePerformance = \"burstablePerformance\",\n                    CpuManufacturers = new [] { \"cpuManufacturers\" },\n                    ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n                    InstanceGenerations = new [] { \"instanceGenerations\" },\n                    LocalStorage = \"localStorage\",\n                    LocalStorageTypes = new [] { \"localStorageTypes\" },\n                    MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    MemoryMiB = new MemoryMiBRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    OnDemandMaxPricePercentageOverLowestPrice = 123,\n                    RequireHibernateSupport = false,\n                    SpotMaxPricePercentageOverLowestPrice = 123,\n                    TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    VCpuCount = new VCpuCountRangeRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    }\n                },\n                InstanceType = \"instanceType\",\n                Priority = 123,\n                SpotPrice = \"spotPrice\",\n                SubnetId = \"subnetId\",\n                WeightedCapacity = 123\n            } }\n        } },\n        LoadBalancersConfig = new LoadBalancersConfigProperty {\n            ClassicLoadBalancersConfig = new ClassicLoadBalancersConfigProperty {\n                ClassicLoadBalancers = new [] { new ClassicLoadBalancerProperty {\n                    Name = \"name\"\n                } }\n            },\n            TargetGroupsConfig = new TargetGroupsConfigProperty {\n                TargetGroups = new [] { new TargetGroupProperty {\n                    Arn = \"arn\"\n                } }\n            }\n        },\n        OnDemandAllocationStrategy = \"onDemandAllocationStrategy\",\n        OnDemandMaxTotalPrice = \"onDemandMaxTotalPrice\",\n        OnDemandTargetCapacity = 123,\n        ReplaceUnhealthyInstances = false,\n        SpotMaintenanceStrategies = new SpotMaintenanceStrategiesProperty {\n            CapacityRebalance = new SpotCapacityRebalanceProperty {\n                ReplacementStrategy = \"replacementStrategy\",\n                TerminationDelay = 123\n            }\n        },\n        SpotMaxTotalPrice = \"spotMaxTotalPrice\",\n        SpotPrice = \"spotPrice\",\n        TargetCapacityUnitType = \"targetCapacityUnitType\",\n        TerminateInstancesWithExpiration = false,\n        Type = \"type\",\n        ValidFrom = \"validFrom\",\n        ValidUntil = \"validUntil\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSpotFleet cfnSpotFleet = CfnSpotFleet.Builder.create(this, \"MyCfnSpotFleet\")\n        .spotFleetRequestConfigData(SpotFleetRequestConfigDataProperty.builder()\n                .iamFleetRole(\"iamFleetRole\")\n                .targetCapacity(123)\n\n                // the properties below are optional\n                .allocationStrategy(\"allocationStrategy\")\n                .context(\"context\")\n                .excessCapacityTerminationPolicy(\"excessCapacityTerminationPolicy\")\n                .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n                .instancePoolsToUseCount(123)\n                .launchSpecifications(List.of(SpotFleetLaunchSpecificationProperty.builder()\n                        .imageId(\"imageId\")\n\n                        // the properties below are optional\n                        .blockDeviceMappings(List.of(BlockDeviceMappingProperty.builder()\n                                .deviceName(\"deviceName\")\n\n                                // the properties below are optional\n                                .ebs(EbsBlockDeviceProperty.builder()\n                                        .deleteOnTermination(false)\n                                        .encrypted(false)\n                                        .iops(123)\n                                        .snapshotId(\"snapshotId\")\n                                        .volumeSize(123)\n                                        .volumeType(\"volumeType\")\n                                        .build())\n                                .noDevice(\"noDevice\")\n                                .virtualName(\"virtualName\")\n                                .build()))\n                        .ebsOptimized(false)\n                        .iamInstanceProfile(IamInstanceProfileSpecificationProperty.builder()\n                                .arn(\"arn\")\n                                .build())\n                        .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                                .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                                .acceleratorNames(List.of(\"acceleratorNames\"))\n                                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                                .bareMetal(\"bareMetal\")\n                                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .burstablePerformance(\"burstablePerformance\")\n                                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                                .instanceGenerations(List.of(\"instanceGenerations\"))\n                                .localStorage(\"localStorage\")\n                                .localStorageTypes(List.of(\"localStorageTypes\"))\n                                .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .memoryMiB(MemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .onDemandMaxPricePercentageOverLowestPrice(123)\n                                .requireHibernateSupport(false)\n                                .spotMaxPricePercentageOverLowestPrice(123)\n                                .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .build())\n                        .instanceType(\"instanceType\")\n                        .kernelId(\"kernelId\")\n                        .keyName(\"keyName\")\n                        .monitoring(SpotFleetMonitoringProperty.builder()\n                                .enabled(false)\n                                .build())\n                        .networkInterfaces(List.of(InstanceNetworkInterfaceSpecificationProperty.builder()\n                                .associatePublicIpAddress(false)\n                                .deleteOnTermination(false)\n                                .description(\"description\")\n                                .deviceIndex(123)\n                                .groups(List.of(\"groups\"))\n                                .ipv6AddressCount(123)\n                                .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                                        .ipv6Address(\"ipv6Address\")\n                                        .build()))\n                                .networkInterfaceId(\"networkInterfaceId\")\n                                .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                                        .privateIpAddress(\"privateIpAddress\")\n\n                                        // the properties below are optional\n                                        .primary(false)\n                                        .build()))\n                                .secondaryPrivateIpAddressCount(123)\n                                .subnetId(\"subnetId\")\n                                .build()))\n                        .placement(SpotPlacementProperty.builder()\n                                .availabilityZone(\"availabilityZone\")\n                                .groupName(\"groupName\")\n                                .tenancy(\"tenancy\")\n                                .build())\n                        .ramdiskId(\"ramdiskId\")\n                        .securityGroups(List.of(GroupIdentifierProperty.builder()\n                                .groupId(\"groupId\")\n                                .build()))\n                        .spotPrice(\"spotPrice\")\n                        .subnetId(\"subnetId\")\n                        .tagSpecifications(List.of(SpotFleetTagSpecificationProperty.builder()\n                                .resourceType(\"resourceType\")\n                                .tags(List.of(CfnTag.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n                                        .build()))\n                                .build()))\n                        .userData(\"userData\")\n                        .weightedCapacity(123)\n                        .build()))\n                .launchTemplateConfigs(List.of(LaunchTemplateConfigProperty.builder()\n                        .launchTemplateSpecification(FleetLaunchTemplateSpecificationProperty.builder()\n                                .version(\"version\")\n\n                                // the properties below are optional\n                                .launchTemplateId(\"launchTemplateId\")\n                                .launchTemplateName(\"launchTemplateName\")\n                                .build())\n                        .overrides(List.of(LaunchTemplateOverridesProperty.builder()\n                                .availabilityZone(\"availabilityZone\")\n                                .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                                        .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                                        .acceleratorNames(List.of(\"acceleratorNames\"))\n                                        .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                                        .bareMetal(\"bareMetal\")\n                                        .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .burstablePerformance(\"burstablePerformance\")\n                                        .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                                        .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                                        .instanceGenerations(List.of(\"instanceGenerations\"))\n                                        .localStorage(\"localStorage\")\n                                        .localStorageTypes(List.of(\"localStorageTypes\"))\n                                        .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .memoryMiB(MemoryMiBRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .onDemandMaxPricePercentageOverLowestPrice(123)\n                                        .requireHibernateSupport(false)\n                                        .spotMaxPricePercentageOverLowestPrice(123)\n                                        .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .build())\n                                .instanceType(\"instanceType\")\n                                .priority(123)\n                                .spotPrice(\"spotPrice\")\n                                .subnetId(\"subnetId\")\n                                .weightedCapacity(123)\n                                .build()))\n                        .build()))\n                .loadBalancersConfig(LoadBalancersConfigProperty.builder()\n                        .classicLoadBalancersConfig(ClassicLoadBalancersConfigProperty.builder()\n                                .classicLoadBalancers(List.of(ClassicLoadBalancerProperty.builder()\n                                        .name(\"name\")\n                                        .build()))\n                                .build())\n                        .targetGroupsConfig(TargetGroupsConfigProperty.builder()\n                                .targetGroups(List.of(TargetGroupProperty.builder()\n                                        .arn(\"arn\")\n                                        .build()))\n                                .build())\n                        .build())\n                .onDemandAllocationStrategy(\"onDemandAllocationStrategy\")\n                .onDemandMaxTotalPrice(\"onDemandMaxTotalPrice\")\n                .onDemandTargetCapacity(123)\n                .replaceUnhealthyInstances(false)\n                .spotMaintenanceStrategies(SpotMaintenanceStrategiesProperty.builder()\n                        .capacityRebalance(SpotCapacityRebalanceProperty.builder()\n                                .replacementStrategy(\"replacementStrategy\")\n                                .terminationDelay(123)\n                                .build())\n                        .build())\n                .spotMaxTotalPrice(\"spotMaxTotalPrice\")\n                .spotPrice(\"spotPrice\")\n                .targetCapacityUnitType(\"targetCapacityUnitType\")\n                .terminateInstancesWithExpiration(false)\n                .type(\"type\")\n                .validFrom(\"validFrom\")\n                .validUntil(\"validUntil\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSpotFleet := ec2.NewCfnSpotFleet(this, jsii.String(\"MyCfnSpotFleet\"), &cfnSpotFleetProps{\n\tspotFleetRequestConfigData: &spotFleetRequestConfigDataProperty{\n\t\tiamFleetRole: jsii.String(\"iamFleetRole\"),\n\t\ttargetCapacity: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\t\tcontext: jsii.String(\"context\"),\n\t\texcessCapacityTerminationPolicy: jsii.String(\"excessCapacityTerminationPolicy\"),\n\t\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\t\tinstancePoolsToUseCount: jsii.Number(123),\n\t\tlaunchSpecifications: []interface{}{\n\t\t\t&spotFleetLaunchSpecificationProperty{\n\t\t\t\timageId: jsii.String(\"imageId\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tblockDeviceMappings: []interface{}{\n\t\t\t\t\t&blockDeviceMappingProperty{\n\t\t\t\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tebs: &ebsBlockDeviceProperty{\n\t\t\t\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\t\t\t\tencrypted: jsii.Boolean(false),\n\t\t\t\t\t\t\tiops: jsii.Number(123),\n\t\t\t\t\t\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\t\t\t\t\t\tvolumeSize: jsii.Number(123),\n\t\t\t\t\t\t\tvolumeType: jsii.String(\"volumeType\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnoDevice: jsii.String(\"noDevice\"),\n\t\t\t\t\t\tvirtualName: jsii.String(\"virtualName\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tebsOptimized: jsii.Boolean(false),\n\t\t\t\tiamInstanceProfile: &iamInstanceProfileSpecificationProperty{\n\t\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t\t},\n\t\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t\t},\n\t\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t\t},\n\t\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t\t},\n\t\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t\t},\n\t\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t\t},\n\t\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t\t},\n\t\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\t\tkernelId: jsii.String(\"kernelId\"),\n\t\t\t\tkeyName: jsii.String(\"keyName\"),\n\t\t\t\tmonitoring: &spotFleetMonitoringProperty{\n\t\t\t\t\tenabled: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t\tnetworkInterfaces: []interface{}{\n\t\t\t\t\t&instanceNetworkInterfaceSpecificationProperty{\n\t\t\t\t\t\tassociatePublicIpAddress: jsii.Boolean(false),\n\t\t\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\t\t\tdescription: jsii.String(\"description\"),\n\t\t\t\t\t\tdeviceIndex: jsii.Number(123),\n\t\t\t\t\t\tgroups: []*string{\n\t\t\t\t\t\t\tjsii.String(\"groups\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tipv6AddressCount: jsii.Number(123),\n\t\t\t\t\t\tipv6Addresses: []interface{}{\n\t\t\t\t\t\t\t&instanceIpv6AddressProperty{\n\t\t\t\t\t\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\t\t\t\t\tprivateIpAddresses: []interface{}{\n\t\t\t\t\t\t\t&privateIpAddressSpecificationProperty{\n\t\t\t\t\t\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\n\t\t\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\t\t\tprimary: jsii.Boolean(false),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\t\t\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplacement: &spotPlacementProperty{\n\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\tgroupName: jsii.String(\"groupName\"),\n\t\t\t\t\ttenancy: jsii.String(\"tenancy\"),\n\t\t\t\t},\n\t\t\t\tramdiskId: jsii.String(\"ramdiskId\"),\n\t\t\t\tsecurityGroups: []interface{}{\n\t\t\t\t\t&groupIdentifierProperty{\n\t\t\t\t\t\tgroupId: jsii.String(\"groupId\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\ttagSpecifications: []interface{}{\n\t\t\t\t\t&spotFleetTagSpecificationProperty{\n\t\t\t\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\t\t\t\ttags: []cfnTag{\n\t\t\t\t\t\t\t&cfnTag{\n\t\t\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tuserData: jsii.String(\"userData\"),\n\t\t\t\tweightedCapacity: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tlaunchTemplateConfigs: []interface{}{\n\t\t\t&launchTemplateConfigProperty{\n\t\t\t\tlaunchTemplateSpecification: &fleetLaunchTemplateSpecificationProperty{\n\t\t\t\t\tversion: jsii.String(\"version\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\t\t\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t\t\t\t},\n\t\t\t\toverrides: []interface{}{\n\t\t\t\t\t&launchTemplateOverridesProperty{\n\t\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\t\t\t\tpriority: jsii.Number(123),\n\t\t\t\t\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\t\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\t\t\tweightedCapacity: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tloadBalancersConfig: &loadBalancersConfigProperty{\n\t\t\tclassicLoadBalancersConfig: &classicLoadBalancersConfigProperty{\n\t\t\t\tclassicLoadBalancers: []interface{}{\n\t\t\t\t\t&classicLoadBalancerProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttargetGroupsConfig: &targetGroupsConfigProperty{\n\t\t\t\ttargetGroups: []interface{}{\n\t\t\t\t\t&targetGroupProperty{\n\t\t\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tonDemandAllocationStrategy: jsii.String(\"onDemandAllocationStrategy\"),\n\t\tonDemandMaxTotalPrice: jsii.String(\"onDemandMaxTotalPrice\"),\n\t\tonDemandTargetCapacity: jsii.Number(123),\n\t\treplaceUnhealthyInstances: jsii.Boolean(false),\n\t\tspotMaintenanceStrategies: &spotMaintenanceStrategiesProperty{\n\t\t\tcapacityRebalance: &spotCapacityRebalanceProperty{\n\t\t\t\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\t\t\t\tterminationDelay: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tspotMaxTotalPrice: jsii.String(\"spotMaxTotalPrice\"),\n\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\ttargetCapacityUnitType: jsii.String(\"targetCapacityUnitType\"),\n\t\tterminateInstancesWithExpiration: jsii.Boolean(false),\n\t\ttype: jsii.String(\"type\"),\n\t\tvalidFrom: jsii.String(\"validFrom\"),\n\t\tvalidUntil: jsii.String(\"validUntil\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSpotFleet = new ec2.CfnSpotFleet(this, 'MyCfnSpotFleet', {\n  spotFleetRequestConfigData: {\n    iamFleetRole: 'iamFleetRole',\n    targetCapacity: 123,\n\n    // the properties below are optional\n    allocationStrategy: 'allocationStrategy',\n    context: 'context',\n    excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    instancePoolsToUseCount: 123,\n    launchSpecifications: [{\n      imageId: 'imageId',\n\n      // the properties below are optional\n      blockDeviceMappings: [{\n        deviceName: 'deviceName',\n\n        // the properties below are optional\n        ebs: {\n          deleteOnTermination: false,\n          encrypted: false,\n          iops: 123,\n          snapshotId: 'snapshotId',\n          volumeSize: 123,\n          volumeType: 'volumeType',\n        },\n        noDevice: 'noDevice',\n        virtualName: 'virtualName',\n      }],\n      ebsOptimized: false,\n      iamInstanceProfile: {\n        arn: 'arn',\n      },\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      kernelId: 'kernelId',\n      keyName: 'keyName',\n      monitoring: {\n        enabled: false,\n      },\n      networkInterfaces: [{\n        associatePublicIpAddress: false,\n        deleteOnTermination: false,\n        description: 'description',\n        deviceIndex: 123,\n        groups: ['groups'],\n        ipv6AddressCount: 123,\n        ipv6Addresses: [{\n          ipv6Address: 'ipv6Address',\n        }],\n        networkInterfaceId: 'networkInterfaceId',\n        privateIpAddresses: [{\n          privateIpAddress: 'privateIpAddress',\n\n          // the properties below are optional\n          primary: false,\n        }],\n        secondaryPrivateIpAddressCount: 123,\n        subnetId: 'subnetId',\n      }],\n      placement: {\n        availabilityZone: 'availabilityZone',\n        groupName: 'groupName',\n        tenancy: 'tenancy',\n      },\n      ramdiskId: 'ramdiskId',\n      securityGroups: [{\n        groupId: 'groupId',\n      }],\n      spotPrice: 'spotPrice',\n      subnetId: 'subnetId',\n      tagSpecifications: [{\n        resourceType: 'resourceType',\n        tags: [{\n          key: 'key',\n          value: 'value',\n        }],\n      }],\n      userData: 'userData',\n      weightedCapacity: 123,\n    }],\n    launchTemplateConfigs: [{\n      launchTemplateSpecification: {\n        version: 'version',\n\n        // the properties below are optional\n        launchTemplateId: 'launchTemplateId',\n        launchTemplateName: 'launchTemplateName',\n      },\n      overrides: [{\n        availabilityZone: 'availabilityZone',\n        instanceRequirements: {\n          acceleratorCount: {\n            max: 123,\n            min: 123,\n          },\n          acceleratorManufacturers: ['acceleratorManufacturers'],\n          acceleratorNames: ['acceleratorNames'],\n          acceleratorTotalMemoryMiB: {\n            max: 123,\n            min: 123,\n          },\n          acceleratorTypes: ['acceleratorTypes'],\n          bareMetal: 'bareMetal',\n          baselineEbsBandwidthMbps: {\n            max: 123,\n            min: 123,\n          },\n          burstablePerformance: 'burstablePerformance',\n          cpuManufacturers: ['cpuManufacturers'],\n          excludedInstanceTypes: ['excludedInstanceTypes'],\n          instanceGenerations: ['instanceGenerations'],\n          localStorage: 'localStorage',\n          localStorageTypes: ['localStorageTypes'],\n          memoryGiBPerVCpu: {\n            max: 123,\n            min: 123,\n          },\n          memoryMiB: {\n            max: 123,\n            min: 123,\n          },\n          networkInterfaceCount: {\n            max: 123,\n            min: 123,\n          },\n          onDemandMaxPricePercentageOverLowestPrice: 123,\n          requireHibernateSupport: false,\n          spotMaxPricePercentageOverLowestPrice: 123,\n          totalLocalStorageGb: {\n            max: 123,\n            min: 123,\n          },\n          vCpuCount: {\n            max: 123,\n            min: 123,\n          },\n        },\n        instanceType: 'instanceType',\n        priority: 123,\n        spotPrice: 'spotPrice',\n        subnetId: 'subnetId',\n        weightedCapacity: 123,\n      }],\n    }],\n    loadBalancersConfig: {\n      classicLoadBalancersConfig: {\n        classicLoadBalancers: [{\n          name: 'name',\n        }],\n      },\n      targetGroupsConfig: {\n        targetGroups: [{\n          arn: 'arn',\n        }],\n      },\n    },\n    onDemandAllocationStrategy: 'onDemandAllocationStrategy',\n    onDemandMaxTotalPrice: 'onDemandMaxTotalPrice',\n    onDemandTargetCapacity: 123,\n    replaceUnhealthyInstances: false,\n    spotMaintenanceStrategies: {\n      capacityRebalance: {\n        replacementStrategy: 'replacementStrategy',\n        terminationDelay: 123,\n      },\n    },\n    spotMaxTotalPrice: 'spotMaxTotalPrice',\n    spotPrice: 'spotPrice',\n    targetCapacityUnitType: 'targetCapacityUnitType',\n    terminateInstancesWithExpiration: false,\n    type: 'type',\n    validFrom: 'validFrom',\n    validUntil: 'validUntil',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet",
        "@aws-cdk/aws-ec2.CfnSpotFleetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSpotFleet = new ec2.CfnSpotFleet(this, 'MyCfnSpotFleet', {\n  spotFleetRequestConfigData: {\n    iamFleetRole: 'iamFleetRole',\n    targetCapacity: 123,\n\n    // the properties below are optional\n    allocationStrategy: 'allocationStrategy',\n    context: 'context',\n    excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    instancePoolsToUseCount: 123,\n    launchSpecifications: [{\n      imageId: 'imageId',\n\n      // the properties below are optional\n      blockDeviceMappings: [{\n        deviceName: 'deviceName',\n\n        // the properties below are optional\n        ebs: {\n          deleteOnTermination: false,\n          encrypted: false,\n          iops: 123,\n          snapshotId: 'snapshotId',\n          volumeSize: 123,\n          volumeType: 'volumeType',\n        },\n        noDevice: 'noDevice',\n        virtualName: 'virtualName',\n      }],\n      ebsOptimized: false,\n      iamInstanceProfile: {\n        arn: 'arn',\n      },\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      kernelId: 'kernelId',\n      keyName: 'keyName',\n      monitoring: {\n        enabled: false,\n      },\n      networkInterfaces: [{\n        associatePublicIpAddress: false,\n        deleteOnTermination: false,\n        description: 'description',\n        deviceIndex: 123,\n        groups: ['groups'],\n        ipv6AddressCount: 123,\n        ipv6Addresses: [{\n          ipv6Address: 'ipv6Address',\n        }],\n        networkInterfaceId: 'networkInterfaceId',\n        privateIpAddresses: [{\n          privateIpAddress: 'privateIpAddress',\n\n          // the properties below are optional\n          primary: false,\n        }],\n        secondaryPrivateIpAddressCount: 123,\n        subnetId: 'subnetId',\n      }],\n      placement: {\n        availabilityZone: 'availabilityZone',\n        groupName: 'groupName',\n        tenancy: 'tenancy',\n      },\n      ramdiskId: 'ramdiskId',\n      securityGroups: [{\n        groupId: 'groupId',\n      }],\n      spotPrice: 'spotPrice',\n      subnetId: 'subnetId',\n      tagSpecifications: [{\n        resourceType: 'resourceType',\n        tags: [{\n          key: 'key',\n          value: 'value',\n        }],\n      }],\n      userData: 'userData',\n      weightedCapacity: 123,\n    }],\n    launchTemplateConfigs: [{\n      launchTemplateSpecification: {\n        version: 'version',\n\n        // the properties below are optional\n        launchTemplateId: 'launchTemplateId',\n        launchTemplateName: 'launchTemplateName',\n      },\n      overrides: [{\n        availabilityZone: 'availabilityZone',\n        instanceRequirements: {\n          acceleratorCount: {\n            max: 123,\n            min: 123,\n          },\n          acceleratorManufacturers: ['acceleratorManufacturers'],\n          acceleratorNames: ['acceleratorNames'],\n          acceleratorTotalMemoryMiB: {\n            max: 123,\n            min: 123,\n          },\n          acceleratorTypes: ['acceleratorTypes'],\n          bareMetal: 'bareMetal',\n          baselineEbsBandwidthMbps: {\n            max: 123,\n            min: 123,\n          },\n          burstablePerformance: 'burstablePerformance',\n          cpuManufacturers: ['cpuManufacturers'],\n          excludedInstanceTypes: ['excludedInstanceTypes'],\n          instanceGenerations: ['instanceGenerations'],\n          localStorage: 'localStorage',\n          localStorageTypes: ['localStorageTypes'],\n          memoryGiBPerVCpu: {\n            max: 123,\n            min: 123,\n          },\n          memoryMiB: {\n            max: 123,\n            min: 123,\n          },\n          networkInterfaceCount: {\n            max: 123,\n            min: 123,\n          },\n          onDemandMaxPricePercentageOverLowestPrice: 123,\n          requireHibernateSupport: false,\n          spotMaxPricePercentageOverLowestPrice: 123,\n          totalLocalStorageGb: {\n            max: 123,\n            min: 123,\n          },\n          vCpuCount: {\n            max: 123,\n            min: 123,\n          },\n        },\n        instanceType: 'instanceType',\n        priority: 123,\n        spotPrice: 'spotPrice',\n        subnetId: 'subnetId',\n        weightedCapacity: 123,\n      }],\n    }],\n    loadBalancersConfig: {\n      classicLoadBalancersConfig: {\n        classicLoadBalancers: [{\n          name: 'name',\n        }],\n      },\n      targetGroupsConfig: {\n        targetGroups: [{\n          arn: 'arn',\n        }],\n      },\n    },\n    onDemandAllocationStrategy: 'onDemandAllocationStrategy',\n    onDemandMaxTotalPrice: 'onDemandMaxTotalPrice',\n    onDemandTargetCapacity: 123,\n    replaceUnhealthyInstances: false,\n    spotMaintenanceStrategies: {\n      capacityRebalance: {\n        replacementStrategy: 'replacementStrategy',\n        terminationDelay: 123,\n      },\n    },\n    spotMaxTotalPrice: 'spotMaxTotalPrice',\n    spotPrice: 'spotPrice',\n    targetCapacityUnitType: 'targetCapacityUnitType',\n    terminateInstancesWithExpiration: false,\n    type: 'type',\n    validFrom: 'validFrom',\n    validUntil: 'validUntil',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 48,
        "10": 72,
        "75": 174,
        "91": 11,
        "104": 1,
        "192": 27,
        "193": 42,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 170,
        "290": 1
      },
      "fqnsFingerprint": "d950b198f0e6aafa9c5402438469056724173edd471d66eda98f6ac866f86cb9"
    },
    "a47b66ffc0a98b95bca8780f563d331617a54b7c7b3ec40a250af30df8a5c220": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\naccelerator_count_request_property = ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAcceleratorCountRequestProperty acceleratorCountRequestProperty = new AcceleratorCountRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAcceleratorCountRequestProperty acceleratorCountRequestProperty = AcceleratorCountRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nacceleratorCountRequestProperty := &acceleratorCountRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst acceleratorCountRequestProperty: ec2.CfnSpotFleet.AcceleratorCountRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.AcceleratorCountRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.AcceleratorCountRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorCountRequestProperty: ec2.CfnSpotFleet.AcceleratorCountRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fdb9e1e1ce751ee2f911b7281a33d45842b221770c97b85dffb851e910f36c5a"
    },
    "b3ca949865b2772749d231208052f447c2368b8c65d5162721634ba42262cf66": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\naccelerator_total_memory_mi_bRequest_property = ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAcceleratorTotalMemoryMiBRequestProperty acceleratorTotalMemoryMiBRequestProperty = new AcceleratorTotalMemoryMiBRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAcceleratorTotalMemoryMiBRequestProperty acceleratorTotalMemoryMiBRequestProperty = AcceleratorTotalMemoryMiBRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nacceleratorTotalMemoryMiBRequestProperty := &acceleratorTotalMemoryMiBRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst acceleratorTotalMemoryMiBRequestProperty: ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorTotalMemoryMiBRequestProperty: ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5d644823ef8a55d5e5b236213c100f526d98d7469c7915a5846e5d7d234706f4"
    },
    "a4209424bc2c6ad8d8ee73637cbba6957416086f3c6b5e830d1157563b551a17": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nbaseline_ebs_bandwidth_mbps_request_property = ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nBaselineEbsBandwidthMbpsRequestProperty baselineEbsBandwidthMbpsRequestProperty = new BaselineEbsBandwidthMbpsRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nBaselineEbsBandwidthMbpsRequestProperty baselineEbsBandwidthMbpsRequestProperty = BaselineEbsBandwidthMbpsRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nbaselineEbsBandwidthMbpsRequestProperty := &baselineEbsBandwidthMbpsRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst baselineEbsBandwidthMbpsRequestProperty: ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baselineEbsBandwidthMbpsRequestProperty: ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8954d86681066f851d6e78d84afe568a988a731c7a38534bb5de14d8e4dd45c5"
    },
    "4be5cb3bfb2031dc72f06973cf325e069328748b92fad92e6f3ac80d7f4705ec": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nblock_device_mapping_property = ec2.CfnSpotFleet.BlockDeviceMappingProperty(\n    device_name=\"deviceName\",\n\n    # the properties below are optional\n    ebs=ec2.CfnSpotFleet.EbsBlockDeviceProperty(\n        delete_on_termination=False,\n        encrypted=False,\n        iops=123,\n        snapshot_id=\"snapshotId\",\n        volume_size=123,\n        volume_type=\"volumeType\"\n    ),\n    no_device=\"noDevice\",\n    virtual_name=\"virtualName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nBlockDeviceMappingProperty blockDeviceMappingProperty = new BlockDeviceMappingProperty {\n    DeviceName = \"deviceName\",\n\n    // the properties below are optional\n    Ebs = new EbsBlockDeviceProperty {\n        DeleteOnTermination = false,\n        Encrypted = false,\n        Iops = 123,\n        SnapshotId = \"snapshotId\",\n        VolumeSize = 123,\n        VolumeType = \"volumeType\"\n    },\n    NoDevice = \"noDevice\",\n    VirtualName = \"virtualName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nBlockDeviceMappingProperty blockDeviceMappingProperty = BlockDeviceMappingProperty.builder()\n        .deviceName(\"deviceName\")\n\n        // the properties below are optional\n        .ebs(EbsBlockDeviceProperty.builder()\n                .deleteOnTermination(false)\n                .encrypted(false)\n                .iops(123)\n                .snapshotId(\"snapshotId\")\n                .volumeSize(123)\n                .volumeType(\"volumeType\")\n                .build())\n        .noDevice(\"noDevice\")\n        .virtualName(\"virtualName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nblockDeviceMappingProperty := &blockDeviceMappingProperty{\n\tdeviceName: jsii.String(\"deviceName\"),\n\n\t// the properties below are optional\n\tebs: &ebsBlockDeviceProperty{\n\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\tencrypted: jsii.Boolean(false),\n\t\tiops: jsii.Number(123),\n\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\tvolumeSize: jsii.Number(123),\n\t\tvolumeType: jsii.String(\"volumeType\"),\n\t},\n\tnoDevice: jsii.String(\"noDevice\"),\n\tvirtualName: jsii.String(\"virtualName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst blockDeviceMappingProperty: ec2.CfnSpotFleet.BlockDeviceMappingProperty = {\n  deviceName: 'deviceName',\n\n  // the properties below are optional\n  ebs: {\n    deleteOnTermination: false,\n    encrypted: false,\n    iops: 123,\n    snapshotId: 'snapshotId',\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  noDevice: 'noDevice',\n  virtualName: 'virtualName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.BlockDeviceMappingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.BlockDeviceMappingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst blockDeviceMappingProperty: ec2.CfnSpotFleet.BlockDeviceMappingProperty = {\n  deviceName: 'deviceName',\n\n  // the properties below are optional\n  ebs: {\n    deleteOnTermination: false,\n    encrypted: false,\n    iops: 123,\n    snapshotId: 'snapshotId',\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  noDevice: 'noDevice',\n  virtualName: 'virtualName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 15,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "302a99e833242cfc07de4753ec2275db9b4354c2a7e3e964a890d552a3a376d8"
    },
    "130a48d50e4afc78ab4d03a66f3044ce08be5b26f4ba50b22be7c33c655f01bf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nclassic_load_balancer_property = ec2.CfnSpotFleet.ClassicLoadBalancerProperty(\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClassicLoadBalancerProperty classicLoadBalancerProperty = new ClassicLoadBalancerProperty {\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClassicLoadBalancerProperty classicLoadBalancerProperty = ClassicLoadBalancerProperty.builder()\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nclassicLoadBalancerProperty := &classicLoadBalancerProperty{\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst classicLoadBalancerProperty: ec2.CfnSpotFleet.ClassicLoadBalancerProperty = {\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.ClassicLoadBalancerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.ClassicLoadBalancerProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst classicLoadBalancerProperty: ec2.CfnSpotFleet.ClassicLoadBalancerProperty = {\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1740fe82952caad798d903df07229a012c47e1d445633808cbcb2c63172bcfa8"
    },
    "fef8eb00aadd57775eaab6d261e1d047fde985b9492bd38b5610d88893601d12": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nclassic_load_balancers_config_property = ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty(\n    classic_load_balancers=[ec2.CfnSpotFleet.ClassicLoadBalancerProperty(\n        name=\"name\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClassicLoadBalancersConfigProperty classicLoadBalancersConfigProperty = new ClassicLoadBalancersConfigProperty {\n    ClassicLoadBalancers = new [] { new ClassicLoadBalancerProperty {\n        Name = \"name\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClassicLoadBalancersConfigProperty classicLoadBalancersConfigProperty = ClassicLoadBalancersConfigProperty.builder()\n        .classicLoadBalancers(List.of(ClassicLoadBalancerProperty.builder()\n                .name(\"name\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nclassicLoadBalancersConfigProperty := &classicLoadBalancersConfigProperty{\n\tclassicLoadBalancers: []interface{}{\n\t\t&classicLoadBalancerProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst classicLoadBalancersConfigProperty: ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty = {\n  classicLoadBalancers: [{\n    name: 'name',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst classicLoadBalancersConfigProperty: ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty = {\n  classicLoadBalancers: [{\n    name: 'name',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4fac09b7b7f57b6e9c4eaf309f848e905bad2dbb36622d29a73f2a385640b62e"
    },
    "064a5de6d47f018277d63eba0859efa4b91654387c69b3e70e17f46a726012f2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nebs_block_device_property = ec2.CfnSpotFleet.EbsBlockDeviceProperty(\n    delete_on_termination=False,\n    encrypted=False,\n    iops=123,\n    snapshot_id=\"snapshotId\",\n    volume_size=123,\n    volume_type=\"volumeType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEbsBlockDeviceProperty ebsBlockDeviceProperty = new EbsBlockDeviceProperty {\n    DeleteOnTermination = false,\n    Encrypted = false,\n    Iops = 123,\n    SnapshotId = \"snapshotId\",\n    VolumeSize = 123,\n    VolumeType = \"volumeType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEbsBlockDeviceProperty ebsBlockDeviceProperty = EbsBlockDeviceProperty.builder()\n        .deleteOnTermination(false)\n        .encrypted(false)\n        .iops(123)\n        .snapshotId(\"snapshotId\")\n        .volumeSize(123)\n        .volumeType(\"volumeType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nebsBlockDeviceProperty := &ebsBlockDeviceProperty{\n\tdeleteOnTermination: jsii.Boolean(false),\n\tencrypted: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tsnapshotId: jsii.String(\"snapshotId\"),\n\tvolumeSize: jsii.Number(123),\n\tvolumeType: jsii.String(\"volumeType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ebsBlockDeviceProperty: ec2.CfnSpotFleet.EbsBlockDeviceProperty = {\n  deleteOnTermination: false,\n  encrypted: false,\n  iops: 123,\n  snapshotId: 'snapshotId',\n  volumeSize: 123,\n  volumeType: 'volumeType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.EbsBlockDeviceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.EbsBlockDeviceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ebsBlockDeviceProperty: ec2.CfnSpotFleet.EbsBlockDeviceProperty = {\n  deleteOnTermination: false,\n  encrypted: false,\n  iops: 123,\n  snapshotId: 'snapshotId',\n  volumeSize: 123,\n  volumeType: 'volumeType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 11,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "55b11cce7b2aeaaf64106b84c8f27abc0c93b59cfa8abe5fd8808b983147152c"
    },
    "00eb8e4034c352c6a9635f135be69248e3a5723d54ebe9c41a0a61de47f44c41": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nfleet_launch_template_specification_property = ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty(\n    version=\"version\",\n\n    # the properties below are optional\n    launch_template_id=\"launchTemplateId\",\n    launch_template_name=\"launchTemplateName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nFleetLaunchTemplateSpecificationProperty fleetLaunchTemplateSpecificationProperty = new FleetLaunchTemplateSpecificationProperty {\n    Version = \"version\",\n\n    // the properties below are optional\n    LaunchTemplateId = \"launchTemplateId\",\n    LaunchTemplateName = \"launchTemplateName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nFleetLaunchTemplateSpecificationProperty fleetLaunchTemplateSpecificationProperty = FleetLaunchTemplateSpecificationProperty.builder()\n        .version(\"version\")\n\n        // the properties below are optional\n        .launchTemplateId(\"launchTemplateId\")\n        .launchTemplateName(\"launchTemplateName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nfleetLaunchTemplateSpecificationProperty := &fleetLaunchTemplateSpecificationProperty{\n\tversion: jsii.String(\"version\"),\n\n\t// the properties below are optional\n\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst fleetLaunchTemplateSpecificationProperty: ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty = {\n  version: 'version',\n\n  // the properties below are optional\n  launchTemplateId: 'launchTemplateId',\n  launchTemplateName: 'launchTemplateName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fleetLaunchTemplateSpecificationProperty: ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty = {\n  version: 'version',\n\n  // the properties below are optional\n  launchTemplateId: 'launchTemplateId',\n  launchTemplateName: 'launchTemplateName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "46431c42f5d3d735d5fe85e8231b819cc77d37d28e05d325166914aed3bbad47"
    },
    "28aa69b1e16aeb47d2be184c78e887193d7947f540c0862b22ab67e130080db0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ngroup_identifier_property = ec2.CfnSpotFleet.GroupIdentifierProperty(\n    group_id=\"groupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nGroupIdentifierProperty groupIdentifierProperty = new GroupIdentifierProperty {\n    GroupId = \"groupId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nGroupIdentifierProperty groupIdentifierProperty = GroupIdentifierProperty.builder()\n        .groupId(\"groupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ngroupIdentifierProperty := &groupIdentifierProperty{\n\tgroupId: jsii.String(\"groupId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst groupIdentifierProperty: ec2.CfnSpotFleet.GroupIdentifierProperty = {\n  groupId: 'groupId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.GroupIdentifierProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.GroupIdentifierProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst groupIdentifierProperty: ec2.CfnSpotFleet.GroupIdentifierProperty = {\n  groupId: 'groupId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8a50b70f6f8a843e6b2e342ab3cf5c58127efda0eb77f47e825b56996df2cf20"
    },
    "e2dab028d414b2bbca68727e0c068dc93e1434526077e0fbdf85ea056b703769": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\niam_instance_profile_specification_property = ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty(\n    arn=\"arn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIamInstanceProfileSpecificationProperty iamInstanceProfileSpecificationProperty = new IamInstanceProfileSpecificationProperty {\n    Arn = \"arn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIamInstanceProfileSpecificationProperty iamInstanceProfileSpecificationProperty = IamInstanceProfileSpecificationProperty.builder()\n        .arn(\"arn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\niamInstanceProfileSpecificationProperty := &iamInstanceProfileSpecificationProperty{\n\tarn: jsii.String(\"arn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst iamInstanceProfileSpecificationProperty: ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty = {\n  arn: 'arn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst iamInstanceProfileSpecificationProperty: ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty = {\n  arn: 'arn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "59fb58e809c1f1aadd71a1c07fa344a41ee814cbbd6703a28b74f7fbfac702fd"
    },
    "ffe797075283c4e7a29f2f1f3d12f4d9ff61a73a83d0f9dfafe073073b521127": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_ipv6_address_property = ec2.CfnSpotFleet.InstanceIpv6AddressProperty(\n    ipv6_address=\"ipv6Address\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceIpv6AddressProperty instanceIpv6AddressProperty = new InstanceIpv6AddressProperty {\n    Ipv6Address = \"ipv6Address\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceIpv6AddressProperty instanceIpv6AddressProperty = InstanceIpv6AddressProperty.builder()\n        .ipv6Address(\"ipv6Address\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceIpv6AddressProperty := &instanceIpv6AddressProperty{\n\tipv6Address: jsii.String(\"ipv6Address\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceIpv6AddressProperty: ec2.CfnSpotFleet.InstanceIpv6AddressProperty = {\n  ipv6Address: 'ipv6Address',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.InstanceIpv6AddressProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.InstanceIpv6AddressProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceIpv6AddressProperty: ec2.CfnSpotFleet.InstanceIpv6AddressProperty = {\n  ipv6Address: 'ipv6Address',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "673c820c5130c92246925773c6704ca7e90e22d0c22f547220c7c9cd41a99b5c"
    },
    "83ffe2b4f8d0a386fc3be07203cf67da427fdfd58e0f2bb963b6976591dab17b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_network_interface_specification_property = ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty(\n    associate_public_ip_address=False,\n    delete_on_termination=False,\n    description=\"description\",\n    device_index=123,\n    groups=[\"groups\"],\n    ipv6_address_count=123,\n    ipv6_addresses=[ec2.CfnSpotFleet.InstanceIpv6AddressProperty(\n        ipv6_address=\"ipv6Address\"\n    )],\n    network_interface_id=\"networkInterfaceId\",\n    private_ip_addresses=[ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty(\n        private_ip_address=\"privateIpAddress\",\n\n        # the properties below are optional\n        primary=False\n    )],\n    secondary_private_ip_address_count=123,\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceNetworkInterfaceSpecificationProperty instanceNetworkInterfaceSpecificationProperty = new InstanceNetworkInterfaceSpecificationProperty {\n    AssociatePublicIpAddress = false,\n    DeleteOnTermination = false,\n    Description = \"description\",\n    DeviceIndex = 123,\n    Groups = new [] { \"groups\" },\n    Ipv6AddressCount = 123,\n    Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n        Ipv6Address = \"ipv6Address\"\n    } },\n    NetworkInterfaceId = \"networkInterfaceId\",\n    PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n        PrivateIpAddress = \"privateIpAddress\",\n\n        // the properties below are optional\n        Primary = false\n    } },\n    SecondaryPrivateIpAddressCount = 123,\n    SubnetId = \"subnetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceNetworkInterfaceSpecificationProperty instanceNetworkInterfaceSpecificationProperty = InstanceNetworkInterfaceSpecificationProperty.builder()\n        .associatePublicIpAddress(false)\n        .deleteOnTermination(false)\n        .description(\"description\")\n        .deviceIndex(123)\n        .groups(List.of(\"groups\"))\n        .ipv6AddressCount(123)\n        .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                .ipv6Address(\"ipv6Address\")\n                .build()))\n        .networkInterfaceId(\"networkInterfaceId\")\n        .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                .privateIpAddress(\"privateIpAddress\")\n\n                // the properties below are optional\n                .primary(false)\n                .build()))\n        .secondaryPrivateIpAddressCount(123)\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceNetworkInterfaceSpecificationProperty := &instanceNetworkInterfaceSpecificationProperty{\n\tassociatePublicIpAddress: jsii.Boolean(false),\n\tdeleteOnTermination: jsii.Boolean(false),\n\tdescription: jsii.String(\"description\"),\n\tdeviceIndex: jsii.Number(123),\n\tgroups: []*string{\n\t\tjsii.String(\"groups\"),\n\t},\n\tipv6AddressCount: jsii.Number(123),\n\tipv6Addresses: []interface{}{\n\t\t&instanceIpv6AddressProperty{\n\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t},\n\t},\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tprivateIpAddresses: []interface{}{\n\t\t&privateIpAddressSpecificationProperty{\n\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\n\t\t\t// the properties below are optional\n\t\t\tprimary: jsii.Boolean(false),\n\t\t},\n\t},\n\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\tsubnetId: jsii.String(\"subnetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceNetworkInterfaceSpecificationProperty: ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty = {\n  associatePublicIpAddress: false,\n  deleteOnTermination: false,\n  description: 'description',\n  deviceIndex: 123,\n  groups: ['groups'],\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddresses: [{\n    privateIpAddress: 'privateIpAddress',\n\n    // the properties below are optional\n    primary: false,\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  subnetId: 'subnetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceNetworkInterfaceSpecificationProperty: ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty = {\n  associatePublicIpAddress: false,\n  deleteOnTermination: false,\n  description: 'description',\n  deviceIndex: 123,\n  groups: ['groups'],\n  ipv6AddressCount: 123,\n  ipv6Addresses: [{\n    ipv6Address: 'ipv6Address',\n  }],\n  networkInterfaceId: 'networkInterfaceId',\n  privateIpAddresses: [{\n    privateIpAddress: 'privateIpAddress',\n\n    // the properties below are optional\n    primary: false,\n  }],\n  secondaryPrivateIpAddressCount: 123,\n  subnetId: 'subnetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 19,
        "91": 3,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "fd318f6a07f7340c35c84d3cf8dc3f993b7a25e4b32d6e4fc3732c534e6e5f0a"
    },
    "dd1cf5ed924bcdd3f859354b8e97d8a66bb97c70ec85472e8c99cf5cd1db25e0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_requirements_request_property = ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n    accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n        max=123,\n        min=123\n    ),\n    accelerator_manufacturers=[\"acceleratorManufacturers\"],\n    accelerator_names=[\"acceleratorNames\"],\n    accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n        max=123,\n        min=123\n    ),\n    accelerator_types=[\"acceleratorTypes\"],\n    bare_metal=\"bareMetal\",\n    baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n        max=123,\n        min=123\n    ),\n    burstable_performance=\"burstablePerformance\",\n    cpu_manufacturers=[\"cpuManufacturers\"],\n    excluded_instance_types=[\"excludedInstanceTypes\"],\n    instance_generations=[\"instanceGenerations\"],\n    local_storage=\"localStorage\",\n    local_storage_types=[\"localStorageTypes\"],\n    memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n        max=123,\n        min=123\n    ),\n    memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n        max=123,\n        min=123\n    ),\n    network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n        max=123,\n        min=123\n    ),\n    on_demand_max_price_percentage_over_lowest_price=123,\n    require_hibernate_support=False,\n    spot_max_price_percentage_over_lowest_price=123,\n    total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n        max=123,\n        min=123\n    ),\n    v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n        max=123,\n        min=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceRequirementsRequestProperty instanceRequirementsRequestProperty = new InstanceRequirementsRequestProperty {\n    AcceleratorCount = new AcceleratorCountRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n    AcceleratorNames = new [] { \"acceleratorNames\" },\n    AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    AcceleratorTypes = new [] { \"acceleratorTypes\" },\n    BareMetal = \"bareMetal\",\n    BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    BurstablePerformance = \"burstablePerformance\",\n    CpuManufacturers = new [] { \"cpuManufacturers\" },\n    ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n    InstanceGenerations = new [] { \"instanceGenerations\" },\n    LocalStorage = \"localStorage\",\n    LocalStorageTypes = new [] { \"localStorageTypes\" },\n    MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    MemoryMiB = new MemoryMiBRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    OnDemandMaxPricePercentageOverLowestPrice = 123,\n    RequireHibernateSupport = false,\n    SpotMaxPricePercentageOverLowestPrice = 123,\n    TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n        Max = 123,\n        Min = 123\n    },\n    VCpuCount = new VCpuCountRangeRequestProperty {\n        Max = 123,\n        Min = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceRequirementsRequestProperty instanceRequirementsRequestProperty = InstanceRequirementsRequestProperty.builder()\n        .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n        .acceleratorNames(List.of(\"acceleratorNames\"))\n        .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .acceleratorTypes(List.of(\"acceleratorTypes\"))\n        .bareMetal(\"bareMetal\")\n        .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .burstablePerformance(\"burstablePerformance\")\n        .cpuManufacturers(List.of(\"cpuManufacturers\"))\n        .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n        .instanceGenerations(List.of(\"instanceGenerations\"))\n        .localStorage(\"localStorage\")\n        .localStorageTypes(List.of(\"localStorageTypes\"))\n        .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .memoryMiB(MemoryMiBRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .onDemandMaxPricePercentageOverLowestPrice(123)\n        .requireHibernateSupport(false)\n        .spotMaxPricePercentageOverLowestPrice(123)\n        .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                .max(123)\n                .min(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceRequirementsRequestProperty := &instanceRequirementsRequestProperty{\n\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tacceleratorManufacturers: []*string{\n\t\tjsii.String(\"acceleratorManufacturers\"),\n\t},\n\tacceleratorNames: []*string{\n\t\tjsii.String(\"acceleratorNames\"),\n\t},\n\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tacceleratorTypes: []*string{\n\t\tjsii.String(\"acceleratorTypes\"),\n\t},\n\tbareMetal: jsii.String(\"bareMetal\"),\n\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\tcpuManufacturers: []*string{\n\t\tjsii.String(\"cpuManufacturers\"),\n\t},\n\texcludedInstanceTypes: []*string{\n\t\tjsii.String(\"excludedInstanceTypes\"),\n\t},\n\tinstanceGenerations: []*string{\n\t\tjsii.String(\"instanceGenerations\"),\n\t},\n\tlocalStorage: jsii.String(\"localStorage\"),\n\tlocalStorageTypes: []*string{\n\t\tjsii.String(\"localStorageTypes\"),\n\t},\n\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tmemoryMiB: &memoryMiBRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\trequireHibernateSupport: jsii.Boolean(false),\n\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\tmax: jsii.Number(123),\n\t\tmin: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceRequirementsRequestProperty: ec2.CfnSpotFleet.InstanceRequirementsRequestProperty = {\n  acceleratorCount: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorManufacturers: ['acceleratorManufacturers'],\n  acceleratorNames: ['acceleratorNames'],\n  acceleratorTotalMemoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorTypes: ['acceleratorTypes'],\n  bareMetal: 'bareMetal',\n  baselineEbsBandwidthMbps: {\n    max: 123,\n    min: 123,\n  },\n  burstablePerformance: 'burstablePerformance',\n  cpuManufacturers: ['cpuManufacturers'],\n  excludedInstanceTypes: ['excludedInstanceTypes'],\n  instanceGenerations: ['instanceGenerations'],\n  localStorage: 'localStorage',\n  localStorageTypes: ['localStorageTypes'],\n  memoryGiBPerVCpu: {\n    max: 123,\n    min: 123,\n  },\n  memoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  networkInterfaceCount: {\n    max: 123,\n    min: 123,\n  },\n  onDemandMaxPricePercentageOverLowestPrice: 123,\n  requireHibernateSupport: false,\n  spotMaxPricePercentageOverLowestPrice: 123,\n  totalLocalStorageGb: {\n    max: 123,\n    min: 123,\n  },\n  vCpuCount: {\n    max: 123,\n    min: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.InstanceRequirementsRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.InstanceRequirementsRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceRequirementsRequestProperty: ec2.CfnSpotFleet.InstanceRequirementsRequestProperty = {\n  acceleratorCount: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorManufacturers: ['acceleratorManufacturers'],\n  acceleratorNames: ['acceleratorNames'],\n  acceleratorTotalMemoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  acceleratorTypes: ['acceleratorTypes'],\n  bareMetal: 'bareMetal',\n  baselineEbsBandwidthMbps: {\n    max: 123,\n    min: 123,\n  },\n  burstablePerformance: 'burstablePerformance',\n  cpuManufacturers: ['cpuManufacturers'],\n  excludedInstanceTypes: ['excludedInstanceTypes'],\n  instanceGenerations: ['instanceGenerations'],\n  localStorage: 'localStorage',\n  localStorageTypes: ['localStorageTypes'],\n  memoryGiBPerVCpu: {\n    max: 123,\n    min: 123,\n  },\n  memoryMiB: {\n    max: 123,\n    min: 123,\n  },\n  networkInterfaceCount: {\n    max: 123,\n    min: 123,\n  },\n  onDemandMaxPricePercentageOverLowestPrice: 123,\n  requireHibernateSupport: false,\n  spotMaxPricePercentageOverLowestPrice: 123,\n  totalLocalStorageGb: {\n    max: 123,\n    min: 123,\n  },\n  vCpuCount: {\n    max: 123,\n    min: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 18,
        "10": 11,
        "75": 42,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 7,
        "193": 9,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 37,
        "290": 1
      },
      "fqnsFingerprint": "11dbe79afadebbca2443167f80b7e0366dd65a86f232aa87e52a65ed25efaed0"
    },
    "13451e9cfbea982133df1738253591f3adcbda61da0e438b88ef91d7044627bf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_config_property = ec2.CfnSpotFleet.LaunchTemplateConfigProperty(\n    launch_template_specification=ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty(\n        version=\"version\",\n\n        # the properties below are optional\n        launch_template_id=\"launchTemplateId\",\n        launch_template_name=\"launchTemplateName\"\n    ),\n    overrides=[ec2.CfnSpotFleet.LaunchTemplateOverridesProperty(\n        availability_zone=\"availabilityZone\",\n        instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n            accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n                max=123,\n                min=123\n            ),\n            accelerator_manufacturers=[\"acceleratorManufacturers\"],\n            accelerator_names=[\"acceleratorNames\"],\n            accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n                max=123,\n                min=123\n            ),\n            accelerator_types=[\"acceleratorTypes\"],\n            bare_metal=\"bareMetal\",\n            baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n                max=123,\n                min=123\n            ),\n            burstable_performance=\"burstablePerformance\",\n            cpu_manufacturers=[\"cpuManufacturers\"],\n            excluded_instance_types=[\"excludedInstanceTypes\"],\n            instance_generations=[\"instanceGenerations\"],\n            local_storage=\"localStorage\",\n            local_storage_types=[\"localStorageTypes\"],\n            memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n                max=123,\n                min=123\n            ),\n            memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n                max=123,\n                min=123\n            ),\n            network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n                max=123,\n                min=123\n            ),\n            on_demand_max_price_percentage_over_lowest_price=123,\n            require_hibernate_support=False,\n            spot_max_price_percentage_over_lowest_price=123,\n            total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n                max=123,\n                min=123\n            ),\n            v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n                max=123,\n                min=123\n            )\n        ),\n        instance_type=\"instanceType\",\n        priority=123,\n        spot_price=\"spotPrice\",\n        subnet_id=\"subnetId\",\n        weighted_capacity=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateConfigProperty launchTemplateConfigProperty = new LaunchTemplateConfigProperty {\n    LaunchTemplateSpecification = new FleetLaunchTemplateSpecificationProperty {\n        Version = \"version\",\n\n        // the properties below are optional\n        LaunchTemplateId = \"launchTemplateId\",\n        LaunchTemplateName = \"launchTemplateName\"\n    },\n    Overrides = new [] { new LaunchTemplateOverridesProperty {\n        AvailabilityZone = \"availabilityZone\",\n        InstanceRequirements = new InstanceRequirementsRequestProperty {\n            AcceleratorCount = new AcceleratorCountRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n            AcceleratorNames = new [] { \"acceleratorNames\" },\n            AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            AcceleratorTypes = new [] { \"acceleratorTypes\" },\n            BareMetal = \"bareMetal\",\n            BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            BurstablePerformance = \"burstablePerformance\",\n            CpuManufacturers = new [] { \"cpuManufacturers\" },\n            ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n            InstanceGenerations = new [] { \"instanceGenerations\" },\n            LocalStorage = \"localStorage\",\n            LocalStorageTypes = new [] { \"localStorageTypes\" },\n            MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            MemoryMiB = new MemoryMiBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            OnDemandMaxPricePercentageOverLowestPrice = 123,\n            RequireHibernateSupport = false,\n            SpotMaxPricePercentageOverLowestPrice = 123,\n            TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            VCpuCount = new VCpuCountRangeRequestProperty {\n                Max = 123,\n                Min = 123\n            }\n        },\n        InstanceType = \"instanceType\",\n        Priority = 123,\n        SpotPrice = \"spotPrice\",\n        SubnetId = \"subnetId\",\n        WeightedCapacity = 123\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateConfigProperty launchTemplateConfigProperty = LaunchTemplateConfigProperty.builder()\n        .launchTemplateSpecification(FleetLaunchTemplateSpecificationProperty.builder()\n                .version(\"version\")\n\n                // the properties below are optional\n                .launchTemplateId(\"launchTemplateId\")\n                .launchTemplateName(\"launchTemplateName\")\n                .build())\n        .overrides(List.of(LaunchTemplateOverridesProperty.builder()\n                .availabilityZone(\"availabilityZone\")\n                .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                        .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                        .acceleratorNames(List.of(\"acceleratorNames\"))\n                        .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                        .bareMetal(\"bareMetal\")\n                        .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .burstablePerformance(\"burstablePerformance\")\n                        .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                        .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                        .instanceGenerations(List.of(\"instanceGenerations\"))\n                        .localStorage(\"localStorage\")\n                        .localStorageTypes(List.of(\"localStorageTypes\"))\n                        .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .memoryMiB(MemoryMiBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .onDemandMaxPricePercentageOverLowestPrice(123)\n                        .requireHibernateSupport(false)\n                        .spotMaxPricePercentageOverLowestPrice(123)\n                        .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .build())\n                .instanceType(\"instanceType\")\n                .priority(123)\n                .spotPrice(\"spotPrice\")\n                .subnetId(\"subnetId\")\n                .weightedCapacity(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateConfigProperty := &launchTemplateConfigProperty{\n\tlaunchTemplateSpecification: &fleetLaunchTemplateSpecificationProperty{\n\t\tversion: jsii.String(\"version\"),\n\n\t\t// the properties below are optional\n\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t},\n\toverrides: []interface{}{\n\t\t&launchTemplateOverridesProperty{\n\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t},\n\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t},\n\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t},\n\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t},\n\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t},\n\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t},\n\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t},\n\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\tpriority: jsii.Number(123),\n\t\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\tweightedCapacity: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateConfigProperty: ec2.CfnSpotFleet.LaunchTemplateConfigProperty = {\n  launchTemplateSpecification: {\n    version: 'version',\n\n    // the properties below are optional\n    launchTemplateId: 'launchTemplateId',\n    launchTemplateName: 'launchTemplateName',\n  },\n  overrides: [{\n    availabilityZone: 'availabilityZone',\n    instanceRequirements: {\n      acceleratorCount: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorManufacturers: ['acceleratorManufacturers'],\n      acceleratorNames: ['acceleratorNames'],\n      acceleratorTotalMemoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorTypes: ['acceleratorTypes'],\n      bareMetal: 'bareMetal',\n      baselineEbsBandwidthMbps: {\n        max: 123,\n        min: 123,\n      },\n      burstablePerformance: 'burstablePerformance',\n      cpuManufacturers: ['cpuManufacturers'],\n      excludedInstanceTypes: ['excludedInstanceTypes'],\n      instanceGenerations: ['instanceGenerations'],\n      localStorage: 'localStorage',\n      localStorageTypes: ['localStorageTypes'],\n      memoryGiBPerVCpu: {\n        max: 123,\n        min: 123,\n      },\n      memoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      networkInterfaceCount: {\n        max: 123,\n        min: 123,\n      },\n      onDemandMaxPricePercentageOverLowestPrice: 123,\n      requireHibernateSupport: false,\n      spotMaxPricePercentageOverLowestPrice: 123,\n      totalLocalStorageGb: {\n        max: 123,\n        min: 123,\n      },\n      vCpuCount: {\n        max: 123,\n        min: 123,\n      },\n    },\n    instanceType: 'instanceType',\n    priority: 123,\n    spotPrice: 'spotPrice',\n    subnetId: 'subnetId',\n    weightedCapacity: 123,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.LaunchTemplateConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.LaunchTemplateConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateConfigProperty: ec2.CfnSpotFleet.LaunchTemplateConfigProperty = {\n  launchTemplateSpecification: {\n    version: 'version',\n\n    // the properties below are optional\n    launchTemplateId: 'launchTemplateId',\n    launchTemplateName: 'launchTemplateName',\n  },\n  overrides: [{\n    availabilityZone: 'availabilityZone',\n    instanceRequirements: {\n      acceleratorCount: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorManufacturers: ['acceleratorManufacturers'],\n      acceleratorNames: ['acceleratorNames'],\n      acceleratorTotalMemoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorTypes: ['acceleratorTypes'],\n      bareMetal: 'bareMetal',\n      baselineEbsBandwidthMbps: {\n        max: 123,\n        min: 123,\n      },\n      burstablePerformance: 'burstablePerformance',\n      cpuManufacturers: ['cpuManufacturers'],\n      excludedInstanceTypes: ['excludedInstanceTypes'],\n      instanceGenerations: ['instanceGenerations'],\n      localStorage: 'localStorage',\n      localStorageTypes: ['localStorageTypes'],\n      memoryGiBPerVCpu: {\n        max: 123,\n        min: 123,\n      },\n      memoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      networkInterfaceCount: {\n        max: 123,\n        min: 123,\n      },\n      onDemandMaxPricePercentageOverLowestPrice: 123,\n      requireHibernateSupport: false,\n      spotMaxPricePercentageOverLowestPrice: 123,\n      totalLocalStorageGb: {\n        max: 123,\n        min: 123,\n      },\n      vCpuCount: {\n        max: 123,\n        min: 123,\n      },\n    },\n    instanceType: 'instanceType',\n    priority: 123,\n    spotPrice: 'spotPrice',\n    subnetId: 'subnetId',\n    weightedCapacity: 123,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 20,
        "10": 18,
        "75": 54,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 8,
        "193": 12,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 49,
        "290": 1
      },
      "fqnsFingerprint": "d896708538d629622f15103f01238fc52eb91fa0f6831742ff6ef015834e3dee"
    },
    "18af9dd1801de5160b3eb1576f69261afd765b10014990951b8f6e0f741e7341": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_overrides_property = ec2.CfnSpotFleet.LaunchTemplateOverridesProperty(\n    availability_zone=\"availabilityZone\",\n    instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n        accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n            max=123,\n            min=123\n        ),\n        accelerator_manufacturers=[\"acceleratorManufacturers\"],\n        accelerator_names=[\"acceleratorNames\"],\n        accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n            max=123,\n            min=123\n        ),\n        accelerator_types=[\"acceleratorTypes\"],\n        bare_metal=\"bareMetal\",\n        baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n            max=123,\n            min=123\n        ),\n        burstable_performance=\"burstablePerformance\",\n        cpu_manufacturers=[\"cpuManufacturers\"],\n        excluded_instance_types=[\"excludedInstanceTypes\"],\n        instance_generations=[\"instanceGenerations\"],\n        local_storage=\"localStorage\",\n        local_storage_types=[\"localStorageTypes\"],\n        memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n            max=123,\n            min=123\n        ),\n        memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n            max=123,\n            min=123\n        ),\n        network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n            max=123,\n            min=123\n        ),\n        on_demand_max_price_percentage_over_lowest_price=123,\n        require_hibernate_support=False,\n        spot_max_price_percentage_over_lowest_price=123,\n        total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n            max=123,\n            min=123\n        ),\n        v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n            max=123,\n            min=123\n        )\n    ),\n    instance_type=\"instanceType\",\n    priority=123,\n    spot_price=\"spotPrice\",\n    subnet_id=\"subnetId\",\n    weighted_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateOverridesProperty launchTemplateOverridesProperty = new LaunchTemplateOverridesProperty {\n    AvailabilityZone = \"availabilityZone\",\n    InstanceRequirements = new InstanceRequirementsRequestProperty {\n        AcceleratorCount = new AcceleratorCountRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n        AcceleratorNames = new [] { \"acceleratorNames\" },\n        AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        AcceleratorTypes = new [] { \"acceleratorTypes\" },\n        BareMetal = \"bareMetal\",\n        BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        BurstablePerformance = \"burstablePerformance\",\n        CpuManufacturers = new [] { \"cpuManufacturers\" },\n        ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n        InstanceGenerations = new [] { \"instanceGenerations\" },\n        LocalStorage = \"localStorage\",\n        LocalStorageTypes = new [] { \"localStorageTypes\" },\n        MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        MemoryMiB = new MemoryMiBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        OnDemandMaxPricePercentageOverLowestPrice = 123,\n        RequireHibernateSupport = false,\n        SpotMaxPricePercentageOverLowestPrice = 123,\n        TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        VCpuCount = new VCpuCountRangeRequestProperty {\n            Max = 123,\n            Min = 123\n        }\n    },\n    InstanceType = \"instanceType\",\n    Priority = 123,\n    SpotPrice = \"spotPrice\",\n    SubnetId = \"subnetId\",\n    WeightedCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateOverridesProperty launchTemplateOverridesProperty = LaunchTemplateOverridesProperty.builder()\n        .availabilityZone(\"availabilityZone\")\n        .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                .acceleratorNames(List.of(\"acceleratorNames\"))\n                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                .bareMetal(\"bareMetal\")\n                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .burstablePerformance(\"burstablePerformance\")\n                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                .instanceGenerations(List.of(\"instanceGenerations\"))\n                .localStorage(\"localStorage\")\n                .localStorageTypes(List.of(\"localStorageTypes\"))\n                .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .memoryMiB(MemoryMiBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .onDemandMaxPricePercentageOverLowestPrice(123)\n                .requireHibernateSupport(false)\n                .spotMaxPricePercentageOverLowestPrice(123)\n                .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .build())\n        .instanceType(\"instanceType\")\n        .priority(123)\n        .spotPrice(\"spotPrice\")\n        .subnetId(\"subnetId\")\n        .weightedCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateOverridesProperty := &launchTemplateOverridesProperty{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tacceleratorManufacturers: []*string{\n\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t},\n\t\tacceleratorNames: []*string{\n\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t},\n\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tacceleratorTypes: []*string{\n\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t},\n\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\tcpuManufacturers: []*string{\n\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t},\n\t\texcludedInstanceTypes: []*string{\n\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t},\n\t\tinstanceGenerations: []*string{\n\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t},\n\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\tlocalStorageTypes: []*string{\n\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t},\n\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t},\n\tinstanceType: jsii.String(\"instanceType\"),\n\tpriority: jsii.Number(123),\n\tspotPrice: jsii.String(\"spotPrice\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n\tweightedCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateOverridesProperty: ec2.CfnSpotFleet.LaunchTemplateOverridesProperty = {\n  availabilityZone: 'availabilityZone',\n  instanceRequirements: {\n    acceleratorCount: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorManufacturers: ['acceleratorManufacturers'],\n    acceleratorNames: ['acceleratorNames'],\n    acceleratorTotalMemoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorTypes: ['acceleratorTypes'],\n    bareMetal: 'bareMetal',\n    baselineEbsBandwidthMbps: {\n      max: 123,\n      min: 123,\n    },\n    burstablePerformance: 'burstablePerformance',\n    cpuManufacturers: ['cpuManufacturers'],\n    excludedInstanceTypes: ['excludedInstanceTypes'],\n    instanceGenerations: ['instanceGenerations'],\n    localStorage: 'localStorage',\n    localStorageTypes: ['localStorageTypes'],\n    memoryGiBPerVCpu: {\n      max: 123,\n      min: 123,\n    },\n    memoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    networkInterfaceCount: {\n      max: 123,\n      min: 123,\n    },\n    onDemandMaxPricePercentageOverLowestPrice: 123,\n    requireHibernateSupport: false,\n    spotMaxPricePercentageOverLowestPrice: 123,\n    totalLocalStorageGb: {\n      max: 123,\n      min: 123,\n    },\n    vCpuCount: {\n      max: 123,\n      min: 123,\n    },\n  },\n  instanceType: 'instanceType',\n  priority: 123,\n  spotPrice: 'spotPrice',\n  subnetId: 'subnetId',\n  weightedCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.LaunchTemplateOverridesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.LaunchTemplateOverridesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateOverridesProperty: ec2.CfnSpotFleet.LaunchTemplateOverridesProperty = {\n  availabilityZone: 'availabilityZone',\n  instanceRequirements: {\n    acceleratorCount: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorManufacturers: ['acceleratorManufacturers'],\n    acceleratorNames: ['acceleratorNames'],\n    acceleratorTotalMemoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorTypes: ['acceleratorTypes'],\n    bareMetal: 'bareMetal',\n    baselineEbsBandwidthMbps: {\n      max: 123,\n      min: 123,\n    },\n    burstablePerformance: 'burstablePerformance',\n    cpuManufacturers: ['cpuManufacturers'],\n    excludedInstanceTypes: ['excludedInstanceTypes'],\n    instanceGenerations: ['instanceGenerations'],\n    localStorage: 'localStorage',\n    localStorageTypes: ['localStorageTypes'],\n    memoryGiBPerVCpu: {\n      max: 123,\n      min: 123,\n    },\n    memoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    networkInterfaceCount: {\n      max: 123,\n      min: 123,\n    },\n    onDemandMaxPricePercentageOverLowestPrice: 123,\n    requireHibernateSupport: false,\n    spotMaxPricePercentageOverLowestPrice: 123,\n    totalLocalStorageGb: {\n      max: 123,\n      min: 123,\n    },\n    vCpuCount: {\n      max: 123,\n      min: 123,\n    },\n  },\n  instanceType: 'instanceType',\n  priority: 123,\n  spotPrice: 'spotPrice',\n  subnetId: 'subnetId',\n  weightedCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 20,
        "10": 15,
        "75": 49,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 7,
        "193": 10,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 44,
        "290": 1
      },
      "fqnsFingerprint": "bdae3b714b7ae750a37f196082e023e9efd949d37546dcbbe6b39995428c6df2"
    },
    "946447dc048fcf1b2175848877a699a3aeae105af71d34c321f5cd5308117572": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nload_balancers_config_property = ec2.CfnSpotFleet.LoadBalancersConfigProperty(\n    classic_load_balancers_config=ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty(\n        classic_load_balancers=[ec2.CfnSpotFleet.ClassicLoadBalancerProperty(\n            name=\"name\"\n        )]\n    ),\n    target_groups_config=ec2.CfnSpotFleet.TargetGroupsConfigProperty(\n        target_groups=[ec2.CfnSpotFleet.TargetGroupProperty(\n            arn=\"arn\"\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLoadBalancersConfigProperty loadBalancersConfigProperty = new LoadBalancersConfigProperty {\n    ClassicLoadBalancersConfig = new ClassicLoadBalancersConfigProperty {\n        ClassicLoadBalancers = new [] { new ClassicLoadBalancerProperty {\n            Name = \"name\"\n        } }\n    },\n    TargetGroupsConfig = new TargetGroupsConfigProperty {\n        TargetGroups = new [] { new TargetGroupProperty {\n            Arn = \"arn\"\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLoadBalancersConfigProperty loadBalancersConfigProperty = LoadBalancersConfigProperty.builder()\n        .classicLoadBalancersConfig(ClassicLoadBalancersConfigProperty.builder()\n                .classicLoadBalancers(List.of(ClassicLoadBalancerProperty.builder()\n                        .name(\"name\")\n                        .build()))\n                .build())\n        .targetGroupsConfig(TargetGroupsConfigProperty.builder()\n                .targetGroups(List.of(TargetGroupProperty.builder()\n                        .arn(\"arn\")\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nloadBalancersConfigProperty := &loadBalancersConfigProperty{\n\tclassicLoadBalancersConfig: &classicLoadBalancersConfigProperty{\n\t\tclassicLoadBalancers: []interface{}{\n\t\t\t&classicLoadBalancerProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t},\n\t\t},\n\t},\n\ttargetGroupsConfig: &targetGroupsConfigProperty{\n\t\ttargetGroups: []interface{}{\n\t\t\t&targetGroupProperty{\n\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst loadBalancersConfigProperty: ec2.CfnSpotFleet.LoadBalancersConfigProperty = {\n  classicLoadBalancersConfig: {\n    classicLoadBalancers: [{\n      name: 'name',\n    }],\n  },\n  targetGroupsConfig: {\n    targetGroups: [{\n      arn: 'arn',\n    }],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.LoadBalancersConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.LoadBalancersConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancersConfigProperty: ec2.CfnSpotFleet.LoadBalancersConfigProperty = {\n  classicLoadBalancersConfig: {\n    classicLoadBalancers: [{\n      name: 'name',\n    }],\n  },\n  targetGroupsConfig: {\n    targetGroups: [{\n      arn: 'arn',\n    }],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "b8b149d9c4c6c9b2d8ece65ae6ec05ad91eebdbc31448aeea49c2e5fae450a2a"
    },
    "cd62a08319884873aa023ef7043f6d88e9fd7ba0b48533910e208490285d0651": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmemory_gi_bPer_vCpu_request_property = ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMemoryGiBPerVCpuRequestProperty memoryGiBPerVCpuRequestProperty = new MemoryGiBPerVCpuRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMemoryGiBPerVCpuRequestProperty memoryGiBPerVCpuRequestProperty = MemoryGiBPerVCpuRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmemoryGiBPerVCpuRequestProperty := &memoryGiBPerVCpuRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst memoryGiBPerVCpuRequestProperty: ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst memoryGiBPerVCpuRequestProperty: ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bb0d0f30efc0c412f46e6a873216bc96cb4f00e5bab78ab6523b0df920def530"
    },
    "abcf81880c7c1be80edb600a7f1244172f8113d383839086e55089fb1621d098": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmemory_mi_bRequest_property = ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMemoryMiBRequestProperty memoryMiBRequestProperty = new MemoryMiBRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMemoryMiBRequestProperty memoryMiBRequestProperty = MemoryMiBRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmemoryMiBRequestProperty := &memoryMiBRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst memoryMiBRequestProperty: ec2.CfnSpotFleet.MemoryMiBRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.MemoryMiBRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.MemoryMiBRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst memoryMiBRequestProperty: ec2.CfnSpotFleet.MemoryMiBRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b6d9d095def46e178d33b8f23b955fe89b46ad5c82b4b96f67e58a6019b97a45"
    },
    "b582f2fafa32c78d392b3e2be00d57d1d4932a0958a7727ec8d76e8957157ed8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nnetwork_interface_count_request_property = ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNetworkInterfaceCountRequestProperty networkInterfaceCountRequestProperty = new NetworkInterfaceCountRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNetworkInterfaceCountRequestProperty networkInterfaceCountRequestProperty = NetworkInterfaceCountRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nnetworkInterfaceCountRequestProperty := &networkInterfaceCountRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst networkInterfaceCountRequestProperty: ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkInterfaceCountRequestProperty: ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "68596f0eb4fc606705d75a05060eb50f9c36f410c31b4d62e212e13ec7a29a4b"
    },
    "8ba9af7017478dc5d91036f2390494011e7d6546322e5b184564173ee72eb55d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_ip_address_specification_property = ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty(\n    private_ip_address=\"privateIpAddress\",\n\n    # the properties below are optional\n    primary=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateIpAddressSpecificationProperty privateIpAddressSpecificationProperty = new PrivateIpAddressSpecificationProperty {\n    PrivateIpAddress = \"privateIpAddress\",\n\n    // the properties below are optional\n    Primary = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateIpAddressSpecificationProperty privateIpAddressSpecificationProperty = PrivateIpAddressSpecificationProperty.builder()\n        .privateIpAddress(\"privateIpAddress\")\n\n        // the properties below are optional\n        .primary(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateIpAddressSpecificationProperty := &privateIpAddressSpecificationProperty{\n\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\n\t// the properties below are optional\n\tprimary: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateIpAddressSpecificationProperty: ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty = {\n  privateIpAddress: 'privateIpAddress',\n\n  // the properties below are optional\n  primary: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateIpAddressSpecificationProperty: ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty = {\n  privateIpAddress: 'privateIpAddress',\n\n  // the properties below are optional\n  primary: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "12f8876950a99191b20eaadaefb195f0a4ac0fed25e00240c587b984098f5786"
    },
    "4cb34a5a74a438fb25a4943b36ee2797a478273097fcd83cec37d2030cdbb340": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_capacity_rebalance_property = ec2.CfnSpotFleet.SpotCapacityRebalanceProperty(\n    replacement_strategy=\"replacementStrategy\",\n    termination_delay=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotCapacityRebalanceProperty spotCapacityRebalanceProperty = new SpotCapacityRebalanceProperty {\n    ReplacementStrategy = \"replacementStrategy\",\n    TerminationDelay = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotCapacityRebalanceProperty spotCapacityRebalanceProperty = SpotCapacityRebalanceProperty.builder()\n        .replacementStrategy(\"replacementStrategy\")\n        .terminationDelay(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotCapacityRebalanceProperty := &spotCapacityRebalanceProperty{\n\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\tterminationDelay: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotCapacityRebalanceProperty: ec2.CfnSpotFleet.SpotCapacityRebalanceProperty = {\n  replacementStrategy: 'replacementStrategy',\n  terminationDelay: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.SpotCapacityRebalanceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.SpotCapacityRebalanceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotCapacityRebalanceProperty: ec2.CfnSpotFleet.SpotCapacityRebalanceProperty = {\n  replacementStrategy: 'replacementStrategy',\n  terminationDelay: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8a4c377d60055498aeb08abe88e71676358abbd18f0591e20461223d28d2d814"
    },
    "5dcbcfadd07f723f99c53a945e845f1bac86ca6c64201620a8e933c31c3dd7bd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_fleet_launch_specification_property = ec2.CfnSpotFleet.SpotFleetLaunchSpecificationProperty(\n    image_id=\"imageId\",\n\n    # the properties below are optional\n    block_device_mappings=[ec2.CfnSpotFleet.BlockDeviceMappingProperty(\n        device_name=\"deviceName\",\n\n        # the properties below are optional\n        ebs=ec2.CfnSpotFleet.EbsBlockDeviceProperty(\n            delete_on_termination=False,\n            encrypted=False,\n            iops=123,\n            snapshot_id=\"snapshotId\",\n            volume_size=123,\n            volume_type=\"volumeType\"\n        ),\n        no_device=\"noDevice\",\n        virtual_name=\"virtualName\"\n    )],\n    ebs_optimized=False,\n    iam_instance_profile=ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty(\n        arn=\"arn\"\n    ),\n    instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n        accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n            max=123,\n            min=123\n        ),\n        accelerator_manufacturers=[\"acceleratorManufacturers\"],\n        accelerator_names=[\"acceleratorNames\"],\n        accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n            max=123,\n            min=123\n        ),\n        accelerator_types=[\"acceleratorTypes\"],\n        bare_metal=\"bareMetal\",\n        baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n            max=123,\n            min=123\n        ),\n        burstable_performance=\"burstablePerformance\",\n        cpu_manufacturers=[\"cpuManufacturers\"],\n        excluded_instance_types=[\"excludedInstanceTypes\"],\n        instance_generations=[\"instanceGenerations\"],\n        local_storage=\"localStorage\",\n        local_storage_types=[\"localStorageTypes\"],\n        memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n            max=123,\n            min=123\n        ),\n        memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n            max=123,\n            min=123\n        ),\n        network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n            max=123,\n            min=123\n        ),\n        on_demand_max_price_percentage_over_lowest_price=123,\n        require_hibernate_support=False,\n        spot_max_price_percentage_over_lowest_price=123,\n        total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n            max=123,\n            min=123\n        ),\n        v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n            max=123,\n            min=123\n        )\n    ),\n    instance_type=\"instanceType\",\n    kernel_id=\"kernelId\",\n    key_name=\"keyName\",\n    monitoring=ec2.CfnSpotFleet.SpotFleetMonitoringProperty(\n        enabled=False\n    ),\n    network_interfaces=[ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty(\n        associate_public_ip_address=False,\n        delete_on_termination=False,\n        description=\"description\",\n        device_index=123,\n        groups=[\"groups\"],\n        ipv6_address_count=123,\n        ipv6_addresses=[ec2.CfnSpotFleet.InstanceIpv6AddressProperty(\n            ipv6_address=\"ipv6Address\"\n        )],\n        network_interface_id=\"networkInterfaceId\",\n        private_ip_addresses=[ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty(\n            private_ip_address=\"privateIpAddress\",\n\n            # the properties below are optional\n            primary=False\n        )],\n        secondary_private_ip_address_count=123,\n        subnet_id=\"subnetId\"\n    )],\n    placement=ec2.CfnSpotFleet.SpotPlacementProperty(\n        availability_zone=\"availabilityZone\",\n        group_name=\"groupName\",\n        tenancy=\"tenancy\"\n    ),\n    ramdisk_id=\"ramdiskId\",\n    security_groups=[ec2.CfnSpotFleet.GroupIdentifierProperty(\n        group_id=\"groupId\"\n    )],\n    spot_price=\"spotPrice\",\n    subnet_id=\"subnetId\",\n    tag_specifications=[ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty(\n        resource_type=\"resourceType\",\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n    user_data=\"userData\",\n    weighted_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotFleetLaunchSpecificationProperty spotFleetLaunchSpecificationProperty = new SpotFleetLaunchSpecificationProperty {\n    ImageId = \"imageId\",\n\n    // the properties below are optional\n    BlockDeviceMappings = new [] { new BlockDeviceMappingProperty {\n        DeviceName = \"deviceName\",\n\n        // the properties below are optional\n        Ebs = new EbsBlockDeviceProperty {\n            DeleteOnTermination = false,\n            Encrypted = false,\n            Iops = 123,\n            SnapshotId = \"snapshotId\",\n            VolumeSize = 123,\n            VolumeType = \"volumeType\"\n        },\n        NoDevice = \"noDevice\",\n        VirtualName = \"virtualName\"\n    } },\n    EbsOptimized = false,\n    IamInstanceProfile = new IamInstanceProfileSpecificationProperty {\n        Arn = \"arn\"\n    },\n    InstanceRequirements = new InstanceRequirementsRequestProperty {\n        AcceleratorCount = new AcceleratorCountRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n        AcceleratorNames = new [] { \"acceleratorNames\" },\n        AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        AcceleratorTypes = new [] { \"acceleratorTypes\" },\n        BareMetal = \"bareMetal\",\n        BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        BurstablePerformance = \"burstablePerformance\",\n        CpuManufacturers = new [] { \"cpuManufacturers\" },\n        ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n        InstanceGenerations = new [] { \"instanceGenerations\" },\n        LocalStorage = \"localStorage\",\n        LocalStorageTypes = new [] { \"localStorageTypes\" },\n        MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        MemoryMiB = new MemoryMiBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        OnDemandMaxPricePercentageOverLowestPrice = 123,\n        RequireHibernateSupport = false,\n        SpotMaxPricePercentageOverLowestPrice = 123,\n        TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n            Max = 123,\n            Min = 123\n        },\n        VCpuCount = new VCpuCountRangeRequestProperty {\n            Max = 123,\n            Min = 123\n        }\n    },\n    InstanceType = \"instanceType\",\n    KernelId = \"kernelId\",\n    KeyName = \"keyName\",\n    Monitoring = new SpotFleetMonitoringProperty {\n        Enabled = false\n    },\n    NetworkInterfaces = new [] { new InstanceNetworkInterfaceSpecificationProperty {\n        AssociatePublicIpAddress = false,\n        DeleteOnTermination = false,\n        Description = \"description\",\n        DeviceIndex = 123,\n        Groups = new [] { \"groups\" },\n        Ipv6AddressCount = 123,\n        Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n            Ipv6Address = \"ipv6Address\"\n        } },\n        NetworkInterfaceId = \"networkInterfaceId\",\n        PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n            PrivateIpAddress = \"privateIpAddress\",\n\n            // the properties below are optional\n            Primary = false\n        } },\n        SecondaryPrivateIpAddressCount = 123,\n        SubnetId = \"subnetId\"\n    } },\n    Placement = new SpotPlacementProperty {\n        AvailabilityZone = \"availabilityZone\",\n        GroupName = \"groupName\",\n        Tenancy = \"tenancy\"\n    },\n    RamdiskId = \"ramdiskId\",\n    SecurityGroups = new [] { new GroupIdentifierProperty {\n        GroupId = \"groupId\"\n    } },\n    SpotPrice = \"spotPrice\",\n    SubnetId = \"subnetId\",\n    TagSpecifications = new [] { new SpotFleetTagSpecificationProperty {\n        ResourceType = \"resourceType\",\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n    UserData = \"userData\",\n    WeightedCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotFleetLaunchSpecificationProperty spotFleetLaunchSpecificationProperty = SpotFleetLaunchSpecificationProperty.builder()\n        .imageId(\"imageId\")\n\n        // the properties below are optional\n        .blockDeviceMappings(List.of(BlockDeviceMappingProperty.builder()\n                .deviceName(\"deviceName\")\n\n                // the properties below are optional\n                .ebs(EbsBlockDeviceProperty.builder()\n                        .deleteOnTermination(false)\n                        .encrypted(false)\n                        .iops(123)\n                        .snapshotId(\"snapshotId\")\n                        .volumeSize(123)\n                        .volumeType(\"volumeType\")\n                        .build())\n                .noDevice(\"noDevice\")\n                .virtualName(\"virtualName\")\n                .build()))\n        .ebsOptimized(false)\n        .iamInstanceProfile(IamInstanceProfileSpecificationProperty.builder()\n                .arn(\"arn\")\n                .build())\n        .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                .acceleratorNames(List.of(\"acceleratorNames\"))\n                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                .bareMetal(\"bareMetal\")\n                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .burstablePerformance(\"burstablePerformance\")\n                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                .instanceGenerations(List.of(\"instanceGenerations\"))\n                .localStorage(\"localStorage\")\n                .localStorageTypes(List.of(\"localStorageTypes\"))\n                .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .memoryMiB(MemoryMiBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .onDemandMaxPricePercentageOverLowestPrice(123)\n                .requireHibernateSupport(false)\n                .spotMaxPricePercentageOverLowestPrice(123)\n                .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                        .max(123)\n                        .min(123)\n                        .build())\n                .build())\n        .instanceType(\"instanceType\")\n        .kernelId(\"kernelId\")\n        .keyName(\"keyName\")\n        .monitoring(SpotFleetMonitoringProperty.builder()\n                .enabled(false)\n                .build())\n        .networkInterfaces(List.of(InstanceNetworkInterfaceSpecificationProperty.builder()\n                .associatePublicIpAddress(false)\n                .deleteOnTermination(false)\n                .description(\"description\")\n                .deviceIndex(123)\n                .groups(List.of(\"groups\"))\n                .ipv6AddressCount(123)\n                .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                        .ipv6Address(\"ipv6Address\")\n                        .build()))\n                .networkInterfaceId(\"networkInterfaceId\")\n                .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                        .privateIpAddress(\"privateIpAddress\")\n\n                        // the properties below are optional\n                        .primary(false)\n                        .build()))\n                .secondaryPrivateIpAddressCount(123)\n                .subnetId(\"subnetId\")\n                .build()))\n        .placement(SpotPlacementProperty.builder()\n                .availabilityZone(\"availabilityZone\")\n                .groupName(\"groupName\")\n                .tenancy(\"tenancy\")\n                .build())\n        .ramdiskId(\"ramdiskId\")\n        .securityGroups(List.of(GroupIdentifierProperty.builder()\n                .groupId(\"groupId\")\n                .build()))\n        .spotPrice(\"spotPrice\")\n        .subnetId(\"subnetId\")\n        .tagSpecifications(List.of(SpotFleetTagSpecificationProperty.builder()\n                .resourceType(\"resourceType\")\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .userData(\"userData\")\n        .weightedCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotFleetLaunchSpecificationProperty := &spotFleetLaunchSpecificationProperty{\n\timageId: jsii.String(\"imageId\"),\n\n\t// the properties below are optional\n\tblockDeviceMappings: []interface{}{\n\t\t&blockDeviceMappingProperty{\n\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tebs: &ebsBlockDeviceProperty{\n\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\tencrypted: jsii.Boolean(false),\n\t\t\t\tiops: jsii.Number(123),\n\t\t\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\t\t\tvolumeSize: jsii.Number(123),\n\t\t\t\tvolumeType: jsii.String(\"volumeType\"),\n\t\t\t},\n\t\t\tnoDevice: jsii.String(\"noDevice\"),\n\t\t\tvirtualName: jsii.String(\"virtualName\"),\n\t\t},\n\t},\n\tebsOptimized: jsii.Boolean(false),\n\tiamInstanceProfile: &iamInstanceProfileSpecificationProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t},\n\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tacceleratorManufacturers: []*string{\n\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t},\n\t\tacceleratorNames: []*string{\n\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t},\n\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tacceleratorTypes: []*string{\n\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t},\n\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\tcpuManufacturers: []*string{\n\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t},\n\t\texcludedInstanceTypes: []*string{\n\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t},\n\t\tinstanceGenerations: []*string{\n\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t},\n\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\tlocalStorageTypes: []*string{\n\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t},\n\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\tmax: jsii.Number(123),\n\t\t\tmin: jsii.Number(123),\n\t\t},\n\t},\n\tinstanceType: jsii.String(\"instanceType\"),\n\tkernelId: jsii.String(\"kernelId\"),\n\tkeyName: jsii.String(\"keyName\"),\n\tmonitoring: &spotFleetMonitoringProperty{\n\t\tenabled: jsii.Boolean(false),\n\t},\n\tnetworkInterfaces: []interface{}{\n\t\t&instanceNetworkInterfaceSpecificationProperty{\n\t\t\tassociatePublicIpAddress: jsii.Boolean(false),\n\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tdeviceIndex: jsii.Number(123),\n\t\t\tgroups: []*string{\n\t\t\t\tjsii.String(\"groups\"),\n\t\t\t},\n\t\t\tipv6AddressCount: jsii.Number(123),\n\t\t\tipv6Addresses: []interface{}{\n\t\t\t\t&instanceIpv6AddressProperty{\n\t\t\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\t\tprivateIpAddresses: []interface{}{\n\t\t\t\t&privateIpAddressSpecificationProperty{\n\t\t\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tprimary: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t},\n\t},\n\tplacement: &spotPlacementProperty{\n\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\tgroupName: jsii.String(\"groupName\"),\n\t\ttenancy: jsii.String(\"tenancy\"),\n\t},\n\tramdiskId: jsii.String(\"ramdiskId\"),\n\tsecurityGroups: []interface{}{\n\t\t&groupIdentifierProperty{\n\t\t\tgroupId: jsii.String(\"groupId\"),\n\t\t},\n\t},\n\tspotPrice: jsii.String(\"spotPrice\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n\ttagSpecifications: []interface{}{\n\t\t&spotFleetTagSpecificationProperty{\n\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\ttags: []cfnTag{\n\t\t\t\t&cfnTag{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tuserData: jsii.String(\"userData\"),\n\tweightedCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotFleetLaunchSpecificationProperty: ec2.CfnSpotFleet.SpotFleetLaunchSpecificationProperty = {\n  imageId: 'imageId',\n\n  // the properties below are optional\n  blockDeviceMappings: [{\n    deviceName: 'deviceName',\n\n    // the properties below are optional\n    ebs: {\n      deleteOnTermination: false,\n      encrypted: false,\n      iops: 123,\n      snapshotId: 'snapshotId',\n      volumeSize: 123,\n      volumeType: 'volumeType',\n    },\n    noDevice: 'noDevice',\n    virtualName: 'virtualName',\n  }],\n  ebsOptimized: false,\n  iamInstanceProfile: {\n    arn: 'arn',\n  },\n  instanceRequirements: {\n    acceleratorCount: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorManufacturers: ['acceleratorManufacturers'],\n    acceleratorNames: ['acceleratorNames'],\n    acceleratorTotalMemoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorTypes: ['acceleratorTypes'],\n    bareMetal: 'bareMetal',\n    baselineEbsBandwidthMbps: {\n      max: 123,\n      min: 123,\n    },\n    burstablePerformance: 'burstablePerformance',\n    cpuManufacturers: ['cpuManufacturers'],\n    excludedInstanceTypes: ['excludedInstanceTypes'],\n    instanceGenerations: ['instanceGenerations'],\n    localStorage: 'localStorage',\n    localStorageTypes: ['localStorageTypes'],\n    memoryGiBPerVCpu: {\n      max: 123,\n      min: 123,\n    },\n    memoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    networkInterfaceCount: {\n      max: 123,\n      min: 123,\n    },\n    onDemandMaxPricePercentageOverLowestPrice: 123,\n    requireHibernateSupport: false,\n    spotMaxPricePercentageOverLowestPrice: 123,\n    totalLocalStorageGb: {\n      max: 123,\n      min: 123,\n    },\n    vCpuCount: {\n      max: 123,\n      min: 123,\n    },\n  },\n  instanceType: 'instanceType',\n  kernelId: 'kernelId',\n  keyName: 'keyName',\n  monitoring: {\n    enabled: false,\n  },\n  networkInterfaces: [{\n    associatePublicIpAddress: false,\n    deleteOnTermination: false,\n    description: 'description',\n    deviceIndex: 123,\n    groups: ['groups'],\n    ipv6AddressCount: 123,\n    ipv6Addresses: [{\n      ipv6Address: 'ipv6Address',\n    }],\n    networkInterfaceId: 'networkInterfaceId',\n    privateIpAddresses: [{\n      privateIpAddress: 'privateIpAddress',\n\n      // the properties below are optional\n      primary: false,\n    }],\n    secondaryPrivateIpAddressCount: 123,\n    subnetId: 'subnetId',\n  }],\n  placement: {\n    availabilityZone: 'availabilityZone',\n    groupName: 'groupName',\n    tenancy: 'tenancy',\n  },\n  ramdiskId: 'ramdiskId',\n  securityGroups: [{\n    groupId: 'groupId',\n  }],\n  spotPrice: 'spotPrice',\n  subnetId: 'subnetId',\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  userData: 'userData',\n  weightedCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.SpotFleetLaunchSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.SpotFleetLaunchSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotFleetLaunchSpecificationProperty: ec2.CfnSpotFleet.SpotFleetLaunchSpecificationProperty = {\n  imageId: 'imageId',\n\n  // the properties below are optional\n  blockDeviceMappings: [{\n    deviceName: 'deviceName',\n\n    // the properties below are optional\n    ebs: {\n      deleteOnTermination: false,\n      encrypted: false,\n      iops: 123,\n      snapshotId: 'snapshotId',\n      volumeSize: 123,\n      volumeType: 'volumeType',\n    },\n    noDevice: 'noDevice',\n    virtualName: 'virtualName',\n  }],\n  ebsOptimized: false,\n  iamInstanceProfile: {\n    arn: 'arn',\n  },\n  instanceRequirements: {\n    acceleratorCount: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorManufacturers: ['acceleratorManufacturers'],\n    acceleratorNames: ['acceleratorNames'],\n    acceleratorTotalMemoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    acceleratorTypes: ['acceleratorTypes'],\n    bareMetal: 'bareMetal',\n    baselineEbsBandwidthMbps: {\n      max: 123,\n      min: 123,\n    },\n    burstablePerformance: 'burstablePerformance',\n    cpuManufacturers: ['cpuManufacturers'],\n    excludedInstanceTypes: ['excludedInstanceTypes'],\n    instanceGenerations: ['instanceGenerations'],\n    localStorage: 'localStorage',\n    localStorageTypes: ['localStorageTypes'],\n    memoryGiBPerVCpu: {\n      max: 123,\n      min: 123,\n    },\n    memoryMiB: {\n      max: 123,\n      min: 123,\n    },\n    networkInterfaceCount: {\n      max: 123,\n      min: 123,\n    },\n    onDemandMaxPricePercentageOverLowestPrice: 123,\n    requireHibernateSupport: false,\n    spotMaxPricePercentageOverLowestPrice: 123,\n    totalLocalStorageGb: {\n      max: 123,\n      min: 123,\n    },\n    vCpuCount: {\n      max: 123,\n      min: 123,\n    },\n  },\n  instanceType: 'instanceType',\n  kernelId: 'kernelId',\n  keyName: 'keyName',\n  monitoring: {\n    enabled: false,\n  },\n  networkInterfaces: [{\n    associatePublicIpAddress: false,\n    deleteOnTermination: false,\n    description: 'description',\n    deviceIndex: 123,\n    groups: ['groups'],\n    ipv6AddressCount: 123,\n    ipv6Addresses: [{\n      ipv6Address: 'ipv6Address',\n    }],\n    networkInterfaceId: 'networkInterfaceId',\n    privateIpAddresses: [{\n      privateIpAddress: 'privateIpAddress',\n\n      // the properties below are optional\n      primary: false,\n    }],\n    secondaryPrivateIpAddressCount: 123,\n    subnetId: 'subnetId',\n  }],\n  placement: {\n    availabilityZone: 'availabilityZone',\n    groupName: 'groupName',\n    tenancy: 'tenancy',\n  },\n  ramdiskId: 'ramdiskId',\n  securityGroups: [{\n    groupId: 'groupId',\n  }],\n  spotPrice: 'spotPrice',\n  subnetId: 'subnetId',\n  tagSpecifications: [{\n    resourceType: 'resourceType',\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n  userData: 'userData',\n  weightedCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 24,
        "10": 38,
        "75": 94,
        "91": 8,
        "153": 2,
        "169": 1,
        "192": 15,
        "193": 21,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 89,
        "290": 1
      },
      "fqnsFingerprint": "7dc3bb0c058cba01d2d1824a849ef6fac7ab3f6b26d7352f60f7fbdd6488d575"
    },
    "b3825c76a7664d03b3138e5cda6d586630c296fabe7bb77a13d460d1c31d6a12": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_fleet_monitoring_property = ec2.CfnSpotFleet.SpotFleetMonitoringProperty(\n    enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotFleetMonitoringProperty spotFleetMonitoringProperty = new SpotFleetMonitoringProperty {\n    Enabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotFleetMonitoringProperty spotFleetMonitoringProperty = SpotFleetMonitoringProperty.builder()\n        .enabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotFleetMonitoringProperty := &spotFleetMonitoringProperty{\n\tenabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotFleetMonitoringProperty: ec2.CfnSpotFleet.SpotFleetMonitoringProperty = {\n  enabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.SpotFleetMonitoringProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.SpotFleetMonitoringProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotFleetMonitoringProperty: ec2.CfnSpotFleet.SpotFleetMonitoringProperty = {\n  enabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7911b068815257a82c87ad0fc66aaf59c7a07990e8772b3dc5fdba125b442de1"
    },
    "a6ee6f6bb11293afff369fdb6304d6ab6e91c95ff4281d85c6404bad1296f39f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_fleet_request_config_data_property = ec2.CfnSpotFleet.SpotFleetRequestConfigDataProperty(\n    iam_fleet_role=\"iamFleetRole\",\n    target_capacity=123,\n\n    # the properties below are optional\n    allocation_strategy=\"allocationStrategy\",\n    context=\"context\",\n    excess_capacity_termination_policy=\"excessCapacityTerminationPolicy\",\n    instance_interruption_behavior=\"instanceInterruptionBehavior\",\n    instance_pools_to_use_count=123,\n    launch_specifications=[ec2.CfnSpotFleet.SpotFleetLaunchSpecificationProperty(\n        image_id=\"imageId\",\n\n        # the properties below are optional\n        block_device_mappings=[ec2.CfnSpotFleet.BlockDeviceMappingProperty(\n            device_name=\"deviceName\",\n\n            # the properties below are optional\n            ebs=ec2.CfnSpotFleet.EbsBlockDeviceProperty(\n                delete_on_termination=False,\n                encrypted=False,\n                iops=123,\n                snapshot_id=\"snapshotId\",\n                volume_size=123,\n                volume_type=\"volumeType\"\n            ),\n            no_device=\"noDevice\",\n            virtual_name=\"virtualName\"\n        )],\n        ebs_optimized=False,\n        iam_instance_profile=ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty(\n            arn=\"arn\"\n        ),\n        instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n            accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n                max=123,\n                min=123\n            ),\n            accelerator_manufacturers=[\"acceleratorManufacturers\"],\n            accelerator_names=[\"acceleratorNames\"],\n            accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n                max=123,\n                min=123\n            ),\n            accelerator_types=[\"acceleratorTypes\"],\n            bare_metal=\"bareMetal\",\n            baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n                max=123,\n                min=123\n            ),\n            burstable_performance=\"burstablePerformance\",\n            cpu_manufacturers=[\"cpuManufacturers\"],\n            excluded_instance_types=[\"excludedInstanceTypes\"],\n            instance_generations=[\"instanceGenerations\"],\n            local_storage=\"localStorage\",\n            local_storage_types=[\"localStorageTypes\"],\n            memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n                max=123,\n                min=123\n            ),\n            memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n                max=123,\n                min=123\n            ),\n            network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n                max=123,\n                min=123\n            ),\n            on_demand_max_price_percentage_over_lowest_price=123,\n            require_hibernate_support=False,\n            spot_max_price_percentage_over_lowest_price=123,\n            total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n                max=123,\n                min=123\n            ),\n            v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n                max=123,\n                min=123\n            )\n        ),\n        instance_type=\"instanceType\",\n        kernel_id=\"kernelId\",\n        key_name=\"keyName\",\n        monitoring=ec2.CfnSpotFleet.SpotFleetMonitoringProperty(\n            enabled=False\n        ),\n        network_interfaces=[ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty(\n            associate_public_ip_address=False,\n            delete_on_termination=False,\n            description=\"description\",\n            device_index=123,\n            groups=[\"groups\"],\n            ipv6_address_count=123,\n            ipv6_addresses=[ec2.CfnSpotFleet.InstanceIpv6AddressProperty(\n                ipv6_address=\"ipv6Address\"\n            )],\n            network_interface_id=\"networkInterfaceId\",\n            private_ip_addresses=[ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty(\n                private_ip_address=\"privateIpAddress\",\n\n                # the properties below are optional\n                primary=False\n            )],\n            secondary_private_ip_address_count=123,\n            subnet_id=\"subnetId\"\n        )],\n        placement=ec2.CfnSpotFleet.SpotPlacementProperty(\n            availability_zone=\"availabilityZone\",\n            group_name=\"groupName\",\n            tenancy=\"tenancy\"\n        ),\n        ramdisk_id=\"ramdiskId\",\n        security_groups=[ec2.CfnSpotFleet.GroupIdentifierProperty(\n            group_id=\"groupId\"\n        )],\n        spot_price=\"spotPrice\",\n        subnet_id=\"subnetId\",\n        tag_specifications=[ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty(\n            resource_type=\"resourceType\",\n            tags=[CfnTag(\n                key=\"key\",\n                value=\"value\"\n            )]\n        )],\n        user_data=\"userData\",\n        weighted_capacity=123\n    )],\n    launch_template_configs=[ec2.CfnSpotFleet.LaunchTemplateConfigProperty(\n        launch_template_specification=ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty(\n            version=\"version\",\n\n            # the properties below are optional\n            launch_template_id=\"launchTemplateId\",\n            launch_template_name=\"launchTemplateName\"\n        ),\n        overrides=[ec2.CfnSpotFleet.LaunchTemplateOverridesProperty(\n            availability_zone=\"availabilityZone\",\n            instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n                accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_manufacturers=[\"acceleratorManufacturers\"],\n                accelerator_names=[\"acceleratorNames\"],\n                accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_types=[\"acceleratorTypes\"],\n                bare_metal=\"bareMetal\",\n                baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                burstable_performance=\"burstablePerformance\",\n                cpu_manufacturers=[\"cpuManufacturers\"],\n                excluded_instance_types=[\"excludedInstanceTypes\"],\n                instance_generations=[\"instanceGenerations\"],\n                local_storage=\"localStorage\",\n                local_storage_types=[\"localStorageTypes\"],\n                memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                on_demand_max_price_percentage_over_lowest_price=123,\n                require_hibernate_support=False,\n                spot_max_price_percentage_over_lowest_price=123,\n                total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n                    max=123,\n                    min=123\n                )\n            ),\n            instance_type=\"instanceType\",\n            priority=123,\n            spot_price=\"spotPrice\",\n            subnet_id=\"subnetId\",\n            weighted_capacity=123\n        )]\n    )],\n    load_balancers_config=ec2.CfnSpotFleet.LoadBalancersConfigProperty(\n        classic_load_balancers_config=ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty(\n            classic_load_balancers=[ec2.CfnSpotFleet.ClassicLoadBalancerProperty(\n                name=\"name\"\n            )]\n        ),\n        target_groups_config=ec2.CfnSpotFleet.TargetGroupsConfigProperty(\n            target_groups=[ec2.CfnSpotFleet.TargetGroupProperty(\n                arn=\"arn\"\n            )]\n        )\n    ),\n    on_demand_allocation_strategy=\"onDemandAllocationStrategy\",\n    on_demand_max_total_price=\"onDemandMaxTotalPrice\",\n    on_demand_target_capacity=123,\n    replace_unhealthy_instances=False,\n    spot_maintenance_strategies=ec2.CfnSpotFleet.SpotMaintenanceStrategiesProperty(\n        capacity_rebalance=ec2.CfnSpotFleet.SpotCapacityRebalanceProperty(\n            replacement_strategy=\"replacementStrategy\",\n            termination_delay=123\n        )\n    ),\n    spot_max_total_price=\"spotMaxTotalPrice\",\n    spot_price=\"spotPrice\",\n    target_capacity_unit_type=\"targetCapacityUnitType\",\n    terminate_instances_with_expiration=False,\n    type=\"type\",\n    valid_from=\"validFrom\",\n    valid_until=\"validUntil\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotFleetRequestConfigDataProperty spotFleetRequestConfigDataProperty = new SpotFleetRequestConfigDataProperty {\n    IamFleetRole = \"iamFleetRole\",\n    TargetCapacity = 123,\n\n    // the properties below are optional\n    AllocationStrategy = \"allocationStrategy\",\n    Context = \"context\",\n    ExcessCapacityTerminationPolicy = \"excessCapacityTerminationPolicy\",\n    InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n    InstancePoolsToUseCount = 123,\n    LaunchSpecifications = new [] { new SpotFleetLaunchSpecificationProperty {\n        ImageId = \"imageId\",\n\n        // the properties below are optional\n        BlockDeviceMappings = new [] { new BlockDeviceMappingProperty {\n            DeviceName = \"deviceName\",\n\n            // the properties below are optional\n            Ebs = new EbsBlockDeviceProperty {\n                DeleteOnTermination = false,\n                Encrypted = false,\n                Iops = 123,\n                SnapshotId = \"snapshotId\",\n                VolumeSize = 123,\n                VolumeType = \"volumeType\"\n            },\n            NoDevice = \"noDevice\",\n            VirtualName = \"virtualName\"\n        } },\n        EbsOptimized = false,\n        IamInstanceProfile = new IamInstanceProfileSpecificationProperty {\n            Arn = \"arn\"\n        },\n        InstanceRequirements = new InstanceRequirementsRequestProperty {\n            AcceleratorCount = new AcceleratorCountRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n            AcceleratorNames = new [] { \"acceleratorNames\" },\n            AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            AcceleratorTypes = new [] { \"acceleratorTypes\" },\n            BareMetal = \"bareMetal\",\n            BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            BurstablePerformance = \"burstablePerformance\",\n            CpuManufacturers = new [] { \"cpuManufacturers\" },\n            ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n            InstanceGenerations = new [] { \"instanceGenerations\" },\n            LocalStorage = \"localStorage\",\n            LocalStorageTypes = new [] { \"localStorageTypes\" },\n            MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            MemoryMiB = new MemoryMiBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            OnDemandMaxPricePercentageOverLowestPrice = 123,\n            RequireHibernateSupport = false,\n            SpotMaxPricePercentageOverLowestPrice = 123,\n            TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                Max = 123,\n                Min = 123\n            },\n            VCpuCount = new VCpuCountRangeRequestProperty {\n                Max = 123,\n                Min = 123\n            }\n        },\n        InstanceType = \"instanceType\",\n        KernelId = \"kernelId\",\n        KeyName = \"keyName\",\n        Monitoring = new SpotFleetMonitoringProperty {\n            Enabled = false\n        },\n        NetworkInterfaces = new [] { new InstanceNetworkInterfaceSpecificationProperty {\n            AssociatePublicIpAddress = false,\n            DeleteOnTermination = false,\n            Description = \"description\",\n            DeviceIndex = 123,\n            Groups = new [] { \"groups\" },\n            Ipv6AddressCount = 123,\n            Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n                Ipv6Address = \"ipv6Address\"\n            } },\n            NetworkInterfaceId = \"networkInterfaceId\",\n            PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n                PrivateIpAddress = \"privateIpAddress\",\n\n                // the properties below are optional\n                Primary = false\n            } },\n            SecondaryPrivateIpAddressCount = 123,\n            SubnetId = \"subnetId\"\n        } },\n        Placement = new SpotPlacementProperty {\n            AvailabilityZone = \"availabilityZone\",\n            GroupName = \"groupName\",\n            Tenancy = \"tenancy\"\n        },\n        RamdiskId = \"ramdiskId\",\n        SecurityGroups = new [] { new GroupIdentifierProperty {\n            GroupId = \"groupId\"\n        } },\n        SpotPrice = \"spotPrice\",\n        SubnetId = \"subnetId\",\n        TagSpecifications = new [] { new SpotFleetTagSpecificationProperty {\n            ResourceType = \"resourceType\",\n            Tags = new [] { new CfnTag {\n                Key = \"key\",\n                Value = \"value\"\n            } }\n        } },\n        UserData = \"userData\",\n        WeightedCapacity = 123\n    } },\n    LaunchTemplateConfigs = new [] { new LaunchTemplateConfigProperty {\n        LaunchTemplateSpecification = new FleetLaunchTemplateSpecificationProperty {\n            Version = \"version\",\n\n            // the properties below are optional\n            LaunchTemplateId = \"launchTemplateId\",\n            LaunchTemplateName = \"launchTemplateName\"\n        },\n        Overrides = new [] { new LaunchTemplateOverridesProperty {\n            AvailabilityZone = \"availabilityZone\",\n            InstanceRequirements = new InstanceRequirementsRequestProperty {\n                AcceleratorCount = new AcceleratorCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n                AcceleratorNames = new [] { \"acceleratorNames\" },\n                AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorTypes = new [] { \"acceleratorTypes\" },\n                BareMetal = \"bareMetal\",\n                BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                BurstablePerformance = \"burstablePerformance\",\n                CpuManufacturers = new [] { \"cpuManufacturers\" },\n                ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n                InstanceGenerations = new [] { \"instanceGenerations\" },\n                LocalStorage = \"localStorage\",\n                LocalStorageTypes = new [] { \"localStorageTypes\" },\n                MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                MemoryMiB = new MemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                OnDemandMaxPricePercentageOverLowestPrice = 123,\n                RequireHibernateSupport = false,\n                SpotMaxPricePercentageOverLowestPrice = 123,\n                TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                VCpuCount = new VCpuCountRangeRequestProperty {\n                    Max = 123,\n                    Min = 123\n                }\n            },\n            InstanceType = \"instanceType\",\n            Priority = 123,\n            SpotPrice = \"spotPrice\",\n            SubnetId = \"subnetId\",\n            WeightedCapacity = 123\n        } }\n    } },\n    LoadBalancersConfig = new LoadBalancersConfigProperty {\n        ClassicLoadBalancersConfig = new ClassicLoadBalancersConfigProperty {\n            ClassicLoadBalancers = new [] { new ClassicLoadBalancerProperty {\n                Name = \"name\"\n            } }\n        },\n        TargetGroupsConfig = new TargetGroupsConfigProperty {\n            TargetGroups = new [] { new TargetGroupProperty {\n                Arn = \"arn\"\n            } }\n        }\n    },\n    OnDemandAllocationStrategy = \"onDemandAllocationStrategy\",\n    OnDemandMaxTotalPrice = \"onDemandMaxTotalPrice\",\n    OnDemandTargetCapacity = 123,\n    ReplaceUnhealthyInstances = false,\n    SpotMaintenanceStrategies = new SpotMaintenanceStrategiesProperty {\n        CapacityRebalance = new SpotCapacityRebalanceProperty {\n            ReplacementStrategy = \"replacementStrategy\",\n            TerminationDelay = 123\n        }\n    },\n    SpotMaxTotalPrice = \"spotMaxTotalPrice\",\n    SpotPrice = \"spotPrice\",\n    TargetCapacityUnitType = \"targetCapacityUnitType\",\n    TerminateInstancesWithExpiration = false,\n    Type = \"type\",\n    ValidFrom = \"validFrom\",\n    ValidUntil = \"validUntil\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotFleetRequestConfigDataProperty spotFleetRequestConfigDataProperty = SpotFleetRequestConfigDataProperty.builder()\n        .iamFleetRole(\"iamFleetRole\")\n        .targetCapacity(123)\n\n        // the properties below are optional\n        .allocationStrategy(\"allocationStrategy\")\n        .context(\"context\")\n        .excessCapacityTerminationPolicy(\"excessCapacityTerminationPolicy\")\n        .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n        .instancePoolsToUseCount(123)\n        .launchSpecifications(List.of(SpotFleetLaunchSpecificationProperty.builder()\n                .imageId(\"imageId\")\n\n                // the properties below are optional\n                .blockDeviceMappings(List.of(BlockDeviceMappingProperty.builder()\n                        .deviceName(\"deviceName\")\n\n                        // the properties below are optional\n                        .ebs(EbsBlockDeviceProperty.builder()\n                                .deleteOnTermination(false)\n                                .encrypted(false)\n                                .iops(123)\n                                .snapshotId(\"snapshotId\")\n                                .volumeSize(123)\n                                .volumeType(\"volumeType\")\n                                .build())\n                        .noDevice(\"noDevice\")\n                        .virtualName(\"virtualName\")\n                        .build()))\n                .ebsOptimized(false)\n                .iamInstanceProfile(IamInstanceProfileSpecificationProperty.builder()\n                        .arn(\"arn\")\n                        .build())\n                .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                        .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                        .acceleratorNames(List.of(\"acceleratorNames\"))\n                        .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                        .bareMetal(\"bareMetal\")\n                        .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .burstablePerformance(\"burstablePerformance\")\n                        .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                        .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                        .instanceGenerations(List.of(\"instanceGenerations\"))\n                        .localStorage(\"localStorage\")\n                        .localStorageTypes(List.of(\"localStorageTypes\"))\n                        .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .memoryMiB(MemoryMiBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .onDemandMaxPricePercentageOverLowestPrice(123)\n                        .requireHibernateSupport(false)\n                        .spotMaxPricePercentageOverLowestPrice(123)\n                        .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                .max(123)\n                                .min(123)\n                                .build())\n                        .build())\n                .instanceType(\"instanceType\")\n                .kernelId(\"kernelId\")\n                .keyName(\"keyName\")\n                .monitoring(SpotFleetMonitoringProperty.builder()\n                        .enabled(false)\n                        .build())\n                .networkInterfaces(List.of(InstanceNetworkInterfaceSpecificationProperty.builder()\n                        .associatePublicIpAddress(false)\n                        .deleteOnTermination(false)\n                        .description(\"description\")\n                        .deviceIndex(123)\n                        .groups(List.of(\"groups\"))\n                        .ipv6AddressCount(123)\n                        .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                                .ipv6Address(\"ipv6Address\")\n                                .build()))\n                        .networkInterfaceId(\"networkInterfaceId\")\n                        .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                                .privateIpAddress(\"privateIpAddress\")\n\n                                // the properties below are optional\n                                .primary(false)\n                                .build()))\n                        .secondaryPrivateIpAddressCount(123)\n                        .subnetId(\"subnetId\")\n                        .build()))\n                .placement(SpotPlacementProperty.builder()\n                        .availabilityZone(\"availabilityZone\")\n                        .groupName(\"groupName\")\n                        .tenancy(\"tenancy\")\n                        .build())\n                .ramdiskId(\"ramdiskId\")\n                .securityGroups(List.of(GroupIdentifierProperty.builder()\n                        .groupId(\"groupId\")\n                        .build()))\n                .spotPrice(\"spotPrice\")\n                .subnetId(\"subnetId\")\n                .tagSpecifications(List.of(SpotFleetTagSpecificationProperty.builder()\n                        .resourceType(\"resourceType\")\n                        .tags(List.of(CfnTag.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n                                .build()))\n                        .build()))\n                .userData(\"userData\")\n                .weightedCapacity(123)\n                .build()))\n        .launchTemplateConfigs(List.of(LaunchTemplateConfigProperty.builder()\n                .launchTemplateSpecification(FleetLaunchTemplateSpecificationProperty.builder()\n                        .version(\"version\")\n\n                        // the properties below are optional\n                        .launchTemplateId(\"launchTemplateId\")\n                        .launchTemplateName(\"launchTemplateName\")\n                        .build())\n                .overrides(List.of(LaunchTemplateOverridesProperty.builder()\n                        .availabilityZone(\"availabilityZone\")\n                        .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                                .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                                .acceleratorNames(List.of(\"acceleratorNames\"))\n                                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                                .bareMetal(\"bareMetal\")\n                                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .burstablePerformance(\"burstablePerformance\")\n                                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                                .instanceGenerations(List.of(\"instanceGenerations\"))\n                                .localStorage(\"localStorage\")\n                                .localStorageTypes(List.of(\"localStorageTypes\"))\n                                .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .memoryMiB(MemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .onDemandMaxPricePercentageOverLowestPrice(123)\n                                .requireHibernateSupport(false)\n                                .spotMaxPricePercentageOverLowestPrice(123)\n                                .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .build())\n                        .instanceType(\"instanceType\")\n                        .priority(123)\n                        .spotPrice(\"spotPrice\")\n                        .subnetId(\"subnetId\")\n                        .weightedCapacity(123)\n                        .build()))\n                .build()))\n        .loadBalancersConfig(LoadBalancersConfigProperty.builder()\n                .classicLoadBalancersConfig(ClassicLoadBalancersConfigProperty.builder()\n                        .classicLoadBalancers(List.of(ClassicLoadBalancerProperty.builder()\n                                .name(\"name\")\n                                .build()))\n                        .build())\n                .targetGroupsConfig(TargetGroupsConfigProperty.builder()\n                        .targetGroups(List.of(TargetGroupProperty.builder()\n                                .arn(\"arn\")\n                                .build()))\n                        .build())\n                .build())\n        .onDemandAllocationStrategy(\"onDemandAllocationStrategy\")\n        .onDemandMaxTotalPrice(\"onDemandMaxTotalPrice\")\n        .onDemandTargetCapacity(123)\n        .replaceUnhealthyInstances(false)\n        .spotMaintenanceStrategies(SpotMaintenanceStrategiesProperty.builder()\n                .capacityRebalance(SpotCapacityRebalanceProperty.builder()\n                        .replacementStrategy(\"replacementStrategy\")\n                        .terminationDelay(123)\n                        .build())\n                .build())\n        .spotMaxTotalPrice(\"spotMaxTotalPrice\")\n        .spotPrice(\"spotPrice\")\n        .targetCapacityUnitType(\"targetCapacityUnitType\")\n        .terminateInstancesWithExpiration(false)\n        .type(\"type\")\n        .validFrom(\"validFrom\")\n        .validUntil(\"validUntil\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotFleetRequestConfigDataProperty := &spotFleetRequestConfigDataProperty{\n\tiamFleetRole: jsii.String(\"iamFleetRole\"),\n\ttargetCapacity: jsii.Number(123),\n\n\t// the properties below are optional\n\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\tcontext: jsii.String(\"context\"),\n\texcessCapacityTerminationPolicy: jsii.String(\"excessCapacityTerminationPolicy\"),\n\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\tinstancePoolsToUseCount: jsii.Number(123),\n\tlaunchSpecifications: []interface{}{\n\t\t&spotFleetLaunchSpecificationProperty{\n\t\t\timageId: jsii.String(\"imageId\"),\n\n\t\t\t// the properties below are optional\n\t\t\tblockDeviceMappings: []interface{}{\n\t\t\t\t&blockDeviceMappingProperty{\n\t\t\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tebs: &ebsBlockDeviceProperty{\n\t\t\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\t\t\tencrypted: jsii.Boolean(false),\n\t\t\t\t\t\tiops: jsii.Number(123),\n\t\t\t\t\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\t\t\t\t\tvolumeSize: jsii.Number(123),\n\t\t\t\t\t\tvolumeType: jsii.String(\"volumeType\"),\n\t\t\t\t\t},\n\t\t\t\t\tnoDevice: jsii.String(\"noDevice\"),\n\t\t\t\t\tvirtualName: jsii.String(\"virtualName\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tebsOptimized: jsii.Boolean(false),\n\t\t\tiamInstanceProfile: &iamInstanceProfileSpecificationProperty{\n\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t},\n\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t},\n\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t},\n\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t},\n\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t},\n\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t},\n\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t},\n\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t},\n\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\tkernelId: jsii.String(\"kernelId\"),\n\t\t\tkeyName: jsii.String(\"keyName\"),\n\t\t\tmonitoring: &spotFleetMonitoringProperty{\n\t\t\t\tenabled: jsii.Boolean(false),\n\t\t\t},\n\t\t\tnetworkInterfaces: []interface{}{\n\t\t\t\t&instanceNetworkInterfaceSpecificationProperty{\n\t\t\t\t\tassociatePublicIpAddress: jsii.Boolean(false),\n\t\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\t\tdescription: jsii.String(\"description\"),\n\t\t\t\t\tdeviceIndex: jsii.Number(123),\n\t\t\t\t\tgroups: []*string{\n\t\t\t\t\t\tjsii.String(\"groups\"),\n\t\t\t\t\t},\n\t\t\t\t\tipv6AddressCount: jsii.Number(123),\n\t\t\t\t\tipv6Addresses: []interface{}{\n\t\t\t\t\t\t&instanceIpv6AddressProperty{\n\t\t\t\t\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\t\t\t\tprivateIpAddresses: []interface{}{\n\t\t\t\t\t\t&privateIpAddressSpecificationProperty{\n\t\t\t\t\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\n\t\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\t\tprimary: jsii.Boolean(false),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\t\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tplacement: &spotPlacementProperty{\n\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\tgroupName: jsii.String(\"groupName\"),\n\t\t\t\ttenancy: jsii.String(\"tenancy\"),\n\t\t\t},\n\t\t\tramdiskId: jsii.String(\"ramdiskId\"),\n\t\t\tsecurityGroups: []interface{}{\n\t\t\t\t&groupIdentifierProperty{\n\t\t\t\t\tgroupId: jsii.String(\"groupId\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\ttagSpecifications: []interface{}{\n\t\t\t\t&spotFleetTagSpecificationProperty{\n\t\t\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\t\t\ttags: []cfnTag{\n\t\t\t\t\t\t&cfnTag{\n\t\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tuserData: jsii.String(\"userData\"),\n\t\t\tweightedCapacity: jsii.Number(123),\n\t\t},\n\t},\n\tlaunchTemplateConfigs: []interface{}{\n\t\t&launchTemplateConfigProperty{\n\t\t\tlaunchTemplateSpecification: &fleetLaunchTemplateSpecificationProperty{\n\t\t\t\tversion: jsii.String(\"version\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\t\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t\t\t},\n\t\t\toverrides: []interface{}{\n\t\t\t\t&launchTemplateOverridesProperty{\n\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\t\t\tpriority: jsii.Number(123),\n\t\t\t\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\t\tweightedCapacity: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tloadBalancersConfig: &loadBalancersConfigProperty{\n\t\tclassicLoadBalancersConfig: &classicLoadBalancersConfigProperty{\n\t\t\tclassicLoadBalancers: []interface{}{\n\t\t\t\t&classicLoadBalancerProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\ttargetGroupsConfig: &targetGroupsConfigProperty{\n\t\t\ttargetGroups: []interface{}{\n\t\t\t\t&targetGroupProperty{\n\t\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tonDemandAllocationStrategy: jsii.String(\"onDemandAllocationStrategy\"),\n\tonDemandMaxTotalPrice: jsii.String(\"onDemandMaxTotalPrice\"),\n\tonDemandTargetCapacity: jsii.Number(123),\n\treplaceUnhealthyInstances: jsii.Boolean(false),\n\tspotMaintenanceStrategies: &spotMaintenanceStrategiesProperty{\n\t\tcapacityRebalance: &spotCapacityRebalanceProperty{\n\t\t\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\t\t\tterminationDelay: jsii.Number(123),\n\t\t},\n\t},\n\tspotMaxTotalPrice: jsii.String(\"spotMaxTotalPrice\"),\n\tspotPrice: jsii.String(\"spotPrice\"),\n\ttargetCapacityUnitType: jsii.String(\"targetCapacityUnitType\"),\n\tterminateInstancesWithExpiration: jsii.Boolean(false),\n\ttype: jsii.String(\"type\"),\n\tvalidFrom: jsii.String(\"validFrom\"),\n\tvalidUntil: jsii.String(\"validUntil\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotFleetRequestConfigDataProperty: ec2.CfnSpotFleet.SpotFleetRequestConfigDataProperty = {\n  iamFleetRole: 'iamFleetRole',\n  targetCapacity: 123,\n\n  // the properties below are optional\n  allocationStrategy: 'allocationStrategy',\n  context: 'context',\n  excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n  instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n  instancePoolsToUseCount: 123,\n  launchSpecifications: [{\n    imageId: 'imageId',\n\n    // the properties below are optional\n    blockDeviceMappings: [{\n      deviceName: 'deviceName',\n\n      // the properties below are optional\n      ebs: {\n        deleteOnTermination: false,\n        encrypted: false,\n        iops: 123,\n        snapshotId: 'snapshotId',\n        volumeSize: 123,\n        volumeType: 'volumeType',\n      },\n      noDevice: 'noDevice',\n      virtualName: 'virtualName',\n    }],\n    ebsOptimized: false,\n    iamInstanceProfile: {\n      arn: 'arn',\n    },\n    instanceRequirements: {\n      acceleratorCount: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorManufacturers: ['acceleratorManufacturers'],\n      acceleratorNames: ['acceleratorNames'],\n      acceleratorTotalMemoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorTypes: ['acceleratorTypes'],\n      bareMetal: 'bareMetal',\n      baselineEbsBandwidthMbps: {\n        max: 123,\n        min: 123,\n      },\n      burstablePerformance: 'burstablePerformance',\n      cpuManufacturers: ['cpuManufacturers'],\n      excludedInstanceTypes: ['excludedInstanceTypes'],\n      instanceGenerations: ['instanceGenerations'],\n      localStorage: 'localStorage',\n      localStorageTypes: ['localStorageTypes'],\n      memoryGiBPerVCpu: {\n        max: 123,\n        min: 123,\n      },\n      memoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      networkInterfaceCount: {\n        max: 123,\n        min: 123,\n      },\n      onDemandMaxPricePercentageOverLowestPrice: 123,\n      requireHibernateSupport: false,\n      spotMaxPricePercentageOverLowestPrice: 123,\n      totalLocalStorageGb: {\n        max: 123,\n        min: 123,\n      },\n      vCpuCount: {\n        max: 123,\n        min: 123,\n      },\n    },\n    instanceType: 'instanceType',\n    kernelId: 'kernelId',\n    keyName: 'keyName',\n    monitoring: {\n      enabled: false,\n    },\n    networkInterfaces: [{\n      associatePublicIpAddress: false,\n      deleteOnTermination: false,\n      description: 'description',\n      deviceIndex: 123,\n      groups: ['groups'],\n      ipv6AddressCount: 123,\n      ipv6Addresses: [{\n        ipv6Address: 'ipv6Address',\n      }],\n      networkInterfaceId: 'networkInterfaceId',\n      privateIpAddresses: [{\n        privateIpAddress: 'privateIpAddress',\n\n        // the properties below are optional\n        primary: false,\n      }],\n      secondaryPrivateIpAddressCount: 123,\n      subnetId: 'subnetId',\n    }],\n    placement: {\n      availabilityZone: 'availabilityZone',\n      groupName: 'groupName',\n      tenancy: 'tenancy',\n    },\n    ramdiskId: 'ramdiskId',\n    securityGroups: [{\n      groupId: 'groupId',\n    }],\n    spotPrice: 'spotPrice',\n    subnetId: 'subnetId',\n    tagSpecifications: [{\n      resourceType: 'resourceType',\n      tags: [{\n        key: 'key',\n        value: 'value',\n      }],\n    }],\n    userData: 'userData',\n    weightedCapacity: 123,\n  }],\n  launchTemplateConfigs: [{\n    launchTemplateSpecification: {\n      version: 'version',\n\n      // the properties below are optional\n      launchTemplateId: 'launchTemplateId',\n      launchTemplateName: 'launchTemplateName',\n    },\n    overrides: [{\n      availabilityZone: 'availabilityZone',\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      priority: 123,\n      spotPrice: 'spotPrice',\n      subnetId: 'subnetId',\n      weightedCapacity: 123,\n    }],\n  }],\n  loadBalancersConfig: {\n    classicLoadBalancersConfig: {\n      classicLoadBalancers: [{\n        name: 'name',\n      }],\n    },\n    targetGroupsConfig: {\n      targetGroups: [{\n        arn: 'arn',\n      }],\n    },\n  },\n  onDemandAllocationStrategy: 'onDemandAllocationStrategy',\n  onDemandMaxTotalPrice: 'onDemandMaxTotalPrice',\n  onDemandTargetCapacity: 123,\n  replaceUnhealthyInstances: false,\n  spotMaintenanceStrategies: {\n    capacityRebalance: {\n      replacementStrategy: 'replacementStrategy',\n      terminationDelay: 123,\n    },\n  },\n  spotMaxTotalPrice: 'spotMaxTotalPrice',\n  spotPrice: 'spotPrice',\n  targetCapacityUnitType: 'targetCapacityUnitType',\n  terminateInstancesWithExpiration: false,\n  type: 'type',\n  validFrom: 'validFrom',\n  validUntil: 'validUntil',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.SpotFleetRequestConfigDataProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.SpotFleetRequestConfigDataProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotFleetRequestConfigDataProperty: ec2.CfnSpotFleet.SpotFleetRequestConfigDataProperty = {\n  iamFleetRole: 'iamFleetRole',\n  targetCapacity: 123,\n\n  // the properties below are optional\n  allocationStrategy: 'allocationStrategy',\n  context: 'context',\n  excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n  instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n  instancePoolsToUseCount: 123,\n  launchSpecifications: [{\n    imageId: 'imageId',\n\n    // the properties below are optional\n    blockDeviceMappings: [{\n      deviceName: 'deviceName',\n\n      // the properties below are optional\n      ebs: {\n        deleteOnTermination: false,\n        encrypted: false,\n        iops: 123,\n        snapshotId: 'snapshotId',\n        volumeSize: 123,\n        volumeType: 'volumeType',\n      },\n      noDevice: 'noDevice',\n      virtualName: 'virtualName',\n    }],\n    ebsOptimized: false,\n    iamInstanceProfile: {\n      arn: 'arn',\n    },\n    instanceRequirements: {\n      acceleratorCount: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorManufacturers: ['acceleratorManufacturers'],\n      acceleratorNames: ['acceleratorNames'],\n      acceleratorTotalMemoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      acceleratorTypes: ['acceleratorTypes'],\n      bareMetal: 'bareMetal',\n      baselineEbsBandwidthMbps: {\n        max: 123,\n        min: 123,\n      },\n      burstablePerformance: 'burstablePerformance',\n      cpuManufacturers: ['cpuManufacturers'],\n      excludedInstanceTypes: ['excludedInstanceTypes'],\n      instanceGenerations: ['instanceGenerations'],\n      localStorage: 'localStorage',\n      localStorageTypes: ['localStorageTypes'],\n      memoryGiBPerVCpu: {\n        max: 123,\n        min: 123,\n      },\n      memoryMiB: {\n        max: 123,\n        min: 123,\n      },\n      networkInterfaceCount: {\n        max: 123,\n        min: 123,\n      },\n      onDemandMaxPricePercentageOverLowestPrice: 123,\n      requireHibernateSupport: false,\n      spotMaxPricePercentageOverLowestPrice: 123,\n      totalLocalStorageGb: {\n        max: 123,\n        min: 123,\n      },\n      vCpuCount: {\n        max: 123,\n        min: 123,\n      },\n    },\n    instanceType: 'instanceType',\n    kernelId: 'kernelId',\n    keyName: 'keyName',\n    monitoring: {\n      enabled: false,\n    },\n    networkInterfaces: [{\n      associatePublicIpAddress: false,\n      deleteOnTermination: false,\n      description: 'description',\n      deviceIndex: 123,\n      groups: ['groups'],\n      ipv6AddressCount: 123,\n      ipv6Addresses: [{\n        ipv6Address: 'ipv6Address',\n      }],\n      networkInterfaceId: 'networkInterfaceId',\n      privateIpAddresses: [{\n        privateIpAddress: 'privateIpAddress',\n\n        // the properties below are optional\n        primary: false,\n      }],\n      secondaryPrivateIpAddressCount: 123,\n      subnetId: 'subnetId',\n    }],\n    placement: {\n      availabilityZone: 'availabilityZone',\n      groupName: 'groupName',\n      tenancy: 'tenancy',\n    },\n    ramdiskId: 'ramdiskId',\n    securityGroups: [{\n      groupId: 'groupId',\n    }],\n    spotPrice: 'spotPrice',\n    subnetId: 'subnetId',\n    tagSpecifications: [{\n      resourceType: 'resourceType',\n      tags: [{\n        key: 'key',\n        value: 'value',\n      }],\n    }],\n    userData: 'userData',\n    weightedCapacity: 123,\n  }],\n  launchTemplateConfigs: [{\n    launchTemplateSpecification: {\n      version: 'version',\n\n      // the properties below are optional\n      launchTemplateId: 'launchTemplateId',\n      launchTemplateName: 'launchTemplateName',\n    },\n    overrides: [{\n      availabilityZone: 'availabilityZone',\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      priority: 123,\n      spotPrice: 'spotPrice',\n      subnetId: 'subnetId',\n      weightedCapacity: 123,\n    }],\n  }],\n  loadBalancersConfig: {\n    classicLoadBalancersConfig: {\n      classicLoadBalancers: [{\n        name: 'name',\n      }],\n    },\n    targetGroupsConfig: {\n      targetGroups: [{\n        arn: 'arn',\n      }],\n    },\n  },\n  onDemandAllocationStrategy: 'onDemandAllocationStrategy',\n  onDemandMaxTotalPrice: 'onDemandMaxTotalPrice',\n  onDemandTargetCapacity: 123,\n  replaceUnhealthyInstances: false,\n  spotMaintenanceStrategies: {\n    capacityRebalance: {\n      replacementStrategy: 'replacementStrategy',\n      terminationDelay: 123,\n    },\n  },\n  spotMaxTotalPrice: 'spotMaxTotalPrice',\n  spotPrice: 'spotPrice',\n  targetCapacityUnitType: 'targetCapacityUnitType',\n  terminateInstancesWithExpiration: false,\n  type: 'type',\n  validFrom: 'validFrom',\n  validUntil: 'validUntil',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 48,
        "10": 71,
        "75": 174,
        "91": 11,
        "153": 2,
        "169": 1,
        "192": 27,
        "193": 41,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 169,
        "290": 1
      },
      "fqnsFingerprint": "02051ade9ed7ed16cdb375be51cad2ef79332db9205d5cbb33671dba5ebeec20"
    },
    "20996e0a8a65ea813a9d2910955d15d9098e743985b831e51bfb3715f3daf2ee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_fleet_tag_specification_property = ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty(\n    resource_type=\"resourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotFleetTagSpecificationProperty spotFleetTagSpecificationProperty = new SpotFleetTagSpecificationProperty {\n    ResourceType = \"resourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotFleetTagSpecificationProperty spotFleetTagSpecificationProperty = SpotFleetTagSpecificationProperty.builder()\n        .resourceType(\"resourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotFleetTagSpecificationProperty := &spotFleetTagSpecificationProperty{\n\tresourceType: jsii.String(\"resourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotFleetTagSpecificationProperty: ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotFleetTagSpecificationProperty: ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty = {\n  resourceType: 'resourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "2953456a5366676348f20a34d0b901640a86ae5baff805bb351a6418198c882e"
    },
    "1dbc662aa107237f51bba550052128a65cef9287a275232c2fc63cff3c5b7ae8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_maintenance_strategies_property = ec2.CfnSpotFleet.SpotMaintenanceStrategiesProperty(\n    capacity_rebalance=ec2.CfnSpotFleet.SpotCapacityRebalanceProperty(\n        replacement_strategy=\"replacementStrategy\",\n        termination_delay=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotMaintenanceStrategiesProperty spotMaintenanceStrategiesProperty = new SpotMaintenanceStrategiesProperty {\n    CapacityRebalance = new SpotCapacityRebalanceProperty {\n        ReplacementStrategy = \"replacementStrategy\",\n        TerminationDelay = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotMaintenanceStrategiesProperty spotMaintenanceStrategiesProperty = SpotMaintenanceStrategiesProperty.builder()\n        .capacityRebalance(SpotCapacityRebalanceProperty.builder()\n                .replacementStrategy(\"replacementStrategy\")\n                .terminationDelay(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotMaintenanceStrategiesProperty := &spotMaintenanceStrategiesProperty{\n\tcapacityRebalance: &spotCapacityRebalanceProperty{\n\t\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\t\tterminationDelay: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotMaintenanceStrategiesProperty: ec2.CfnSpotFleet.SpotMaintenanceStrategiesProperty = {\n  capacityRebalance: {\n    replacementStrategy: 'replacementStrategy',\n    terminationDelay: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.SpotMaintenanceStrategiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.SpotMaintenanceStrategiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotMaintenanceStrategiesProperty: ec2.CfnSpotFleet.SpotMaintenanceStrategiesProperty = {\n  capacityRebalance: {\n    replacementStrategy: 'replacementStrategy',\n    terminationDelay: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4c48cd9266f5bad6d71d685b1796ce54f43b8b221d7c9c12ab993d227797cb1f"
    },
    "83e7cd0984da58639e37a5e710d10d52d076491c221883709ce45d64fc8eb452": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nspot_placement_property = ec2.CfnSpotFleet.SpotPlacementProperty(\n    availability_zone=\"availabilityZone\",\n    group_name=\"groupName\",\n    tenancy=\"tenancy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSpotPlacementProperty spotPlacementProperty = new SpotPlacementProperty {\n    AvailabilityZone = \"availabilityZone\",\n    GroupName = \"groupName\",\n    Tenancy = \"tenancy\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSpotPlacementProperty spotPlacementProperty = SpotPlacementProperty.builder()\n        .availabilityZone(\"availabilityZone\")\n        .groupName(\"groupName\")\n        .tenancy(\"tenancy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nspotPlacementProperty := &spotPlacementProperty{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tgroupName: jsii.String(\"groupName\"),\n\ttenancy: jsii.String(\"tenancy\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst spotPlacementProperty: ec2.CfnSpotFleet.SpotPlacementProperty = {\n  availabilityZone: 'availabilityZone',\n  groupName: 'groupName',\n  tenancy: 'tenancy',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.SpotPlacementProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.SpotPlacementProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotPlacementProperty: ec2.CfnSpotFleet.SpotPlacementProperty = {\n  availabilityZone: 'availabilityZone',\n  groupName: 'groupName',\n  tenancy: 'tenancy',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e32f4a4da627c0728314da4a7abefcbc8f97e872cb1275490bfd5b3d820d5e2d"
    },
    "107621fe84ab6bdecc3bd79b40671a6bf86f289e8bd5c225508f90340acdb223": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntarget_group_property = ec2.CfnSpotFleet.TargetGroupProperty(\n    arn=\"arn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTargetGroupProperty targetGroupProperty = new TargetGroupProperty {\n    Arn = \"arn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTargetGroupProperty targetGroupProperty = TargetGroupProperty.builder()\n        .arn(\"arn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntargetGroupProperty := &targetGroupProperty{\n\tarn: jsii.String(\"arn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst targetGroupProperty: ec2.CfnSpotFleet.TargetGroupProperty = {\n  arn: 'arn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.TargetGroupProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.TargetGroupProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst targetGroupProperty: ec2.CfnSpotFleet.TargetGroupProperty = {\n  arn: 'arn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "5df540da021728088fa201c08c112df44a566ac256d245008b2310fe3200769e"
    },
    "91cfdab1cff0460ea9cb9d505fea1c62e9d57a1163559634782389b8ed435262": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntarget_groups_config_property = ec2.CfnSpotFleet.TargetGroupsConfigProperty(\n    target_groups=[ec2.CfnSpotFleet.TargetGroupProperty(\n        arn=\"arn\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTargetGroupsConfigProperty targetGroupsConfigProperty = new TargetGroupsConfigProperty {\n    TargetGroups = new [] { new TargetGroupProperty {\n        Arn = \"arn\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTargetGroupsConfigProperty targetGroupsConfigProperty = TargetGroupsConfigProperty.builder()\n        .targetGroups(List.of(TargetGroupProperty.builder()\n                .arn(\"arn\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntargetGroupsConfigProperty := &targetGroupsConfigProperty{\n\ttargetGroups: []interface{}{\n\t\t&targetGroupProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst targetGroupsConfigProperty: ec2.CfnSpotFleet.TargetGroupsConfigProperty = {\n  targetGroups: [{\n    arn: 'arn',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.TargetGroupsConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.TargetGroupsConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst targetGroupsConfigProperty: ec2.CfnSpotFleet.TargetGroupsConfigProperty = {\n  targetGroups: [{\n    arn: 'arn',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fa6d04ba4365ef91a84cdbe9c9b9d90d199b7a797a36aa7ad9d977e673fb6af1"
    },
    "d2b976e75f47a2236d148aadcc4211e2ea32d6447fa74f1523833d6a02f35b5b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntotal_local_storage_gBRequest_property = ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTotalLocalStorageGBRequestProperty totalLocalStorageGBRequestProperty = new TotalLocalStorageGBRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTotalLocalStorageGBRequestProperty totalLocalStorageGBRequestProperty = TotalLocalStorageGBRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntotalLocalStorageGBRequestProperty := &totalLocalStorageGBRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst totalLocalStorageGBRequestProperty: ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst totalLocalStorageGBRequestProperty: ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d9d5e4931fcd98b79ee476a47e58e00421d0ae14c211df96b3370a5d0e7a00d0"
    },
    "09c3ad3762b01ad6cc8b6642ab185be8c0441941c16e4b49275dd782e37bad49": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nv_cpu_count_range_request_property = ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n    max=123,\n    min=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nVCpuCountRangeRequestProperty vCpuCountRangeRequestProperty = new VCpuCountRangeRequestProperty {\n    Max = 123,\n    Min = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nVCpuCountRangeRequestProperty vCpuCountRangeRequestProperty = VCpuCountRangeRequestProperty.builder()\n        .max(123)\n        .min(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nvCpuCountRangeRequestProperty := &vCpuCountRangeRequestProperty{\n\tmax: jsii.Number(123),\n\tmin: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst vCpuCountRangeRequestProperty: ec2.CfnSpotFleet.VCpuCountRangeRequestProperty = {\n  max: 123,\n  min: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleet.VCpuCountRangeRequestProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleet.VCpuCountRangeRequestProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vCpuCountRangeRequestProperty: ec2.CfnSpotFleet.VCpuCountRangeRequestProperty = {\n  max: 123,\n  min: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e1bb0796e2dd3dae2127628988d6472ab1db6bc61db05b07d450b96dd4faf7b8"
    },
    "0807a55dcd36770eeedbf4a8014fa0ab7f5ab2b8cdf19250a4e8e7f5820b8c4c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_spot_fleet_props = ec2.CfnSpotFleetProps(\n    spot_fleet_request_config_data=ec2.CfnSpotFleet.SpotFleetRequestConfigDataProperty(\n        iam_fleet_role=\"iamFleetRole\",\n        target_capacity=123,\n\n        # the properties below are optional\n        allocation_strategy=\"allocationStrategy\",\n        context=\"context\",\n        excess_capacity_termination_policy=\"excessCapacityTerminationPolicy\",\n        instance_interruption_behavior=\"instanceInterruptionBehavior\",\n        instance_pools_to_use_count=123,\n        launch_specifications=[ec2.CfnSpotFleet.SpotFleetLaunchSpecificationProperty(\n            image_id=\"imageId\",\n\n            # the properties below are optional\n            block_device_mappings=[ec2.CfnSpotFleet.BlockDeviceMappingProperty(\n                device_name=\"deviceName\",\n\n                # the properties below are optional\n                ebs=ec2.CfnSpotFleet.EbsBlockDeviceProperty(\n                    delete_on_termination=False,\n                    encrypted=False,\n                    iops=123,\n                    snapshot_id=\"snapshotId\",\n                    volume_size=123,\n                    volume_type=\"volumeType\"\n                ),\n                no_device=\"noDevice\",\n                virtual_name=\"virtualName\"\n            )],\n            ebs_optimized=False,\n            iam_instance_profile=ec2.CfnSpotFleet.IamInstanceProfileSpecificationProperty(\n                arn=\"arn\"\n            ),\n            instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n                accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_manufacturers=[\"acceleratorManufacturers\"],\n                accelerator_names=[\"acceleratorNames\"],\n                accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                accelerator_types=[\"acceleratorTypes\"],\n                bare_metal=\"bareMetal\",\n                baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                burstable_performance=\"burstablePerformance\",\n                cpu_manufacturers=[\"cpuManufacturers\"],\n                excluded_instance_types=[\"excludedInstanceTypes\"],\n                instance_generations=[\"instanceGenerations\"],\n                local_storage=\"localStorage\",\n                local_storage_types=[\"localStorageTypes\"],\n                memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                on_demand_max_price_percentage_over_lowest_price=123,\n                require_hibernate_support=False,\n                spot_max_price_percentage_over_lowest_price=123,\n                total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n                    max=123,\n                    min=123\n                ),\n                v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n                    max=123,\n                    min=123\n                )\n            ),\n            instance_type=\"instanceType\",\n            kernel_id=\"kernelId\",\n            key_name=\"keyName\",\n            monitoring=ec2.CfnSpotFleet.SpotFleetMonitoringProperty(\n                enabled=False\n            ),\n            network_interfaces=[ec2.CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty(\n                associate_public_ip_address=False,\n                delete_on_termination=False,\n                description=\"description\",\n                device_index=123,\n                groups=[\"groups\"],\n                ipv6_address_count=123,\n                ipv6_addresses=[ec2.CfnSpotFleet.InstanceIpv6AddressProperty(\n                    ipv6_address=\"ipv6Address\"\n                )],\n                network_interface_id=\"networkInterfaceId\",\n                private_ip_addresses=[ec2.CfnSpotFleet.PrivateIpAddressSpecificationProperty(\n                    private_ip_address=\"privateIpAddress\",\n\n                    # the properties below are optional\n                    primary=False\n                )],\n                secondary_private_ip_address_count=123,\n                subnet_id=\"subnetId\"\n            )],\n            placement=ec2.CfnSpotFleet.SpotPlacementProperty(\n                availability_zone=\"availabilityZone\",\n                group_name=\"groupName\",\n                tenancy=\"tenancy\"\n            ),\n            ramdisk_id=\"ramdiskId\",\n            security_groups=[ec2.CfnSpotFleet.GroupIdentifierProperty(\n                group_id=\"groupId\"\n            )],\n            spot_price=\"spotPrice\",\n            subnet_id=\"subnetId\",\n            tag_specifications=[ec2.CfnSpotFleet.SpotFleetTagSpecificationProperty(\n                resource_type=\"resourceType\",\n                tags=[CfnTag(\n                    key=\"key\",\n                    value=\"value\"\n                )]\n            )],\n            user_data=\"userData\",\n            weighted_capacity=123\n        )],\n        launch_template_configs=[ec2.CfnSpotFleet.LaunchTemplateConfigProperty(\n            launch_template_specification=ec2.CfnSpotFleet.FleetLaunchTemplateSpecificationProperty(\n                version=\"version\",\n\n                # the properties below are optional\n                launch_template_id=\"launchTemplateId\",\n                launch_template_name=\"launchTemplateName\"\n            ),\n            overrides=[ec2.CfnSpotFleet.LaunchTemplateOverridesProperty(\n                availability_zone=\"availabilityZone\",\n                instance_requirements=ec2.CfnSpotFleet.InstanceRequirementsRequestProperty(\n                    accelerator_count=ec2.CfnSpotFleet.AcceleratorCountRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    accelerator_manufacturers=[\"acceleratorManufacturers\"],\n                    accelerator_names=[\"acceleratorNames\"],\n                    accelerator_total_memory_mi_b=ec2.CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    accelerator_types=[\"acceleratorTypes\"],\n                    bare_metal=\"bareMetal\",\n                    baseline_ebs_bandwidth_mbps=ec2.CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    burstable_performance=\"burstablePerformance\",\n                    cpu_manufacturers=[\"cpuManufacturers\"],\n                    excluded_instance_types=[\"excludedInstanceTypes\"],\n                    instance_generations=[\"instanceGenerations\"],\n                    local_storage=\"localStorage\",\n                    local_storage_types=[\"localStorageTypes\"],\n                    memory_gi_bPer_vCpu=ec2.CfnSpotFleet.MemoryGiBPerVCpuRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    memory_mi_b=ec2.CfnSpotFleet.MemoryMiBRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    network_interface_count=ec2.CfnSpotFleet.NetworkInterfaceCountRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    on_demand_max_price_percentage_over_lowest_price=123,\n                    require_hibernate_support=False,\n                    spot_max_price_percentage_over_lowest_price=123,\n                    total_local_storage_gb=ec2.CfnSpotFleet.TotalLocalStorageGBRequestProperty(\n                        max=123,\n                        min=123\n                    ),\n                    v_cpu_count=ec2.CfnSpotFleet.VCpuCountRangeRequestProperty(\n                        max=123,\n                        min=123\n                    )\n                ),\n                instance_type=\"instanceType\",\n                priority=123,\n                spot_price=\"spotPrice\",\n                subnet_id=\"subnetId\",\n                weighted_capacity=123\n            )]\n        )],\n        load_balancers_config=ec2.CfnSpotFleet.LoadBalancersConfigProperty(\n            classic_load_balancers_config=ec2.CfnSpotFleet.ClassicLoadBalancersConfigProperty(\n                classic_load_balancers=[ec2.CfnSpotFleet.ClassicLoadBalancerProperty(\n                    name=\"name\"\n                )]\n            ),\n            target_groups_config=ec2.CfnSpotFleet.TargetGroupsConfigProperty(\n                target_groups=[ec2.CfnSpotFleet.TargetGroupProperty(\n                    arn=\"arn\"\n                )]\n            )\n        ),\n        on_demand_allocation_strategy=\"onDemandAllocationStrategy\",\n        on_demand_max_total_price=\"onDemandMaxTotalPrice\",\n        on_demand_target_capacity=123,\n        replace_unhealthy_instances=False,\n        spot_maintenance_strategies=ec2.CfnSpotFleet.SpotMaintenanceStrategiesProperty(\n            capacity_rebalance=ec2.CfnSpotFleet.SpotCapacityRebalanceProperty(\n                replacement_strategy=\"replacementStrategy\",\n                termination_delay=123\n            )\n        ),\n        spot_max_total_price=\"spotMaxTotalPrice\",\n        spot_price=\"spotPrice\",\n        target_capacity_unit_type=\"targetCapacityUnitType\",\n        terminate_instances_with_expiration=False,\n        type=\"type\",\n        valid_from=\"validFrom\",\n        valid_until=\"validUntil\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSpotFleetProps cfnSpotFleetProps = new CfnSpotFleetProps {\n    SpotFleetRequestConfigData = new SpotFleetRequestConfigDataProperty {\n        IamFleetRole = \"iamFleetRole\",\n        TargetCapacity = 123,\n\n        // the properties below are optional\n        AllocationStrategy = \"allocationStrategy\",\n        Context = \"context\",\n        ExcessCapacityTerminationPolicy = \"excessCapacityTerminationPolicy\",\n        InstanceInterruptionBehavior = \"instanceInterruptionBehavior\",\n        InstancePoolsToUseCount = 123,\n        LaunchSpecifications = new [] { new SpotFleetLaunchSpecificationProperty {\n            ImageId = \"imageId\",\n\n            // the properties below are optional\n            BlockDeviceMappings = new [] { new BlockDeviceMappingProperty {\n                DeviceName = \"deviceName\",\n\n                // the properties below are optional\n                Ebs = new EbsBlockDeviceProperty {\n                    DeleteOnTermination = false,\n                    Encrypted = false,\n                    Iops = 123,\n                    SnapshotId = \"snapshotId\",\n                    VolumeSize = 123,\n                    VolumeType = \"volumeType\"\n                },\n                NoDevice = \"noDevice\",\n                VirtualName = \"virtualName\"\n            } },\n            EbsOptimized = false,\n            IamInstanceProfile = new IamInstanceProfileSpecificationProperty {\n                Arn = \"arn\"\n            },\n            InstanceRequirements = new InstanceRequirementsRequestProperty {\n                AcceleratorCount = new AcceleratorCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n                AcceleratorNames = new [] { \"acceleratorNames\" },\n                AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                AcceleratorTypes = new [] { \"acceleratorTypes\" },\n                BareMetal = \"bareMetal\",\n                BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                BurstablePerformance = \"burstablePerformance\",\n                CpuManufacturers = new [] { \"cpuManufacturers\" },\n                ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n                InstanceGenerations = new [] { \"instanceGenerations\" },\n                LocalStorage = \"localStorage\",\n                LocalStorageTypes = new [] { \"localStorageTypes\" },\n                MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                MemoryMiB = new MemoryMiBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                OnDemandMaxPricePercentageOverLowestPrice = 123,\n                RequireHibernateSupport = false,\n                SpotMaxPricePercentageOverLowestPrice = 123,\n                TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                    Max = 123,\n                    Min = 123\n                },\n                VCpuCount = new VCpuCountRangeRequestProperty {\n                    Max = 123,\n                    Min = 123\n                }\n            },\n            InstanceType = \"instanceType\",\n            KernelId = \"kernelId\",\n            KeyName = \"keyName\",\n            Monitoring = new SpotFleetMonitoringProperty {\n                Enabled = false\n            },\n            NetworkInterfaces = new [] { new InstanceNetworkInterfaceSpecificationProperty {\n                AssociatePublicIpAddress = false,\n                DeleteOnTermination = false,\n                Description = \"description\",\n                DeviceIndex = 123,\n                Groups = new [] { \"groups\" },\n                Ipv6AddressCount = 123,\n                Ipv6Addresses = new [] { new InstanceIpv6AddressProperty {\n                    Ipv6Address = \"ipv6Address\"\n                } },\n                NetworkInterfaceId = \"networkInterfaceId\",\n                PrivateIpAddresses = new [] { new PrivateIpAddressSpecificationProperty {\n                    PrivateIpAddress = \"privateIpAddress\",\n\n                    // the properties below are optional\n                    Primary = false\n                } },\n                SecondaryPrivateIpAddressCount = 123,\n                SubnetId = \"subnetId\"\n            } },\n            Placement = new SpotPlacementProperty {\n                AvailabilityZone = \"availabilityZone\",\n                GroupName = \"groupName\",\n                Tenancy = \"tenancy\"\n            },\n            RamdiskId = \"ramdiskId\",\n            SecurityGroups = new [] { new GroupIdentifierProperty {\n                GroupId = \"groupId\"\n            } },\n            SpotPrice = \"spotPrice\",\n            SubnetId = \"subnetId\",\n            TagSpecifications = new [] { new SpotFleetTagSpecificationProperty {\n                ResourceType = \"resourceType\",\n                Tags = new [] { new CfnTag {\n                    Key = \"key\",\n                    Value = \"value\"\n                } }\n            } },\n            UserData = \"userData\",\n            WeightedCapacity = 123\n        } },\n        LaunchTemplateConfigs = new [] { new LaunchTemplateConfigProperty {\n            LaunchTemplateSpecification = new FleetLaunchTemplateSpecificationProperty {\n                Version = \"version\",\n\n                // the properties below are optional\n                LaunchTemplateId = \"launchTemplateId\",\n                LaunchTemplateName = \"launchTemplateName\"\n            },\n            Overrides = new [] { new LaunchTemplateOverridesProperty {\n                AvailabilityZone = \"availabilityZone\",\n                InstanceRequirements = new InstanceRequirementsRequestProperty {\n                    AcceleratorCount = new AcceleratorCountRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    AcceleratorManufacturers = new [] { \"acceleratorManufacturers\" },\n                    AcceleratorNames = new [] { \"acceleratorNames\" },\n                    AcceleratorTotalMemoryMiB = new AcceleratorTotalMemoryMiBRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    AcceleratorTypes = new [] { \"acceleratorTypes\" },\n                    BareMetal = \"bareMetal\",\n                    BaselineEbsBandwidthMbps = new BaselineEbsBandwidthMbpsRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    BurstablePerformance = \"burstablePerformance\",\n                    CpuManufacturers = new [] { \"cpuManufacturers\" },\n                    ExcludedInstanceTypes = new [] { \"excludedInstanceTypes\" },\n                    InstanceGenerations = new [] { \"instanceGenerations\" },\n                    LocalStorage = \"localStorage\",\n                    LocalStorageTypes = new [] { \"localStorageTypes\" },\n                    MemoryGiBPerVCpu = new MemoryGiBPerVCpuRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    MemoryMiB = new MemoryMiBRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    NetworkInterfaceCount = new NetworkInterfaceCountRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    OnDemandMaxPricePercentageOverLowestPrice = 123,\n                    RequireHibernateSupport = false,\n                    SpotMaxPricePercentageOverLowestPrice = 123,\n                    TotalLocalStorageGb = new TotalLocalStorageGBRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    },\n                    VCpuCount = new VCpuCountRangeRequestProperty {\n                        Max = 123,\n                        Min = 123\n                    }\n                },\n                InstanceType = \"instanceType\",\n                Priority = 123,\n                SpotPrice = \"spotPrice\",\n                SubnetId = \"subnetId\",\n                WeightedCapacity = 123\n            } }\n        } },\n        LoadBalancersConfig = new LoadBalancersConfigProperty {\n            ClassicLoadBalancersConfig = new ClassicLoadBalancersConfigProperty {\n                ClassicLoadBalancers = new [] { new ClassicLoadBalancerProperty {\n                    Name = \"name\"\n                } }\n            },\n            TargetGroupsConfig = new TargetGroupsConfigProperty {\n                TargetGroups = new [] { new TargetGroupProperty {\n                    Arn = \"arn\"\n                } }\n            }\n        },\n        OnDemandAllocationStrategy = \"onDemandAllocationStrategy\",\n        OnDemandMaxTotalPrice = \"onDemandMaxTotalPrice\",\n        OnDemandTargetCapacity = 123,\n        ReplaceUnhealthyInstances = false,\n        SpotMaintenanceStrategies = new SpotMaintenanceStrategiesProperty {\n            CapacityRebalance = new SpotCapacityRebalanceProperty {\n                ReplacementStrategy = \"replacementStrategy\",\n                TerminationDelay = 123\n            }\n        },\n        SpotMaxTotalPrice = \"spotMaxTotalPrice\",\n        SpotPrice = \"spotPrice\",\n        TargetCapacityUnitType = \"targetCapacityUnitType\",\n        TerminateInstancesWithExpiration = false,\n        Type = \"type\",\n        ValidFrom = \"validFrom\",\n        ValidUntil = \"validUntil\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSpotFleetProps cfnSpotFleetProps = CfnSpotFleetProps.builder()\n        .spotFleetRequestConfigData(SpotFleetRequestConfigDataProperty.builder()\n                .iamFleetRole(\"iamFleetRole\")\n                .targetCapacity(123)\n\n                // the properties below are optional\n                .allocationStrategy(\"allocationStrategy\")\n                .context(\"context\")\n                .excessCapacityTerminationPolicy(\"excessCapacityTerminationPolicy\")\n                .instanceInterruptionBehavior(\"instanceInterruptionBehavior\")\n                .instancePoolsToUseCount(123)\n                .launchSpecifications(List.of(SpotFleetLaunchSpecificationProperty.builder()\n                        .imageId(\"imageId\")\n\n                        // the properties below are optional\n                        .blockDeviceMappings(List.of(BlockDeviceMappingProperty.builder()\n                                .deviceName(\"deviceName\")\n\n                                // the properties below are optional\n                                .ebs(EbsBlockDeviceProperty.builder()\n                                        .deleteOnTermination(false)\n                                        .encrypted(false)\n                                        .iops(123)\n                                        .snapshotId(\"snapshotId\")\n                                        .volumeSize(123)\n                                        .volumeType(\"volumeType\")\n                                        .build())\n                                .noDevice(\"noDevice\")\n                                .virtualName(\"virtualName\")\n                                .build()))\n                        .ebsOptimized(false)\n                        .iamInstanceProfile(IamInstanceProfileSpecificationProperty.builder()\n                                .arn(\"arn\")\n                                .build())\n                        .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                                .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                                .acceleratorNames(List.of(\"acceleratorNames\"))\n                                .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                                .bareMetal(\"bareMetal\")\n                                .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .burstablePerformance(\"burstablePerformance\")\n                                .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                                .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                                .instanceGenerations(List.of(\"instanceGenerations\"))\n                                .localStorage(\"localStorage\")\n                                .localStorageTypes(List.of(\"localStorageTypes\"))\n                                .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .memoryMiB(MemoryMiBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .onDemandMaxPricePercentageOverLowestPrice(123)\n                                .requireHibernateSupport(false)\n                                .spotMaxPricePercentageOverLowestPrice(123)\n                                .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                        .max(123)\n                                        .min(123)\n                                        .build())\n                                .build())\n                        .instanceType(\"instanceType\")\n                        .kernelId(\"kernelId\")\n                        .keyName(\"keyName\")\n                        .monitoring(SpotFleetMonitoringProperty.builder()\n                                .enabled(false)\n                                .build())\n                        .networkInterfaces(List.of(InstanceNetworkInterfaceSpecificationProperty.builder()\n                                .associatePublicIpAddress(false)\n                                .deleteOnTermination(false)\n                                .description(\"description\")\n                                .deviceIndex(123)\n                                .groups(List.of(\"groups\"))\n                                .ipv6AddressCount(123)\n                                .ipv6Addresses(List.of(InstanceIpv6AddressProperty.builder()\n                                        .ipv6Address(\"ipv6Address\")\n                                        .build()))\n                                .networkInterfaceId(\"networkInterfaceId\")\n                                .privateIpAddresses(List.of(PrivateIpAddressSpecificationProperty.builder()\n                                        .privateIpAddress(\"privateIpAddress\")\n\n                                        // the properties below are optional\n                                        .primary(false)\n                                        .build()))\n                                .secondaryPrivateIpAddressCount(123)\n                                .subnetId(\"subnetId\")\n                                .build()))\n                        .placement(SpotPlacementProperty.builder()\n                                .availabilityZone(\"availabilityZone\")\n                                .groupName(\"groupName\")\n                                .tenancy(\"tenancy\")\n                                .build())\n                        .ramdiskId(\"ramdiskId\")\n                        .securityGroups(List.of(GroupIdentifierProperty.builder()\n                                .groupId(\"groupId\")\n                                .build()))\n                        .spotPrice(\"spotPrice\")\n                        .subnetId(\"subnetId\")\n                        .tagSpecifications(List.of(SpotFleetTagSpecificationProperty.builder()\n                                .resourceType(\"resourceType\")\n                                .tags(List.of(CfnTag.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n                                        .build()))\n                                .build()))\n                        .userData(\"userData\")\n                        .weightedCapacity(123)\n                        .build()))\n                .launchTemplateConfigs(List.of(LaunchTemplateConfigProperty.builder()\n                        .launchTemplateSpecification(FleetLaunchTemplateSpecificationProperty.builder()\n                                .version(\"version\")\n\n                                // the properties below are optional\n                                .launchTemplateId(\"launchTemplateId\")\n                                .launchTemplateName(\"launchTemplateName\")\n                                .build())\n                        .overrides(List.of(LaunchTemplateOverridesProperty.builder()\n                                .availabilityZone(\"availabilityZone\")\n                                .instanceRequirements(InstanceRequirementsRequestProperty.builder()\n                                        .acceleratorCount(AcceleratorCountRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .acceleratorManufacturers(List.of(\"acceleratorManufacturers\"))\n                                        .acceleratorNames(List.of(\"acceleratorNames\"))\n                                        .acceleratorTotalMemoryMiB(AcceleratorTotalMemoryMiBRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .acceleratorTypes(List.of(\"acceleratorTypes\"))\n                                        .bareMetal(\"bareMetal\")\n                                        .baselineEbsBandwidthMbps(BaselineEbsBandwidthMbpsRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .burstablePerformance(\"burstablePerformance\")\n                                        .cpuManufacturers(List.of(\"cpuManufacturers\"))\n                                        .excludedInstanceTypes(List.of(\"excludedInstanceTypes\"))\n                                        .instanceGenerations(List.of(\"instanceGenerations\"))\n                                        .localStorage(\"localStorage\")\n                                        .localStorageTypes(List.of(\"localStorageTypes\"))\n                                        .memoryGiBPerVCpu(MemoryGiBPerVCpuRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .memoryMiB(MemoryMiBRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .networkInterfaceCount(NetworkInterfaceCountRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .onDemandMaxPricePercentageOverLowestPrice(123)\n                                        .requireHibernateSupport(false)\n                                        .spotMaxPricePercentageOverLowestPrice(123)\n                                        .totalLocalStorageGb(TotalLocalStorageGBRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .vCpuCount(VCpuCountRangeRequestProperty.builder()\n                                                .max(123)\n                                                .min(123)\n                                                .build())\n                                        .build())\n                                .instanceType(\"instanceType\")\n                                .priority(123)\n                                .spotPrice(\"spotPrice\")\n                                .subnetId(\"subnetId\")\n                                .weightedCapacity(123)\n                                .build()))\n                        .build()))\n                .loadBalancersConfig(LoadBalancersConfigProperty.builder()\n                        .classicLoadBalancersConfig(ClassicLoadBalancersConfigProperty.builder()\n                                .classicLoadBalancers(List.of(ClassicLoadBalancerProperty.builder()\n                                        .name(\"name\")\n                                        .build()))\n                                .build())\n                        .targetGroupsConfig(TargetGroupsConfigProperty.builder()\n                                .targetGroups(List.of(TargetGroupProperty.builder()\n                                        .arn(\"arn\")\n                                        .build()))\n                                .build())\n                        .build())\n                .onDemandAllocationStrategy(\"onDemandAllocationStrategy\")\n                .onDemandMaxTotalPrice(\"onDemandMaxTotalPrice\")\n                .onDemandTargetCapacity(123)\n                .replaceUnhealthyInstances(false)\n                .spotMaintenanceStrategies(SpotMaintenanceStrategiesProperty.builder()\n                        .capacityRebalance(SpotCapacityRebalanceProperty.builder()\n                                .replacementStrategy(\"replacementStrategy\")\n                                .terminationDelay(123)\n                                .build())\n                        .build())\n                .spotMaxTotalPrice(\"spotMaxTotalPrice\")\n                .spotPrice(\"spotPrice\")\n                .targetCapacityUnitType(\"targetCapacityUnitType\")\n                .terminateInstancesWithExpiration(false)\n                .type(\"type\")\n                .validFrom(\"validFrom\")\n                .validUntil(\"validUntil\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSpotFleetProps := &cfnSpotFleetProps{\n\tspotFleetRequestConfigData: &spotFleetRequestConfigDataProperty{\n\t\tiamFleetRole: jsii.String(\"iamFleetRole\"),\n\t\ttargetCapacity: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tallocationStrategy: jsii.String(\"allocationStrategy\"),\n\t\tcontext: jsii.String(\"context\"),\n\t\texcessCapacityTerminationPolicy: jsii.String(\"excessCapacityTerminationPolicy\"),\n\t\tinstanceInterruptionBehavior: jsii.String(\"instanceInterruptionBehavior\"),\n\t\tinstancePoolsToUseCount: jsii.Number(123),\n\t\tlaunchSpecifications: []interface{}{\n\t\t\t&spotFleetLaunchSpecificationProperty{\n\t\t\t\timageId: jsii.String(\"imageId\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tblockDeviceMappings: []interface{}{\n\t\t\t\t\t&blockDeviceMappingProperty{\n\t\t\t\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tebs: &ebsBlockDeviceProperty{\n\t\t\t\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\t\t\t\tencrypted: jsii.Boolean(false),\n\t\t\t\t\t\t\tiops: jsii.Number(123),\n\t\t\t\t\t\t\tsnapshotId: jsii.String(\"snapshotId\"),\n\t\t\t\t\t\t\tvolumeSize: jsii.Number(123),\n\t\t\t\t\t\t\tvolumeType: jsii.String(\"volumeType\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnoDevice: jsii.String(\"noDevice\"),\n\t\t\t\t\t\tvirtualName: jsii.String(\"virtualName\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tebsOptimized: jsii.Boolean(false),\n\t\t\t\tiamInstanceProfile: &iamInstanceProfileSpecificationProperty{\n\t\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t\t},\n\t\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t\t},\n\t\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t\t},\n\t\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t\t},\n\t\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t\t},\n\t\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t\t},\n\t\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t\t},\n\t\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t\t},\n\t\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\t\tkernelId: jsii.String(\"kernelId\"),\n\t\t\t\tkeyName: jsii.String(\"keyName\"),\n\t\t\t\tmonitoring: &spotFleetMonitoringProperty{\n\t\t\t\t\tenabled: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t\tnetworkInterfaces: []interface{}{\n\t\t\t\t\t&instanceNetworkInterfaceSpecificationProperty{\n\t\t\t\t\t\tassociatePublicIpAddress: jsii.Boolean(false),\n\t\t\t\t\t\tdeleteOnTermination: jsii.Boolean(false),\n\t\t\t\t\t\tdescription: jsii.String(\"description\"),\n\t\t\t\t\t\tdeviceIndex: jsii.Number(123),\n\t\t\t\t\t\tgroups: []*string{\n\t\t\t\t\t\t\tjsii.String(\"groups\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tipv6AddressCount: jsii.Number(123),\n\t\t\t\t\t\tipv6Addresses: []interface{}{\n\t\t\t\t\t\t\t&instanceIpv6AddressProperty{\n\t\t\t\t\t\t\t\tipv6Address: jsii.String(\"ipv6Address\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\t\t\t\t\t\tprivateIpAddresses: []interface{}{\n\t\t\t\t\t\t\t&privateIpAddressSpecificationProperty{\n\t\t\t\t\t\t\t\tprivateIpAddress: jsii.String(\"privateIpAddress\"),\n\n\t\t\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\t\t\tprimary: jsii.Boolean(false),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsecondaryPrivateIpAddressCount: jsii.Number(123),\n\t\t\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplacement: &spotPlacementProperty{\n\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\tgroupName: jsii.String(\"groupName\"),\n\t\t\t\t\ttenancy: jsii.String(\"tenancy\"),\n\t\t\t\t},\n\t\t\t\tramdiskId: jsii.String(\"ramdiskId\"),\n\t\t\t\tsecurityGroups: []interface{}{\n\t\t\t\t\t&groupIdentifierProperty{\n\t\t\t\t\t\tgroupId: jsii.String(\"groupId\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\ttagSpecifications: []interface{}{\n\t\t\t\t\t&spotFleetTagSpecificationProperty{\n\t\t\t\t\t\tresourceType: jsii.String(\"resourceType\"),\n\t\t\t\t\t\ttags: []cfnTag{\n\t\t\t\t\t\t\t&cfnTag{\n\t\t\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tuserData: jsii.String(\"userData\"),\n\t\t\t\tweightedCapacity: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tlaunchTemplateConfigs: []interface{}{\n\t\t\t&launchTemplateConfigProperty{\n\t\t\t\tlaunchTemplateSpecification: &fleetLaunchTemplateSpecificationProperty{\n\t\t\t\t\tversion: jsii.String(\"version\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\t\t\t\t\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\t\t\t\t},\n\t\t\t\toverrides: []interface{}{\n\t\t\t\t\t&launchTemplateOverridesProperty{\n\t\t\t\t\t\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\t\t\t\t\t\tinstanceRequirements: &instanceRequirementsRequestProperty{\n\t\t\t\t\t\t\tacceleratorCount: &acceleratorCountRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tacceleratorManufacturers: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"acceleratorManufacturers\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tacceleratorNames: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"acceleratorNames\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tacceleratorTotalMemoryMiB: &acceleratorTotalMemoryMiBRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tacceleratorTypes: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"acceleratorTypes\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbareMetal: jsii.String(\"bareMetal\"),\n\t\t\t\t\t\t\tbaselineEbsBandwidthMbps: &baselineEbsBandwidthMbpsRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tburstablePerformance: jsii.String(\"burstablePerformance\"),\n\t\t\t\t\t\t\tcpuManufacturers: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"cpuManufacturers\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\texcludedInstanceTypes: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"excludedInstanceTypes\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinstanceGenerations: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"instanceGenerations\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlocalStorage: jsii.String(\"localStorage\"),\n\t\t\t\t\t\t\tlocalStorageTypes: []*string{\n\t\t\t\t\t\t\t\tjsii.String(\"localStorageTypes\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmemoryGiBPerVCpu: &memoryGiBPerVCpuRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmemoryMiB: &memoryMiBRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnetworkInterfaceCount: &networkInterfaceCountRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonDemandMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\t\trequireHibernateSupport: jsii.Boolean(false),\n\t\t\t\t\t\t\tspotMaxPricePercentageOverLowestPrice: jsii.Number(123),\n\t\t\t\t\t\t\ttotalLocalStorageGb: &totalLocalStorageGBRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvCpuCount: &vCpuCountRangeRequestProperty{\n\t\t\t\t\t\t\t\tmax: jsii.Number(123),\n\t\t\t\t\t\t\t\tmin: jsii.Number(123),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\t\t\t\t\tpriority: jsii.Number(123),\n\t\t\t\t\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\t\t\t\t\tsubnetId: jsii.String(\"subnetId\"),\n\t\t\t\t\t\tweightedCapacity: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tloadBalancersConfig: &loadBalancersConfigProperty{\n\t\t\tclassicLoadBalancersConfig: &classicLoadBalancersConfigProperty{\n\t\t\t\tclassicLoadBalancers: []interface{}{\n\t\t\t\t\t&classicLoadBalancerProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttargetGroupsConfig: &targetGroupsConfigProperty{\n\t\t\t\ttargetGroups: []interface{}{\n\t\t\t\t\t&targetGroupProperty{\n\t\t\t\t\t\tarn: jsii.String(\"arn\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tonDemandAllocationStrategy: jsii.String(\"onDemandAllocationStrategy\"),\n\t\tonDemandMaxTotalPrice: jsii.String(\"onDemandMaxTotalPrice\"),\n\t\tonDemandTargetCapacity: jsii.Number(123),\n\t\treplaceUnhealthyInstances: jsii.Boolean(false),\n\t\tspotMaintenanceStrategies: &spotMaintenanceStrategiesProperty{\n\t\t\tcapacityRebalance: &spotCapacityRebalanceProperty{\n\t\t\t\treplacementStrategy: jsii.String(\"replacementStrategy\"),\n\t\t\t\tterminationDelay: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tspotMaxTotalPrice: jsii.String(\"spotMaxTotalPrice\"),\n\t\tspotPrice: jsii.String(\"spotPrice\"),\n\t\ttargetCapacityUnitType: jsii.String(\"targetCapacityUnitType\"),\n\t\tterminateInstancesWithExpiration: jsii.Boolean(false),\n\t\ttype: jsii.String(\"type\"),\n\t\tvalidFrom: jsii.String(\"validFrom\"),\n\t\tvalidUntil: jsii.String(\"validUntil\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSpotFleetProps: ec2.CfnSpotFleetProps = {\n  spotFleetRequestConfigData: {\n    iamFleetRole: 'iamFleetRole',\n    targetCapacity: 123,\n\n    // the properties below are optional\n    allocationStrategy: 'allocationStrategy',\n    context: 'context',\n    excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    instancePoolsToUseCount: 123,\n    launchSpecifications: [{\n      imageId: 'imageId',\n\n      // the properties below are optional\n      blockDeviceMappings: [{\n        deviceName: 'deviceName',\n\n        // the properties below are optional\n        ebs: {\n          deleteOnTermination: false,\n          encrypted: false,\n          iops: 123,\n          snapshotId: 'snapshotId',\n          volumeSize: 123,\n          volumeType: 'volumeType',\n        },\n        noDevice: 'noDevice',\n        virtualName: 'virtualName',\n      }],\n      ebsOptimized: false,\n      iamInstanceProfile: {\n        arn: 'arn',\n      },\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      kernelId: 'kernelId',\n      keyName: 'keyName',\n      monitoring: {\n        enabled: false,\n      },\n      networkInterfaces: [{\n        associatePublicIpAddress: false,\n        deleteOnTermination: false,\n        description: 'description',\n        deviceIndex: 123,\n        groups: ['groups'],\n        ipv6AddressCount: 123,\n        ipv6Addresses: [{\n          ipv6Address: 'ipv6Address',\n        }],\n        networkInterfaceId: 'networkInterfaceId',\n        privateIpAddresses: [{\n          privateIpAddress: 'privateIpAddress',\n\n          // the properties below are optional\n          primary: false,\n        }],\n        secondaryPrivateIpAddressCount: 123,\n        subnetId: 'subnetId',\n      }],\n      placement: {\n        availabilityZone: 'availabilityZone',\n        groupName: 'groupName',\n        tenancy: 'tenancy',\n      },\n      ramdiskId: 'ramdiskId',\n      securityGroups: [{\n        groupId: 'groupId',\n      }],\n      spotPrice: 'spotPrice',\n      subnetId: 'subnetId',\n      tagSpecifications: [{\n        resourceType: 'resourceType',\n        tags: [{\n          key: 'key',\n          value: 'value',\n        }],\n      }],\n      userData: 'userData',\n      weightedCapacity: 123,\n    }],\n    launchTemplateConfigs: [{\n      launchTemplateSpecification: {\n        version: 'version',\n\n        // the properties below are optional\n        launchTemplateId: 'launchTemplateId',\n        launchTemplateName: 'launchTemplateName',\n      },\n      overrides: [{\n        availabilityZone: 'availabilityZone',\n        instanceRequirements: {\n          acceleratorCount: {\n            max: 123,\n            min: 123,\n          },\n          acceleratorManufacturers: ['acceleratorManufacturers'],\n          acceleratorNames: ['acceleratorNames'],\n          acceleratorTotalMemoryMiB: {\n            max: 123,\n            min: 123,\n          },\n          acceleratorTypes: ['acceleratorTypes'],\n          bareMetal: 'bareMetal',\n          baselineEbsBandwidthMbps: {\n            max: 123,\n            min: 123,\n          },\n          burstablePerformance: 'burstablePerformance',\n          cpuManufacturers: ['cpuManufacturers'],\n          excludedInstanceTypes: ['excludedInstanceTypes'],\n          instanceGenerations: ['instanceGenerations'],\n          localStorage: 'localStorage',\n          localStorageTypes: ['localStorageTypes'],\n          memoryGiBPerVCpu: {\n            max: 123,\n            min: 123,\n          },\n          memoryMiB: {\n            max: 123,\n            min: 123,\n          },\n          networkInterfaceCount: {\n            max: 123,\n            min: 123,\n          },\n          onDemandMaxPricePercentageOverLowestPrice: 123,\n          requireHibernateSupport: false,\n          spotMaxPricePercentageOverLowestPrice: 123,\n          totalLocalStorageGb: {\n            max: 123,\n            min: 123,\n          },\n          vCpuCount: {\n            max: 123,\n            min: 123,\n          },\n        },\n        instanceType: 'instanceType',\n        priority: 123,\n        spotPrice: 'spotPrice',\n        subnetId: 'subnetId',\n        weightedCapacity: 123,\n      }],\n    }],\n    loadBalancersConfig: {\n      classicLoadBalancersConfig: {\n        classicLoadBalancers: [{\n          name: 'name',\n        }],\n      },\n      targetGroupsConfig: {\n        targetGroups: [{\n          arn: 'arn',\n        }],\n      },\n    },\n    onDemandAllocationStrategy: 'onDemandAllocationStrategy',\n    onDemandMaxTotalPrice: 'onDemandMaxTotalPrice',\n    onDemandTargetCapacity: 123,\n    replaceUnhealthyInstances: false,\n    spotMaintenanceStrategies: {\n      capacityRebalance: {\n        replacementStrategy: 'replacementStrategy',\n        terminationDelay: 123,\n      },\n    },\n    spotMaxTotalPrice: 'spotMaxTotalPrice',\n    spotPrice: 'spotPrice',\n    targetCapacityUnitType: 'targetCapacityUnitType',\n    terminateInstancesWithExpiration: false,\n    type: 'type',\n    validFrom: 'validFrom',\n    validUntil: 'validUntil',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSpotFleetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSpotFleetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSpotFleetProps: ec2.CfnSpotFleetProps = {\n  spotFleetRequestConfigData: {\n    iamFleetRole: 'iamFleetRole',\n    targetCapacity: 123,\n\n    // the properties below are optional\n    allocationStrategy: 'allocationStrategy',\n    context: 'context',\n    excessCapacityTerminationPolicy: 'excessCapacityTerminationPolicy',\n    instanceInterruptionBehavior: 'instanceInterruptionBehavior',\n    instancePoolsToUseCount: 123,\n    launchSpecifications: [{\n      imageId: 'imageId',\n\n      // the properties below are optional\n      blockDeviceMappings: [{\n        deviceName: 'deviceName',\n\n        // the properties below are optional\n        ebs: {\n          deleteOnTermination: false,\n          encrypted: false,\n          iops: 123,\n          snapshotId: 'snapshotId',\n          volumeSize: 123,\n          volumeType: 'volumeType',\n        },\n        noDevice: 'noDevice',\n        virtualName: 'virtualName',\n      }],\n      ebsOptimized: false,\n      iamInstanceProfile: {\n        arn: 'arn',\n      },\n      instanceRequirements: {\n        acceleratorCount: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorManufacturers: ['acceleratorManufacturers'],\n        acceleratorNames: ['acceleratorNames'],\n        acceleratorTotalMemoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        acceleratorTypes: ['acceleratorTypes'],\n        bareMetal: 'bareMetal',\n        baselineEbsBandwidthMbps: {\n          max: 123,\n          min: 123,\n        },\n        burstablePerformance: 'burstablePerformance',\n        cpuManufacturers: ['cpuManufacturers'],\n        excludedInstanceTypes: ['excludedInstanceTypes'],\n        instanceGenerations: ['instanceGenerations'],\n        localStorage: 'localStorage',\n        localStorageTypes: ['localStorageTypes'],\n        memoryGiBPerVCpu: {\n          max: 123,\n          min: 123,\n        },\n        memoryMiB: {\n          max: 123,\n          min: 123,\n        },\n        networkInterfaceCount: {\n          max: 123,\n          min: 123,\n        },\n        onDemandMaxPricePercentageOverLowestPrice: 123,\n        requireHibernateSupport: false,\n        spotMaxPricePercentageOverLowestPrice: 123,\n        totalLocalStorageGb: {\n          max: 123,\n          min: 123,\n        },\n        vCpuCount: {\n          max: 123,\n          min: 123,\n        },\n      },\n      instanceType: 'instanceType',\n      kernelId: 'kernelId',\n      keyName: 'keyName',\n      monitoring: {\n        enabled: false,\n      },\n      networkInterfaces: [{\n        associatePublicIpAddress: false,\n        deleteOnTermination: false,\n        description: 'description',\n        deviceIndex: 123,\n        groups: ['groups'],\n        ipv6AddressCount: 123,\n        ipv6Addresses: [{\n          ipv6Address: 'ipv6Address',\n        }],\n        networkInterfaceId: 'networkInterfaceId',\n        privateIpAddresses: [{\n          privateIpAddress: 'privateIpAddress',\n\n          // the properties below are optional\n          primary: false,\n        }],\n        secondaryPrivateIpAddressCount: 123,\n        subnetId: 'subnetId',\n      }],\n      placement: {\n        availabilityZone: 'availabilityZone',\n        groupName: 'groupName',\n        tenancy: 'tenancy',\n      },\n      ramdiskId: 'ramdiskId',\n      securityGroups: [{\n        groupId: 'groupId',\n      }],\n      spotPrice: 'spotPrice',\n      subnetId: 'subnetId',\n      tagSpecifications: [{\n        resourceType: 'resourceType',\n        tags: [{\n          key: 'key',\n          value: 'value',\n        }],\n      }],\n      userData: 'userData',\n      weightedCapacity: 123,\n    }],\n    launchTemplateConfigs: [{\n      launchTemplateSpecification: {\n        version: 'version',\n\n        // the properties below are optional\n        launchTemplateId: 'launchTemplateId',\n        launchTemplateName: 'launchTemplateName',\n      },\n      overrides: [{\n        availabilityZone: 'availabilityZone',\n        instanceRequirements: {\n          acceleratorCount: {\n            max: 123,\n            min: 123,\n          },\n          acceleratorManufacturers: ['acceleratorManufacturers'],\n          acceleratorNames: ['acceleratorNames'],\n          acceleratorTotalMemoryMiB: {\n            max: 123,\n            min: 123,\n          },\n          acceleratorTypes: ['acceleratorTypes'],\n          bareMetal: 'bareMetal',\n          baselineEbsBandwidthMbps: {\n            max: 123,\n            min: 123,\n          },\n          burstablePerformance: 'burstablePerformance',\n          cpuManufacturers: ['cpuManufacturers'],\n          excludedInstanceTypes: ['excludedInstanceTypes'],\n          instanceGenerations: ['instanceGenerations'],\n          localStorage: 'localStorage',\n          localStorageTypes: ['localStorageTypes'],\n          memoryGiBPerVCpu: {\n            max: 123,\n            min: 123,\n          },\n          memoryMiB: {\n            max: 123,\n            min: 123,\n          },\n          networkInterfaceCount: {\n            max: 123,\n            min: 123,\n          },\n          onDemandMaxPricePercentageOverLowestPrice: 123,\n          requireHibernateSupport: false,\n          spotMaxPricePercentageOverLowestPrice: 123,\n          totalLocalStorageGb: {\n            max: 123,\n            min: 123,\n          },\n          vCpuCount: {\n            max: 123,\n            min: 123,\n          },\n        },\n        instanceType: 'instanceType',\n        priority: 123,\n        spotPrice: 'spotPrice',\n        subnetId: 'subnetId',\n        weightedCapacity: 123,\n      }],\n    }],\n    loadBalancersConfig: {\n      classicLoadBalancersConfig: {\n        classicLoadBalancers: [{\n          name: 'name',\n        }],\n      },\n      targetGroupsConfig: {\n        targetGroups: [{\n          arn: 'arn',\n        }],\n      },\n    },\n    onDemandAllocationStrategy: 'onDemandAllocationStrategy',\n    onDemandMaxTotalPrice: 'onDemandMaxTotalPrice',\n    onDemandTargetCapacity: 123,\n    replaceUnhealthyInstances: false,\n    spotMaintenanceStrategies: {\n      capacityRebalance: {\n        replacementStrategy: 'replacementStrategy',\n        terminationDelay: 123,\n      },\n    },\n    spotMaxTotalPrice: 'spotMaxTotalPrice',\n    spotPrice: 'spotPrice',\n    targetCapacityUnitType: 'targetCapacityUnitType',\n    terminateInstancesWithExpiration: false,\n    type: 'type',\n    validFrom: 'validFrom',\n    validUntil: 'validUntil',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 48,
        "10": 71,
        "75": 174,
        "91": 11,
        "153": 1,
        "169": 1,
        "192": 27,
        "193": 42,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 170,
        "290": 1
      },
      "fqnsFingerprint": "0d31847b480d49a8446a5748465e2c8f82c3cb4a106ea1e9b1c16c53b9c99eb1"
    },
    "17397691277b42a9afa463d69249edeb1a3b4310cf14367bfe487ad3e9d64f7c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# private_dns_name_options_on_launch: Any\n\ncfn_subnet = ec2.CfnSubnet(self, \"MyCfnSubnet\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    assign_ipv6_address_on_creation=False,\n    availability_zone=\"availabilityZone\",\n    availability_zone_id=\"availabilityZoneId\",\n    cidr_block=\"cidrBlock\",\n    enable_dns64=False,\n    ipv6_cidr_block=\"ipv6CidrBlock\",\n    ipv6_native=False,\n    map_public_ip_on_launch=False,\n    outpost_arn=\"outpostArn\",\n    private_dns_name_options_on_launch=private_dns_name_options_on_launch,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar privateDnsNameOptionsOnLaunch;\n\nCfnSubnet cfnSubnet = new CfnSubnet(this, \"MyCfnSubnet\", new CfnSubnetProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    AssignIpv6AddressOnCreation = false,\n    AvailabilityZone = \"availabilityZone\",\n    AvailabilityZoneId = \"availabilityZoneId\",\n    CidrBlock = \"cidrBlock\",\n    EnableDns64 = false,\n    Ipv6CidrBlock = \"ipv6CidrBlock\",\n    Ipv6Native = false,\n    MapPublicIpOnLaunch = false,\n    OutpostArn = \"outpostArn\",\n    PrivateDnsNameOptionsOnLaunch = privateDnsNameOptionsOnLaunch,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject privateDnsNameOptionsOnLaunch;\n\nCfnSubnet cfnSubnet = CfnSubnet.Builder.create(this, \"MyCfnSubnet\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .assignIpv6AddressOnCreation(false)\n        .availabilityZone(\"availabilityZone\")\n        .availabilityZoneId(\"availabilityZoneId\")\n        .cidrBlock(\"cidrBlock\")\n        .enableDns64(false)\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .ipv6Native(false)\n        .mapPublicIpOnLaunch(false)\n        .outpostArn(\"outpostArn\")\n        .privateDnsNameOptionsOnLaunch(privateDnsNameOptionsOnLaunch)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar privateDnsNameOptionsOnLaunch interface{}\ncfnSubnet := ec2.NewCfnSubnet(this, jsii.String(\"MyCfnSubnet\"), &cfnSubnetProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tassignIpv6AddressOnCreation: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tavailabilityZoneId: jsii.String(\"availabilityZoneId\"),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tenableDns64: jsii.Boolean(false),\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n\tipv6Native: jsii.Boolean(false),\n\tmapPublicIpOnLaunch: jsii.Boolean(false),\n\toutpostArn: jsii.String(\"outpostArn\"),\n\tprivateDnsNameOptionsOnLaunch: privateDnsNameOptionsOnLaunch,\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const privateDnsNameOptionsOnLaunch: any;\nconst cfnSubnet = new ec2.CfnSubnet(this, 'MyCfnSubnet', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  assignIpv6AddressOnCreation: false,\n  availabilityZone: 'availabilityZone',\n  availabilityZoneId: 'availabilityZoneId',\n  cidrBlock: 'cidrBlock',\n  enableDns64: false,\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  ipv6Native: false,\n  mapPublicIpOnLaunch: false,\n  outpostArn: 'outpostArn',\n  privateDnsNameOptionsOnLaunch: privateDnsNameOptionsOnLaunch,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSubnet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSubnet",
        "@aws-cdk/aws-ec2.CfnSubnetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const privateDnsNameOptionsOnLaunch: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSubnet = new ec2.CfnSubnet(this, 'MyCfnSubnet', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  assignIpv6AddressOnCreation: false,\n  availabilityZone: 'availabilityZone',\n  availabilityZoneId: 'availabilityZoneId',\n  cidrBlock: 'cidrBlock',\n  enableDns64: false,\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  ipv6Native: false,\n  mapPublicIpOnLaunch: false,\n  outpostArn: 'outpostArn',\n  privateDnsNameOptionsOnLaunch: privateDnsNameOptionsOnLaunch,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 20,
        "91": 4,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "a6881fa3c7ec42b88c013906b22027cb09bfa096e69eb73d508f1bfa689ac991"
    },
    "197cc246dbd2731a26b49cd5419f72e7fd7edacc2959de985545f1ca0ec6a2c6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_subnet_cidr_block = ec2.CfnSubnetCidrBlock(self, \"MyCfnSubnetCidrBlock\",\n    ipv6_cidr_block=\"ipv6CidrBlock\",\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSubnetCidrBlock cfnSubnetCidrBlock = new CfnSubnetCidrBlock(this, \"MyCfnSubnetCidrBlock\", new CfnSubnetCidrBlockProps {\n    Ipv6CidrBlock = \"ipv6CidrBlock\",\n    SubnetId = \"subnetId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSubnetCidrBlock cfnSubnetCidrBlock = CfnSubnetCidrBlock.Builder.create(this, \"MyCfnSubnetCidrBlock\")\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSubnetCidrBlock := ec2.NewCfnSubnetCidrBlock(this, jsii.String(\"MyCfnSubnetCidrBlock\"), &cfnSubnetCidrBlockProps{\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSubnetCidrBlock = new ec2.CfnSubnetCidrBlock(this, 'MyCfnSubnetCidrBlock', {\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  subnetId: 'subnetId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSubnetCidrBlock"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSubnetCidrBlock",
        "@aws-cdk/aws-ec2.CfnSubnetCidrBlockProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSubnetCidrBlock = new ec2.CfnSubnetCidrBlock(this, 'MyCfnSubnetCidrBlock', {\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  subnetId: 'subnetId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "cf6dd0fb67ddd5438ba40d90c9f0f64b131c888b03fcb2677330c7f0d2e55699"
    },
    "e3bfc2fd993a3e27557f7ec76516faa1b930f1b3b56a8c79ac0249774a27d3ea": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_subnet_cidr_block_props = ec2.CfnSubnetCidrBlockProps(\n    ipv6_cidr_block=\"ipv6CidrBlock\",\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSubnetCidrBlockProps cfnSubnetCidrBlockProps = new CfnSubnetCidrBlockProps {\n    Ipv6CidrBlock = \"ipv6CidrBlock\",\n    SubnetId = \"subnetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSubnetCidrBlockProps cfnSubnetCidrBlockProps = CfnSubnetCidrBlockProps.builder()\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSubnetCidrBlockProps := &cfnSubnetCidrBlockProps{\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSubnetCidrBlockProps: ec2.CfnSubnetCidrBlockProps = {\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  subnetId: 'subnetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSubnetCidrBlockProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSubnetCidrBlockProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSubnetCidrBlockProps: ec2.CfnSubnetCidrBlockProps = {\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  subnetId: 'subnetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6a458179dfe863deaf71a7b785e0582caef3259a0eb868af6e71b465c35568c3"
    },
    "e460645111deabd636a83085183edea2ae9b44c1fd7ca1eb64bd9a35b6e5cdf2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_subnet_network_acl_association = ec2.CfnSubnetNetworkAclAssociation(self, \"MyCfnSubnetNetworkAclAssociation\",\n    network_acl_id=\"networkAclId\",\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSubnetNetworkAclAssociation cfnSubnetNetworkAclAssociation = new CfnSubnetNetworkAclAssociation(this, \"MyCfnSubnetNetworkAclAssociation\", new CfnSubnetNetworkAclAssociationProps {\n    NetworkAclId = \"networkAclId\",\n    SubnetId = \"subnetId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSubnetNetworkAclAssociation cfnSubnetNetworkAclAssociation = CfnSubnetNetworkAclAssociation.Builder.create(this, \"MyCfnSubnetNetworkAclAssociation\")\n        .networkAclId(\"networkAclId\")\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSubnetNetworkAclAssociation := ec2.NewCfnSubnetNetworkAclAssociation(this, jsii.String(\"MyCfnSubnetNetworkAclAssociation\"), &cfnSubnetNetworkAclAssociationProps{\n\tnetworkAclId: jsii.String(\"networkAclId\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSubnetNetworkAclAssociation = new ec2.CfnSubnetNetworkAclAssociation(this, 'MyCfnSubnetNetworkAclAssociation', {\n  networkAclId: 'networkAclId',\n  subnetId: 'subnetId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSubnetNetworkAclAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSubnetNetworkAclAssociation",
        "@aws-cdk/aws-ec2.CfnSubnetNetworkAclAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSubnetNetworkAclAssociation = new ec2.CfnSubnetNetworkAclAssociation(this, 'MyCfnSubnetNetworkAclAssociation', {\n  networkAclId: 'networkAclId',\n  subnetId: 'subnetId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0849f36562f9c791a64375b164f6eadbbd0fe10f9de8ab465dda82b60ce2fb44"
    },
    "7e25f156267ec14b00a83fb092521ae7e9ad16f7be41fc10f3b5dbbd8f338c20": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_subnet_network_acl_association_props = ec2.CfnSubnetNetworkAclAssociationProps(\n    network_acl_id=\"networkAclId\",\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSubnetNetworkAclAssociationProps cfnSubnetNetworkAclAssociationProps = new CfnSubnetNetworkAclAssociationProps {\n    NetworkAclId = \"networkAclId\",\n    SubnetId = \"subnetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSubnetNetworkAclAssociationProps cfnSubnetNetworkAclAssociationProps = CfnSubnetNetworkAclAssociationProps.builder()\n        .networkAclId(\"networkAclId\")\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSubnetNetworkAclAssociationProps := &cfnSubnetNetworkAclAssociationProps{\n\tnetworkAclId: jsii.String(\"networkAclId\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSubnetNetworkAclAssociationProps: ec2.CfnSubnetNetworkAclAssociationProps = {\n  networkAclId: 'networkAclId',\n  subnetId: 'subnetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSubnetNetworkAclAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSubnetNetworkAclAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSubnetNetworkAclAssociationProps: ec2.CfnSubnetNetworkAclAssociationProps = {\n  networkAclId: 'networkAclId',\n  subnetId: 'subnetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "86183a5207311e4e7e9597aa150121e97f613237d9878815cb5a9b43627a0306"
    },
    "5592909c44859f716f934450aa997c741722e421bf7d67aafed52b367a6121e0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# private_dns_name_options_on_launch: Any\n\ncfn_subnet_props = ec2.CfnSubnetProps(\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    assign_ipv6_address_on_creation=False,\n    availability_zone=\"availabilityZone\",\n    availability_zone_id=\"availabilityZoneId\",\n    cidr_block=\"cidrBlock\",\n    enable_dns64=False,\n    ipv6_cidr_block=\"ipv6CidrBlock\",\n    ipv6_native=False,\n    map_public_ip_on_launch=False,\n    outpost_arn=\"outpostArn\",\n    private_dns_name_options_on_launch=private_dns_name_options_on_launch,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar privateDnsNameOptionsOnLaunch;\n\nCfnSubnetProps cfnSubnetProps = new CfnSubnetProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    AssignIpv6AddressOnCreation = false,\n    AvailabilityZone = \"availabilityZone\",\n    AvailabilityZoneId = \"availabilityZoneId\",\n    CidrBlock = \"cidrBlock\",\n    EnableDns64 = false,\n    Ipv6CidrBlock = \"ipv6CidrBlock\",\n    Ipv6Native = false,\n    MapPublicIpOnLaunch = false,\n    OutpostArn = \"outpostArn\",\n    PrivateDnsNameOptionsOnLaunch = privateDnsNameOptionsOnLaunch,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject privateDnsNameOptionsOnLaunch;\n\nCfnSubnetProps cfnSubnetProps = CfnSubnetProps.builder()\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .assignIpv6AddressOnCreation(false)\n        .availabilityZone(\"availabilityZone\")\n        .availabilityZoneId(\"availabilityZoneId\")\n        .cidrBlock(\"cidrBlock\")\n        .enableDns64(false)\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .ipv6Native(false)\n        .mapPublicIpOnLaunch(false)\n        .outpostArn(\"outpostArn\")\n        .privateDnsNameOptionsOnLaunch(privateDnsNameOptionsOnLaunch)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar privateDnsNameOptionsOnLaunch interface{}\ncfnSubnetProps := &cfnSubnetProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tassignIpv6AddressOnCreation: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tavailabilityZoneId: jsii.String(\"availabilityZoneId\"),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tenableDns64: jsii.Boolean(false),\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n\tipv6Native: jsii.Boolean(false),\n\tmapPublicIpOnLaunch: jsii.Boolean(false),\n\toutpostArn: jsii.String(\"outpostArn\"),\n\tprivateDnsNameOptionsOnLaunch: privateDnsNameOptionsOnLaunch,\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const privateDnsNameOptionsOnLaunch: any;\nconst cfnSubnetProps: ec2.CfnSubnetProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  assignIpv6AddressOnCreation: false,\n  availabilityZone: 'availabilityZone',\n  availabilityZoneId: 'availabilityZoneId',\n  cidrBlock: 'cidrBlock',\n  enableDns64: false,\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  ipv6Native: false,\n  mapPublicIpOnLaunch: false,\n  outpostArn: 'outpostArn',\n  privateDnsNameOptionsOnLaunch: privateDnsNameOptionsOnLaunch,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSubnetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSubnetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const privateDnsNameOptionsOnLaunch: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSubnetProps: ec2.CfnSubnetProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  assignIpv6AddressOnCreation: false,\n  availabilityZone: 'availabilityZone',\n  availabilityZoneId: 'availabilityZoneId',\n  cidrBlock: 'cidrBlock',\n  enableDns64: false,\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  ipv6Native: false,\n  mapPublicIpOnLaunch: false,\n  outpostArn: 'outpostArn',\n  privateDnsNameOptionsOnLaunch: privateDnsNameOptionsOnLaunch,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 20,
        "91": 4,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "4ce3390eebd16304c35eed07bbe1aa4577a3fdf6a5fcc20cca02dc831e28b018"
    },
    "3f8fec7199248c9db6bef4905ab6a7e03cb6bc9ce26fe8f5db48bd3d81d5ca0e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_subnet_route_table_association = ec2.CfnSubnetRouteTableAssociation(self, \"MyCfnSubnetRouteTableAssociation\",\n    route_table_id=\"routeTableId\",\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSubnetRouteTableAssociation cfnSubnetRouteTableAssociation = new CfnSubnetRouteTableAssociation(this, \"MyCfnSubnetRouteTableAssociation\", new CfnSubnetRouteTableAssociationProps {\n    RouteTableId = \"routeTableId\",\n    SubnetId = \"subnetId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSubnetRouteTableAssociation cfnSubnetRouteTableAssociation = CfnSubnetRouteTableAssociation.Builder.create(this, \"MyCfnSubnetRouteTableAssociation\")\n        .routeTableId(\"routeTableId\")\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSubnetRouteTableAssociation := ec2.NewCfnSubnetRouteTableAssociation(this, jsii.String(\"MyCfnSubnetRouteTableAssociation\"), &cfnSubnetRouteTableAssociationProps{\n\trouteTableId: jsii.String(\"routeTableId\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSubnetRouteTableAssociation = new ec2.CfnSubnetRouteTableAssociation(this, 'MyCfnSubnetRouteTableAssociation', {\n  routeTableId: 'routeTableId',\n  subnetId: 'subnetId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSubnetRouteTableAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSubnetRouteTableAssociation",
        "@aws-cdk/aws-ec2.CfnSubnetRouteTableAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSubnetRouteTableAssociation = new ec2.CfnSubnetRouteTableAssociation(this, 'MyCfnSubnetRouteTableAssociation', {\n  routeTableId: 'routeTableId',\n  subnetId: 'subnetId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bf7a5ddac93e2a92de4092b6b3caba759fbdd6c81bfdc7099f792ac7d0c37057"
    },
    "e7f55446e1cf60655520eeffe4f1a16f2af9a13a568229a654a13db41408c0bd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_subnet_route_table_association_props = ec2.CfnSubnetRouteTableAssociationProps(\n    route_table_id=\"routeTableId\",\n    subnet_id=\"subnetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnSubnetRouteTableAssociationProps cfnSubnetRouteTableAssociationProps = new CfnSubnetRouteTableAssociationProps {\n    RouteTableId = \"routeTableId\",\n    SubnetId = \"subnetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnSubnetRouteTableAssociationProps cfnSubnetRouteTableAssociationProps = CfnSubnetRouteTableAssociationProps.builder()\n        .routeTableId(\"routeTableId\")\n        .subnetId(\"subnetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnSubnetRouteTableAssociationProps := &cfnSubnetRouteTableAssociationProps{\n\trouteTableId: jsii.String(\"routeTableId\"),\n\tsubnetId: jsii.String(\"subnetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnSubnetRouteTableAssociationProps: ec2.CfnSubnetRouteTableAssociationProps = {\n  routeTableId: 'routeTableId',\n  subnetId: 'subnetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnSubnetRouteTableAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnSubnetRouteTableAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSubnetRouteTableAssociationProps: ec2.CfnSubnetRouteTableAssociationProps = {\n  routeTableId: 'routeTableId',\n  subnetId: 'subnetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b0d6d83e648ffccfc01b9493ae2ceb35c999193063257c9e1106e50115e57806"
    },
    "a7c3740705e90df15c231688565ee4f0aa1184b63cc23d1d1eb15fe7ece92437": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_traffic_mirror_filter = ec2.CfnTrafficMirrorFilter(self, \"MyCfnTrafficMirrorFilter\",\n    description=\"description\",\n    network_services=[\"networkServices\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTrafficMirrorFilter cfnTrafficMirrorFilter = new CfnTrafficMirrorFilter(this, \"MyCfnTrafficMirrorFilter\", new CfnTrafficMirrorFilterProps {\n    Description = \"description\",\n    NetworkServices = new [] { \"networkServices\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTrafficMirrorFilter cfnTrafficMirrorFilter = CfnTrafficMirrorFilter.Builder.create(this, \"MyCfnTrafficMirrorFilter\")\n        .description(\"description\")\n        .networkServices(List.of(\"networkServices\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTrafficMirrorFilter := ec2.NewCfnTrafficMirrorFilter(this, jsii.String(\"MyCfnTrafficMirrorFilter\"), &cfnTrafficMirrorFilterProps{\n\tdescription: jsii.String(\"description\"),\n\tnetworkServices: []*string{\n\t\tjsii.String(\"networkServices\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTrafficMirrorFilter = new ec2.CfnTrafficMirrorFilter(this, 'MyCfnTrafficMirrorFilter', /* all optional props */ {\n  description: 'description',\n  networkServices: ['networkServices'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorFilter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorFilter",
        "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficMirrorFilter = new ec2.CfnTrafficMirrorFilter(this, 'MyCfnTrafficMirrorFilter', /* all optional props */ {\n  description: 'description',\n  networkServices: ['networkServices'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1707b03f0dbc0b07bf1c094ae4fcb9054622c6c32d4e4219210fab1bfdfb7ad8"
    },
    "8f5a8dffd94daa92c102c92b2916cbf6a37e2b08c8ed4f80440ec24e86835714": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_traffic_mirror_filter_props = ec2.CfnTrafficMirrorFilterProps(\n    description=\"description\",\n    network_services=[\"networkServices\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTrafficMirrorFilterProps cfnTrafficMirrorFilterProps = new CfnTrafficMirrorFilterProps {\n    Description = \"description\",\n    NetworkServices = new [] { \"networkServices\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTrafficMirrorFilterProps cfnTrafficMirrorFilterProps = CfnTrafficMirrorFilterProps.builder()\n        .description(\"description\")\n        .networkServices(List.of(\"networkServices\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTrafficMirrorFilterProps := &cfnTrafficMirrorFilterProps{\n\tdescription: jsii.String(\"description\"),\n\tnetworkServices: []*string{\n\t\tjsii.String(\"networkServices\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTrafficMirrorFilterProps: ec2.CfnTrafficMirrorFilterProps = {\n  description: 'description',\n  networkServices: ['networkServices'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficMirrorFilterProps: ec2.CfnTrafficMirrorFilterProps = {\n  description: 'description',\n  networkServices: ['networkServices'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b51db23a36a4d75da2f504c116ce57642638eca29e871cbff0d6852cdce1ff4e"
    },
    "fbea11fd6e54d1672532f77aeba1b4ebe8570b227084f5a450053fc1d8fa3a2f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_traffic_mirror_filter_rule = ec2.CfnTrafficMirrorFilterRule(self, \"MyCfnTrafficMirrorFilterRule\",\n    destination_cidr_block=\"destinationCidrBlock\",\n    rule_action=\"ruleAction\",\n    rule_number=123,\n    source_cidr_block=\"sourceCidrBlock\",\n    traffic_direction=\"trafficDirection\",\n    traffic_mirror_filter_id=\"trafficMirrorFilterId\",\n\n    # the properties below are optional\n    description=\"description\",\n    destination_port_range=ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty(\n        from_port=123,\n        to_port=123\n    ),\n    protocol=123,\n    source_port_range=ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty(\n        from_port=123,\n        to_port=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTrafficMirrorFilterRule cfnTrafficMirrorFilterRule = new CfnTrafficMirrorFilterRule(this, \"MyCfnTrafficMirrorFilterRule\", new CfnTrafficMirrorFilterRuleProps {\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    RuleAction = \"ruleAction\",\n    RuleNumber = 123,\n    SourceCidrBlock = \"sourceCidrBlock\",\n    TrafficDirection = \"trafficDirection\",\n    TrafficMirrorFilterId = \"trafficMirrorFilterId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    DestinationPortRange = new TrafficMirrorPortRangeProperty {\n        FromPort = 123,\n        ToPort = 123\n    },\n    Protocol = 123,\n    SourcePortRange = new TrafficMirrorPortRangeProperty {\n        FromPort = 123,\n        ToPort = 123\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTrafficMirrorFilterRule cfnTrafficMirrorFilterRule = CfnTrafficMirrorFilterRule.Builder.create(this, \"MyCfnTrafficMirrorFilterRule\")\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .ruleAction(\"ruleAction\")\n        .ruleNumber(123)\n        .sourceCidrBlock(\"sourceCidrBlock\")\n        .trafficDirection(\"trafficDirection\")\n        .trafficMirrorFilterId(\"trafficMirrorFilterId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .destinationPortRange(TrafficMirrorPortRangeProperty.builder()\n                .fromPort(123)\n                .toPort(123)\n                .build())\n        .protocol(123)\n        .sourcePortRange(TrafficMirrorPortRangeProperty.builder()\n                .fromPort(123)\n                .toPort(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTrafficMirrorFilterRule := ec2.NewCfnTrafficMirrorFilterRule(this, jsii.String(\"MyCfnTrafficMirrorFilterRule\"), &cfnTrafficMirrorFilterRuleProps{\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\truleAction: jsii.String(\"ruleAction\"),\n\truleNumber: jsii.Number(123),\n\tsourceCidrBlock: jsii.String(\"sourceCidrBlock\"),\n\ttrafficDirection: jsii.String(\"trafficDirection\"),\n\ttrafficMirrorFilterId: jsii.String(\"trafficMirrorFilterId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tdestinationPortRange: &trafficMirrorPortRangeProperty{\n\t\tfromPort: jsii.Number(123),\n\t\ttoPort: jsii.Number(123),\n\t},\n\tprotocol: jsii.Number(123),\n\tsourcePortRange: &trafficMirrorPortRangeProperty{\n\t\tfromPort: jsii.Number(123),\n\t\ttoPort: jsii.Number(123),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTrafficMirrorFilterRule = new ec2.CfnTrafficMirrorFilterRule(this, 'MyCfnTrafficMirrorFilterRule', {\n  destinationCidrBlock: 'destinationCidrBlock',\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n  sourceCidrBlock: 'sourceCidrBlock',\n  trafficDirection: 'trafficDirection',\n  trafficMirrorFilterId: 'trafficMirrorFilterId',\n\n  // the properties below are optional\n  description: 'description',\n  destinationPortRange: {\n    fromPort: 123,\n    toPort: 123,\n  },\n  protocol: 123,\n  sourcePortRange: {\n    fromPort: 123,\n    toPort: 123,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterRule",
        "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterRuleProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficMirrorFilterRule = new ec2.CfnTrafficMirrorFilterRule(this, 'MyCfnTrafficMirrorFilterRule', {\n  destinationCidrBlock: 'destinationCidrBlock',\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n  sourceCidrBlock: 'sourceCidrBlock',\n  trafficDirection: 'trafficDirection',\n  trafficMirrorFilterId: 'trafficMirrorFilterId',\n\n  // the properties below are optional\n  description: 'description',\n  destinationPortRange: {\n    fromPort: 123,\n    toPort: 123,\n  },\n  protocol: 123,\n  sourcePortRange: {\n    fromPort: 123,\n    toPort: 123,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 8,
        "75": 18,
        "104": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "cdcab9d9b3535856d45cab0f4ad96ba397f10755831abf45fc8af50587c19847"
    },
    "26694e927472fd8246ba8baecd044348a2cf745816445edaa2f4b17a0b972060": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntraffic_mirror_port_range_property = ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty(\n    from_port=123,\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTrafficMirrorPortRangeProperty trafficMirrorPortRangeProperty = new TrafficMirrorPortRangeProperty {\n    FromPort = 123,\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTrafficMirrorPortRangeProperty trafficMirrorPortRangeProperty = TrafficMirrorPortRangeProperty.builder()\n        .fromPort(123)\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntrafficMirrorPortRangeProperty := &trafficMirrorPortRangeProperty{\n\tfromPort: jsii.Number(123),\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst trafficMirrorPortRangeProperty: ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty = {\n  fromPort: 123,\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst trafficMirrorPortRangeProperty: ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty = {\n  fromPort: 123,\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4aa9eb7d419c1a5a0252da3063560cb213c4e0fb17c773fea2c5a530537827ab"
    },
    "420a3017c84963168122d0d2f4fc37ab42fa43923578065687129d39577caf9b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_traffic_mirror_filter_rule_props = ec2.CfnTrafficMirrorFilterRuleProps(\n    destination_cidr_block=\"destinationCidrBlock\",\n    rule_action=\"ruleAction\",\n    rule_number=123,\n    source_cidr_block=\"sourceCidrBlock\",\n    traffic_direction=\"trafficDirection\",\n    traffic_mirror_filter_id=\"trafficMirrorFilterId\",\n\n    # the properties below are optional\n    description=\"description\",\n    destination_port_range=ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty(\n        from_port=123,\n        to_port=123\n    ),\n    protocol=123,\n    source_port_range=ec2.CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty(\n        from_port=123,\n        to_port=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTrafficMirrorFilterRuleProps cfnTrafficMirrorFilterRuleProps = new CfnTrafficMirrorFilterRuleProps {\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    RuleAction = \"ruleAction\",\n    RuleNumber = 123,\n    SourceCidrBlock = \"sourceCidrBlock\",\n    TrafficDirection = \"trafficDirection\",\n    TrafficMirrorFilterId = \"trafficMirrorFilterId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    DestinationPortRange = new TrafficMirrorPortRangeProperty {\n        FromPort = 123,\n        ToPort = 123\n    },\n    Protocol = 123,\n    SourcePortRange = new TrafficMirrorPortRangeProperty {\n        FromPort = 123,\n        ToPort = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTrafficMirrorFilterRuleProps cfnTrafficMirrorFilterRuleProps = CfnTrafficMirrorFilterRuleProps.builder()\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .ruleAction(\"ruleAction\")\n        .ruleNumber(123)\n        .sourceCidrBlock(\"sourceCidrBlock\")\n        .trafficDirection(\"trafficDirection\")\n        .trafficMirrorFilterId(\"trafficMirrorFilterId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .destinationPortRange(TrafficMirrorPortRangeProperty.builder()\n                .fromPort(123)\n                .toPort(123)\n                .build())\n        .protocol(123)\n        .sourcePortRange(TrafficMirrorPortRangeProperty.builder()\n                .fromPort(123)\n                .toPort(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTrafficMirrorFilterRuleProps := &cfnTrafficMirrorFilterRuleProps{\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\truleAction: jsii.String(\"ruleAction\"),\n\truleNumber: jsii.Number(123),\n\tsourceCidrBlock: jsii.String(\"sourceCidrBlock\"),\n\ttrafficDirection: jsii.String(\"trafficDirection\"),\n\ttrafficMirrorFilterId: jsii.String(\"trafficMirrorFilterId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tdestinationPortRange: &trafficMirrorPortRangeProperty{\n\t\tfromPort: jsii.Number(123),\n\t\ttoPort: jsii.Number(123),\n\t},\n\tprotocol: jsii.Number(123),\n\tsourcePortRange: &trafficMirrorPortRangeProperty{\n\t\tfromPort: jsii.Number(123),\n\t\ttoPort: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTrafficMirrorFilterRuleProps: ec2.CfnTrafficMirrorFilterRuleProps = {\n  destinationCidrBlock: 'destinationCidrBlock',\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n  sourceCidrBlock: 'sourceCidrBlock',\n  trafficDirection: 'trafficDirection',\n  trafficMirrorFilterId: 'trafficMirrorFilterId',\n\n  // the properties below are optional\n  description: 'description',\n  destinationPortRange: {\n    fromPort: 123,\n    toPort: 123,\n  },\n  protocol: 123,\n  sourcePortRange: {\n    fromPort: 123,\n    toPort: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterRuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterRuleProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficMirrorFilterRuleProps: ec2.CfnTrafficMirrorFilterRuleProps = {\n  destinationCidrBlock: 'destinationCidrBlock',\n  ruleAction: 'ruleAction',\n  ruleNumber: 123,\n  sourceCidrBlock: 'sourceCidrBlock',\n  trafficDirection: 'trafficDirection',\n  trafficMirrorFilterId: 'trafficMirrorFilterId',\n\n  // the properties below are optional\n  description: 'description',\n  destinationPortRange: {\n    fromPort: 123,\n    toPort: 123,\n  },\n  protocol: 123,\n  sourcePortRange: {\n    fromPort: 123,\n    toPort: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 7,
        "75": 18,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "e4581aa2f16914090afc831c1977f92b4df48310054d3ada4d4e0ea76ddcee65"
    },
    "8dee70174d40986da514713c27ea1cadd339de78f069117c8cbdf9527f00532d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_traffic_mirror_session = ec2.CfnTrafficMirrorSession(self, \"MyCfnTrafficMirrorSession\",\n    network_interface_id=\"networkInterfaceId\",\n    session_number=123,\n    traffic_mirror_filter_id=\"trafficMirrorFilterId\",\n    traffic_mirror_target_id=\"trafficMirrorTargetId\",\n\n    # the properties below are optional\n    description=\"description\",\n    packet_length=123,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    virtual_network_id=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTrafficMirrorSession cfnTrafficMirrorSession = new CfnTrafficMirrorSession(this, \"MyCfnTrafficMirrorSession\", new CfnTrafficMirrorSessionProps {\n    NetworkInterfaceId = \"networkInterfaceId\",\n    SessionNumber = 123,\n    TrafficMirrorFilterId = \"trafficMirrorFilterId\",\n    TrafficMirrorTargetId = \"trafficMirrorTargetId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    PacketLength = 123,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VirtualNetworkId = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTrafficMirrorSession cfnTrafficMirrorSession = CfnTrafficMirrorSession.Builder.create(this, \"MyCfnTrafficMirrorSession\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .sessionNumber(123)\n        .trafficMirrorFilterId(\"trafficMirrorFilterId\")\n        .trafficMirrorTargetId(\"trafficMirrorTargetId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .packetLength(123)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .virtualNetworkId(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTrafficMirrorSession := ec2.NewCfnTrafficMirrorSession(this, jsii.String(\"MyCfnTrafficMirrorSession\"), &cfnTrafficMirrorSessionProps{\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tsessionNumber: jsii.Number(123),\n\ttrafficMirrorFilterId: jsii.String(\"trafficMirrorFilterId\"),\n\ttrafficMirrorTargetId: jsii.String(\"trafficMirrorTargetId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tpacketLength: jsii.Number(123),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvirtualNetworkId: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTrafficMirrorSession = new ec2.CfnTrafficMirrorSession(this, 'MyCfnTrafficMirrorSession', {\n  networkInterfaceId: 'networkInterfaceId',\n  sessionNumber: 123,\n  trafficMirrorFilterId: 'trafficMirrorFilterId',\n  trafficMirrorTargetId: 'trafficMirrorTargetId',\n\n  // the properties below are optional\n  description: 'description',\n  packetLength: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  virtualNetworkId: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorSession"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorSession",
        "@aws-cdk/aws-ec2.CfnTrafficMirrorSessionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficMirrorSession = new ec2.CfnTrafficMirrorSession(this, 'MyCfnTrafficMirrorSession', {\n  networkInterfaceId: 'networkInterfaceId',\n  sessionNumber: 123,\n  trafficMirrorFilterId: 'trafficMirrorFilterId',\n  trafficMirrorTargetId: 'trafficMirrorTargetId',\n\n  // the properties below are optional\n  description: 'description',\n  packetLength: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  virtualNetworkId: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 14,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "3be2fd4c8a3b68f78003fdbd9a09b57cd97534af16588ff40547c7a54132152a"
    },
    "6778afe4377bf0e62c69bb42cd249407d85f07b1f71fc39a7c2a09fc5bb08a0f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_traffic_mirror_session_props = ec2.CfnTrafficMirrorSessionProps(\n    network_interface_id=\"networkInterfaceId\",\n    session_number=123,\n    traffic_mirror_filter_id=\"trafficMirrorFilterId\",\n    traffic_mirror_target_id=\"trafficMirrorTargetId\",\n\n    # the properties below are optional\n    description=\"description\",\n    packet_length=123,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    virtual_network_id=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTrafficMirrorSessionProps cfnTrafficMirrorSessionProps = new CfnTrafficMirrorSessionProps {\n    NetworkInterfaceId = \"networkInterfaceId\",\n    SessionNumber = 123,\n    TrafficMirrorFilterId = \"trafficMirrorFilterId\",\n    TrafficMirrorTargetId = \"trafficMirrorTargetId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    PacketLength = 123,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VirtualNetworkId = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTrafficMirrorSessionProps cfnTrafficMirrorSessionProps = CfnTrafficMirrorSessionProps.builder()\n        .networkInterfaceId(\"networkInterfaceId\")\n        .sessionNumber(123)\n        .trafficMirrorFilterId(\"trafficMirrorFilterId\")\n        .trafficMirrorTargetId(\"trafficMirrorTargetId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .packetLength(123)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .virtualNetworkId(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTrafficMirrorSessionProps := &cfnTrafficMirrorSessionProps{\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tsessionNumber: jsii.Number(123),\n\ttrafficMirrorFilterId: jsii.String(\"trafficMirrorFilterId\"),\n\ttrafficMirrorTargetId: jsii.String(\"trafficMirrorTargetId\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tpacketLength: jsii.Number(123),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvirtualNetworkId: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTrafficMirrorSessionProps: ec2.CfnTrafficMirrorSessionProps = {\n  networkInterfaceId: 'networkInterfaceId',\n  sessionNumber: 123,\n  trafficMirrorFilterId: 'trafficMirrorFilterId',\n  trafficMirrorTargetId: 'trafficMirrorTargetId',\n\n  // the properties below are optional\n  description: 'description',\n  packetLength: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  virtualNetworkId: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorSessionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorSessionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficMirrorSessionProps: ec2.CfnTrafficMirrorSessionProps = {\n  networkInterfaceId: 'networkInterfaceId',\n  sessionNumber: 123,\n  trafficMirrorFilterId: 'trafficMirrorFilterId',\n  trafficMirrorTargetId: 'trafficMirrorTargetId',\n\n  // the properties below are optional\n  description: 'description',\n  packetLength: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  virtualNetworkId: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "2ba9838bc85e9179794a9dd8084814afdd4ec3416f40b63480064b623b4462d4"
    },
    "e21b61b90ed1a171127f0cb39bc94e4bd7fd1edfab2d761ef1f723d616097f96": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_traffic_mirror_target = ec2.CfnTrafficMirrorTarget(self, \"MyCfnTrafficMirrorTarget\",\n    description=\"description\",\n    network_interface_id=\"networkInterfaceId\",\n    network_load_balancer_arn=\"networkLoadBalancerArn\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTrafficMirrorTarget cfnTrafficMirrorTarget = new CfnTrafficMirrorTarget(this, \"MyCfnTrafficMirrorTarget\", new CfnTrafficMirrorTargetProps {\n    Description = \"description\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    NetworkLoadBalancerArn = \"networkLoadBalancerArn\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTrafficMirrorTarget cfnTrafficMirrorTarget = CfnTrafficMirrorTarget.Builder.create(this, \"MyCfnTrafficMirrorTarget\")\n        .description(\"description\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .networkLoadBalancerArn(\"networkLoadBalancerArn\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTrafficMirrorTarget := ec2.NewCfnTrafficMirrorTarget(this, jsii.String(\"MyCfnTrafficMirrorTarget\"), &cfnTrafficMirrorTargetProps{\n\tdescription: jsii.String(\"description\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tnetworkLoadBalancerArn: jsii.String(\"networkLoadBalancerArn\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTrafficMirrorTarget = new ec2.CfnTrafficMirrorTarget(this, 'MyCfnTrafficMirrorTarget', /* all optional props */ {\n  description: 'description',\n  networkInterfaceId: 'networkInterfaceId',\n  networkLoadBalancerArn: 'networkLoadBalancerArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorTarget",
        "@aws-cdk/aws-ec2.CfnTrafficMirrorTargetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficMirrorTarget = new ec2.CfnTrafficMirrorTarget(this, 'MyCfnTrafficMirrorTarget', /* all optional props */ {\n  description: 'description',\n  networkInterfaceId: 'networkInterfaceId',\n  networkLoadBalancerArn: 'networkLoadBalancerArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "17fc45b22213e26dd416f304db2fe9af6f133f05dbeaccc19c71601396e43172"
    },
    "96dae836ec1bd9b79fd1fa8f92d994a95e049d0c1fdb17b96acad8353b12e65c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_traffic_mirror_target_props = ec2.CfnTrafficMirrorTargetProps(\n    description=\"description\",\n    network_interface_id=\"networkInterfaceId\",\n    network_load_balancer_arn=\"networkLoadBalancerArn\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTrafficMirrorTargetProps cfnTrafficMirrorTargetProps = new CfnTrafficMirrorTargetProps {\n    Description = \"description\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    NetworkLoadBalancerArn = \"networkLoadBalancerArn\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTrafficMirrorTargetProps cfnTrafficMirrorTargetProps = CfnTrafficMirrorTargetProps.builder()\n        .description(\"description\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .networkLoadBalancerArn(\"networkLoadBalancerArn\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTrafficMirrorTargetProps := &cfnTrafficMirrorTargetProps{\n\tdescription: jsii.String(\"description\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\tnetworkLoadBalancerArn: jsii.String(\"networkLoadBalancerArn\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTrafficMirrorTargetProps: ec2.CfnTrafficMirrorTargetProps = {\n  description: 'description',\n  networkInterfaceId: 'networkInterfaceId',\n  networkLoadBalancerArn: 'networkLoadBalancerArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTrafficMirrorTargetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTrafficMirrorTargetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTrafficMirrorTargetProps: ec2.CfnTrafficMirrorTargetProps = {\n  description: 'description',\n  networkInterfaceId: 'networkInterfaceId',\n  networkLoadBalancerArn: 'networkLoadBalancerArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "121469d975a65c09d3ada990c981c8d6cac448a194fd6118735a9081ec7964cd"
    },
    "1f1bba865d2852a354566da9941226de586dd60a1efbde08cad1e20893ba52f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway = ec2.CfnTransitGateway(self, \"MyCfnTransitGateway\",\n    amazon_side_asn=123,\n    association_default_route_table_id=\"associationDefaultRouteTableId\",\n    auto_accept_shared_attachments=\"autoAcceptSharedAttachments\",\n    default_route_table_association=\"defaultRouteTableAssociation\",\n    default_route_table_propagation=\"defaultRouteTablePropagation\",\n    description=\"description\",\n    dns_support=\"dnsSupport\",\n    multicast_support=\"multicastSupport\",\n    propagation_default_route_table_id=\"propagationDefaultRouteTableId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    transit_gateway_cidr_blocks=[\"transitGatewayCidrBlocks\"],\n    vpn_ecmp_support=\"vpnEcmpSupport\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGateway cfnTransitGateway = new CfnTransitGateway(this, \"MyCfnTransitGateway\", new CfnTransitGatewayProps {\n    AmazonSideAsn = 123,\n    AssociationDefaultRouteTableId = \"associationDefaultRouteTableId\",\n    AutoAcceptSharedAttachments = \"autoAcceptSharedAttachments\",\n    DefaultRouteTableAssociation = \"defaultRouteTableAssociation\",\n    DefaultRouteTablePropagation = \"defaultRouteTablePropagation\",\n    Description = \"description\",\n    DnsSupport = \"dnsSupport\",\n    MulticastSupport = \"multicastSupport\",\n    PropagationDefaultRouteTableId = \"propagationDefaultRouteTableId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TransitGatewayCidrBlocks = new [] { \"transitGatewayCidrBlocks\" },\n    VpnEcmpSupport = \"vpnEcmpSupport\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGateway cfnTransitGateway = CfnTransitGateway.Builder.create(this, \"MyCfnTransitGateway\")\n        .amazonSideAsn(123)\n        .associationDefaultRouteTableId(\"associationDefaultRouteTableId\")\n        .autoAcceptSharedAttachments(\"autoAcceptSharedAttachments\")\n        .defaultRouteTableAssociation(\"defaultRouteTableAssociation\")\n        .defaultRouteTablePropagation(\"defaultRouteTablePropagation\")\n        .description(\"description\")\n        .dnsSupport(\"dnsSupport\")\n        .multicastSupport(\"multicastSupport\")\n        .propagationDefaultRouteTableId(\"propagationDefaultRouteTableId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .transitGatewayCidrBlocks(List.of(\"transitGatewayCidrBlocks\"))\n        .vpnEcmpSupport(\"vpnEcmpSupport\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGateway := ec2.NewCfnTransitGateway(this, jsii.String(\"MyCfnTransitGateway\"), &cfnTransitGatewayProps{\n\tamazonSideAsn: jsii.Number(123),\n\tassociationDefaultRouteTableId: jsii.String(\"associationDefaultRouteTableId\"),\n\tautoAcceptSharedAttachments: jsii.String(\"autoAcceptSharedAttachments\"),\n\tdefaultRouteTableAssociation: jsii.String(\"defaultRouteTableAssociation\"),\n\tdefaultRouteTablePropagation: jsii.String(\"defaultRouteTablePropagation\"),\n\tdescription: jsii.String(\"description\"),\n\tdnsSupport: jsii.String(\"dnsSupport\"),\n\tmulticastSupport: jsii.String(\"multicastSupport\"),\n\tpropagationDefaultRouteTableId: jsii.String(\"propagationDefaultRouteTableId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttransitGatewayCidrBlocks: []*string{\n\t\tjsii.String(\"transitGatewayCidrBlocks\"),\n\t},\n\tvpnEcmpSupport: jsii.String(\"vpnEcmpSupport\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGateway = new ec2.CfnTransitGateway(this, 'MyCfnTransitGateway', /* all optional props */ {\n  amazonSideAsn: 123,\n  associationDefaultRouteTableId: 'associationDefaultRouteTableId',\n  autoAcceptSharedAttachments: 'autoAcceptSharedAttachments',\n  defaultRouteTableAssociation: 'defaultRouteTableAssociation',\n  defaultRouteTablePropagation: 'defaultRouteTablePropagation',\n  description: 'description',\n  dnsSupport: 'dnsSupport',\n  multicastSupport: 'multicastSupport',\n  propagationDefaultRouteTableId: 'propagationDefaultRouteTableId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  transitGatewayCidrBlocks: ['transitGatewayCidrBlocks'],\n  vpnEcmpSupport: 'vpnEcmpSupport',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGateway",
        "@aws-cdk/aws-ec2.CfnTransitGatewayProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGateway = new ec2.CfnTransitGateway(this, 'MyCfnTransitGateway', /* all optional props */ {\n  amazonSideAsn: 123,\n  associationDefaultRouteTableId: 'associationDefaultRouteTableId',\n  autoAcceptSharedAttachments: 'autoAcceptSharedAttachments',\n  defaultRouteTableAssociation: 'defaultRouteTableAssociation',\n  defaultRouteTablePropagation: 'defaultRouteTablePropagation',\n  description: 'description',\n  dnsSupport: 'dnsSupport',\n  multicastSupport: 'multicastSupport',\n  propagationDefaultRouteTableId: 'propagationDefaultRouteTableId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  transitGatewayCidrBlocks: ['transitGatewayCidrBlocks'],\n  vpnEcmpSupport: 'vpnEcmpSupport',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 18,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "d237a3c3ff4924fe010d890e356028baddc450c10a4527e164d2da9b0f30da66"
    },
    "483a7e979ee4b7fa94f90cf32f2c04667f76a3b42df656fcf0761dae9cd99f83": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_attachment = ec2.CfnTransitGatewayAttachment(self, \"MyCfnTransitGatewayAttachment\",\n    subnet_ids=[\"subnetIds\"],\n    transit_gateway_id=\"transitGatewayId\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayAttachment cfnTransitGatewayAttachment = new CfnTransitGatewayAttachment(this, \"MyCfnTransitGatewayAttachment\", new CfnTransitGatewayAttachmentProps {\n    SubnetIds = new [] { \"subnetIds\" },\n    TransitGatewayId = \"transitGatewayId\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayAttachment cfnTransitGatewayAttachment = CfnTransitGatewayAttachment.Builder.create(this, \"MyCfnTransitGatewayAttachment\")\n        .subnetIds(List.of(\"subnetIds\"))\n        .transitGatewayId(\"transitGatewayId\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayAttachment := ec2.NewCfnTransitGatewayAttachment(this, jsii.String(\"MyCfnTransitGatewayAttachment\"), &cfnTransitGatewayAttachmentProps{\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayAttachment = new ec2.CfnTransitGatewayAttachment(this, 'MyCfnTransitGatewayAttachment', {\n  subnetIds: ['subnetIds'],\n  transitGatewayId: 'transitGatewayId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayAttachment",
        "@aws-cdk/aws-ec2.CfnTransitGatewayAttachmentProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayAttachment = new ec2.CfnTransitGatewayAttachment(this, 'MyCfnTransitGatewayAttachment', {\n  subnetIds: ['subnetIds'],\n  transitGatewayId: 'transitGatewayId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "fb078325bbeb5cd109c66113ffd8965148fc0fb9fc9d4eae657a5e6a023e6cd3"
    },
    "83647500f0c6a85121ea52206d3a41ebfab47a5af848a6befb0be4a83f12f9a3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_attachment_props = ec2.CfnTransitGatewayAttachmentProps(\n    subnet_ids=[\"subnetIds\"],\n    transit_gateway_id=\"transitGatewayId\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayAttachmentProps cfnTransitGatewayAttachmentProps = new CfnTransitGatewayAttachmentProps {\n    SubnetIds = new [] { \"subnetIds\" },\n    TransitGatewayId = \"transitGatewayId\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayAttachmentProps cfnTransitGatewayAttachmentProps = CfnTransitGatewayAttachmentProps.builder()\n        .subnetIds(List.of(\"subnetIds\"))\n        .transitGatewayId(\"transitGatewayId\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayAttachmentProps := &cfnTransitGatewayAttachmentProps{\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayAttachmentProps: ec2.CfnTransitGatewayAttachmentProps = {\n  subnetIds: ['subnetIds'],\n  transitGatewayId: 'transitGatewayId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayAttachmentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayAttachmentProps: ec2.CfnTransitGatewayAttachmentProps = {\n  subnetIds: ['subnetIds'],\n  transitGatewayId: 'transitGatewayId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "04f53f9155a71d5afa997fe680a41a7ae37ebc6bc12a07440f48453be354f5cd"
    },
    "7eb2312fec116c54c53d94fe2a78d610e8ec913aabfc894987f5fc338b940d8e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_connect = ec2.CfnTransitGatewayConnect(self, \"MyCfnTransitGatewayConnect\",\n    options=ec2.CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty(\n        protocol=\"protocol\"\n    ),\n    transport_transit_gateway_attachment_id=\"transportTransitGatewayAttachmentId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayConnect cfnTransitGatewayConnect = new CfnTransitGatewayConnect(this, \"MyCfnTransitGatewayConnect\", new CfnTransitGatewayConnectProps {\n    Options = new TransitGatewayConnectOptionsProperty {\n        Protocol = \"protocol\"\n    },\n    TransportTransitGatewayAttachmentId = \"transportTransitGatewayAttachmentId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayConnect cfnTransitGatewayConnect = CfnTransitGatewayConnect.Builder.create(this, \"MyCfnTransitGatewayConnect\")\n        .options(TransitGatewayConnectOptionsProperty.builder()\n                .protocol(\"protocol\")\n                .build())\n        .transportTransitGatewayAttachmentId(\"transportTransitGatewayAttachmentId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayConnect := ec2.NewCfnTransitGatewayConnect(this, jsii.String(\"MyCfnTransitGatewayConnect\"), &cfnTransitGatewayConnectProps{\n\toptions: &transitGatewayConnectOptionsProperty{\n\t\tprotocol: jsii.String(\"protocol\"),\n\t},\n\ttransportTransitGatewayAttachmentId: jsii.String(\"transportTransitGatewayAttachmentId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayConnect = new ec2.CfnTransitGatewayConnect(this, 'MyCfnTransitGatewayConnect', {\n  options: {\n    protocol: 'protocol',\n  },\n  transportTransitGatewayAttachmentId: 'transportTransitGatewayAttachmentId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayConnect"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayConnect",
        "@aws-cdk/aws-ec2.CfnTransitGatewayConnectProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayConnect = new ec2.CfnTransitGatewayConnect(this, 'MyCfnTransitGatewayConnect', {\n  options: {\n    protocol: 'protocol',\n  },\n  transportTransitGatewayAttachmentId: 'transportTransitGatewayAttachmentId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "4525b792f1eaa36ee52d9af210f367293ae70961fb984814acdedd4178a87de4"
    },
    "f361482d233abeea9dcef501365ed963f70b03ed95f0bff5f754dc5531cafce9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ntransit_gateway_connect_options_property = ec2.CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty(\n    protocol=\"protocol\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nTransitGatewayConnectOptionsProperty transitGatewayConnectOptionsProperty = new TransitGatewayConnectOptionsProperty {\n    Protocol = \"protocol\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nTransitGatewayConnectOptionsProperty transitGatewayConnectOptionsProperty = TransitGatewayConnectOptionsProperty.builder()\n        .protocol(\"protocol\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ntransitGatewayConnectOptionsProperty := &transitGatewayConnectOptionsProperty{\n\tprotocol: jsii.String(\"protocol\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst transitGatewayConnectOptionsProperty: ec2.CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty = {\n  protocol: 'protocol',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst transitGatewayConnectOptionsProperty: ec2.CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty = {\n  protocol: 'protocol',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "109f9dcd3846c2e67495ad0adbf2edb6818778005b36fd0d5c886e90bf3eb7cf"
    },
    "76aa457aafb370e05d4a9cb4fa3817de4bfd9e5879c05c22e0bcf97ed07c61a1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_connect_props = ec2.CfnTransitGatewayConnectProps(\n    options=ec2.CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty(\n        protocol=\"protocol\"\n    ),\n    transport_transit_gateway_attachment_id=\"transportTransitGatewayAttachmentId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayConnectProps cfnTransitGatewayConnectProps = new CfnTransitGatewayConnectProps {\n    Options = new TransitGatewayConnectOptionsProperty {\n        Protocol = \"protocol\"\n    },\n    TransportTransitGatewayAttachmentId = \"transportTransitGatewayAttachmentId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayConnectProps cfnTransitGatewayConnectProps = CfnTransitGatewayConnectProps.builder()\n        .options(TransitGatewayConnectOptionsProperty.builder()\n                .protocol(\"protocol\")\n                .build())\n        .transportTransitGatewayAttachmentId(\"transportTransitGatewayAttachmentId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayConnectProps := &cfnTransitGatewayConnectProps{\n\toptions: &transitGatewayConnectOptionsProperty{\n\t\tprotocol: jsii.String(\"protocol\"),\n\t},\n\ttransportTransitGatewayAttachmentId: jsii.String(\"transportTransitGatewayAttachmentId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayConnectProps: ec2.CfnTransitGatewayConnectProps = {\n  options: {\n    protocol: 'protocol',\n  },\n  transportTransitGatewayAttachmentId: 'transportTransitGatewayAttachmentId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayConnectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayConnectProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayConnectProps: ec2.CfnTransitGatewayConnectProps = {\n  options: {\n    protocol: 'protocol',\n  },\n  transportTransitGatewayAttachmentId: 'transportTransitGatewayAttachmentId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "58161fa9a117733cedb9fb474178e5dd4d29b1a39ca129dc6642e91308cf1c19"
    },
    "0d15d6731a833a2ff0ed5670c20aa158cc60c7792e9d77d4830082af747e09b1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# options: Any\n\ncfn_transit_gateway_multicast_domain = ec2.CfnTransitGatewayMulticastDomain(self, \"MyCfnTransitGatewayMulticastDomain\",\n    transit_gateway_id=\"transitGatewayId\",\n\n    # the properties below are optional\n    options=options,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar options;\n\nCfnTransitGatewayMulticastDomain cfnTransitGatewayMulticastDomain = new CfnTransitGatewayMulticastDomain(this, \"MyCfnTransitGatewayMulticastDomain\", new CfnTransitGatewayMulticastDomainProps {\n    TransitGatewayId = \"transitGatewayId\",\n\n    // the properties below are optional\n    Options = options,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject options;\n\nCfnTransitGatewayMulticastDomain cfnTransitGatewayMulticastDomain = CfnTransitGatewayMulticastDomain.Builder.create(this, \"MyCfnTransitGatewayMulticastDomain\")\n        .transitGatewayId(\"transitGatewayId\")\n\n        // the properties below are optional\n        .options(options)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar options interface{}\ncfnTransitGatewayMulticastDomain := ec2.NewCfnTransitGatewayMulticastDomain(this, jsii.String(\"MyCfnTransitGatewayMulticastDomain\"), &cfnTransitGatewayMulticastDomainProps{\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\n\t// the properties below are optional\n\toptions: options,\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const options: any;\nconst cfnTransitGatewayMulticastDomain = new ec2.CfnTransitGatewayMulticastDomain(this, 'MyCfnTransitGatewayMulticastDomain', {\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  options: options,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomain"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomain",
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const options: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayMulticastDomain = new ec2.CfnTransitGatewayMulticastDomain(this, 'MyCfnTransitGatewayMulticastDomain', {\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  options: options,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2cb93a8c9933750f43b9413e6eaadeb474a42bb1905a38b0843f860b683f38da"
    },
    "fb0204cf7ca8e0056f88340ea7f2b8e1c726513b77566cac5689711555a88e5c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_multicast_domain_association = ec2.CfnTransitGatewayMulticastDomainAssociation(self, \"MyCfnTransitGatewayMulticastDomainAssociation\",\n    subnet_id=\"subnetId\",\n    transit_gateway_attachment_id=\"transitGatewayAttachmentId\",\n    transit_gateway_multicast_domain_id=\"transitGatewayMulticastDomainId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayMulticastDomainAssociation cfnTransitGatewayMulticastDomainAssociation = new CfnTransitGatewayMulticastDomainAssociation(this, \"MyCfnTransitGatewayMulticastDomainAssociation\", new CfnTransitGatewayMulticastDomainAssociationProps {\n    SubnetId = \"subnetId\",\n    TransitGatewayAttachmentId = \"transitGatewayAttachmentId\",\n    TransitGatewayMulticastDomainId = \"transitGatewayMulticastDomainId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayMulticastDomainAssociation cfnTransitGatewayMulticastDomainAssociation = CfnTransitGatewayMulticastDomainAssociation.Builder.create(this, \"MyCfnTransitGatewayMulticastDomainAssociation\")\n        .subnetId(\"subnetId\")\n        .transitGatewayAttachmentId(\"transitGatewayAttachmentId\")\n        .transitGatewayMulticastDomainId(\"transitGatewayMulticastDomainId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayMulticastDomainAssociation := ec2.NewCfnTransitGatewayMulticastDomainAssociation(this, jsii.String(\"MyCfnTransitGatewayMulticastDomainAssociation\"), &cfnTransitGatewayMulticastDomainAssociationProps{\n\tsubnetId: jsii.String(\"subnetId\"),\n\ttransitGatewayAttachmentId: jsii.String(\"transitGatewayAttachmentId\"),\n\ttransitGatewayMulticastDomainId: jsii.String(\"transitGatewayMulticastDomainId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayMulticastDomainAssociation = new ec2.CfnTransitGatewayMulticastDomainAssociation(this, 'MyCfnTransitGatewayMulticastDomainAssociation', {\n  subnetId: 'subnetId',\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainAssociation",
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayMulticastDomainAssociation = new ec2.CfnTransitGatewayMulticastDomainAssociation(this, 'MyCfnTransitGatewayMulticastDomainAssociation', {\n  subnetId: 'subnetId',\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3a95dc700fca65ca71d9551b6c9bb94a648ee06c08d78c31b13ad87ada328711"
    },
    "823d9ea73e42703f19bed04af2148e68e29708f0246025992bb22c047c682cfd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_multicast_domain_association_props = ec2.CfnTransitGatewayMulticastDomainAssociationProps(\n    subnet_id=\"subnetId\",\n    transit_gateway_attachment_id=\"transitGatewayAttachmentId\",\n    transit_gateway_multicast_domain_id=\"transitGatewayMulticastDomainId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayMulticastDomainAssociationProps cfnTransitGatewayMulticastDomainAssociationProps = new CfnTransitGatewayMulticastDomainAssociationProps {\n    SubnetId = \"subnetId\",\n    TransitGatewayAttachmentId = \"transitGatewayAttachmentId\",\n    TransitGatewayMulticastDomainId = \"transitGatewayMulticastDomainId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayMulticastDomainAssociationProps cfnTransitGatewayMulticastDomainAssociationProps = CfnTransitGatewayMulticastDomainAssociationProps.builder()\n        .subnetId(\"subnetId\")\n        .transitGatewayAttachmentId(\"transitGatewayAttachmentId\")\n        .transitGatewayMulticastDomainId(\"transitGatewayMulticastDomainId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayMulticastDomainAssociationProps := &cfnTransitGatewayMulticastDomainAssociationProps{\n\tsubnetId: jsii.String(\"subnetId\"),\n\ttransitGatewayAttachmentId: jsii.String(\"transitGatewayAttachmentId\"),\n\ttransitGatewayMulticastDomainId: jsii.String(\"transitGatewayMulticastDomainId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayMulticastDomainAssociationProps: ec2.CfnTransitGatewayMulticastDomainAssociationProps = {\n  subnetId: 'subnetId',\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayMulticastDomainAssociationProps: ec2.CfnTransitGatewayMulticastDomainAssociationProps = {\n  subnetId: 'subnetId',\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4df3b8507e100b6ac8789cdc88872f89935be6e91c4615bbcf09c392b48e5c0b"
    },
    "7b0837a9c9e6efb636cae366c23cdeb585b65322eba2c02e6c8bd158d2f4605c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# options: Any\n\ncfn_transit_gateway_multicast_domain_props = ec2.CfnTransitGatewayMulticastDomainProps(\n    transit_gateway_id=\"transitGatewayId\",\n\n    # the properties below are optional\n    options=options,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar options;\n\nCfnTransitGatewayMulticastDomainProps cfnTransitGatewayMulticastDomainProps = new CfnTransitGatewayMulticastDomainProps {\n    TransitGatewayId = \"transitGatewayId\",\n\n    // the properties below are optional\n    Options = options,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject options;\n\nCfnTransitGatewayMulticastDomainProps cfnTransitGatewayMulticastDomainProps = CfnTransitGatewayMulticastDomainProps.builder()\n        .transitGatewayId(\"transitGatewayId\")\n\n        // the properties below are optional\n        .options(options)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar options interface{}\ncfnTransitGatewayMulticastDomainProps := &cfnTransitGatewayMulticastDomainProps{\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\n\t// the properties below are optional\n\toptions: options,\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const options: any;\nconst cfnTransitGatewayMulticastDomainProps: ec2.CfnTransitGatewayMulticastDomainProps = {\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  options: options,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const options: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayMulticastDomainProps: ec2.CfnTransitGatewayMulticastDomainProps = {\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  options: options,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a0ecc492891d5aa96df28867402af4535ea81b7f36d4fade23948a30e3594120"
    },
    "95e27f0adbb847b427408201c9d2c2e64acf873856331b104b1444d6b2156c98": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_multicast_group_member = ec2.CfnTransitGatewayMulticastGroupMember(self, \"MyCfnTransitGatewayMulticastGroupMember\",\n    group_ip_address=\"groupIpAddress\",\n    network_interface_id=\"networkInterfaceId\",\n    transit_gateway_multicast_domain_id=\"transitGatewayMulticastDomainId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayMulticastGroupMember cfnTransitGatewayMulticastGroupMember = new CfnTransitGatewayMulticastGroupMember(this, \"MyCfnTransitGatewayMulticastGroupMember\", new CfnTransitGatewayMulticastGroupMemberProps {\n    GroupIpAddress = \"groupIpAddress\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    TransitGatewayMulticastDomainId = \"transitGatewayMulticastDomainId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayMulticastGroupMember cfnTransitGatewayMulticastGroupMember = CfnTransitGatewayMulticastGroupMember.Builder.create(this, \"MyCfnTransitGatewayMulticastGroupMember\")\n        .groupIpAddress(\"groupIpAddress\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .transitGatewayMulticastDomainId(\"transitGatewayMulticastDomainId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayMulticastGroupMember := ec2.NewCfnTransitGatewayMulticastGroupMember(this, jsii.String(\"MyCfnTransitGatewayMulticastGroupMember\"), &cfnTransitGatewayMulticastGroupMemberProps{\n\tgroupIpAddress: jsii.String(\"groupIpAddress\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\ttransitGatewayMulticastDomainId: jsii.String(\"transitGatewayMulticastDomainId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayMulticastGroupMember = new ec2.CfnTransitGatewayMulticastGroupMember(this, 'MyCfnTransitGatewayMulticastGroupMember', {\n  groupIpAddress: 'groupIpAddress',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupMember"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupMember",
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupMemberProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayMulticastGroupMember = new ec2.CfnTransitGatewayMulticastGroupMember(this, 'MyCfnTransitGatewayMulticastGroupMember', {\n  groupIpAddress: 'groupIpAddress',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "66329e21fe7a4cd045948f8a1c5c1f34dbb89e79a7aa00ee330c50539516458f"
    },
    "53110fbe3baf539ae71906990eb86ceb8ceee2d9cf98f8fe96a2b4b11d5446ba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_multicast_group_member_props = ec2.CfnTransitGatewayMulticastGroupMemberProps(\n    group_ip_address=\"groupIpAddress\",\n    network_interface_id=\"networkInterfaceId\",\n    transit_gateway_multicast_domain_id=\"transitGatewayMulticastDomainId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayMulticastGroupMemberProps cfnTransitGatewayMulticastGroupMemberProps = new CfnTransitGatewayMulticastGroupMemberProps {\n    GroupIpAddress = \"groupIpAddress\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    TransitGatewayMulticastDomainId = \"transitGatewayMulticastDomainId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayMulticastGroupMemberProps cfnTransitGatewayMulticastGroupMemberProps = CfnTransitGatewayMulticastGroupMemberProps.builder()\n        .groupIpAddress(\"groupIpAddress\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .transitGatewayMulticastDomainId(\"transitGatewayMulticastDomainId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayMulticastGroupMemberProps := &cfnTransitGatewayMulticastGroupMemberProps{\n\tgroupIpAddress: jsii.String(\"groupIpAddress\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\ttransitGatewayMulticastDomainId: jsii.String(\"transitGatewayMulticastDomainId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayMulticastGroupMemberProps: ec2.CfnTransitGatewayMulticastGroupMemberProps = {\n  groupIpAddress: 'groupIpAddress',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupMemberProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupMemberProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayMulticastGroupMemberProps: ec2.CfnTransitGatewayMulticastGroupMemberProps = {\n  groupIpAddress: 'groupIpAddress',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "fa2c15b4cb103be79a22bca37db1293ddf5147adae9e179bd6bb3d8f16494653"
    },
    "064f617d0195a75b601602abaea1fecfe9443c79be68d3395e04996a0e35202d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_multicast_group_source = ec2.CfnTransitGatewayMulticastGroupSource(self, \"MyCfnTransitGatewayMulticastGroupSource\",\n    group_ip_address=\"groupIpAddress\",\n    network_interface_id=\"networkInterfaceId\",\n    transit_gateway_multicast_domain_id=\"transitGatewayMulticastDomainId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayMulticastGroupSource cfnTransitGatewayMulticastGroupSource = new CfnTransitGatewayMulticastGroupSource(this, \"MyCfnTransitGatewayMulticastGroupSource\", new CfnTransitGatewayMulticastGroupSourceProps {\n    GroupIpAddress = \"groupIpAddress\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    TransitGatewayMulticastDomainId = \"transitGatewayMulticastDomainId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayMulticastGroupSource cfnTransitGatewayMulticastGroupSource = CfnTransitGatewayMulticastGroupSource.Builder.create(this, \"MyCfnTransitGatewayMulticastGroupSource\")\n        .groupIpAddress(\"groupIpAddress\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .transitGatewayMulticastDomainId(\"transitGatewayMulticastDomainId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayMulticastGroupSource := ec2.NewCfnTransitGatewayMulticastGroupSource(this, jsii.String(\"MyCfnTransitGatewayMulticastGroupSource\"), &cfnTransitGatewayMulticastGroupSourceProps{\n\tgroupIpAddress: jsii.String(\"groupIpAddress\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\ttransitGatewayMulticastDomainId: jsii.String(\"transitGatewayMulticastDomainId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayMulticastGroupSource = new ec2.CfnTransitGatewayMulticastGroupSource(this, 'MyCfnTransitGatewayMulticastGroupSource', {\n  groupIpAddress: 'groupIpAddress',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupSource",
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupSourceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayMulticastGroupSource = new ec2.CfnTransitGatewayMulticastGroupSource(this, 'MyCfnTransitGatewayMulticastGroupSource', {\n  groupIpAddress: 'groupIpAddress',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f3f57f889aec9f2aaa45a6fc7743bc4edf2ea1a88ffbb6bf81cad1e06c9fa533"
    },
    "4898a461c61369b52297a07f484aaa5a33012f904f3b4c485e2a445adaf64ea8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_multicast_group_source_props = ec2.CfnTransitGatewayMulticastGroupSourceProps(\n    group_ip_address=\"groupIpAddress\",\n    network_interface_id=\"networkInterfaceId\",\n    transit_gateway_multicast_domain_id=\"transitGatewayMulticastDomainId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayMulticastGroupSourceProps cfnTransitGatewayMulticastGroupSourceProps = new CfnTransitGatewayMulticastGroupSourceProps {\n    GroupIpAddress = \"groupIpAddress\",\n    NetworkInterfaceId = \"networkInterfaceId\",\n    TransitGatewayMulticastDomainId = \"transitGatewayMulticastDomainId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayMulticastGroupSourceProps cfnTransitGatewayMulticastGroupSourceProps = CfnTransitGatewayMulticastGroupSourceProps.builder()\n        .groupIpAddress(\"groupIpAddress\")\n        .networkInterfaceId(\"networkInterfaceId\")\n        .transitGatewayMulticastDomainId(\"transitGatewayMulticastDomainId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayMulticastGroupSourceProps := &cfnTransitGatewayMulticastGroupSourceProps{\n\tgroupIpAddress: jsii.String(\"groupIpAddress\"),\n\tnetworkInterfaceId: jsii.String(\"networkInterfaceId\"),\n\ttransitGatewayMulticastDomainId: jsii.String(\"transitGatewayMulticastDomainId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayMulticastGroupSourceProps: ec2.CfnTransitGatewayMulticastGroupSourceProps = {\n  groupIpAddress: 'groupIpAddress',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupSourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayMulticastGroupSourceProps: ec2.CfnTransitGatewayMulticastGroupSourceProps = {\n  groupIpAddress: 'groupIpAddress',\n  networkInterfaceId: 'networkInterfaceId',\n  transitGatewayMulticastDomainId: 'transitGatewayMulticastDomainId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ab1492118a45a847a9ffd8e04409748a2655a210d9ecb2ce3fc4ac68eb96802a"
    },
    "3ef83e6783e51992aeee9abf638b20086025fe61843bd68b4cba124e91a998d6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_peering_attachment = ec2.CfnTransitGatewayPeeringAttachment(self, \"MyCfnTransitGatewayPeeringAttachment\",\n    peer_account_id=\"peerAccountId\",\n    peer_region=\"peerRegion\",\n    peer_transit_gateway_id=\"peerTransitGatewayId\",\n    transit_gateway_id=\"transitGatewayId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayPeeringAttachment cfnTransitGatewayPeeringAttachment = new CfnTransitGatewayPeeringAttachment(this, \"MyCfnTransitGatewayPeeringAttachment\", new CfnTransitGatewayPeeringAttachmentProps {\n    PeerAccountId = \"peerAccountId\",\n    PeerRegion = \"peerRegion\",\n    PeerTransitGatewayId = \"peerTransitGatewayId\",\n    TransitGatewayId = \"transitGatewayId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayPeeringAttachment cfnTransitGatewayPeeringAttachment = CfnTransitGatewayPeeringAttachment.Builder.create(this, \"MyCfnTransitGatewayPeeringAttachment\")\n        .peerAccountId(\"peerAccountId\")\n        .peerRegion(\"peerRegion\")\n        .peerTransitGatewayId(\"peerTransitGatewayId\")\n        .transitGatewayId(\"transitGatewayId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayPeeringAttachment := ec2.NewCfnTransitGatewayPeeringAttachment(this, jsii.String(\"MyCfnTransitGatewayPeeringAttachment\"), &cfnTransitGatewayPeeringAttachmentProps{\n\tpeerAccountId: jsii.String(\"peerAccountId\"),\n\tpeerRegion: jsii.String(\"peerRegion\"),\n\tpeerTransitGatewayId: jsii.String(\"peerTransitGatewayId\"),\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayPeeringAttachment = new ec2.CfnTransitGatewayPeeringAttachment(this, 'MyCfnTransitGatewayPeeringAttachment', {\n  peerAccountId: 'peerAccountId',\n  peerRegion: 'peerRegion',\n  peerTransitGatewayId: 'peerTransitGatewayId',\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayPeeringAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayPeeringAttachment",
        "@aws-cdk/aws-ec2.CfnTransitGatewayPeeringAttachmentProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayPeeringAttachment = new ec2.CfnTransitGatewayPeeringAttachment(this, 'MyCfnTransitGatewayPeeringAttachment', {\n  peerAccountId: 'peerAccountId',\n  peerRegion: 'peerRegion',\n  peerTransitGatewayId: 'peerTransitGatewayId',\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 11,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9efe0d6c3c6907b31e5482879ea2a52de5ffcc8e7326831fe65ddbe5b44f2fb6"
    },
    "08170e60e9686274e893baf2ea1a0677581da1d8aaef76d8f73f118e6fafde45": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_peering_attachment_props = ec2.CfnTransitGatewayPeeringAttachmentProps(\n    peer_account_id=\"peerAccountId\",\n    peer_region=\"peerRegion\",\n    peer_transit_gateway_id=\"peerTransitGatewayId\",\n    transit_gateway_id=\"transitGatewayId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayPeeringAttachmentProps cfnTransitGatewayPeeringAttachmentProps = new CfnTransitGatewayPeeringAttachmentProps {\n    PeerAccountId = \"peerAccountId\",\n    PeerRegion = \"peerRegion\",\n    PeerTransitGatewayId = \"peerTransitGatewayId\",\n    TransitGatewayId = \"transitGatewayId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayPeeringAttachmentProps cfnTransitGatewayPeeringAttachmentProps = CfnTransitGatewayPeeringAttachmentProps.builder()\n        .peerAccountId(\"peerAccountId\")\n        .peerRegion(\"peerRegion\")\n        .peerTransitGatewayId(\"peerTransitGatewayId\")\n        .transitGatewayId(\"transitGatewayId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayPeeringAttachmentProps := &cfnTransitGatewayPeeringAttachmentProps{\n\tpeerAccountId: jsii.String(\"peerAccountId\"),\n\tpeerRegion: jsii.String(\"peerRegion\"),\n\tpeerTransitGatewayId: jsii.String(\"peerTransitGatewayId\"),\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayPeeringAttachmentProps: ec2.CfnTransitGatewayPeeringAttachmentProps = {\n  peerAccountId: 'peerAccountId',\n  peerRegion: 'peerRegion',\n  peerTransitGatewayId: 'peerTransitGatewayId',\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayPeeringAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayPeeringAttachmentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayPeeringAttachmentProps: ec2.CfnTransitGatewayPeeringAttachmentProps = {\n  peerAccountId: 'peerAccountId',\n  peerRegion: 'peerRegion',\n  peerTransitGatewayId: 'peerTransitGatewayId',\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 11,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "41582323aafaf794b5f6781f6485cac7966db998ae6f4c018ebd45d60d4485f8"
    },
    "1ebed617f6d0b437cf3b21fab55efceb157e7c68bbc105eb352e0df16c3e22c2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_props = ec2.CfnTransitGatewayProps(\n    amazon_side_asn=123,\n    association_default_route_table_id=\"associationDefaultRouteTableId\",\n    auto_accept_shared_attachments=\"autoAcceptSharedAttachments\",\n    default_route_table_association=\"defaultRouteTableAssociation\",\n    default_route_table_propagation=\"defaultRouteTablePropagation\",\n    description=\"description\",\n    dns_support=\"dnsSupport\",\n    multicast_support=\"multicastSupport\",\n    propagation_default_route_table_id=\"propagationDefaultRouteTableId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    transit_gateway_cidr_blocks=[\"transitGatewayCidrBlocks\"],\n    vpn_ecmp_support=\"vpnEcmpSupport\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayProps cfnTransitGatewayProps = new CfnTransitGatewayProps {\n    AmazonSideAsn = 123,\n    AssociationDefaultRouteTableId = \"associationDefaultRouteTableId\",\n    AutoAcceptSharedAttachments = \"autoAcceptSharedAttachments\",\n    DefaultRouteTableAssociation = \"defaultRouteTableAssociation\",\n    DefaultRouteTablePropagation = \"defaultRouteTablePropagation\",\n    Description = \"description\",\n    DnsSupport = \"dnsSupport\",\n    MulticastSupport = \"multicastSupport\",\n    PropagationDefaultRouteTableId = \"propagationDefaultRouteTableId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TransitGatewayCidrBlocks = new [] { \"transitGatewayCidrBlocks\" },\n    VpnEcmpSupport = \"vpnEcmpSupport\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayProps cfnTransitGatewayProps = CfnTransitGatewayProps.builder()\n        .amazonSideAsn(123)\n        .associationDefaultRouteTableId(\"associationDefaultRouteTableId\")\n        .autoAcceptSharedAttachments(\"autoAcceptSharedAttachments\")\n        .defaultRouteTableAssociation(\"defaultRouteTableAssociation\")\n        .defaultRouteTablePropagation(\"defaultRouteTablePropagation\")\n        .description(\"description\")\n        .dnsSupport(\"dnsSupport\")\n        .multicastSupport(\"multicastSupport\")\n        .propagationDefaultRouteTableId(\"propagationDefaultRouteTableId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .transitGatewayCidrBlocks(List.of(\"transitGatewayCidrBlocks\"))\n        .vpnEcmpSupport(\"vpnEcmpSupport\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayProps := &cfnTransitGatewayProps{\n\tamazonSideAsn: jsii.Number(123),\n\tassociationDefaultRouteTableId: jsii.String(\"associationDefaultRouteTableId\"),\n\tautoAcceptSharedAttachments: jsii.String(\"autoAcceptSharedAttachments\"),\n\tdefaultRouteTableAssociation: jsii.String(\"defaultRouteTableAssociation\"),\n\tdefaultRouteTablePropagation: jsii.String(\"defaultRouteTablePropagation\"),\n\tdescription: jsii.String(\"description\"),\n\tdnsSupport: jsii.String(\"dnsSupport\"),\n\tmulticastSupport: jsii.String(\"multicastSupport\"),\n\tpropagationDefaultRouteTableId: jsii.String(\"propagationDefaultRouteTableId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttransitGatewayCidrBlocks: []*string{\n\t\tjsii.String(\"transitGatewayCidrBlocks\"),\n\t},\n\tvpnEcmpSupport: jsii.String(\"vpnEcmpSupport\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayProps: ec2.CfnTransitGatewayProps = {\n  amazonSideAsn: 123,\n  associationDefaultRouteTableId: 'associationDefaultRouteTableId',\n  autoAcceptSharedAttachments: 'autoAcceptSharedAttachments',\n  defaultRouteTableAssociation: 'defaultRouteTableAssociation',\n  defaultRouteTablePropagation: 'defaultRouteTablePropagation',\n  description: 'description',\n  dnsSupport: 'dnsSupport',\n  multicastSupport: 'multicastSupport',\n  propagationDefaultRouteTableId: 'propagationDefaultRouteTableId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  transitGatewayCidrBlocks: ['transitGatewayCidrBlocks'],\n  vpnEcmpSupport: 'vpnEcmpSupport',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayProps: ec2.CfnTransitGatewayProps = {\n  amazonSideAsn: 123,\n  associationDefaultRouteTableId: 'associationDefaultRouteTableId',\n  autoAcceptSharedAttachments: 'autoAcceptSharedAttachments',\n  defaultRouteTableAssociation: 'defaultRouteTableAssociation',\n  defaultRouteTablePropagation: 'defaultRouteTablePropagation',\n  description: 'description',\n  dnsSupport: 'dnsSupport',\n  multicastSupport: 'multicastSupport',\n  propagationDefaultRouteTableId: 'propagationDefaultRouteTableId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  transitGatewayCidrBlocks: ['transitGatewayCidrBlocks'],\n  vpnEcmpSupport: 'vpnEcmpSupport',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 18,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "129db108e81c68ee2f777cf32ecdeb625d09c1fbe8c498c2409286062b58bfa8"
    },
    "a8592c3ddd399ecf85f7c1f1ccf34139eb8f6ec83d3e819257b444f700f80cfd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_route = ec2.CfnTransitGatewayRoute(self, \"MyCfnTransitGatewayRoute\",\n    transit_gateway_route_table_id=\"transitGatewayRouteTableId\",\n\n    # the properties below are optional\n    blackhole=False,\n    destination_cidr_block=\"destinationCidrBlock\",\n    transit_gateway_attachment_id=\"transitGatewayAttachmentId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayRoute cfnTransitGatewayRoute = new CfnTransitGatewayRoute(this, \"MyCfnTransitGatewayRoute\", new CfnTransitGatewayRouteProps {\n    TransitGatewayRouteTableId = \"transitGatewayRouteTableId\",\n\n    // the properties below are optional\n    Blackhole = false,\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    TransitGatewayAttachmentId = \"transitGatewayAttachmentId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayRoute cfnTransitGatewayRoute = CfnTransitGatewayRoute.Builder.create(this, \"MyCfnTransitGatewayRoute\")\n        .transitGatewayRouteTableId(\"transitGatewayRouteTableId\")\n\n        // the properties below are optional\n        .blackhole(false)\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .transitGatewayAttachmentId(\"transitGatewayAttachmentId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayRoute := ec2.NewCfnTransitGatewayRoute(this, jsii.String(\"MyCfnTransitGatewayRoute\"), &cfnTransitGatewayRouteProps{\n\ttransitGatewayRouteTableId: jsii.String(\"transitGatewayRouteTableId\"),\n\n\t// the properties below are optional\n\tblackhole: jsii.Boolean(false),\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\ttransitGatewayAttachmentId: jsii.String(\"transitGatewayAttachmentId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayRoute = new ec2.CfnTransitGatewayRoute(this, 'MyCfnTransitGatewayRoute', {\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n\n  // the properties below are optional\n  blackhole: false,\n  destinationCidrBlock: 'destinationCidrBlock',\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayRoute",
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayRoute = new ec2.CfnTransitGatewayRoute(this, 'MyCfnTransitGatewayRoute', {\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n\n  // the properties below are optional\n  blackhole: false,\n  destinationCidrBlock: 'destinationCidrBlock',\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "223d4f5fa2da13156d6c130725c810b3fbe1ebdddad8cc674454c4ee2dd67281"
    },
    "585b460e16bb425411db5001438209d69697c5d1db07f849bfa364ec287d4354": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_route_props = ec2.CfnTransitGatewayRouteProps(\n    transit_gateway_route_table_id=\"transitGatewayRouteTableId\",\n\n    # the properties below are optional\n    blackhole=False,\n    destination_cidr_block=\"destinationCidrBlock\",\n    transit_gateway_attachment_id=\"transitGatewayAttachmentId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayRouteProps cfnTransitGatewayRouteProps = new CfnTransitGatewayRouteProps {\n    TransitGatewayRouteTableId = \"transitGatewayRouteTableId\",\n\n    // the properties below are optional\n    Blackhole = false,\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    TransitGatewayAttachmentId = \"transitGatewayAttachmentId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayRouteProps cfnTransitGatewayRouteProps = CfnTransitGatewayRouteProps.builder()\n        .transitGatewayRouteTableId(\"transitGatewayRouteTableId\")\n\n        // the properties below are optional\n        .blackhole(false)\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .transitGatewayAttachmentId(\"transitGatewayAttachmentId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayRouteProps := &cfnTransitGatewayRouteProps{\n\ttransitGatewayRouteTableId: jsii.String(\"transitGatewayRouteTableId\"),\n\n\t// the properties below are optional\n\tblackhole: jsii.Boolean(false),\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\ttransitGatewayAttachmentId: jsii.String(\"transitGatewayAttachmentId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayRouteProps: ec2.CfnTransitGatewayRouteProps = {\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n\n  // the properties below are optional\n  blackhole: false,\n  destinationCidrBlock: 'destinationCidrBlock',\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayRouteProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayRouteProps: ec2.CfnTransitGatewayRouteProps = {\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n\n  // the properties below are optional\n  blackhole: false,\n  destinationCidrBlock: 'destinationCidrBlock',\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "eda46adca744c84c6585811259789ac8c6bc982e57c30cc8def3d170abe7e55b"
    },
    "973387f5bd38ddfdbe715aad9a774b9488c8b380ad26a647b9b48cb83a565128": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_route_table = ec2.CfnTransitGatewayRouteTable(self, \"MyCfnTransitGatewayRouteTable\",\n    transit_gateway_id=\"transitGatewayId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayRouteTable cfnTransitGatewayRouteTable = new CfnTransitGatewayRouteTable(this, \"MyCfnTransitGatewayRouteTable\", new CfnTransitGatewayRouteTableProps {\n    TransitGatewayId = \"transitGatewayId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayRouteTable cfnTransitGatewayRouteTable = CfnTransitGatewayRouteTable.Builder.create(this, \"MyCfnTransitGatewayRouteTable\")\n        .transitGatewayId(\"transitGatewayId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayRouteTable := ec2.NewCfnTransitGatewayRouteTable(this, jsii.String(\"MyCfnTransitGatewayRouteTable\"), &cfnTransitGatewayRouteTableProps{\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayRouteTable = new ec2.CfnTransitGatewayRouteTable(this, 'MyCfnTransitGatewayRouteTable', {\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTable"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTable",
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayRouteTable = new ec2.CfnTransitGatewayRouteTable(this, 'MyCfnTransitGatewayRouteTable', {\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "4755b960686ec9203e462bb81a0d44dae8e5e6788fa8f2e459a017bbb3ba3e2d"
    },
    "e60fe0cbaed1d1071c3a7bf3cbd8c15291160251730b5cadc3f86f9e08686df2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_route_table_association = ec2.CfnTransitGatewayRouteTableAssociation(self, \"MyCfnTransitGatewayRouteTableAssociation\",\n    transit_gateway_attachment_id=\"transitGatewayAttachmentId\",\n    transit_gateway_route_table_id=\"transitGatewayRouteTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayRouteTableAssociation cfnTransitGatewayRouteTableAssociation = new CfnTransitGatewayRouteTableAssociation(this, \"MyCfnTransitGatewayRouteTableAssociation\", new CfnTransitGatewayRouteTableAssociationProps {\n    TransitGatewayAttachmentId = \"transitGatewayAttachmentId\",\n    TransitGatewayRouteTableId = \"transitGatewayRouteTableId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayRouteTableAssociation cfnTransitGatewayRouteTableAssociation = CfnTransitGatewayRouteTableAssociation.Builder.create(this, \"MyCfnTransitGatewayRouteTableAssociation\")\n        .transitGatewayAttachmentId(\"transitGatewayAttachmentId\")\n        .transitGatewayRouteTableId(\"transitGatewayRouteTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayRouteTableAssociation := ec2.NewCfnTransitGatewayRouteTableAssociation(this, jsii.String(\"MyCfnTransitGatewayRouteTableAssociation\"), &cfnTransitGatewayRouteTableAssociationProps{\n\ttransitGatewayAttachmentId: jsii.String(\"transitGatewayAttachmentId\"),\n\ttransitGatewayRouteTableId: jsii.String(\"transitGatewayRouteTableId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayRouteTableAssociation = new ec2.CfnTransitGatewayRouteTableAssociation(this, 'MyCfnTransitGatewayRouteTableAssociation', {\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableAssociation",
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayRouteTableAssociation = new ec2.CfnTransitGatewayRouteTableAssociation(this, 'MyCfnTransitGatewayRouteTableAssociation', {\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7e224f2cfab8d1e7a207436b2abcc410b09289ec657f8f516aba39f20e1cd664"
    },
    "8fc2a5d4e3a05f8cddf72ea348e6d9aaff44a576358bc4a1bf08bf3dab91538d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_route_table_association_props = ec2.CfnTransitGatewayRouteTableAssociationProps(\n    transit_gateway_attachment_id=\"transitGatewayAttachmentId\",\n    transit_gateway_route_table_id=\"transitGatewayRouteTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayRouteTableAssociationProps cfnTransitGatewayRouteTableAssociationProps = new CfnTransitGatewayRouteTableAssociationProps {\n    TransitGatewayAttachmentId = \"transitGatewayAttachmentId\",\n    TransitGatewayRouteTableId = \"transitGatewayRouteTableId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayRouteTableAssociationProps cfnTransitGatewayRouteTableAssociationProps = CfnTransitGatewayRouteTableAssociationProps.builder()\n        .transitGatewayAttachmentId(\"transitGatewayAttachmentId\")\n        .transitGatewayRouteTableId(\"transitGatewayRouteTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayRouteTableAssociationProps := &cfnTransitGatewayRouteTableAssociationProps{\n\ttransitGatewayAttachmentId: jsii.String(\"transitGatewayAttachmentId\"),\n\ttransitGatewayRouteTableId: jsii.String(\"transitGatewayRouteTableId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayRouteTableAssociationProps: ec2.CfnTransitGatewayRouteTableAssociationProps = {\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayRouteTableAssociationProps: ec2.CfnTransitGatewayRouteTableAssociationProps = {\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "582a78759dfc76cc2589482517dd70edd682f705ccbb519aee3a6a65c8f86a7e"
    },
    "80698bf227b75989a2fbc10f2a4af28701445c03fca58d40af45982712b6cd2e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_route_table_propagation = ec2.CfnTransitGatewayRouteTablePropagation(self, \"MyCfnTransitGatewayRouteTablePropagation\",\n    transit_gateway_attachment_id=\"transitGatewayAttachmentId\",\n    transit_gateway_route_table_id=\"transitGatewayRouteTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayRouteTablePropagation cfnTransitGatewayRouteTablePropagation = new CfnTransitGatewayRouteTablePropagation(this, \"MyCfnTransitGatewayRouteTablePropagation\", new CfnTransitGatewayRouteTablePropagationProps {\n    TransitGatewayAttachmentId = \"transitGatewayAttachmentId\",\n    TransitGatewayRouteTableId = \"transitGatewayRouteTableId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayRouteTablePropagation cfnTransitGatewayRouteTablePropagation = CfnTransitGatewayRouteTablePropagation.Builder.create(this, \"MyCfnTransitGatewayRouteTablePropagation\")\n        .transitGatewayAttachmentId(\"transitGatewayAttachmentId\")\n        .transitGatewayRouteTableId(\"transitGatewayRouteTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayRouteTablePropagation := ec2.NewCfnTransitGatewayRouteTablePropagation(this, jsii.String(\"MyCfnTransitGatewayRouteTablePropagation\"), &cfnTransitGatewayRouteTablePropagationProps{\n\ttransitGatewayAttachmentId: jsii.String(\"transitGatewayAttachmentId\"),\n\ttransitGatewayRouteTableId: jsii.String(\"transitGatewayRouteTableId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayRouteTablePropagation = new ec2.CfnTransitGatewayRouteTablePropagation(this, 'MyCfnTransitGatewayRouteTablePropagation', {\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTablePropagation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTablePropagation",
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTablePropagationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayRouteTablePropagation = new ec2.CfnTransitGatewayRouteTablePropagation(this, 'MyCfnTransitGatewayRouteTablePropagation', {\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8a2e9922aafb2ebaba30bd1573cb004774d819f3fea1edc00ede4a40bc4c5c93"
    },
    "1b88c09532d98e5ac0928bac7063b94f54a4fd4f85de549263e628054e458855": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_route_table_propagation_props = ec2.CfnTransitGatewayRouteTablePropagationProps(\n    transit_gateway_attachment_id=\"transitGatewayAttachmentId\",\n    transit_gateway_route_table_id=\"transitGatewayRouteTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayRouteTablePropagationProps cfnTransitGatewayRouteTablePropagationProps = new CfnTransitGatewayRouteTablePropagationProps {\n    TransitGatewayAttachmentId = \"transitGatewayAttachmentId\",\n    TransitGatewayRouteTableId = \"transitGatewayRouteTableId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayRouteTablePropagationProps cfnTransitGatewayRouteTablePropagationProps = CfnTransitGatewayRouteTablePropagationProps.builder()\n        .transitGatewayAttachmentId(\"transitGatewayAttachmentId\")\n        .transitGatewayRouteTableId(\"transitGatewayRouteTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayRouteTablePropagationProps := &cfnTransitGatewayRouteTablePropagationProps{\n\ttransitGatewayAttachmentId: jsii.String(\"transitGatewayAttachmentId\"),\n\ttransitGatewayRouteTableId: jsii.String(\"transitGatewayRouteTableId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayRouteTablePropagationProps: ec2.CfnTransitGatewayRouteTablePropagationProps = {\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTablePropagationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTablePropagationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayRouteTablePropagationProps: ec2.CfnTransitGatewayRouteTablePropagationProps = {\n  transitGatewayAttachmentId: 'transitGatewayAttachmentId',\n  transitGatewayRouteTableId: 'transitGatewayRouteTableId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9015b768dcb2c3625c98aa851df34a8b64606a569bec36466e7003485e6597df"
    },
    "28233fbd38a6f168da16fb22094cdda9110563df1bdbcce5e6e846ec85908c34": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_transit_gateway_route_table_props = ec2.CfnTransitGatewayRouteTableProps(\n    transit_gateway_id=\"transitGatewayId\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnTransitGatewayRouteTableProps cfnTransitGatewayRouteTableProps = new CfnTransitGatewayRouteTableProps {\n    TransitGatewayId = \"transitGatewayId\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnTransitGatewayRouteTableProps cfnTransitGatewayRouteTableProps = CfnTransitGatewayRouteTableProps.builder()\n        .transitGatewayId(\"transitGatewayId\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnTransitGatewayRouteTableProps := &cfnTransitGatewayRouteTableProps{\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnTransitGatewayRouteTableProps: ec2.CfnTransitGatewayRouteTableProps = {\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayRouteTableProps: ec2.CfnTransitGatewayRouteTableProps = {\n  transitGatewayId: 'transitGatewayId',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "1e464251d7298c9ba894ef5a712a150225d440eaf1d677bba90646c392cf5f0d"
    },
    "0624f9186026abb09ffd192eaf06d8568612c2d8c61f22a44b15ee6dbef9f9ac": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# options: Any\n\ncfn_transit_gateway_vpc_attachment = ec2.CfnTransitGatewayVpcAttachment(self, \"MyCfnTransitGatewayVpcAttachment\",\n    subnet_ids=[\"subnetIds\"],\n    transit_gateway_id=\"transitGatewayId\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    add_subnet_ids=[\"addSubnetIds\"],\n    options=options,\n    remove_subnet_ids=[\"removeSubnetIds\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar options;\n\nCfnTransitGatewayVpcAttachment cfnTransitGatewayVpcAttachment = new CfnTransitGatewayVpcAttachment(this, \"MyCfnTransitGatewayVpcAttachment\", new CfnTransitGatewayVpcAttachmentProps {\n    SubnetIds = new [] { \"subnetIds\" },\n    TransitGatewayId = \"transitGatewayId\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    AddSubnetIds = new [] { \"addSubnetIds\" },\n    Options = options,\n    RemoveSubnetIds = new [] { \"removeSubnetIds\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject options;\n\nCfnTransitGatewayVpcAttachment cfnTransitGatewayVpcAttachment = CfnTransitGatewayVpcAttachment.Builder.create(this, \"MyCfnTransitGatewayVpcAttachment\")\n        .subnetIds(List.of(\"subnetIds\"))\n        .transitGatewayId(\"transitGatewayId\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .addSubnetIds(List.of(\"addSubnetIds\"))\n        .options(options)\n        .removeSubnetIds(List.of(\"removeSubnetIds\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar options interface{}\ncfnTransitGatewayVpcAttachment := ec2.NewCfnTransitGatewayVpcAttachment(this, jsii.String(\"MyCfnTransitGatewayVpcAttachment\"), &cfnTransitGatewayVpcAttachmentProps{\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\taddSubnetIds: []*string{\n\t\tjsii.String(\"addSubnetIds\"),\n\t},\n\toptions: options,\n\tremoveSubnetIds: []*string{\n\t\tjsii.String(\"removeSubnetIds\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const options: any;\nconst cfnTransitGatewayVpcAttachment = new ec2.CfnTransitGatewayVpcAttachment(this, 'MyCfnTransitGatewayVpcAttachment', {\n  subnetIds: ['subnetIds'],\n  transitGatewayId: 'transitGatewayId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  addSubnetIds: ['addSubnetIds'],\n  options: options,\n  removeSubnetIds: ['removeSubnetIds'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayVpcAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayVpcAttachment",
        "@aws-cdk/aws-ec2.CfnTransitGatewayVpcAttachmentProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const options: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayVpcAttachment = new ec2.CfnTransitGatewayVpcAttachment(this, 'MyCfnTransitGatewayVpcAttachment', {\n  subnetIds: ['subnetIds'],\n  transitGatewayId: 'transitGatewayId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  addSubnetIds: ['addSubnetIds'],\n  options: options,\n  removeSubnetIds: ['removeSubnetIds'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 15,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 4,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "bcbd467c964a3bb0e7a11f23903851f51df0d706df4a8da5edb2a4506f8ef143"
    },
    "f50863cdf8c0c665a787af200d42d70206c33682fad4619e45649d44223fc11d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# options: Any\n\ncfn_transit_gateway_vpc_attachment_props = ec2.CfnTransitGatewayVpcAttachmentProps(\n    subnet_ids=[\"subnetIds\"],\n    transit_gateway_id=\"transitGatewayId\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    add_subnet_ids=[\"addSubnetIds\"],\n    options=options,\n    remove_subnet_ids=[\"removeSubnetIds\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar options;\n\nCfnTransitGatewayVpcAttachmentProps cfnTransitGatewayVpcAttachmentProps = new CfnTransitGatewayVpcAttachmentProps {\n    SubnetIds = new [] { \"subnetIds\" },\n    TransitGatewayId = \"transitGatewayId\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    AddSubnetIds = new [] { \"addSubnetIds\" },\n    Options = options,\n    RemoveSubnetIds = new [] { \"removeSubnetIds\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject options;\n\nCfnTransitGatewayVpcAttachmentProps cfnTransitGatewayVpcAttachmentProps = CfnTransitGatewayVpcAttachmentProps.builder()\n        .subnetIds(List.of(\"subnetIds\"))\n        .transitGatewayId(\"transitGatewayId\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .addSubnetIds(List.of(\"addSubnetIds\"))\n        .options(options)\n        .removeSubnetIds(List.of(\"removeSubnetIds\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar options interface{}\ncfnTransitGatewayVpcAttachmentProps := &cfnTransitGatewayVpcAttachmentProps{\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\taddSubnetIds: []*string{\n\t\tjsii.String(\"addSubnetIds\"),\n\t},\n\toptions: options,\n\tremoveSubnetIds: []*string{\n\t\tjsii.String(\"removeSubnetIds\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const options: any;\nconst cfnTransitGatewayVpcAttachmentProps: ec2.CfnTransitGatewayVpcAttachmentProps = {\n  subnetIds: ['subnetIds'],\n  transitGatewayId: 'transitGatewayId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  addSubnetIds: ['addSubnetIds'],\n  options: options,\n  removeSubnetIds: ['removeSubnetIds'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnTransitGatewayVpcAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnTransitGatewayVpcAttachmentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const options: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTransitGatewayVpcAttachmentProps: ec2.CfnTransitGatewayVpcAttachmentProps = {\n  subnetIds: ['subnetIds'],\n  transitGatewayId: 'transitGatewayId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  addSubnetIds: ['addSubnetIds'],\n  options: options,\n  removeSubnetIds: ['removeSubnetIds'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 15,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "717fbbd20eda707bcd4e1525816545a3e4c8e2983cf990c1b23b223fe8adaad1"
    },
    "f21ed0bb1fdff3fac8c2eea5c38019fd1351566ff6149789b6371eeb9a59787a": {
      "translations": {
        "python": {
          "source": "# cfn_template: cfn_inc.CfnInclude\n\n# using from*Attributes()\n# private_cfn_subnet1: ec2.CfnSubnet\n# private_cfn_subnet2: ec2.CfnSubnet\n\n\n# using from*Name()\ncfn_bucket = cfn_template.get_resource(\"Bucket\")\nbucket = s3.Bucket.from_bucket_name(self, \"L2Bucket\", cfn_bucket.ref)\n\n# using from*Arn()\ncfn_key = cfn_template.get_resource(\"Key\")\nkey = kms.Key.from_key_arn(self, \"L2Key\", cfn_key.attr_arn)\ncfn_vpc = cfn_template.get_resource(\"Vpc\")\nvpc = ec2.Vpc.from_vpc_attributes(self, \"L2Vpc\",\n    vpc_id=cfn_vpc.ref,\n    availability_zones=core.Fn.get_azs(),\n    private_subnet_ids=[private_cfn_subnet1.ref, private_cfn_subnet2.ref]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// using from*Attributes()\nCfnSubnet privateCfnSubnet1;\nCfnSubnet privateCfnSubnet2;\n\n\n// using from*Name()\nCfnBucket cfnBucket = (CfnBucket)cfnTemplate.GetResource(\"Bucket\");\nIBucket bucket = Bucket.FromBucketName(this, \"L2Bucket\", cfnBucket.Ref);\n\n// using from*Arn()\nCfnKey cfnKey = (CfnKey)cfnTemplate.GetResource(\"Key\");\nIKey key = Key.FromKeyArn(this, \"L2Key\", cfnKey.AttrArn);\nCfnVPC cfnVpc = (CfnVPC)cfnTemplate.GetResource(\"Vpc\");\nIVpc vpc = Vpc.FromVpcAttributes(this, \"L2Vpc\", new VpcAttributes {\n    VpcId = cfnVpc.Ref,\n    AvailabilityZones = Fn.GetAzs(),\n    PrivateSubnetIds = new [] { privateCfnSubnet1.Ref, privateCfnSubnet2.Ref }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// using from*Attributes()\nCfnSubnet privateCfnSubnet1;\nCfnSubnet privateCfnSubnet2;\n\n\n// using from*Name()\nCfnBucket cfnBucket = (CfnBucket)cfnTemplate.getResource(\"Bucket\");\nIBucket bucket = Bucket.fromBucketName(this, \"L2Bucket\", cfnBucket.getRef());\n\n// using from*Arn()\nCfnKey cfnKey = (CfnKey)cfnTemplate.getResource(\"Key\");\nIKey key = Key.fromKeyArn(this, \"L2Key\", cfnKey.getAttrArn());\nCfnVPC cfnVpc = (CfnVPC)cfnTemplate.getResource(\"Vpc\");\nIVpc vpc = Vpc.fromVpcAttributes(this, \"L2Vpc\", VpcAttributes.builder()\n        .vpcId(cfnVpc.getRef())\n        .availabilityZones(Fn.getAzs())\n        .privateSubnetIds(List.of(privateCfnSubnet1.getRef(), privateCfnSubnet2.getRef()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cfnTemplate cfnInclude\n\n// using from*Attributes()\nvar privateCfnSubnet1 cfnSubnet\nvar privateCfnSubnet2 cfnSubnet\n\n// using from*Name()\ncfnBucket := cfnTemplate.getResource(jsii.String(\"Bucket\")).(cfnBucket)\nbucket := s3.bucket.fromBucketName(this, jsii.String(\"L2Bucket\"), cfnBucket.ref)\n\n// using from*Arn()\ncfnKey := cfnTemplate.getResource(jsii.String(\"Key\")).(cfnKey)\nkey := kms.key.fromKeyArn(this, jsii.String(\"L2Key\"), cfnKey.attrArn)\ncfnVpc := cfnTemplate.getResource(jsii.String(\"Vpc\")).(cfnVPC)\nvpc := ec2.vpc.fromVpcAttributes(this, jsii.String(\"L2Vpc\"), &vpcAttributes{\n\tvpcId: cfnVpc.ref,\n\tavailabilityZones: core.fn.getAzs(),\n\tprivateSubnetIds: []*string{\n\t\tprivateCfnSubnet1.ref,\n\t\tprivateCfnSubnet2.ref,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\n\n// using from*Name()\nconst cfnBucket = cfnTemplate.getResource('Bucket') as s3.CfnBucket;\nconst bucket = s3.Bucket.fromBucketName(this, 'L2Bucket', cfnBucket.ref);\n\n// using from*Arn()\nconst cfnKey = cfnTemplate.getResource('Key') as kms.CfnKey;\nconst key = kms.Key.fromKeyArn(this, 'L2Key', cfnKey.attrArn);\n\n// using from*Attributes()\ndeclare const privateCfnSubnet1: ec2.CfnSubnet;\ndeclare const privateCfnSubnet2: ec2.CfnSubnet;\nconst cfnVpc = cfnTemplate.getResource('Vpc') as ec2.CfnVPC;\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'L2Vpc', {\n  vpcId: cfnVpc.ref,\n  availabilityZones: core.Fn.getAzs(),\n  privateSubnetIds: [privateCfnSubnet1.ref, privateCfnSubnet2.ref],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPC"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPC",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromVpcAttributes",
        "@aws-cdk/aws-ec2.VpcAttributes",
        "@aws-cdk/aws-kms.CfnKey",
        "@aws-cdk/aws-kms.CfnKey#attrArn",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.Key#fromKeyArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/cloudformation-include.CfnInclude#getResource",
        "@aws-cdk/core.Fn",
        "@aws-cdk/core.Fn#getAzs",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// using from*Attributes()\ndeclare const privateCfnSubnet1: ec2.CfnSubnet;\ndeclare const privateCfnSubnet2: ec2.CfnSubnet;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// using from*Name()\nconst cfnBucket = cfnTemplate.getResource('Bucket') as s3.CfnBucket;\nconst bucket = s3.Bucket.fromBucketName(this, 'L2Bucket', cfnBucket.ref);\n\n// using from*Arn()\nconst cfnKey = cfnTemplate.getResource('Key') as kms.CfnKey;\nconst key = kms.Key.fromKeyArn(this, 'L2Key', cfnKey.attrArn);\nconst cfnVpc = cfnTemplate.getResource('Vpc') as ec2.CfnVPC;\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'L2Vpc', {\n  vpcId: cfnVpc.ref,\n  availabilityZones: core.Fn.getAzs(),\n  privateSubnetIds: [privateCfnSubnet1.ref, privateCfnSubnet2.ref],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 52,
        "104": 3,
        "130": 3,
        "153": 6,
        "169": 6,
        "192": 1,
        "193": 1,
        "194": 16,
        "196": 7,
        "217": 3,
        "225": 9,
        "242": 9,
        "243": 9,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "464858084e07b1d7f59f38941cb3eb0e505c09d290d92dab31794b2811bc05ab"
    },
    "4baae5e360890ee9aa34424a409f28bff8efdfd9bf4d6b4a73be14fec065e8fe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCCidr_block = ec2.CfnVPCCidrBlock(self, \"MyCfnVPCCidrBlock\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    amazon_provided_ipv6_cidr_block=False,\n    cidr_block=\"cidrBlock\",\n    ipv4_ipam_pool_id=\"ipv4IpamPoolId\",\n    ipv4_netmask_length=123,\n    ipv6_cidr_block=\"ipv6CidrBlock\",\n    ipv6_ipam_pool_id=\"ipv6IpamPoolId\",\n    ipv6_netmask_length=123,\n    ipv6_pool=\"ipv6Pool\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCCidrBlock cfnVPCCidrBlock = new CfnVPCCidrBlock(this, \"MyCfnVPCCidrBlock\", new CfnVPCCidrBlockProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    AmazonProvidedIpv6CidrBlock = false,\n    CidrBlock = \"cidrBlock\",\n    Ipv4IpamPoolId = \"ipv4IpamPoolId\",\n    Ipv4NetmaskLength = 123,\n    Ipv6CidrBlock = \"ipv6CidrBlock\",\n    Ipv6IpamPoolId = \"ipv6IpamPoolId\",\n    Ipv6NetmaskLength = 123,\n    Ipv6Pool = \"ipv6Pool\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCCidrBlock cfnVPCCidrBlock = CfnVPCCidrBlock.Builder.create(this, \"MyCfnVPCCidrBlock\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .amazonProvidedIpv6CidrBlock(false)\n        .cidrBlock(\"cidrBlock\")\n        .ipv4IpamPoolId(\"ipv4IpamPoolId\")\n        .ipv4NetmaskLength(123)\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .ipv6IpamPoolId(\"ipv6IpamPoolId\")\n        .ipv6NetmaskLength(123)\n        .ipv6Pool(\"ipv6Pool\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCCidrBlock := ec2.NewCfnVPCCidrBlock(this, jsii.String(\"MyCfnVPCCidrBlock\"), &cfnVPCCidrBlockProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tamazonProvidedIpv6CidrBlock: jsii.Boolean(false),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tipv4IpamPoolId: jsii.String(\"ipv4IpamPoolId\"),\n\tipv4NetmaskLength: jsii.Number(123),\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n\tipv6IpamPoolId: jsii.String(\"ipv6IpamPoolId\"),\n\tipv6NetmaskLength: jsii.Number(123),\n\tipv6Pool: jsii.String(\"ipv6Pool\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCCidrBlock = new ec2.CfnVPCCidrBlock(this, 'MyCfnVPCCidrBlock', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  amazonProvidedIpv6CidrBlock: false,\n  cidrBlock: 'cidrBlock',\n  ipv4IpamPoolId: 'ipv4IpamPoolId',\n  ipv4NetmaskLength: 123,\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  ipv6IpamPoolId: 'ipv6IpamPoolId',\n  ipv6NetmaskLength: 123,\n  ipv6Pool: 'ipv6Pool',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCCidrBlock"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCCidrBlock",
        "@aws-cdk/aws-ec2.CfnVPCCidrBlockProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCCidrBlock = new ec2.CfnVPCCidrBlock(this, 'MyCfnVPCCidrBlock', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  amazonProvidedIpv6CidrBlock: false,\n  cidrBlock: 'cidrBlock',\n  ipv4IpamPoolId: 'ipv4IpamPoolId',\n  ipv4NetmaskLength: 123,\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  ipv6IpamPoolId: 'ipv6IpamPoolId',\n  ipv6NetmaskLength: 123,\n  ipv6Pool: 'ipv6Pool',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 13,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "3d99b89a305077b09d3f0fcb78608babd41ced2ab08903f31f6433eadc507303"
    },
    "6e746e00854104577617b024dd146f54ed4322c2e29b990ff202b003e2a918ee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCCidr_block_props = ec2.CfnVPCCidrBlockProps(\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    amazon_provided_ipv6_cidr_block=False,\n    cidr_block=\"cidrBlock\",\n    ipv4_ipam_pool_id=\"ipv4IpamPoolId\",\n    ipv4_netmask_length=123,\n    ipv6_cidr_block=\"ipv6CidrBlock\",\n    ipv6_ipam_pool_id=\"ipv6IpamPoolId\",\n    ipv6_netmask_length=123,\n    ipv6_pool=\"ipv6Pool\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCCidrBlockProps cfnVPCCidrBlockProps = new CfnVPCCidrBlockProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    AmazonProvidedIpv6CidrBlock = false,\n    CidrBlock = \"cidrBlock\",\n    Ipv4IpamPoolId = \"ipv4IpamPoolId\",\n    Ipv4NetmaskLength = 123,\n    Ipv6CidrBlock = \"ipv6CidrBlock\",\n    Ipv6IpamPoolId = \"ipv6IpamPoolId\",\n    Ipv6NetmaskLength = 123,\n    Ipv6Pool = \"ipv6Pool\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCCidrBlockProps cfnVPCCidrBlockProps = CfnVPCCidrBlockProps.builder()\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .amazonProvidedIpv6CidrBlock(false)\n        .cidrBlock(\"cidrBlock\")\n        .ipv4IpamPoolId(\"ipv4IpamPoolId\")\n        .ipv4NetmaskLength(123)\n        .ipv6CidrBlock(\"ipv6CidrBlock\")\n        .ipv6IpamPoolId(\"ipv6IpamPoolId\")\n        .ipv6NetmaskLength(123)\n        .ipv6Pool(\"ipv6Pool\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCCidrBlockProps := &cfnVPCCidrBlockProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tamazonProvidedIpv6CidrBlock: jsii.Boolean(false),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tipv4IpamPoolId: jsii.String(\"ipv4IpamPoolId\"),\n\tipv4NetmaskLength: jsii.Number(123),\n\tipv6CidrBlock: jsii.String(\"ipv6CidrBlock\"),\n\tipv6IpamPoolId: jsii.String(\"ipv6IpamPoolId\"),\n\tipv6NetmaskLength: jsii.Number(123),\n\tipv6Pool: jsii.String(\"ipv6Pool\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCCidrBlockProps: ec2.CfnVPCCidrBlockProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  amazonProvidedIpv6CidrBlock: false,\n  cidrBlock: 'cidrBlock',\n  ipv4IpamPoolId: 'ipv4IpamPoolId',\n  ipv4NetmaskLength: 123,\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  ipv6IpamPoolId: 'ipv6IpamPoolId',\n  ipv6NetmaskLength: 123,\n  ipv6Pool: 'ipv6Pool',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCCidrBlockProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCCidrBlockProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCCidrBlockProps: ec2.CfnVPCCidrBlockProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  amazonProvidedIpv6CidrBlock: false,\n  cidrBlock: 'cidrBlock',\n  ipv4IpamPoolId: 'ipv4IpamPoolId',\n  ipv4NetmaskLength: 123,\n  ipv6CidrBlock: 'ipv6CidrBlock',\n  ipv6IpamPoolId: 'ipv6IpamPoolId',\n  ipv6NetmaskLength: 123,\n  ipv6Pool: 'ipv6Pool',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 13,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "26ae115db97215a98f65dda4c8e94066dbbd5eef1ba75a20a43ca567c11b5168"
    },
    "dc5b6a4f551af60fc1e215e12667c18fc570959373a87856aab9413928edfe64": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCDHCPOptions_association = ec2.CfnVPCDHCPOptionsAssociation(self, \"MyCfnVPCDHCPOptionsAssociation\",\n    dhcp_options_id=\"dhcpOptionsId\",\n    vpc_id=\"vpcId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCDHCPOptionsAssociation cfnVPCDHCPOptionsAssociation = new CfnVPCDHCPOptionsAssociation(this, \"MyCfnVPCDHCPOptionsAssociation\", new CfnVPCDHCPOptionsAssociationProps {\n    DhcpOptionsId = \"dhcpOptionsId\",\n    VpcId = \"vpcId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCDHCPOptionsAssociation cfnVPCDHCPOptionsAssociation = CfnVPCDHCPOptionsAssociation.Builder.create(this, \"MyCfnVPCDHCPOptionsAssociation\")\n        .dhcpOptionsId(\"dhcpOptionsId\")\n        .vpcId(\"vpcId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCDHCPOptionsAssociation := ec2.NewCfnVPCDHCPOptionsAssociation(this, jsii.String(\"MyCfnVPCDHCPOptionsAssociation\"), &cfnVPCDHCPOptionsAssociationProps{\n\tdhcpOptionsId: jsii.String(\"dhcpOptionsId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCDHCPOptionsAssociation = new ec2.CfnVPCDHCPOptionsAssociation(this, 'MyCfnVPCDHCPOptionsAssociation', {\n  dhcpOptionsId: 'dhcpOptionsId',\n  vpcId: 'vpcId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCDHCPOptionsAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCDHCPOptionsAssociation",
        "@aws-cdk/aws-ec2.CfnVPCDHCPOptionsAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCDHCPOptionsAssociation = new ec2.CfnVPCDHCPOptionsAssociation(this, 'MyCfnVPCDHCPOptionsAssociation', {\n  dhcpOptionsId: 'dhcpOptionsId',\n  vpcId: 'vpcId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1bfa4e5d9ea3390373cdb1f2b143d06f4363a9f54a0828563564ae4acfb4f525"
    },
    "bd88ea731ced942254bbeaa83d7e6cec3efb4d9217a2b35942534b18e256c39c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCDHCPOptions_association_props = ec2.CfnVPCDHCPOptionsAssociationProps(\n    dhcp_options_id=\"dhcpOptionsId\",\n    vpc_id=\"vpcId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCDHCPOptionsAssociationProps cfnVPCDHCPOptionsAssociationProps = new CfnVPCDHCPOptionsAssociationProps {\n    DhcpOptionsId = \"dhcpOptionsId\",\n    VpcId = \"vpcId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCDHCPOptionsAssociationProps cfnVPCDHCPOptionsAssociationProps = CfnVPCDHCPOptionsAssociationProps.builder()\n        .dhcpOptionsId(\"dhcpOptionsId\")\n        .vpcId(\"vpcId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCDHCPOptionsAssociationProps := &cfnVPCDHCPOptionsAssociationProps{\n\tdhcpOptionsId: jsii.String(\"dhcpOptionsId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCDHCPOptionsAssociationProps: ec2.CfnVPCDHCPOptionsAssociationProps = {\n  dhcpOptionsId: 'dhcpOptionsId',\n  vpcId: 'vpcId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCDHCPOptionsAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCDHCPOptionsAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCDHCPOptionsAssociationProps: ec2.CfnVPCDHCPOptionsAssociationProps = {\n  dhcpOptionsId: 'dhcpOptionsId',\n  vpcId: 'vpcId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "97153aae6497cdb018733d7a0804ca00b04d89ccef6e9c9a1efbdbde7d01f5ab"
    },
    "7982345009920bb16a26417282a89659e3db254832302d307e44649d276a98d6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# policy_document: Any\n\ncfn_vPCEndpoint = ec2.CfnVPCEndpoint(self, \"MyCfnVPCEndpoint\",\n    service_name=\"serviceName\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    policy_document=policy_document,\n    private_dns_enabled=False,\n    route_table_ids=[\"routeTableIds\"],\n    security_group_ids=[\"securityGroupIds\"],\n    subnet_ids=[\"subnetIds\"],\n    vpc_endpoint_type=\"vpcEndpointType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar policyDocument;\n\nCfnVPCEndpoint cfnVPCEndpoint = new CfnVPCEndpoint(this, \"MyCfnVPCEndpoint\", new CfnVPCEndpointProps {\n    ServiceName = \"serviceName\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    PolicyDocument = policyDocument,\n    PrivateDnsEnabled = false,\n    RouteTableIds = new [] { \"routeTableIds\" },\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SubnetIds = new [] { \"subnetIds\" },\n    VpcEndpointType = \"vpcEndpointType\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject policyDocument;\n\nCfnVPCEndpoint cfnVPCEndpoint = CfnVPCEndpoint.Builder.create(this, \"MyCfnVPCEndpoint\")\n        .serviceName(\"serviceName\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .policyDocument(policyDocument)\n        .privateDnsEnabled(false)\n        .routeTableIds(List.of(\"routeTableIds\"))\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .subnetIds(List.of(\"subnetIds\"))\n        .vpcEndpointType(\"vpcEndpointType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar policyDocument interface{}\ncfnVPCEndpoint := ec2.NewCfnVPCEndpoint(this, jsii.String(\"MyCfnVPCEndpoint\"), &cfnVPCEndpointProps{\n\tserviceName: jsii.String(\"serviceName\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tpolicyDocument: policyDocument,\n\tprivateDnsEnabled: jsii.Boolean(false),\n\trouteTableIds: []*string{\n\t\tjsii.String(\"routeTableIds\"),\n\t},\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\tvpcEndpointType: jsii.String(\"vpcEndpointType\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const policyDocument: any;\nconst cfnVPCEndpoint = new ec2.CfnVPCEndpoint(this, 'MyCfnVPCEndpoint', {\n  serviceName: 'serviceName',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  policyDocument: policyDocument,\n  privateDnsEnabled: false,\n  routeTableIds: ['routeTableIds'],\n  securityGroupIds: ['securityGroupIds'],\n  subnetIds: ['subnetIds'],\n  vpcEndpointType: 'vpcEndpointType',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCEndpoint",
        "@aws-cdk/aws-ec2.CfnVPCEndpointProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const policyDocument: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCEndpoint = new ec2.CfnVPCEndpoint(this, 'MyCfnVPCEndpoint', {\n  serviceName: 'serviceName',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  policyDocument: policyDocument,\n  privateDnsEnabled: false,\n  routeTableIds: ['routeTableIds'],\n  securityGroupIds: ['securityGroupIds'],\n  subnetIds: ['subnetIds'],\n  vpcEndpointType: 'vpcEndpointType',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "91": 1,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "a6518f6c7272a6057553b07c287b8304f786a7d261cce4b750140d7fba4dccea"
    },
    "323dae15a560fa45986a47bf371ddaf8df53a9c3c596d9e0c90313e4e1fc519e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCEndpoint_connection_notification = ec2.CfnVPCEndpointConnectionNotification(self, \"MyCfnVPCEndpointConnectionNotification\",\n    connection_events=[\"connectionEvents\"],\n    connection_notification_arn=\"connectionNotificationArn\",\n\n    # the properties below are optional\n    service_id=\"serviceId\",\n    vpc_endpoint_id=\"vpcEndpointId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCEndpointConnectionNotification cfnVPCEndpointConnectionNotification = new CfnVPCEndpointConnectionNotification(this, \"MyCfnVPCEndpointConnectionNotification\", new CfnVPCEndpointConnectionNotificationProps {\n    ConnectionEvents = new [] { \"connectionEvents\" },\n    ConnectionNotificationArn = \"connectionNotificationArn\",\n\n    // the properties below are optional\n    ServiceId = \"serviceId\",\n    VpcEndpointId = \"vpcEndpointId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCEndpointConnectionNotification cfnVPCEndpointConnectionNotification = CfnVPCEndpointConnectionNotification.Builder.create(this, \"MyCfnVPCEndpointConnectionNotification\")\n        .connectionEvents(List.of(\"connectionEvents\"))\n        .connectionNotificationArn(\"connectionNotificationArn\")\n\n        // the properties below are optional\n        .serviceId(\"serviceId\")\n        .vpcEndpointId(\"vpcEndpointId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCEndpointConnectionNotification := ec2.NewCfnVPCEndpointConnectionNotification(this, jsii.String(\"MyCfnVPCEndpointConnectionNotification\"), &cfnVPCEndpointConnectionNotificationProps{\n\tconnectionEvents: []*string{\n\t\tjsii.String(\"connectionEvents\"),\n\t},\n\tconnectionNotificationArn: jsii.String(\"connectionNotificationArn\"),\n\n\t// the properties below are optional\n\tserviceId: jsii.String(\"serviceId\"),\n\tvpcEndpointId: jsii.String(\"vpcEndpointId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCEndpointConnectionNotification = new ec2.CfnVPCEndpointConnectionNotification(this, 'MyCfnVPCEndpointConnectionNotification', {\n  connectionEvents: ['connectionEvents'],\n  connectionNotificationArn: 'connectionNotificationArn',\n\n  // the properties below are optional\n  serviceId: 'serviceId',\n  vpcEndpointId: 'vpcEndpointId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCEndpointConnectionNotification"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCEndpointConnectionNotification",
        "@aws-cdk/aws-ec2.CfnVPCEndpointConnectionNotificationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCEndpointConnectionNotification = new ec2.CfnVPCEndpointConnectionNotification(this, 'MyCfnVPCEndpointConnectionNotification', {\n  connectionEvents: ['connectionEvents'],\n  connectionNotificationArn: 'connectionNotificationArn',\n\n  // the properties below are optional\n  serviceId: 'serviceId',\n  vpcEndpointId: 'vpcEndpointId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "41e50ccc8d9e62927ff2103e34f8089f4dd24f146af49006026c839a301c1004"
    },
    "95b66e0f7dbf90aa44a5909945502fd106ec7e005e0ffa054f02f1dc5c509299": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCEndpoint_connection_notification_props = ec2.CfnVPCEndpointConnectionNotificationProps(\n    connection_events=[\"connectionEvents\"],\n    connection_notification_arn=\"connectionNotificationArn\",\n\n    # the properties below are optional\n    service_id=\"serviceId\",\n    vpc_endpoint_id=\"vpcEndpointId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCEndpointConnectionNotificationProps cfnVPCEndpointConnectionNotificationProps = new CfnVPCEndpointConnectionNotificationProps {\n    ConnectionEvents = new [] { \"connectionEvents\" },\n    ConnectionNotificationArn = \"connectionNotificationArn\",\n\n    // the properties below are optional\n    ServiceId = \"serviceId\",\n    VpcEndpointId = \"vpcEndpointId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCEndpointConnectionNotificationProps cfnVPCEndpointConnectionNotificationProps = CfnVPCEndpointConnectionNotificationProps.builder()\n        .connectionEvents(List.of(\"connectionEvents\"))\n        .connectionNotificationArn(\"connectionNotificationArn\")\n\n        // the properties below are optional\n        .serviceId(\"serviceId\")\n        .vpcEndpointId(\"vpcEndpointId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCEndpointConnectionNotificationProps := &cfnVPCEndpointConnectionNotificationProps{\n\tconnectionEvents: []*string{\n\t\tjsii.String(\"connectionEvents\"),\n\t},\n\tconnectionNotificationArn: jsii.String(\"connectionNotificationArn\"),\n\n\t// the properties below are optional\n\tserviceId: jsii.String(\"serviceId\"),\n\tvpcEndpointId: jsii.String(\"vpcEndpointId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCEndpointConnectionNotificationProps: ec2.CfnVPCEndpointConnectionNotificationProps = {\n  connectionEvents: ['connectionEvents'],\n  connectionNotificationArn: 'connectionNotificationArn',\n\n  // the properties below are optional\n  serviceId: 'serviceId',\n  vpcEndpointId: 'vpcEndpointId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCEndpointConnectionNotificationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCEndpointConnectionNotificationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCEndpointConnectionNotificationProps: ec2.CfnVPCEndpointConnectionNotificationProps = {\n  connectionEvents: ['connectionEvents'],\n  connectionNotificationArn: 'connectionNotificationArn',\n\n  // the properties below are optional\n  serviceId: 'serviceId',\n  vpcEndpointId: 'vpcEndpointId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "5ab85186097b30559143413fad05ceec380879066727be78e3424dc29dbac020"
    },
    "1a252ebd599e6dca313d54f8e138ec3fecdf8a5c8704ab84f8d125b49ccd75ed": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# policy_document: Any\n\ncfn_vPCEndpoint_props = ec2.CfnVPCEndpointProps(\n    service_name=\"serviceName\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    policy_document=policy_document,\n    private_dns_enabled=False,\n    route_table_ids=[\"routeTableIds\"],\n    security_group_ids=[\"securityGroupIds\"],\n    subnet_ids=[\"subnetIds\"],\n    vpc_endpoint_type=\"vpcEndpointType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nvar policyDocument;\n\nCfnVPCEndpointProps cfnVPCEndpointProps = new CfnVPCEndpointProps {\n    ServiceName = \"serviceName\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    PolicyDocument = policyDocument,\n    PrivateDnsEnabled = false,\n    RouteTableIds = new [] { \"routeTableIds\" },\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SubnetIds = new [] { \"subnetIds\" },\n    VpcEndpointType = \"vpcEndpointType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nObject policyDocument;\n\nCfnVPCEndpointProps cfnVPCEndpointProps = CfnVPCEndpointProps.builder()\n        .serviceName(\"serviceName\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .policyDocument(policyDocument)\n        .privateDnsEnabled(false)\n        .routeTableIds(List.of(\"routeTableIds\"))\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .subnetIds(List.of(\"subnetIds\"))\n        .vpcEndpointType(\"vpcEndpointType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar policyDocument interface{}\ncfnVPCEndpointProps := &cfnVPCEndpointProps{\n\tserviceName: jsii.String(\"serviceName\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tpolicyDocument: policyDocument,\n\tprivateDnsEnabled: jsii.Boolean(false),\n\trouteTableIds: []*string{\n\t\tjsii.String(\"routeTableIds\"),\n\t},\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\tvpcEndpointType: jsii.String(\"vpcEndpointType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const policyDocument: any;\nconst cfnVPCEndpointProps: ec2.CfnVPCEndpointProps = {\n  serviceName: 'serviceName',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  policyDocument: policyDocument,\n  privateDnsEnabled: false,\n  routeTableIds: ['routeTableIds'],\n  securityGroupIds: ['securityGroupIds'],\n  subnetIds: ['subnetIds'],\n  vpcEndpointType: 'vpcEndpointType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCEndpointProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const policyDocument: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCEndpointProps: ec2.CfnVPCEndpointProps = {\n  serviceName: 'serviceName',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  policyDocument: policyDocument,\n  privateDnsEnabled: false,\n  routeTableIds: ['routeTableIds'],\n  securityGroupIds: ['securityGroupIds'],\n  subnetIds: ['subnetIds'],\n  vpcEndpointType: 'vpcEndpointType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "91": 1,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "08d254946847656f909f57dac3c0fd9ea3e971c1bad92525e71065d11117c95f"
    },
    "cb89a79e8fb439f95979b90e6163d15184214d1c6c3fe6ad66638ff19e85b069": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCEndpoint_service = ec2.CfnVPCEndpointService(self, \"MyCfnVPCEndpointService\",\n    acceptance_required=False,\n    gateway_load_balancer_arns=[\"gatewayLoadBalancerArns\"],\n    network_load_balancer_arns=[\"networkLoadBalancerArns\"],\n    payer_responsibility=\"payerResponsibility\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCEndpointService cfnVPCEndpointService = new CfnVPCEndpointService(this, \"MyCfnVPCEndpointService\", new CfnVPCEndpointServiceProps {\n    AcceptanceRequired = false,\n    GatewayLoadBalancerArns = new [] { \"gatewayLoadBalancerArns\" },\n    NetworkLoadBalancerArns = new [] { \"networkLoadBalancerArns\" },\n    PayerResponsibility = \"payerResponsibility\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCEndpointService cfnVPCEndpointService = CfnVPCEndpointService.Builder.create(this, \"MyCfnVPCEndpointService\")\n        .acceptanceRequired(false)\n        .gatewayLoadBalancerArns(List.of(\"gatewayLoadBalancerArns\"))\n        .networkLoadBalancerArns(List.of(\"networkLoadBalancerArns\"))\n        .payerResponsibility(\"payerResponsibility\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCEndpointService := ec2.NewCfnVPCEndpointService(this, jsii.String(\"MyCfnVPCEndpointService\"), &cfnVPCEndpointServiceProps{\n\tacceptanceRequired: jsii.Boolean(false),\n\tgatewayLoadBalancerArns: []*string{\n\t\tjsii.String(\"gatewayLoadBalancerArns\"),\n\t},\n\tnetworkLoadBalancerArns: []*string{\n\t\tjsii.String(\"networkLoadBalancerArns\"),\n\t},\n\tpayerResponsibility: jsii.String(\"payerResponsibility\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCEndpointService = new ec2.CfnVPCEndpointService(this, 'MyCfnVPCEndpointService', /* all optional props */ {\n  acceptanceRequired: false,\n  gatewayLoadBalancerArns: ['gatewayLoadBalancerArns'],\n  networkLoadBalancerArns: ['networkLoadBalancerArns'],\n  payerResponsibility: 'payerResponsibility',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCEndpointService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCEndpointService",
        "@aws-cdk/aws-ec2.CfnVPCEndpointServiceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCEndpointService = new ec2.CfnVPCEndpointService(this, 'MyCfnVPCEndpointService', /* all optional props */ {\n  acceptanceRequired: false,\n  gatewayLoadBalancerArns: ['gatewayLoadBalancerArns'],\n  networkLoadBalancerArns: ['networkLoadBalancerArns'],\n  payerResponsibility: 'payerResponsibility',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "91": 1,
        "104": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7c5efca9bbb3eaab352173f271462df0f74e46dff5e6678664d50d8825e4cb73"
    },
    "a31cdb0bf5fec21d2e4478cefd67655a8e0412e00d648ebe003b95c25e8caf83": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCEndpoint_service_permissions = ec2.CfnVPCEndpointServicePermissions(self, \"MyCfnVPCEndpointServicePermissions\",\n    service_id=\"serviceId\",\n\n    # the properties below are optional\n    allowed_principals=[\"allowedPrincipals\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCEndpointServicePermissions cfnVPCEndpointServicePermissions = new CfnVPCEndpointServicePermissions(this, \"MyCfnVPCEndpointServicePermissions\", new CfnVPCEndpointServicePermissionsProps {\n    ServiceId = \"serviceId\",\n\n    // the properties below are optional\n    AllowedPrincipals = new [] { \"allowedPrincipals\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCEndpointServicePermissions cfnVPCEndpointServicePermissions = CfnVPCEndpointServicePermissions.Builder.create(this, \"MyCfnVPCEndpointServicePermissions\")\n        .serviceId(\"serviceId\")\n\n        // the properties below are optional\n        .allowedPrincipals(List.of(\"allowedPrincipals\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCEndpointServicePermissions := ec2.NewCfnVPCEndpointServicePermissions(this, jsii.String(\"MyCfnVPCEndpointServicePermissions\"), &cfnVPCEndpointServicePermissionsProps{\n\tserviceId: jsii.String(\"serviceId\"),\n\n\t// the properties below are optional\n\tallowedPrincipals: []*string{\n\t\tjsii.String(\"allowedPrincipals\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCEndpointServicePermissions = new ec2.CfnVPCEndpointServicePermissions(this, 'MyCfnVPCEndpointServicePermissions', {\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  allowedPrincipals: ['allowedPrincipals'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCEndpointServicePermissions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCEndpointServicePermissions",
        "@aws-cdk/aws-ec2.CfnVPCEndpointServicePermissionsProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCEndpointServicePermissions = new ec2.CfnVPCEndpointServicePermissions(this, 'MyCfnVPCEndpointServicePermissions', {\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  allowedPrincipals: ['allowedPrincipals'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9d87655059d1f69cca057da341829469aa3cc47b6f0606f60e85522b9e8b3fac"
    },
    "40e40f67acff1212ec705ecdb2874b9f904bc1eab8f84f5e3801ed00f87a0cb3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCEndpoint_service_permissions_props = ec2.CfnVPCEndpointServicePermissionsProps(\n    service_id=\"serviceId\",\n\n    # the properties below are optional\n    allowed_principals=[\"allowedPrincipals\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCEndpointServicePermissionsProps cfnVPCEndpointServicePermissionsProps = new CfnVPCEndpointServicePermissionsProps {\n    ServiceId = \"serviceId\",\n\n    // the properties below are optional\n    AllowedPrincipals = new [] { \"allowedPrincipals\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCEndpointServicePermissionsProps cfnVPCEndpointServicePermissionsProps = CfnVPCEndpointServicePermissionsProps.builder()\n        .serviceId(\"serviceId\")\n\n        // the properties below are optional\n        .allowedPrincipals(List.of(\"allowedPrincipals\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCEndpointServicePermissionsProps := &cfnVPCEndpointServicePermissionsProps{\n\tserviceId: jsii.String(\"serviceId\"),\n\n\t// the properties below are optional\n\tallowedPrincipals: []*string{\n\t\tjsii.String(\"allowedPrincipals\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCEndpointServicePermissionsProps: ec2.CfnVPCEndpointServicePermissionsProps = {\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  allowedPrincipals: ['allowedPrincipals'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCEndpointServicePermissionsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCEndpointServicePermissionsProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCEndpointServicePermissionsProps: ec2.CfnVPCEndpointServicePermissionsProps = {\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  allowedPrincipals: ['allowedPrincipals'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "82e1f5df2d37342981dbafab768a7db4b50a89820bef6f72e2121f0414260749"
    },
    "b6c84cab1f1d83c70ec2cbbbb6b509a7b1165fe18545cb8d1472880f49f7352f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCEndpoint_service_props = ec2.CfnVPCEndpointServiceProps(\n    acceptance_required=False,\n    gateway_load_balancer_arns=[\"gatewayLoadBalancerArns\"],\n    network_load_balancer_arns=[\"networkLoadBalancerArns\"],\n    payer_responsibility=\"payerResponsibility\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCEndpointServiceProps cfnVPCEndpointServiceProps = new CfnVPCEndpointServiceProps {\n    AcceptanceRequired = false,\n    GatewayLoadBalancerArns = new [] { \"gatewayLoadBalancerArns\" },\n    NetworkLoadBalancerArns = new [] { \"networkLoadBalancerArns\" },\n    PayerResponsibility = \"payerResponsibility\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCEndpointServiceProps cfnVPCEndpointServiceProps = CfnVPCEndpointServiceProps.builder()\n        .acceptanceRequired(false)\n        .gatewayLoadBalancerArns(List.of(\"gatewayLoadBalancerArns\"))\n        .networkLoadBalancerArns(List.of(\"networkLoadBalancerArns\"))\n        .payerResponsibility(\"payerResponsibility\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCEndpointServiceProps := &cfnVPCEndpointServiceProps{\n\tacceptanceRequired: jsii.Boolean(false),\n\tgatewayLoadBalancerArns: []*string{\n\t\tjsii.String(\"gatewayLoadBalancerArns\"),\n\t},\n\tnetworkLoadBalancerArns: []*string{\n\t\tjsii.String(\"networkLoadBalancerArns\"),\n\t},\n\tpayerResponsibility: jsii.String(\"payerResponsibility\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCEndpointServiceProps: ec2.CfnVPCEndpointServiceProps = {\n  acceptanceRequired: false,\n  gatewayLoadBalancerArns: ['gatewayLoadBalancerArns'],\n  networkLoadBalancerArns: ['networkLoadBalancerArns'],\n  payerResponsibility: 'payerResponsibility',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCEndpointServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCEndpointServiceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCEndpointServiceProps: ec2.CfnVPCEndpointServiceProps = {\n  acceptanceRequired: false,\n  gatewayLoadBalancerArns: ['gatewayLoadBalancerArns'],\n  networkLoadBalancerArns: ['networkLoadBalancerArns'],\n  payerResponsibility: 'payerResponsibility',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b6527fdbf201e5f57c0116557e8c5f28927a95806e75fdbcf8b66e8137317930"
    },
    "52f001cc958d90efbe82c7d9f571ce098c629d2233388f863659e5570f402d36": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCGateway_attachment = ec2.CfnVPCGatewayAttachment(self, \"MyCfnVPCGatewayAttachment\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    internet_gateway_id=\"internetGatewayId\",\n    vpn_gateway_id=\"vpnGatewayId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCGatewayAttachment cfnVPCGatewayAttachment = new CfnVPCGatewayAttachment(this, \"MyCfnVPCGatewayAttachment\", new CfnVPCGatewayAttachmentProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    InternetGatewayId = \"internetGatewayId\",\n    VpnGatewayId = \"vpnGatewayId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCGatewayAttachment cfnVPCGatewayAttachment = CfnVPCGatewayAttachment.Builder.create(this, \"MyCfnVPCGatewayAttachment\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .internetGatewayId(\"internetGatewayId\")\n        .vpnGatewayId(\"vpnGatewayId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCGatewayAttachment := ec2.NewCfnVPCGatewayAttachment(this, jsii.String(\"MyCfnVPCGatewayAttachment\"), &cfnVPCGatewayAttachmentProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tinternetGatewayId: jsii.String(\"internetGatewayId\"),\n\tvpnGatewayId: jsii.String(\"vpnGatewayId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCGatewayAttachment = new ec2.CfnVPCGatewayAttachment(this, 'MyCfnVPCGatewayAttachment', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  internetGatewayId: 'internetGatewayId',\n  vpnGatewayId: 'vpnGatewayId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCGatewayAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCGatewayAttachment",
        "@aws-cdk/aws-ec2.CfnVPCGatewayAttachmentProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCGatewayAttachment = new ec2.CfnVPCGatewayAttachment(this, 'MyCfnVPCGatewayAttachment', {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  internetGatewayId: 'internetGatewayId',\n  vpnGatewayId: 'vpnGatewayId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4f9ff521a8d2847dd6549d63a08d4613bde3ba36a920f5849b9100ff64d8f4bb"
    },
    "5796ac7421108ebeecdf06937ef9ccb2dc66ea6fa40e3187be74378f14ce703c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCGateway_attachment_props = ec2.CfnVPCGatewayAttachmentProps(\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    internet_gateway_id=\"internetGatewayId\",\n    vpn_gateway_id=\"vpnGatewayId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCGatewayAttachmentProps cfnVPCGatewayAttachmentProps = new CfnVPCGatewayAttachmentProps {\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    InternetGatewayId = \"internetGatewayId\",\n    VpnGatewayId = \"vpnGatewayId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCGatewayAttachmentProps cfnVPCGatewayAttachmentProps = CfnVPCGatewayAttachmentProps.builder()\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .internetGatewayId(\"internetGatewayId\")\n        .vpnGatewayId(\"vpnGatewayId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCGatewayAttachmentProps := &cfnVPCGatewayAttachmentProps{\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tinternetGatewayId: jsii.String(\"internetGatewayId\"),\n\tvpnGatewayId: jsii.String(\"vpnGatewayId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCGatewayAttachmentProps: ec2.CfnVPCGatewayAttachmentProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  internetGatewayId: 'internetGatewayId',\n  vpnGatewayId: 'vpnGatewayId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCGatewayAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCGatewayAttachmentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCGatewayAttachmentProps: ec2.CfnVPCGatewayAttachmentProps = {\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  internetGatewayId: 'internetGatewayId',\n  vpnGatewayId: 'vpnGatewayId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "771f4b32e1aa34ebf50e0d76f00a41c641ada9eed8069b7b99f78d6792345f3b"
    },
    "c5b1d1b8dc3611e3e4cf357ddeeb377b78f16dc2a4b7b28dc94e073b60bb022a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCPeering_connection = ec2.CfnVPCPeeringConnection(self, \"MyCfnVPCPeeringConnection\",\n    peer_vpc_id=\"peerVpcId\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    peer_owner_id=\"peerOwnerId\",\n    peer_region=\"peerRegion\",\n    peer_role_arn=\"peerRoleArn\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCPeeringConnection cfnVPCPeeringConnection = new CfnVPCPeeringConnection(this, \"MyCfnVPCPeeringConnection\", new CfnVPCPeeringConnectionProps {\n    PeerVpcId = \"peerVpcId\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    PeerOwnerId = \"peerOwnerId\",\n    PeerRegion = \"peerRegion\",\n    PeerRoleArn = \"peerRoleArn\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCPeeringConnection cfnVPCPeeringConnection = CfnVPCPeeringConnection.Builder.create(this, \"MyCfnVPCPeeringConnection\")\n        .peerVpcId(\"peerVpcId\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .peerOwnerId(\"peerOwnerId\")\n        .peerRegion(\"peerRegion\")\n        .peerRoleArn(\"peerRoleArn\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCPeeringConnection := ec2.NewCfnVPCPeeringConnection(this, jsii.String(\"MyCfnVPCPeeringConnection\"), &cfnVPCPeeringConnectionProps{\n\tpeerVpcId: jsii.String(\"peerVpcId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tpeerOwnerId: jsii.String(\"peerOwnerId\"),\n\tpeerRegion: jsii.String(\"peerRegion\"),\n\tpeerRoleArn: jsii.String(\"peerRoleArn\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCPeeringConnection = new ec2.CfnVPCPeeringConnection(this, 'MyCfnVPCPeeringConnection', {\n  peerVpcId: 'peerVpcId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  peerOwnerId: 'peerOwnerId',\n  peerRegion: 'peerRegion',\n  peerRoleArn: 'peerRoleArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCPeeringConnection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCPeeringConnection",
        "@aws-cdk/aws-ec2.CfnVPCPeeringConnectionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCPeeringConnection = new ec2.CfnVPCPeeringConnection(this, 'MyCfnVPCPeeringConnection', {\n  peerVpcId: 'peerVpcId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  peerOwnerId: 'peerOwnerId',\n  peerRegion: 'peerRegion',\n  peerRoleArn: 'peerRoleArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "63d683c278074b2dcd781f7e2b42c888d0d7e7832a2421d9bd83a11a5c5ad842"
    },
    "9904feeba5587c78882677e7926ff0409365de23aef60e72210237ad9f353e74": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCPeering_connection_props = ec2.CfnVPCPeeringConnectionProps(\n    peer_vpc_id=\"peerVpcId\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    peer_owner_id=\"peerOwnerId\",\n    peer_region=\"peerRegion\",\n    peer_role_arn=\"peerRoleArn\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCPeeringConnectionProps cfnVPCPeeringConnectionProps = new CfnVPCPeeringConnectionProps {\n    PeerVpcId = \"peerVpcId\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    PeerOwnerId = \"peerOwnerId\",\n    PeerRegion = \"peerRegion\",\n    PeerRoleArn = \"peerRoleArn\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCPeeringConnectionProps cfnVPCPeeringConnectionProps = CfnVPCPeeringConnectionProps.builder()\n        .peerVpcId(\"peerVpcId\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .peerOwnerId(\"peerOwnerId\")\n        .peerRegion(\"peerRegion\")\n        .peerRoleArn(\"peerRoleArn\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCPeeringConnectionProps := &cfnVPCPeeringConnectionProps{\n\tpeerVpcId: jsii.String(\"peerVpcId\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tpeerOwnerId: jsii.String(\"peerOwnerId\"),\n\tpeerRegion: jsii.String(\"peerRegion\"),\n\tpeerRoleArn: jsii.String(\"peerRoleArn\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCPeeringConnectionProps: ec2.CfnVPCPeeringConnectionProps = {\n  peerVpcId: 'peerVpcId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  peerOwnerId: 'peerOwnerId',\n  peerRegion: 'peerRegion',\n  peerRoleArn: 'peerRoleArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCPeeringConnectionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCPeeringConnectionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCPeeringConnectionProps: ec2.CfnVPCPeeringConnectionProps = {\n  peerVpcId: 'peerVpcId',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  peerOwnerId: 'peerOwnerId',\n  peerRegion: 'peerRegion',\n  peerRoleArn: 'peerRoleArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 12,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "d8b86121674c44732b4a34ae6d1c987f84b27ce430d1adc5c41fc44059b34cc1"
    },
    "5bae53c85bf7f643ccd8d7a0d945fb14a5b2206b4b6832682e1aad8c4638fe24": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPCProps = ec2.CfnVPCProps(\n    cidr_block=\"cidrBlock\",\n\n    # the properties below are optional\n    enable_dns_hostnames=False,\n    enable_dns_support=False,\n    instance_tenancy=\"instanceTenancy\",\n    ipv4_ipam_pool_id=\"ipv4IpamPoolId\",\n    ipv4_netmask_length=123,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPCProps cfnVPCProps = new CfnVPCProps {\n    CidrBlock = \"cidrBlock\",\n\n    // the properties below are optional\n    EnableDnsHostnames = false,\n    EnableDnsSupport = false,\n    InstanceTenancy = \"instanceTenancy\",\n    Ipv4IpamPoolId = \"ipv4IpamPoolId\",\n    Ipv4NetmaskLength = 123,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPCProps cfnVPCProps = CfnVPCProps.builder()\n        .cidrBlock(\"cidrBlock\")\n\n        // the properties below are optional\n        .enableDnsHostnames(false)\n        .enableDnsSupport(false)\n        .instanceTenancy(\"instanceTenancy\")\n        .ipv4IpamPoolId(\"ipv4IpamPoolId\")\n        .ipv4NetmaskLength(123)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPCProps := &cfnVPCProps{\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\n\t// the properties below are optional\n\tenableDnsHostnames: jsii.Boolean(false),\n\tenableDnsSupport: jsii.Boolean(false),\n\tinstanceTenancy: jsii.String(\"instanceTenancy\"),\n\tipv4IpamPoolId: jsii.String(\"ipv4IpamPoolId\"),\n\tipv4NetmaskLength: jsii.Number(123),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPCProps: ec2.CfnVPCProps = {\n  cidrBlock: 'cidrBlock',\n\n  // the properties below are optional\n  enableDnsHostnames: false,\n  enableDnsSupport: false,\n  instanceTenancy: 'instanceTenancy',\n  ipv4IpamPoolId: 'ipv4IpamPoolId',\n  ipv4NetmaskLength: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPCProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPCProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPCProps: ec2.CfnVPCProps = {\n  cidrBlock: 'cidrBlock',\n\n  // the properties below are optional\n  enableDnsHostnames: false,\n  enableDnsSupport: false,\n  instanceTenancy: 'instanceTenancy',\n  ipv4IpamPoolId: 'ipv4IpamPoolId',\n  ipv4NetmaskLength: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 13,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "804d4fe9e48177fcc9b17a545bdfb032381362affff75fca4efb6d913cec2f88"
    },
    "50fe5da53bd89df8df36e70100c1e8d0764160cedeaefd9c1e1eb26f91b9374c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPNConnection = ec2.CfnVPNConnection(self, \"MyCfnVPNConnection\",\n    customer_gateway_id=\"customerGatewayId\",\n    type=\"type\",\n\n    # the properties below are optional\n    static_routes_only=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    transit_gateway_id=\"transitGatewayId\",\n    vpn_gateway_id=\"vpnGatewayId\",\n    vpn_tunnel_options_specifications=[ec2.CfnVPNConnection.VpnTunnelOptionsSpecificationProperty(\n        pre_shared_key=\"preSharedKey\",\n        tunnel_inside_cidr=\"tunnelInsideCidr\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPNConnection cfnVPNConnection = new CfnVPNConnection(this, \"MyCfnVPNConnection\", new CfnVPNConnectionProps {\n    CustomerGatewayId = \"customerGatewayId\",\n    Type = \"type\",\n\n    // the properties below are optional\n    StaticRoutesOnly = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TransitGatewayId = \"transitGatewayId\",\n    VpnGatewayId = \"vpnGatewayId\",\n    VpnTunnelOptionsSpecifications = new [] { new VpnTunnelOptionsSpecificationProperty {\n        PreSharedKey = \"preSharedKey\",\n        TunnelInsideCidr = \"tunnelInsideCidr\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPNConnection cfnVPNConnection = CfnVPNConnection.Builder.create(this, \"MyCfnVPNConnection\")\n        .customerGatewayId(\"customerGatewayId\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .staticRoutesOnly(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .transitGatewayId(\"transitGatewayId\")\n        .vpnGatewayId(\"vpnGatewayId\")\n        .vpnTunnelOptionsSpecifications(List.of(VpnTunnelOptionsSpecificationProperty.builder()\n                .preSharedKey(\"preSharedKey\")\n                .tunnelInsideCidr(\"tunnelInsideCidr\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPNConnection := ec2.NewCfnVPNConnection(this, jsii.String(\"MyCfnVPNConnection\"), &cfnVPNConnectionProps{\n\tcustomerGatewayId: jsii.String(\"customerGatewayId\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tstaticRoutesOnly: jsii.Boolean(false),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpnGatewayId: jsii.String(\"vpnGatewayId\"),\n\tvpnTunnelOptionsSpecifications: []interface{}{\n\t\t&vpnTunnelOptionsSpecificationProperty{\n\t\t\tpreSharedKey: jsii.String(\"preSharedKey\"),\n\t\t\ttunnelInsideCidr: jsii.String(\"tunnelInsideCidr\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPNConnection = new ec2.CfnVPNConnection(this, 'MyCfnVPNConnection', {\n  customerGatewayId: 'customerGatewayId',\n  type: 'type',\n\n  // the properties below are optional\n  staticRoutesOnly: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  transitGatewayId: 'transitGatewayId',\n  vpnGatewayId: 'vpnGatewayId',\n  vpnTunnelOptionsSpecifications: [{\n    preSharedKey: 'preSharedKey',\n    tunnelInsideCidr: 'tunnelInsideCidr',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNConnection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNConnection",
        "@aws-cdk/aws-ec2.CfnVPNConnectionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPNConnection = new ec2.CfnVPNConnection(this, 'MyCfnVPNConnection', {\n  customerGatewayId: 'customerGatewayId',\n  type: 'type',\n\n  // the properties below are optional\n  staticRoutesOnly: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  transitGatewayId: 'transitGatewayId',\n  vpnGatewayId: 'vpnGatewayId',\n  vpnTunnelOptionsSpecifications: [{\n    preSharedKey: 'preSharedKey',\n    tunnelInsideCidr: 'tunnelInsideCidr',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 15,
        "91": 1,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "2128afda0e7ba35cebb6d9f9ae30969076e9af8e3c3ff220e0863a3114407a7e"
    },
    "ad0e786fbcc38c8e6ba2638f59ae3ab4f6474aca230d4df8f9d76a13b518f056": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nvpn_tunnel_options_specification_property = ec2.CfnVPNConnection.VpnTunnelOptionsSpecificationProperty(\n    pre_shared_key=\"preSharedKey\",\n    tunnel_inside_cidr=\"tunnelInsideCidr\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nVpnTunnelOptionsSpecificationProperty vpnTunnelOptionsSpecificationProperty = new VpnTunnelOptionsSpecificationProperty {\n    PreSharedKey = \"preSharedKey\",\n    TunnelInsideCidr = \"tunnelInsideCidr\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nVpnTunnelOptionsSpecificationProperty vpnTunnelOptionsSpecificationProperty = VpnTunnelOptionsSpecificationProperty.builder()\n        .preSharedKey(\"preSharedKey\")\n        .tunnelInsideCidr(\"tunnelInsideCidr\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nvpnTunnelOptionsSpecificationProperty := &vpnTunnelOptionsSpecificationProperty{\n\tpreSharedKey: jsii.String(\"preSharedKey\"),\n\ttunnelInsideCidr: jsii.String(\"tunnelInsideCidr\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst vpnTunnelOptionsSpecificationProperty: ec2.CfnVPNConnection.VpnTunnelOptionsSpecificationProperty = {\n  preSharedKey: 'preSharedKey',\n  tunnelInsideCidr: 'tunnelInsideCidr',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNConnection.VpnTunnelOptionsSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNConnection.VpnTunnelOptionsSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpnTunnelOptionsSpecificationProperty: ec2.CfnVPNConnection.VpnTunnelOptionsSpecificationProperty = {\n  preSharedKey: 'preSharedKey',\n  tunnelInsideCidr: 'tunnelInsideCidr',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "34e70c03003946519899ed84e53b5e14e13f467b6d8d0ffb0ed63dcbf3b658e6"
    },
    "27abd59cd3d7e316b5de8ca1e0f3d1d3ac0dba7821aec1ab2c5c683f26525436": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPNConnection_props = ec2.CfnVPNConnectionProps(\n    customer_gateway_id=\"customerGatewayId\",\n    type=\"type\",\n\n    # the properties below are optional\n    static_routes_only=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    transit_gateway_id=\"transitGatewayId\",\n    vpn_gateway_id=\"vpnGatewayId\",\n    vpn_tunnel_options_specifications=[ec2.CfnVPNConnection.VpnTunnelOptionsSpecificationProperty(\n        pre_shared_key=\"preSharedKey\",\n        tunnel_inside_cidr=\"tunnelInsideCidr\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPNConnectionProps cfnVPNConnectionProps = new CfnVPNConnectionProps {\n    CustomerGatewayId = \"customerGatewayId\",\n    Type = \"type\",\n\n    // the properties below are optional\n    StaticRoutesOnly = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TransitGatewayId = \"transitGatewayId\",\n    VpnGatewayId = \"vpnGatewayId\",\n    VpnTunnelOptionsSpecifications = new [] { new VpnTunnelOptionsSpecificationProperty {\n        PreSharedKey = \"preSharedKey\",\n        TunnelInsideCidr = \"tunnelInsideCidr\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPNConnectionProps cfnVPNConnectionProps = CfnVPNConnectionProps.builder()\n        .customerGatewayId(\"customerGatewayId\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .staticRoutesOnly(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .transitGatewayId(\"transitGatewayId\")\n        .vpnGatewayId(\"vpnGatewayId\")\n        .vpnTunnelOptionsSpecifications(List.of(VpnTunnelOptionsSpecificationProperty.builder()\n                .preSharedKey(\"preSharedKey\")\n                .tunnelInsideCidr(\"tunnelInsideCidr\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPNConnectionProps := &cfnVPNConnectionProps{\n\tcustomerGatewayId: jsii.String(\"customerGatewayId\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tstaticRoutesOnly: jsii.Boolean(false),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttransitGatewayId: jsii.String(\"transitGatewayId\"),\n\tvpnGatewayId: jsii.String(\"vpnGatewayId\"),\n\tvpnTunnelOptionsSpecifications: []interface{}{\n\t\t&vpnTunnelOptionsSpecificationProperty{\n\t\t\tpreSharedKey: jsii.String(\"preSharedKey\"),\n\t\t\ttunnelInsideCidr: jsii.String(\"tunnelInsideCidr\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPNConnectionProps: ec2.CfnVPNConnectionProps = {\n  customerGatewayId: 'customerGatewayId',\n  type: 'type',\n\n  // the properties below are optional\n  staticRoutesOnly: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  transitGatewayId: 'transitGatewayId',\n  vpnGatewayId: 'vpnGatewayId',\n  vpnTunnelOptionsSpecifications: [{\n    preSharedKey: 'preSharedKey',\n    tunnelInsideCidr: 'tunnelInsideCidr',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNConnectionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNConnectionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPNConnectionProps: ec2.CfnVPNConnectionProps = {\n  customerGatewayId: 'customerGatewayId',\n  type: 'type',\n\n  // the properties below are optional\n  staticRoutesOnly: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  transitGatewayId: 'transitGatewayId',\n  vpnGatewayId: 'vpnGatewayId',\n  vpnTunnelOptionsSpecifications: [{\n    preSharedKey: 'preSharedKey',\n    tunnelInsideCidr: 'tunnelInsideCidr',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 15,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "237935c4273e9aec557f92666719ae66cf7fbcb3a8201e8d9262a20b41856247"
    },
    "c96f3584d32f8b03aaec6fbe3897fd6e09c804067da81a2f88fd21c2c23c5a5e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPNConnection_route = ec2.CfnVPNConnectionRoute(self, \"MyCfnVPNConnectionRoute\",\n    destination_cidr_block=\"destinationCidrBlock\",\n    vpn_connection_id=\"vpnConnectionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPNConnectionRoute cfnVPNConnectionRoute = new CfnVPNConnectionRoute(this, \"MyCfnVPNConnectionRoute\", new CfnVPNConnectionRouteProps {\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    VpnConnectionId = \"vpnConnectionId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPNConnectionRoute cfnVPNConnectionRoute = CfnVPNConnectionRoute.Builder.create(this, \"MyCfnVPNConnectionRoute\")\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .vpnConnectionId(\"vpnConnectionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPNConnectionRoute := ec2.NewCfnVPNConnectionRoute(this, jsii.String(\"MyCfnVPNConnectionRoute\"), &cfnVPNConnectionRouteProps{\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\tvpnConnectionId: jsii.String(\"vpnConnectionId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPNConnectionRoute = new ec2.CfnVPNConnectionRoute(this, 'MyCfnVPNConnectionRoute', {\n  destinationCidrBlock: 'destinationCidrBlock',\n  vpnConnectionId: 'vpnConnectionId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNConnectionRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNConnectionRoute",
        "@aws-cdk/aws-ec2.CfnVPNConnectionRouteProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPNConnectionRoute = new ec2.CfnVPNConnectionRoute(this, 'MyCfnVPNConnectionRoute', {\n  destinationCidrBlock: 'destinationCidrBlock',\n  vpnConnectionId: 'vpnConnectionId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d0efafc9820818880de8b7dd8958ff144aabb76316ace6668608cbc5cdf5b7ce"
    },
    "19fe8865fc12124f6b232c204fcc4ba32845034ac70cb9653120ee48e2c64492": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPNConnection_route_props = ec2.CfnVPNConnectionRouteProps(\n    destination_cidr_block=\"destinationCidrBlock\",\n    vpn_connection_id=\"vpnConnectionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPNConnectionRouteProps cfnVPNConnectionRouteProps = new CfnVPNConnectionRouteProps {\n    DestinationCidrBlock = \"destinationCidrBlock\",\n    VpnConnectionId = \"vpnConnectionId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPNConnectionRouteProps cfnVPNConnectionRouteProps = CfnVPNConnectionRouteProps.builder()\n        .destinationCidrBlock(\"destinationCidrBlock\")\n        .vpnConnectionId(\"vpnConnectionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPNConnectionRouteProps := &cfnVPNConnectionRouteProps{\n\tdestinationCidrBlock: jsii.String(\"destinationCidrBlock\"),\n\tvpnConnectionId: jsii.String(\"vpnConnectionId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPNConnectionRouteProps: ec2.CfnVPNConnectionRouteProps = {\n  destinationCidrBlock: 'destinationCidrBlock',\n  vpnConnectionId: 'vpnConnectionId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNConnectionRouteProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNConnectionRouteProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPNConnectionRouteProps: ec2.CfnVPNConnectionRouteProps = {\n  destinationCidrBlock: 'destinationCidrBlock',\n  vpnConnectionId: 'vpnConnectionId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b057f275132068e264be9e7dbe2fc0a9d69b0662d51676543748e0f1463b1c9f"
    },
    "df205c366012effc62246f60927e8bf3cebfc62e0909cf4ad83755c13bfe18c6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPNGateway = ec2.CfnVPNGateway(self, \"MyCfnVPNGateway\",\n    type=\"type\",\n\n    # the properties below are optional\n    amazon_side_asn=123,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPNGateway cfnVPNGateway = new CfnVPNGateway(this, \"MyCfnVPNGateway\", new CfnVPNGatewayProps {\n    Type = \"type\",\n\n    // the properties below are optional\n    AmazonSideAsn = 123,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPNGateway cfnVPNGateway = CfnVPNGateway.Builder.create(this, \"MyCfnVPNGateway\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .amazonSideAsn(123)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPNGateway := ec2.NewCfnVPNGateway(this, jsii.String(\"MyCfnVPNGateway\"), &cfnVPNGatewayProps{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tamazonSideAsn: jsii.Number(123),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPNGateway = new ec2.CfnVPNGateway(this, 'MyCfnVPNGateway', {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNGateway",
        "@aws-cdk/aws-ec2.CfnVPNGatewayProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPNGateway = new ec2.CfnVPNGateway(this, 'MyCfnVPNGateway', {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "303fb6cbaf81fb81d6fa668bbd9f153104580803f3ae01c0330c96b3a9528bb1"
    },
    "83011a1821fbb19b2884823d61b272eab71baa81357f0e5d5b9d16cb8cdf72c2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPNGateway_props = ec2.CfnVPNGatewayProps(\n    type=\"type\",\n\n    # the properties below are optional\n    amazon_side_asn=123,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPNGatewayProps cfnVPNGatewayProps = new CfnVPNGatewayProps {\n    Type = \"type\",\n\n    // the properties below are optional\n    AmazonSideAsn = 123,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPNGatewayProps cfnVPNGatewayProps = CfnVPNGatewayProps.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .amazonSideAsn(123)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPNGatewayProps := &cfnVPNGatewayProps{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tamazonSideAsn: jsii.Number(123),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPNGatewayProps: ec2.CfnVPNGatewayProps = {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPNGatewayProps: ec2.CfnVPNGatewayProps = {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "73d82f233c5a5a628a815a3d21045e38b0977c4cb9b56dcdb3f95e52e4857609"
    },
    "f95f73b984a6187542a283c16519bcaa7bdc2318828ff5fa4be110fc5ba54d17": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPNGateway_route_propagation = ec2.CfnVPNGatewayRoutePropagation(self, \"MyCfnVPNGatewayRoutePropagation\",\n    route_table_ids=[\"routeTableIds\"],\n    vpn_gateway_id=\"vpnGatewayId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPNGatewayRoutePropagation cfnVPNGatewayRoutePropagation = new CfnVPNGatewayRoutePropagation(this, \"MyCfnVPNGatewayRoutePropagation\", new CfnVPNGatewayRoutePropagationProps {\n    RouteTableIds = new [] { \"routeTableIds\" },\n    VpnGatewayId = \"vpnGatewayId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPNGatewayRoutePropagation cfnVPNGatewayRoutePropagation = CfnVPNGatewayRoutePropagation.Builder.create(this, \"MyCfnVPNGatewayRoutePropagation\")\n        .routeTableIds(List.of(\"routeTableIds\"))\n        .vpnGatewayId(\"vpnGatewayId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPNGatewayRoutePropagation := ec2.NewCfnVPNGatewayRoutePropagation(this, jsii.String(\"MyCfnVPNGatewayRoutePropagation\"), &cfnVPNGatewayRoutePropagationProps{\n\trouteTableIds: []*string{\n\t\tjsii.String(\"routeTableIds\"),\n\t},\n\tvpnGatewayId: jsii.String(\"vpnGatewayId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPNGatewayRoutePropagation = new ec2.CfnVPNGatewayRoutePropagation(this, 'MyCfnVPNGatewayRoutePropagation', {\n  routeTableIds: ['routeTableIds'],\n  vpnGatewayId: 'vpnGatewayId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNGatewayRoutePropagation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNGatewayRoutePropagation",
        "@aws-cdk/aws-ec2.CfnVPNGatewayRoutePropagationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPNGatewayRoutePropagation = new ec2.CfnVPNGatewayRoutePropagation(this, 'MyCfnVPNGatewayRoutePropagation', {\n  routeTableIds: ['routeTableIds'],\n  vpnGatewayId: 'vpnGatewayId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3b94ee8da36074a379a5253157f2e877634f7131744451eb4b1b7239250b55d0"
    },
    "aa23a1a97f89f6443f56be1353072e33c030bac83a79dba1cb8c341ecf6f6784": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_vPNGateway_route_propagation_props = ec2.CfnVPNGatewayRoutePropagationProps(\n    route_table_ids=[\"routeTableIds\"],\n    vpn_gateway_id=\"vpnGatewayId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVPNGatewayRoutePropagationProps cfnVPNGatewayRoutePropagationProps = new CfnVPNGatewayRoutePropagationProps {\n    RouteTableIds = new [] { \"routeTableIds\" },\n    VpnGatewayId = \"vpnGatewayId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVPNGatewayRoutePropagationProps cfnVPNGatewayRoutePropagationProps = CfnVPNGatewayRoutePropagationProps.builder()\n        .routeTableIds(List.of(\"routeTableIds\"))\n        .vpnGatewayId(\"vpnGatewayId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVPNGatewayRoutePropagationProps := &cfnVPNGatewayRoutePropagationProps{\n\trouteTableIds: []*string{\n\t\tjsii.String(\"routeTableIds\"),\n\t},\n\tvpnGatewayId: jsii.String(\"vpnGatewayId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVPNGatewayRoutePropagationProps: ec2.CfnVPNGatewayRoutePropagationProps = {\n  routeTableIds: ['routeTableIds'],\n  vpnGatewayId: 'vpnGatewayId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPNGatewayRoutePropagationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPNGatewayRoutePropagationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVPNGatewayRoutePropagationProps: ec2.CfnVPNGatewayRoutePropagationProps = {\n  routeTableIds: ['routeTableIds'],\n  vpnGatewayId: 'vpnGatewayId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6822194d8145ad11698a2608f11bce2f58da5ee05d8055669f8b3d5f90d8d834"
    },
    "afd26dcd589b035c63d6b2946d0e77cea15b03e400f7072c8f0d59ea5e60248a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_volume = ec2.CfnVolume(self, \"MyCfnVolume\",\n    availability_zone=\"availabilityZone\",\n\n    # the properties below are optional\n    auto_enable_io=False,\n    encrypted=False,\n    iops=123,\n    kms_key_id=\"kmsKeyId\",\n    multi_attach_enabled=False,\n    outpost_arn=\"outpostArn\",\n    size=123,\n    snapshot_id=\"snapshotId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    throughput=123,\n    volume_type=\"volumeType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVolume cfnVolume = new CfnVolume(this, \"MyCfnVolume\", new CfnVolumeProps {\n    AvailabilityZone = \"availabilityZone\",\n\n    // the properties below are optional\n    AutoEnableIo = false,\n    Encrypted = false,\n    Iops = 123,\n    KmsKeyId = \"kmsKeyId\",\n    MultiAttachEnabled = false,\n    OutpostArn = \"outpostArn\",\n    Size = 123,\n    SnapshotId = \"snapshotId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Throughput = 123,\n    VolumeType = \"volumeType\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVolume cfnVolume = CfnVolume.Builder.create(this, \"MyCfnVolume\")\n        .availabilityZone(\"availabilityZone\")\n\n        // the properties below are optional\n        .autoEnableIo(false)\n        .encrypted(false)\n        .iops(123)\n        .kmsKeyId(\"kmsKeyId\")\n        .multiAttachEnabled(false)\n        .outpostArn(\"outpostArn\")\n        .size(123)\n        .snapshotId(\"snapshotId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .throughput(123)\n        .volumeType(\"volumeType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVolume := ec2.NewCfnVolume(this, jsii.String(\"MyCfnVolume\"), &cfnVolumeProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\n\t// the properties below are optional\n\tautoEnableIo: jsii.Boolean(false),\n\tencrypted: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tmultiAttachEnabled: jsii.Boolean(false),\n\toutpostArn: jsii.String(\"outpostArn\"),\n\tsize: jsii.Number(123),\n\tsnapshotId: jsii.String(\"snapshotId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tthroughput: jsii.Number(123),\n\tvolumeType: jsii.String(\"volumeType\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVolume = new ec2.CfnVolume(this, 'MyCfnVolume', {\n  availabilityZone: 'availabilityZone',\n\n  // the properties below are optional\n  autoEnableIo: false,\n  encrypted: false,\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  multiAttachEnabled: false,\n  outpostArn: 'outpostArn',\n  size: 123,\n  snapshotId: 'snapshotId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throughput: 123,\n  volumeType: 'volumeType',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVolume"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVolume",
        "@aws-cdk/aws-ec2.CfnVolumeProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVolume = new ec2.CfnVolume(this, 'MyCfnVolume', {\n  availabilityZone: 'availabilityZone',\n\n  // the properties below are optional\n  autoEnableIo: false,\n  encrypted: false,\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  multiAttachEnabled: false,\n  outpostArn: 'outpostArn',\n  size: 123,\n  snapshotId: 'snapshotId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throughput: 123,\n  volumeType: 'volumeType',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 18,
        "91": 3,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "b042797f64e73a14f8611a0dab5f39d9662bcee56338de06b8085d60826e8be1"
    },
    "5b7d6d9bc219de48060efc0fc369c888e5e2e32fe94406a293bb058a66356580": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_volume_attachment = ec2.CfnVolumeAttachment(self, \"MyCfnVolumeAttachment\",\n    device=\"device\",\n    instance_id=\"instanceId\",\n    volume_id=\"volumeId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVolumeAttachment cfnVolumeAttachment = new CfnVolumeAttachment(this, \"MyCfnVolumeAttachment\", new CfnVolumeAttachmentProps {\n    Device = \"device\",\n    InstanceId = \"instanceId\",\n    VolumeId = \"volumeId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVolumeAttachment cfnVolumeAttachment = CfnVolumeAttachment.Builder.create(this, \"MyCfnVolumeAttachment\")\n        .device(\"device\")\n        .instanceId(\"instanceId\")\n        .volumeId(\"volumeId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVolumeAttachment := ec2.NewCfnVolumeAttachment(this, jsii.String(\"MyCfnVolumeAttachment\"), &cfnVolumeAttachmentProps{\n\tdevice: jsii.String(\"device\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tvolumeId: jsii.String(\"volumeId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVolumeAttachment = new ec2.CfnVolumeAttachment(this, 'MyCfnVolumeAttachment', {\n  device: 'device',\n  instanceId: 'instanceId',\n  volumeId: 'volumeId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVolumeAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVolumeAttachment",
        "@aws-cdk/aws-ec2.CfnVolumeAttachmentProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVolumeAttachment = new ec2.CfnVolumeAttachment(this, 'MyCfnVolumeAttachment', {\n  device: 'device',\n  instanceId: 'instanceId',\n  volumeId: 'volumeId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6acf9c0ce2c7fb0bb99ba78eeebb9275b48677e30ca23f45d876f6d459ff9b1e"
    },
    "a7f7fc3b72f5ea9db38fdd7888eb8a89cd24a79bb7e87dd4bcac08cc2dfe7911": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_volume_attachment_props = ec2.CfnVolumeAttachmentProps(\n    device=\"device\",\n    instance_id=\"instanceId\",\n    volume_id=\"volumeId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVolumeAttachmentProps cfnVolumeAttachmentProps = new CfnVolumeAttachmentProps {\n    Device = \"device\",\n    InstanceId = \"instanceId\",\n    VolumeId = \"volumeId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVolumeAttachmentProps cfnVolumeAttachmentProps = CfnVolumeAttachmentProps.builder()\n        .device(\"device\")\n        .instanceId(\"instanceId\")\n        .volumeId(\"volumeId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVolumeAttachmentProps := &cfnVolumeAttachmentProps{\n\tdevice: jsii.String(\"device\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n\tvolumeId: jsii.String(\"volumeId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVolumeAttachmentProps: ec2.CfnVolumeAttachmentProps = {\n  device: 'device',\n  instanceId: 'instanceId',\n  volumeId: 'volumeId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVolumeAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVolumeAttachmentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVolumeAttachmentProps: ec2.CfnVolumeAttachmentProps = {\n  device: 'device',\n  instanceId: 'instanceId',\n  volumeId: 'volumeId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d23aebb8a5eba9b1a7ee6f7c321debd32f4b22a27e59ba3378af68b32fa29f73"
    },
    "303b1b375308534406f421130d5f05f031d4540546a4b1132b6ed9d1b898e0af": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ncfn_volume_props = ec2.CfnVolumeProps(\n    availability_zone=\"availabilityZone\",\n\n    # the properties below are optional\n    auto_enable_io=False,\n    encrypted=False,\n    iops=123,\n    kms_key_id=\"kmsKeyId\",\n    multi_attach_enabled=False,\n    outpost_arn=\"outpostArn\",\n    size=123,\n    snapshot_id=\"snapshotId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    throughput=123,\n    volume_type=\"volumeType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nCfnVolumeProps cfnVolumeProps = new CfnVolumeProps {\n    AvailabilityZone = \"availabilityZone\",\n\n    // the properties below are optional\n    AutoEnableIo = false,\n    Encrypted = false,\n    Iops = 123,\n    KmsKeyId = \"kmsKeyId\",\n    MultiAttachEnabled = false,\n    OutpostArn = \"outpostArn\",\n    Size = 123,\n    SnapshotId = \"snapshotId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Throughput = 123,\n    VolumeType = \"volumeType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nCfnVolumeProps cfnVolumeProps = CfnVolumeProps.builder()\n        .availabilityZone(\"availabilityZone\")\n\n        // the properties below are optional\n        .autoEnableIo(false)\n        .encrypted(false)\n        .iops(123)\n        .kmsKeyId(\"kmsKeyId\")\n        .multiAttachEnabled(false)\n        .outpostArn(\"outpostArn\")\n        .size(123)\n        .snapshotId(\"snapshotId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .throughput(123)\n        .volumeType(\"volumeType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ncfnVolumeProps := &cfnVolumeProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\n\t// the properties below are optional\n\tautoEnableIo: jsii.Boolean(false),\n\tencrypted: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tmultiAttachEnabled: jsii.Boolean(false),\n\toutpostArn: jsii.String(\"outpostArn\"),\n\tsize: jsii.Number(123),\n\tsnapshotId: jsii.String(\"snapshotId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tthroughput: jsii.Number(123),\n\tvolumeType: jsii.String(\"volumeType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst cfnVolumeProps: ec2.CfnVolumeProps = {\n  availabilityZone: 'availabilityZone',\n\n  // the properties below are optional\n  autoEnableIo: false,\n  encrypted: false,\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  multiAttachEnabled: false,\n  outpostArn: 'outpostArn',\n  size: 123,\n  snapshotId: 'snapshotId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throughput: 123,\n  volumeType: 'volumeType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVolumeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVolumeProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVolumeProps: ec2.CfnVolumeProps = {\n  availabilityZone: 'availabilityZone',\n\n  // the properties below are optional\n  autoEnableIo: false,\n  encrypted: false,\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  multiAttachEnabled: false,\n  outpostArn: 'outpostArn',\n  size: 123,\n  snapshotId: 'snapshotId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throughput: 123,\n  volumeType: 'volumeType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 18,
        "91": 3,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "1b268f1cb17179896ccd36293b55d1283c4a59e9b103d25217cb6beeb747b3bc"
    },
    "30460f903d86f6e7513f1585b5fb6dcc975fcebd2ef5ed56e4985e83abd3af41": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# client_vpn_endpoint: ec2.ClientVpnEndpoint\n\nclient_vpn_authorization_rule = ec2.ClientVpnAuthorizationRule(self, \"MyClientVpnAuthorizationRule\",\n    cidr=\"cidr\",\n\n    # the properties below are optional\n    client_vpn_endoint=client_vpn_endpoint,\n    client_vpn_endpoint=client_vpn_endpoint,\n    description=\"description\",\n    group_id=\"groupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClientVpnEndpoint clientVpnEndpoint;\n\nClientVpnAuthorizationRule clientVpnAuthorizationRule = new ClientVpnAuthorizationRule(this, \"MyClientVpnAuthorizationRule\", new ClientVpnAuthorizationRuleProps {\n    Cidr = \"cidr\",\n\n    // the properties below are optional\n    ClientVpnEndoint = clientVpnEndpoint,\n    ClientVpnEndpoint = clientVpnEndpoint,\n    Description = \"description\",\n    GroupId = \"groupId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClientVpnEndpoint clientVpnEndpoint;\n\nClientVpnAuthorizationRule clientVpnAuthorizationRule = ClientVpnAuthorizationRule.Builder.create(this, \"MyClientVpnAuthorizationRule\")\n        .cidr(\"cidr\")\n\n        // the properties below are optional\n        .clientVpnEndoint(clientVpnEndpoint)\n        .clientVpnEndpoint(clientVpnEndpoint)\n        .description(\"description\")\n        .groupId(\"groupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar clientVpnEndpoint clientVpnEndpoint\nclientVpnAuthorizationRule := ec2.NewClientVpnAuthorizationRule(this, jsii.String(\"MyClientVpnAuthorizationRule\"), &clientVpnAuthorizationRuleProps{\n\tcidr: jsii.String(\"cidr\"),\n\n\t// the properties below are optional\n\tclientVpnEndoint: clientVpnEndpoint,\n\tclientVpnEndpoint: clientVpnEndpoint,\n\tdescription: jsii.String(\"description\"),\n\tgroupId: jsii.String(\"groupId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const clientVpnEndpoint: ec2.ClientVpnEndpoint;\nconst clientVpnAuthorizationRule = new ec2.ClientVpnAuthorizationRule(this, 'MyClientVpnAuthorizationRule', {\n  cidr: 'cidr',\n\n  // the properties below are optional\n  clientVpnEndoint: clientVpnEndpoint,\n  clientVpnEndpoint: clientVpnEndpoint,\n  description: 'description',\n  groupId: 'groupId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnAuthorizationRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleProps",
        "@aws-cdk/aws-ec2.IClientVpnEndpoint",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const clientVpnEndpoint: ec2.ClientVpnEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientVpnAuthorizationRule = new ec2.ClientVpnAuthorizationRule(this, 'MyClientVpnAuthorizationRule', {\n  cidr: 'cidr',\n\n  // the properties below are optional\n  clientVpnEndoint: clientVpnEndpoint,\n  clientVpnEndpoint: clientVpnEndpoint,\n  description: 'description',\n  groupId: 'groupId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "42ea2228543c600b7111c3e29b815ebebee76842c4ad9c5716c8016193c9f881"
    },
    "233bba9f0a9c0b11a64a89877acaeaa90655ec6b7ef201e0e2b90a06a2830823": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "endpoint := vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n\tauthorizeAllUsersToVpcCidr: jsii.Boolean(false),\n})\n\nendpoint.addAuthorizationRule(jsii.String(\"Rule\"), &clientVpnAuthorizationRuleOptions{\n\tcidr: jsii.String(\"10.0.10.0/32\"),\n\tgroupId: jsii.String(\"group-id\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "0156f3186a7e24a15f2785981fbbbe6987714064ff2d8ab4d33846a0d089ab36"
    },
    "aad2beee40db1466450ddd26ec78f78a7794c08bb449e66a8255f04bb158f58d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# client_vpn_endpoint: ec2.ClientVpnEndpoint\n\nclient_vpn_authorization_rule_props = ec2.ClientVpnAuthorizationRuleProps(\n    cidr=\"cidr\",\n\n    # the properties below are optional\n    client_vpn_endoint=client_vpn_endpoint,\n    client_vpn_endpoint=client_vpn_endpoint,\n    description=\"description\",\n    group_id=\"groupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClientVpnEndpoint clientVpnEndpoint;\n\nClientVpnAuthorizationRuleProps clientVpnAuthorizationRuleProps = new ClientVpnAuthorizationRuleProps {\n    Cidr = \"cidr\",\n\n    // the properties below are optional\n    ClientVpnEndoint = clientVpnEndpoint,\n    ClientVpnEndpoint = clientVpnEndpoint,\n    Description = \"description\",\n    GroupId = \"groupId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClientVpnEndpoint clientVpnEndpoint;\n\nClientVpnAuthorizationRuleProps clientVpnAuthorizationRuleProps = ClientVpnAuthorizationRuleProps.builder()\n        .cidr(\"cidr\")\n\n        // the properties below are optional\n        .clientVpnEndoint(clientVpnEndpoint)\n        .clientVpnEndpoint(clientVpnEndpoint)\n        .description(\"description\")\n        .groupId(\"groupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar clientVpnEndpoint clientVpnEndpoint\nclientVpnAuthorizationRuleProps := &clientVpnAuthorizationRuleProps{\n\tcidr: jsii.String(\"cidr\"),\n\n\t// the properties below are optional\n\tclientVpnEndoint: clientVpnEndpoint,\n\tclientVpnEndpoint: clientVpnEndpoint,\n\tdescription: jsii.String(\"description\"),\n\tgroupId: jsii.String(\"groupId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const clientVpnEndpoint: ec2.ClientVpnEndpoint;\nconst clientVpnAuthorizationRuleProps: ec2.ClientVpnAuthorizationRuleProps = {\n  cidr: 'cidr',\n\n  // the properties below are optional\n  clientVpnEndoint: clientVpnEndpoint,\n  clientVpnEndpoint: clientVpnEndpoint,\n  description: 'description',\n  groupId: 'groupId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleProps",
        "@aws-cdk/aws-ec2.IClientVpnEndpoint"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const clientVpnEndpoint: ec2.ClientVpnEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientVpnAuthorizationRuleProps: ec2.ClientVpnAuthorizationRuleProps = {\n  cidr: 'cidr',\n\n  // the properties below are optional\n  clientVpnEndoint: clientVpnEndpoint,\n  clientVpnEndpoint: clientVpnEndpoint,\n  description: 'description',\n  groupId: 'groupId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "53006b5fafa4085bf9b66bbcf3ed1d4edb1d648bfe9b208fd251876c9ec1220c"
    },
    "e4f796eca5a6014297bc9bca63c2439969684ae72424485b8aab6dbc4fece8d6": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "endpoint := vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n\tauthorizeAllUsersToVpcCidr: jsii.Boolean(false),\n})\n\nendpoint.addAuthorizationRule(jsii.String(\"Rule\"), &clientVpnAuthorizationRuleOptions{\n\tcidr: jsii.String(\"10.0.10.0/32\"),\n\tgroupId: jsii.String(\"group-id\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "0156f3186a7e24a15f2785981fbbbe6987714064ff2d8ab4d33846a0d089ab36"
    },
    "c3cbbcc710b2f8f1056126a5bfc536c76ed2e323b357ee7e0d9d0222bb767fc2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# security_group: ec2.SecurityGroup\n\nclient_vpn_endpoint_attributes = ec2.ClientVpnEndpointAttributes(\n    endpoint_id=\"endpointId\",\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSecurityGroup securityGroup;\n\nClientVpnEndpointAttributes clientVpnEndpointAttributes = new ClientVpnEndpointAttributes {\n    EndpointId = \"endpointId\",\n    SecurityGroups = new [] { securityGroup }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSecurityGroup securityGroup;\n\nClientVpnEndpointAttributes clientVpnEndpointAttributes = ClientVpnEndpointAttributes.builder()\n        .endpointId(\"endpointId\")\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar securityGroup securityGroup\nclientVpnEndpointAttributes := &clientVpnEndpointAttributes{\n\tendpointId: jsii.String(\"endpointId\"),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst clientVpnEndpointAttributes: ec2.ClientVpnEndpointAttributes = {\n  endpointId: 'endpointId',\n  securityGroups: [securityGroup],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnEndpointAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpointAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientVpnEndpointAttributes: ec2.ClientVpnEndpointAttributes = {\n  endpointId: 'endpointId',\n  securityGroups: [securityGroup],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a26690b87d76eece453a982424145f0a29f6beb34c4553a8fdf1d63596554ead"
    },
    "1d1019ecd7ba5950446bdeda8b0886a37445b33b7e223cacc3fb0ec390238e9e": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "endpoint := vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n\tauthorizeAllUsersToVpcCidr: jsii.Boolean(false),\n})\n\nendpoint.addAuthorizationRule(jsii.String(\"Rule\"), &clientVpnAuthorizationRuleOptions{\n\tcidr: jsii.String(\"10.0.10.0/32\"),\n\tgroupId: jsii.String(\"group-id\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnEndpointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "0156f3186a7e24a15f2785981fbbbe6987714064ff2d8ab4d33846a0d089ab36"
    },
    "f588b50d22e9eaa127cc0edd5c1e0f64cde8e9d0e70aca1d916388868b1e88aa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_logs as logs\n\n# client_vpn_connection_handler: ec2.IClientVpnConnectionHandler\n# client_vpn_user_based_authentication: ec2.ClientVpnUserBasedAuthentication\n# log_group: logs.LogGroup\n# log_stream: logs.LogStream\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\nclient_vpn_endpoint_props = ec2.ClientVpnEndpointProps(\n    cidr=\"cidr\",\n    server_certificate_arn=\"serverCertificateArn\",\n    vpc=vpc,\n\n    # the properties below are optional\n    authorize_all_users_to_vpc_cidr=False,\n    client_certificate_arn=\"clientCertificateArn\",\n    client_connection_handler=client_vpn_connection_handler,\n    client_login_banner=\"clientLoginBanner\",\n    description=\"description\",\n    dns_servers=[\"dnsServers\"],\n    logging=False,\n    log_group=log_group,\n    log_stream=log_stream,\n    port=ec2.VpnPort.HTTPS,\n    security_groups=[security_group],\n    self_service_portal=False,\n    session_timeout=ec2.ClientVpnSessionTimeout.EIGHT_HOURS,\n    split_tunnel=False,\n    transport_protocol=ec2.TransportProtocol.TCP,\n    user_based_authentication=client_vpn_user_based_authentication,\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.Logs;\n\nIClientVpnConnectionHandler clientVpnConnectionHandler;\nClientVpnUserBasedAuthentication clientVpnUserBasedAuthentication;\nLogGroup logGroup;\nLogStream logStream;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nClientVpnEndpointProps clientVpnEndpointProps = new ClientVpnEndpointProps {\n    Cidr = \"cidr\",\n    ServerCertificateArn = \"serverCertificateArn\",\n    Vpc = vpc,\n\n    // the properties below are optional\n    AuthorizeAllUsersToVpcCidr = false,\n    ClientCertificateArn = \"clientCertificateArn\",\n    ClientConnectionHandler = clientVpnConnectionHandler,\n    ClientLoginBanner = \"clientLoginBanner\",\n    Description = \"description\",\n    DnsServers = new [] { \"dnsServers\" },\n    Logging = false,\n    LogGroup = logGroup,\n    LogStream = logStream,\n    Port = VpnPort.HTTPS,\n    SecurityGroups = new [] { securityGroup },\n    SelfServicePortal = false,\n    SessionTimeout = ClientVpnSessionTimeout.EIGHT_HOURS,\n    SplitTunnel = false,\n    TransportProtocol = TransportProtocol.TCP,\n    UserBasedAuthentication = clientVpnUserBasedAuthentication,\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.logs.*;\n\nIClientVpnConnectionHandler clientVpnConnectionHandler;\nClientVpnUserBasedAuthentication clientVpnUserBasedAuthentication;\nLogGroup logGroup;\nLogStream logStream;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nClientVpnEndpointProps clientVpnEndpointProps = ClientVpnEndpointProps.builder()\n        .cidr(\"cidr\")\n        .serverCertificateArn(\"serverCertificateArn\")\n        .vpc(vpc)\n\n        // the properties below are optional\n        .authorizeAllUsersToVpcCidr(false)\n        .clientCertificateArn(\"clientCertificateArn\")\n        .clientConnectionHandler(clientVpnConnectionHandler)\n        .clientLoginBanner(\"clientLoginBanner\")\n        .description(\"description\")\n        .dnsServers(List.of(\"dnsServers\"))\n        .logging(false)\n        .logGroup(logGroup)\n        .logStream(logStream)\n        .port(VpnPort.HTTPS)\n        .securityGroups(List.of(securityGroup))\n        .selfServicePortal(false)\n        .sessionTimeout(ClientVpnSessionTimeout.EIGHT_HOURS)\n        .splitTunnel(false)\n        .transportProtocol(TransportProtocol.TCP)\n        .userBasedAuthentication(clientVpnUserBasedAuthentication)\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import logs \"github.com/aws-samples/dummy/awscdkawslogs\"\n\nvar clientVpnConnectionHandler iClientVpnConnectionHandler\nvar clientVpnUserBasedAuthentication clientVpnUserBasedAuthentication\nvar logGroup logGroup\nvar logStream logStream\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\nclientVpnEndpointProps := &clientVpnEndpointProps{\n\tcidr: jsii.String(\"cidr\"),\n\tserverCertificateArn: jsii.String(\"serverCertificateArn\"),\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tauthorizeAllUsersToVpcCidr: jsii.Boolean(false),\n\tclientCertificateArn: jsii.String(\"clientCertificateArn\"),\n\tclientConnectionHandler: clientVpnConnectionHandler,\n\tclientLoginBanner: jsii.String(\"clientLoginBanner\"),\n\tdescription: jsii.String(\"description\"),\n\tdnsServers: []*string{\n\t\tjsii.String(\"dnsServers\"),\n\t},\n\tlogging: jsii.Boolean(false),\n\tlogGroup: logGroup,\n\tlogStream: logStream,\n\tport: ec2.vpnPort_HTTPS,\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n\tselfServicePortal: jsii.Boolean(false),\n\tsessionTimeout: ec2.clientVpnSessionTimeout_EIGHT_HOURS,\n\tsplitTunnel: jsii.Boolean(false),\n\ttransportProtocol: ec2.transportProtocol_TCP,\n\tuserBasedAuthentication: clientVpnUserBasedAuthentication,\n\tvpcSubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const clientVpnConnectionHandler: ec2.IClientVpnConnectionHandler;\ndeclare const clientVpnUserBasedAuthentication: ec2.ClientVpnUserBasedAuthentication;\ndeclare const logGroup: logs.LogGroup;\ndeclare const logStream: logs.LogStream;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst clientVpnEndpointProps: ec2.ClientVpnEndpointProps = {\n  cidr: 'cidr',\n  serverCertificateArn: 'serverCertificateArn',\n  vpc: vpc,\n\n  // the properties below are optional\n  authorizeAllUsersToVpcCidr: false,\n  clientCertificateArn: 'clientCertificateArn',\n  clientConnectionHandler: clientVpnConnectionHandler,\n  clientLoginBanner: 'clientLoginBanner',\n  description: 'description',\n  dnsServers: ['dnsServers'],\n  logging: false,\n  logGroup: logGroup,\n  logStream: logStream,\n  port: ec2.VpnPort.HTTPS,\n  securityGroups: [securityGroup],\n  selfServicePortal: false,\n  sessionTimeout: ec2.ClientVpnSessionTimeout.EIGHT_HOURS,\n  splitTunnel: false,\n  transportProtocol: ec2.TransportProtocol.TCP,\n  userBasedAuthentication: clientVpnUserBasedAuthentication,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpointProps",
        "@aws-cdk/aws-ec2.ClientVpnSessionTimeout",
        "@aws-cdk/aws-ec2.ClientVpnSessionTimeout#EIGHT_HOURS",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.IClientVpnConnectionHandler",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.TransportProtocol",
        "@aws-cdk/aws-ec2.TransportProtocol#TCP",
        "@aws-cdk/aws-ec2.VpnPort",
        "@aws-cdk/aws-ec2.VpnPort#HTTPS",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.ILogStream"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as logs from '@aws-cdk/aws-logs';\n\ndeclare const clientVpnConnectionHandler: ec2.IClientVpnConnectionHandler;\ndeclare const clientVpnUserBasedAuthentication: ec2.ClientVpnUserBasedAuthentication;\ndeclare const logGroup: logs.LogGroup;\ndeclare const logStream: logs.LogStream;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientVpnEndpointProps: ec2.ClientVpnEndpointProps = {\n  cidr: 'cidr',\n  serverCertificateArn: 'serverCertificateArn',\n  vpc: vpc,\n\n  // the properties below are optional\n  authorizeAllUsersToVpcCidr: false,\n  clientCertificateArn: 'clientCertificateArn',\n  clientConnectionHandler: clientVpnConnectionHandler,\n  clientLoginBanner: 'clientLoginBanner',\n  description: 'description',\n  dnsServers: ['dnsServers'],\n  logging: false,\n  logGroup: logGroup,\n  logStream: logStream,\n  port: ec2.VpnPort.HTTPS,\n  securityGroups: [securityGroup],\n  selfServicePortal: false,\n  sessionTimeout: ec2.ClientVpnSessionTimeout.EIGHT_HOURS,\n  splitTunnel: false,\n  transportProtocol: ec2.TransportProtocol.TCP,\n  userBasedAuthentication: clientVpnUserBasedAuthentication,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 76,
        "91": 5,
        "130": 8,
        "153": 9,
        "169": 9,
        "192": 5,
        "193": 2,
        "194": 8,
        "225": 9,
        "242": 9,
        "243": 9,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 27,
        "290": 1
      },
      "fqnsFingerprint": "496640ea5f0e5119fc5cc208fce9c37f045bdaa1fc2f690ce359e5993fac8274"
    },
    "7f9342ecc8540a7420300e66d9341a709bfa2108cd16cf4f6c335c58373dc6e0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# client_vpn_endpoint: ec2.ClientVpnEndpoint\n# client_vpn_route_target: ec2.ClientVpnRouteTarget\n\nclient_vpn_route = ec2.ClientVpnRoute(self, \"MyClientVpnRoute\",\n    cidr=\"cidr\",\n    target=client_vpn_route_target,\n\n    # the properties below are optional\n    client_vpn_endoint=client_vpn_endpoint,\n    client_vpn_endpoint=client_vpn_endpoint,\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClientVpnEndpoint clientVpnEndpoint;\nClientVpnRouteTarget clientVpnRouteTarget;\n\nClientVpnRoute clientVpnRoute = new ClientVpnRoute(this, \"MyClientVpnRoute\", new ClientVpnRouteProps {\n    Cidr = \"cidr\",\n    Target = clientVpnRouteTarget,\n\n    // the properties below are optional\n    ClientVpnEndoint = clientVpnEndpoint,\n    ClientVpnEndpoint = clientVpnEndpoint,\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClientVpnEndpoint clientVpnEndpoint;\nClientVpnRouteTarget clientVpnRouteTarget;\n\nClientVpnRoute clientVpnRoute = ClientVpnRoute.Builder.create(this, \"MyClientVpnRoute\")\n        .cidr(\"cidr\")\n        .target(clientVpnRouteTarget)\n\n        // the properties below are optional\n        .clientVpnEndoint(clientVpnEndpoint)\n        .clientVpnEndpoint(clientVpnEndpoint)\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar clientVpnEndpoint clientVpnEndpoint\nvar clientVpnRouteTarget clientVpnRouteTarget\nclientVpnRoute := ec2.NewClientVpnRoute(this, jsii.String(\"MyClientVpnRoute\"), &clientVpnRouteProps{\n\tcidr: jsii.String(\"cidr\"),\n\ttarget: clientVpnRouteTarget,\n\n\t// the properties below are optional\n\tclientVpnEndoint: clientVpnEndpoint,\n\tclientVpnEndpoint: clientVpnEndpoint,\n\tdescription: jsii.String(\"description\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const clientVpnEndpoint: ec2.ClientVpnEndpoint;\ndeclare const clientVpnRouteTarget: ec2.ClientVpnRouteTarget;\nconst clientVpnRoute = new ec2.ClientVpnRoute(this, 'MyClientVpnRoute', {\n  cidr: 'cidr',\n  target: clientVpnRouteTarget,\n\n  // the properties below are optional\n  clientVpnEndoint: clientVpnEndpoint,\n  clientVpnEndpoint: clientVpnEndpoint,\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnRoute",
        "@aws-cdk/aws-ec2.ClientVpnRouteProps",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget",
        "@aws-cdk/aws-ec2.IClientVpnEndpoint",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const clientVpnEndpoint: ec2.ClientVpnEndpoint;\ndeclare const clientVpnRouteTarget: ec2.ClientVpnRouteTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientVpnRoute = new ec2.ClientVpnRoute(this, 'MyClientVpnRoute', {\n  cidr: 'cidr',\n  target: clientVpnRouteTarget,\n\n  // the properties below are optional\n  clientVpnEndoint: clientVpnEndpoint,\n  clientVpnEndpoint: clientVpnEndpoint,\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6b25acb44a4b626f362dab98035977cb0300ac250ae2597c3f16b9856b0ddf7e"
    },
    "8761e29f6c22c49e09fe6a82989f4f4849a84da3199c9974b9ab0a9e2e67cae6": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider)\n)\n\n# Client-to-client access\nendpoint.add_route(\"Route\",\n    cidr=\"10.100.0.0/16\",\n    target=ec2.ClientVpnRouteTarget.local()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider)\n});\n\n// Client-to-client access\nendpoint.AddRoute(\"Route\", new ClientVpnRouteOptions {\n    Cidr = \"10.100.0.0/16\",\n    Target = ClientVpnRouteTarget.Local()\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .build());\n\n// Client-to-client access\nendpoint.addRoute(\"Route\", ClientVpnRouteOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .target(ClientVpnRouteTarget.local())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "endpoint := vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n})\n\n// Client-to-client access\nendpoint.addRoute(jsii.String(\"Route\"), &clientVpnRouteOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\ttarget: ec2.clientVpnRouteTarget.local(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnRouteOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addRoute",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget#local",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 17,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "4373e8618890c0ec9e163529e0d7ca52f16951f6700d94d12997d3017a3d586c"
    },
    "c508899aea9b059038022e988483c58ca048580cd82ddde6aad39d866f14ed80": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# client_vpn_endpoint: ec2.ClientVpnEndpoint\n# client_vpn_route_target: ec2.ClientVpnRouteTarget\n\nclient_vpn_route_props = ec2.ClientVpnRouteProps(\n    cidr=\"cidr\",\n    target=client_vpn_route_target,\n\n    # the properties below are optional\n    client_vpn_endoint=client_vpn_endpoint,\n    client_vpn_endpoint=client_vpn_endpoint,\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nClientVpnEndpoint clientVpnEndpoint;\nClientVpnRouteTarget clientVpnRouteTarget;\n\nClientVpnRouteProps clientVpnRouteProps = new ClientVpnRouteProps {\n    Cidr = \"cidr\",\n    Target = clientVpnRouteTarget,\n\n    // the properties below are optional\n    ClientVpnEndoint = clientVpnEndpoint,\n    ClientVpnEndpoint = clientVpnEndpoint,\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nClientVpnEndpoint clientVpnEndpoint;\nClientVpnRouteTarget clientVpnRouteTarget;\n\nClientVpnRouteProps clientVpnRouteProps = ClientVpnRouteProps.builder()\n        .cidr(\"cidr\")\n        .target(clientVpnRouteTarget)\n\n        // the properties below are optional\n        .clientVpnEndoint(clientVpnEndpoint)\n        .clientVpnEndpoint(clientVpnEndpoint)\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar clientVpnEndpoint clientVpnEndpoint\nvar clientVpnRouteTarget clientVpnRouteTarget\nclientVpnRouteProps := &clientVpnRouteProps{\n\tcidr: jsii.String(\"cidr\"),\n\ttarget: clientVpnRouteTarget,\n\n\t// the properties below are optional\n\tclientVpnEndoint: clientVpnEndpoint,\n\tclientVpnEndpoint: clientVpnEndpoint,\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const clientVpnEndpoint: ec2.ClientVpnEndpoint;\ndeclare const clientVpnRouteTarget: ec2.ClientVpnRouteTarget;\nconst clientVpnRouteProps: ec2.ClientVpnRouteProps = {\n  cidr: 'cidr',\n  target: clientVpnRouteTarget,\n\n  // the properties below are optional\n  clientVpnEndoint: clientVpnEndpoint,\n  clientVpnEndpoint: clientVpnEndpoint,\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnRouteProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnRouteProps",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget",
        "@aws-cdk/aws-ec2.IClientVpnEndpoint"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const clientVpnEndpoint: ec2.ClientVpnEndpoint;\ndeclare const clientVpnRouteTarget: ec2.ClientVpnRouteTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clientVpnRouteProps: ec2.ClientVpnRouteProps = {\n  cidr: 'cidr',\n  target: clientVpnRouteTarget,\n\n  // the properties below are optional\n  clientVpnEndoint: clientVpnEndpoint,\n  clientVpnEndpoint: clientVpnEndpoint,\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "01fc7564ab4d505e979072e9cbffe464bf7f9362004f613c931ab2f9a463113f"
    },
    "5a71a76e614a05d85f1cc24cad8918c48ea3c70ca8ce1fa0cf31d99f4c32924b": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider)\n)\n\n# Client-to-client access\nendpoint.add_route(\"Route\",\n    cidr=\"10.100.0.0/16\",\n    target=ec2.ClientVpnRouteTarget.local()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider)\n});\n\n// Client-to-client access\nendpoint.AddRoute(\"Route\", new ClientVpnRouteOptions {\n    Cidr = \"10.100.0.0/16\",\n    Target = ClientVpnRouteTarget.Local()\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .build());\n\n// Client-to-client access\nendpoint.addRoute(\"Route\", ClientVpnRouteOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .target(ClientVpnRouteTarget.local())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "endpoint := vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n})\n\n// Client-to-client access\nendpoint.addRoute(jsii.String(\"Route\"), &clientVpnRouteOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\ttarget: ec2.clientVpnRouteTarget.local(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnRouteTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addRoute",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget#local",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 17,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "4373e8618890c0ec9e163529e0d7ca52f16951f6700d94d12997d3017a3d586c"
    },
    "882a8c6d93dd0c11e694a3ec8d07b3e90131ab5e63df7d300ead067a4f5914cd": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "endpoint := vpc.addClientVpnEndpoint(jsii.String(\"Endpoint\"), &clientVpnEndpointOptions{\n\tcidr: jsii.String(\"10.100.0.0/16\"),\n\tserverCertificateArn: jsii.String(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\"),\n\tuserBasedAuthentication: ec2.clientVpnUserBasedAuthentication.federated(samlProvider),\n\tauthorizeAllUsersToVpcCidr: jsii.Boolean(false),\n})\n\nendpoint.addAuthorizationRule(jsii.String(\"Rule\"), &clientVpnAuthorizationRuleOptions{\n\tcidr: jsii.String(\"10.0.10.0/32\"),\n\tgroupId: jsii.String(\"group-id\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "0156f3186a7e24a15f2785981fbbbe6987714064ff2d8ab4d33846a0d089ab36"
    },
    "6bed7e4a275737c29d94216789d39d56315a389b2f3ea9caba84435451053f42": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CloudFormationInit"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "af5f863f9bf8336ee066bb967cdcf750b94332cdc2c857dc7cf68fabbac925ec": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# acl_cidr: ec2.AclCidr\n# acl_traffic: ec2.AclTraffic\n\ncommon_network_acl_entry_options = ec2.CommonNetworkAclEntryOptions(\n    cidr=acl_cidr,\n    rule_number=123,\n    traffic=acl_traffic,\n\n    # the properties below are optional\n    direction=ec2.TrafficDirection.EGRESS,\n    network_acl_entry_name=\"networkAclEntryName\",\n    rule_action=ec2.Action.ALLOW\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclCidr aclCidr;\nAclTraffic aclTraffic;\n\nCommonNetworkAclEntryOptions commonNetworkAclEntryOptions = new CommonNetworkAclEntryOptions {\n    Cidr = aclCidr,\n    RuleNumber = 123,\n    Traffic = aclTraffic,\n\n    // the properties below are optional\n    Direction = TrafficDirection.EGRESS,\n    NetworkAclEntryName = \"networkAclEntryName\",\n    RuleAction = Action.ALLOW\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclCidr aclCidr;\nAclTraffic aclTraffic;\n\nCommonNetworkAclEntryOptions commonNetworkAclEntryOptions = CommonNetworkAclEntryOptions.builder()\n        .cidr(aclCidr)\n        .ruleNumber(123)\n        .traffic(aclTraffic)\n\n        // the properties below are optional\n        .direction(TrafficDirection.EGRESS)\n        .networkAclEntryName(\"networkAclEntryName\")\n        .ruleAction(Action.ALLOW)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar aclCidr aclCidr\nvar aclTraffic aclTraffic\ncommonNetworkAclEntryOptions := &commonNetworkAclEntryOptions{\n\tcidr: aclCidr,\n\truleNumber: jsii.Number(123),\n\ttraffic: aclTraffic,\n\n\t// the properties below are optional\n\tdirection: ec2.trafficDirection_EGRESS,\n\tnetworkAclEntryName: jsii.String(\"networkAclEntryName\"),\n\truleAction: ec2.action_ALLOW,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const aclCidr: ec2.AclCidr;\ndeclare const aclTraffic: ec2.AclTraffic;\nconst commonNetworkAclEntryOptions: ec2.CommonNetworkAclEntryOptions = {\n  cidr: aclCidr,\n  ruleNumber: 123,\n  traffic: aclTraffic,\n\n  // the properties below are optional\n  direction: ec2.TrafficDirection.EGRESS,\n  networkAclEntryName: 'networkAclEntryName',\n  ruleAction: ec2.Action.ALLOW,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CommonNetworkAclEntryOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclCidr",
        "@aws-cdk/aws-ec2.AclTraffic",
        "@aws-cdk/aws-ec2.Action",
        "@aws-cdk/aws-ec2.Action#ALLOW",
        "@aws-cdk/aws-ec2.CommonNetworkAclEntryOptions",
        "@aws-cdk/aws-ec2.TrafficDirection",
        "@aws-cdk/aws-ec2.TrafficDirection#EGRESS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const aclCidr: ec2.AclCidr;\ndeclare const aclTraffic: ec2.AclTraffic;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonNetworkAclEntryOptions: ec2.CommonNetworkAclEntryOptions = {\n  cidr: aclCidr,\n  ruleNumber: 123,\n  traffic: aclTraffic,\n\n  // the properties below are optional\n  direction: ec2.TrafficDirection.EGRESS,\n  networkAclEntryName: 'networkAclEntryName',\n  ruleAction: ec2.Action.ALLOW,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 24,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "23da7dcdaeb42c3cfdf4b4031efb45bf1d4051552ac68988c1515efc9ba0572a"
    },
    "71f883696512d9f91bfc72920ab3325ba1e2c6cde06a4964c1baf53472a083e4": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// Showing the most complex setup, if you have simpler requirements\n\t// you can use `CloudFormationInit.fromElements()`.\n\tinit: ec2.cloudFormationInit.fromConfigSets(&configSetProps{\n\t\tconfigSets: map[string][]*string{\n\t\t\t// Applies the configs below in this order\n\t\t\t\"default\": []*string{\n\t\t\t\tjsii.String(\"yumPreinstall\"),\n\t\t\t\tjsii.String(\"config\"),\n\t\t\t},\n\t\t},\n\t\tconfigs: map[string]initConfig{\n\t\t\t\"yumPreinstall\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitPackage.yum(jsii.String(\"git\")),\n\t\t\t}),\n\t\t\t\"config\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitFile.fromObject(jsii.String(\"/etc/stack.json\"), map[string]interface{}{\n\t\t\t\t\t\"stackId\": *stack.of(this).stackId,\n\t\t\t\t\t\"stackName\": *stack.of(this).stackName,\n\t\t\t\t\t\"region\": *stack.of(this).region,\n\t\t\t\t}),\n\t\t\t\tec2.InitGroup.fromName(jsii.String(\"my-group\")),\n\t\t\t\tec2.InitUser.fromName(jsii.String(\"my-user\")),\n\t\t\t\tec2.InitPackage.rpm(jsii.String(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")),\n\t\t\t}),\n\t\t},\n\t}),\n\tinitOptions: &applyCloudFormationInitOptions{\n\t\t// Optional, which configsets to activate (['default'] by default)\n\t\tconfigSets: []*string{\n\t\t\tjsii.String(\"default\"),\n\t\t},\n\n\t\t// Optional, how long the installation is expected to take (5 minutes by default)\n\t\ttimeout: duration.minutes(jsii.Number(30)),\n\n\t\t// Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeUrl: jsii.Boolean(true),\n\n\t\t// Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeRole: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ConfigSetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e09877ee77c7133a1ded3fbcac431c014557be3ac85f628eb43b417156d12366"
    },
    "1e32bb9f26912fea8183c91e20532b289acf0edba7c29b35d0fc073e43f05c8e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# private_subnet: ec2.PrivateSubnet\n# public_subnet: ec2.PublicSubnet\n# vpc: ec2.Vpc\n\nconfigure_nat_options = ec2.ConfigureNatOptions(\n    nat_subnets=[public_subnet],\n    private_subnets=[private_subnet],\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateSubnet privateSubnet;\nPublicSubnet publicSubnet;\nVpc vpc;\n\nConfigureNatOptions configureNatOptions = new ConfigureNatOptions {\n    NatSubnets = new [] { publicSubnet },\n    PrivateSubnets = new [] { privateSubnet },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateSubnet privateSubnet;\nPublicSubnet publicSubnet;\nVpc vpc;\n\nConfigureNatOptions configureNatOptions = ConfigureNatOptions.builder()\n        .natSubnets(List.of(publicSubnet))\n        .privateSubnets(List.of(privateSubnet))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar privateSubnet privateSubnet\nvar publicSubnet publicSubnet\nvar vpc vpc\nconfigureNatOptions := &configureNatOptions{\n\tnatSubnets: []*publicSubnet{\n\t\tpublicSubnet,\n\t},\n\tprivateSubnets: []*privateSubnet{\n\t\tprivateSubnet,\n\t},\n\tvpc: vpc,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const privateSubnet: ec2.PrivateSubnet;\ndeclare const publicSubnet: ec2.PublicSubnet;\ndeclare const vpc: ec2.Vpc;\nconst configureNatOptions: ec2.ConfigureNatOptions = {\n  natSubnets: [publicSubnet],\n  privateSubnets: [privateSubnet],\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ConfigureNatOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ConfigureNatOptions",
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const privateSubnet: ec2.PrivateSubnet;\ndeclare const publicSubnet: ec2.PublicSubnet;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst configureNatOptions: ec2.ConfigureNatOptions = {\n  natSubnets: [publicSubnet],\n  privateSubnets: [privateSubnet],\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 2,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0a92f67ac9c77b4261b4265adb6bb8d999cf0c6efa87affc4306aa31da2d9c9d"
    },
    "6b2b1d69d97f189ee5041b82bc8866ab145c43c71ee893aaed70c0ff5f84344c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nconnection_rule = ec2.ConnectionRule(\n    from_port=123,\n\n    # the properties below are optional\n    description=\"description\",\n    protocol=\"protocol\",\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nConnectionRule connectionRule = new ConnectionRule {\n    FromPort = 123,\n\n    // the properties below are optional\n    Description = \"description\",\n    Protocol = \"protocol\",\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nConnectionRule connectionRule = ConnectionRule.builder()\n        .fromPort(123)\n\n        // the properties below are optional\n        .description(\"description\")\n        .protocol(\"protocol\")\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nconnectionRule := &connectionRule{\n\tfromPort: jsii.Number(123),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tprotocol: jsii.String(\"protocol\"),\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst connectionRule: ec2.ConnectionRule = {\n  fromPort: 123,\n\n  // the properties below are optional\n  description: 'description',\n  protocol: 'protocol',\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ConnectionRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ConnectionRule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connectionRule: ec2.ConnectionRule = {\n  fromPort: 123,\n\n  // the properties below are optional\n  description: 'description',\n  protocol: 'protocol',\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "03a4e0e464e19686a4f445e12f3df4c094640c36f7cd615bac615d6e28043ebe"
    },
    "34b8ba523655ffeb5977a47ae51b736dc30827c1ee1de416df538a149437835c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# peer: ec2.IPeer\n# port: ec2.Port\n# security_group: ec2.SecurityGroup\n\nconnections = ec2.Connections(\n    default_port=port,\n    peer=peer,\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIPeer peer;\nPort port;\nSecurityGroup securityGroup;\n\nConnections connections = new Connections(new ConnectionsProps {\n    DefaultPort = port,\n    Peer = peer,\n    SecurityGroups = new [] { securityGroup }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIPeer peer;\nPort port;\nSecurityGroup securityGroup;\n\nConnections connections = Connections.Builder.create()\n        .defaultPort(port)\n        .peer(peer)\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar peer iPeer\nvar port port\nvar securityGroup securityGroup\nconnections := ec2.NewConnections(&connectionsProps{\n\tdefaultPort: port,\n\tpeer: peer,\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const peer: ec2.IPeer;\ndeclare const port: ec2.Port;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst connections = new ec2.Connections(/* all optional props */ {\n  defaultPort: port,\n  peer: peer,\n  securityGroups: [securityGroup],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Connections"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections",
        "@aws-cdk/aws-ec2.ConnectionsProps",
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.Port"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const peer: ec2.IPeer;\ndeclare const port: ec2.Port;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connections = new ec2.Connections(/* all optional props */ {\n  defaultPort: port,\n  peer: peer,\n  securityGroups: [securityGroup],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d8c1d3b15995bddc78fd06eca82b33db43382df7d2a243fb51d18ad7f011f1b1"
    },
    "46a6ceee9ce91758af5564a261689670d643516f83f0d07ae38c7b9f9fb87055": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# peer: ec2.IPeer\n# port: ec2.Port\n# security_group: ec2.SecurityGroup\n\nconnections_props = ec2.ConnectionsProps(\n    default_port=port,\n    peer=peer,\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIPeer peer;\nPort port;\nSecurityGroup securityGroup;\n\nConnectionsProps connectionsProps = new ConnectionsProps {\n    DefaultPort = port,\n    Peer = peer,\n    SecurityGroups = new [] { securityGroup }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIPeer peer;\nPort port;\nSecurityGroup securityGroup;\n\nConnectionsProps connectionsProps = ConnectionsProps.builder()\n        .defaultPort(port)\n        .peer(peer)\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar peer iPeer\nvar port port\nvar securityGroup securityGroup\nconnectionsProps := &connectionsProps{\n\tdefaultPort: port,\n\tpeer: peer,\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const peer: ec2.IPeer;\ndeclare const port: ec2.Port;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst connectionsProps: ec2.ConnectionsProps = {\n  defaultPort: port,\n  peer: peer,\n  securityGroups: [securityGroup],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ConnectionsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ConnectionsProps",
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.Port"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const peer: ec2.IPeer;\ndeclare const port: ec2.Port;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connectionsProps: ec2.ConnectionsProps = {\n  defaultPort: port,\n  peer: peer,\n  securityGroups: [securityGroup],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "938759ca9668a6786f250fc7868f04fd42bffa29eac7a3ceabc86a96cf932138"
    },
    "813d979cfdefe40f1fdb5a7220c168b14c52f8a0b5f145014c219f276e710c00": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "host := ec2.NewBastionHostLinux(this, jsii.String(\"BastionHost\"), &bastionHostLinuxProps{\n\tvpc: vpc,\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"EBSBastionHost\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(10), &ebsDeviceOptions{\n\t\t\t\tencrypted: jsii.Boolean(true),\n\t\t\t}),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.EbsDeviceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "03454ad0bbec338997a56a0ad76eca2348841701fcd0c65e155140df3bd8e281"
    },
    "f1720ba98b6c401cfd46c8f528d1f6165aa4b614204d74f30b524d76fa15c9d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nebs_device_options_base = ec2.EbsDeviceOptionsBase(\n    delete_on_termination=False,\n    iops=123,\n    volume_type=ec2.EbsDeviceVolumeType.STANDARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEbsDeviceOptionsBase ebsDeviceOptionsBase = new EbsDeviceOptionsBase {\n    DeleteOnTermination = false,\n    Iops = 123,\n    VolumeType = EbsDeviceVolumeType.STANDARD\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEbsDeviceOptionsBase ebsDeviceOptionsBase = EbsDeviceOptionsBase.builder()\n        .deleteOnTermination(false)\n        .iops(123)\n        .volumeType(EbsDeviceVolumeType.STANDARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nebsDeviceOptionsBase := &ebsDeviceOptionsBase{\n\tdeleteOnTermination: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tvolumeType: ec2.ebsDeviceVolumeType_STANDARD,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ebsDeviceOptionsBase: ec2.EbsDeviceOptionsBase = {\n  deleteOnTermination: false,\n  iops: 123,\n  volumeType: ec2.EbsDeviceVolumeType.STANDARD,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.EbsDeviceOptionsBase"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceOptionsBase",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#STANDARD"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ebsDeviceOptionsBase: ec2.EbsDeviceOptionsBase = {\n  deleteOnTermination: false,\n  iops: 123,\n  volumeType: ec2.EbsDeviceVolumeType.STANDARD,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 10,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "642b1ffbf3932f3ceea27e74cbfe5436d22dc715065bd8251975df21c24f8ad4"
    },
    "10b49d985104a268c3a213b0a7d63f592d69038d39b1d0ae329c3ff05ae1a38c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_kms as kms\n\n# key: kms.Key\n\nebs_device_props = ec2.EbsDeviceProps(\n    delete_on_termination=False,\n    encrypted=False,\n    iops=123,\n    kms_key=key,\n    snapshot_id=\"snapshotId\",\n    volume_size=123,\n    volume_type=ec2.EbsDeviceVolumeType.STANDARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.KMS;\n\nKey key;\n\nEbsDeviceProps ebsDeviceProps = new EbsDeviceProps {\n    DeleteOnTermination = false,\n    Encrypted = false,\n    Iops = 123,\n    KmsKey = key,\n    SnapshotId = \"snapshotId\",\n    VolumeSize = 123,\n    VolumeType = EbsDeviceVolumeType.STANDARD\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.kms.*;\n\nKey key;\n\nEbsDeviceProps ebsDeviceProps = EbsDeviceProps.builder()\n        .deleteOnTermination(false)\n        .encrypted(false)\n        .iops(123)\n        .kmsKey(key)\n        .snapshotId(\"snapshotId\")\n        .volumeSize(123)\n        .volumeType(EbsDeviceVolumeType.STANDARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import kms \"github.com/aws-samples/dummy/awscdkawskms\"\n\nvar key key\nebsDeviceProps := &ebsDeviceProps{\n\tdeleteOnTermination: jsii.Boolean(false),\n\tencrypted: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tkmsKey: key,\n\tsnapshotId: jsii.String(\"snapshotId\"),\n\tvolumeSize: jsii.Number(123),\n\tvolumeType: ec2.ebsDeviceVolumeType_STANDARD,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as kms from '@aws-cdk/aws-kms';\n\ndeclare const key: kms.Key;\nconst ebsDeviceProps: ec2.EbsDeviceProps = {\n  deleteOnTermination: false,\n  encrypted: false,\n  iops: 123,\n  kmsKey: key,\n  snapshotId: 'snapshotId',\n  volumeSize: 123,\n  volumeType: ec2.EbsDeviceVolumeType.STANDARD,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.EbsDeviceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceProps",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#STANDARD",
        "@aws-cdk/aws-kms.IKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as kms from '@aws-cdk/aws-kms';\n\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ebsDeviceProps: ec2.EbsDeviceProps = {\n  deleteOnTermination: false,\n  encrypted: false,\n  iops: 123,\n  kmsKey: key,\n  snapshotId: 'snapshotId',\n  volumeSize: 123,\n  volumeType: ec2.EbsDeviceVolumeType.STANDARD,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 19,
        "91": 2,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "3d0c887248a15829aaf2dd8eb68d86b745552284305628756787598fb6d6fd8e"
    },
    "b9adab00a5a44cbe1ef0cdbb3ed67fb17a38c164b1b6b3cae2d05a978e84bf3f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nebs_device_snapshot_options = ec2.EbsDeviceSnapshotOptions(\n    delete_on_termination=False,\n    iops=123,\n    volume_size=123,\n    volume_type=ec2.EbsDeviceVolumeType.STANDARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nEbsDeviceSnapshotOptions ebsDeviceSnapshotOptions = new EbsDeviceSnapshotOptions {\n    DeleteOnTermination = false,\n    Iops = 123,\n    VolumeSize = 123,\n    VolumeType = EbsDeviceVolumeType.STANDARD\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nEbsDeviceSnapshotOptions ebsDeviceSnapshotOptions = EbsDeviceSnapshotOptions.builder()\n        .deleteOnTermination(false)\n        .iops(123)\n        .volumeSize(123)\n        .volumeType(EbsDeviceVolumeType.STANDARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nebsDeviceSnapshotOptions := &ebsDeviceSnapshotOptions{\n\tdeleteOnTermination: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tvolumeSize: jsii.Number(123),\n\tvolumeType: ec2.ebsDeviceVolumeType_STANDARD,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst ebsDeviceSnapshotOptions: ec2.EbsDeviceSnapshotOptions = {\n  deleteOnTermination: false,\n  iops: 123,\n  volumeSize: 123,\n  volumeType: ec2.EbsDeviceVolumeType.STANDARD,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.EbsDeviceSnapshotOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceSnapshotOptions",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#STANDARD"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ebsDeviceSnapshotOptions: ec2.EbsDeviceSnapshotOptions = {\n  deleteOnTermination: false,\n  iops: 123,\n  volumeSize: 123,\n  volumeType: ec2.EbsDeviceVolumeType.STANDARD,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 11,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c1ee015836e688601502984b4d552a539b7e6106b1c86be1b2bca5d82f769486"
    },
    "5f66d893d131c92b5a71acaeb21ee3abbcc1b1880d2f63514faccb1619018b9f": {
      "translations": {
        "python": {
          "source": "domain = es.Domain(self, \"Domain\",\n    version=es.ElasticsearchVersion.V7_4,\n    ebs=es.EbsOptions(\n        volume_size=100,\n        volume_type=ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    ),\n    node_to_node_encryption=True,\n    encryption_at_rest=es.EncryptionAtRestOptions(\n        enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = ElasticsearchVersion.V7_4,\n    Ebs = new EbsOptions {\n        VolumeSize = 100,\n        VolumeType = EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    },\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(ElasticsearchVersion.V7_4)\n        .ebs(EbsOptions.builder()\n                .volumeSize(100)\n                .volumeType(EbsDeviceVolumeType.GENERAL_PURPOSE_SSD)\n                .build())\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := es.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: es.elasticsearchVersion_V7_4(),\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(100),\n\t\tvolumeType: ec2.ebsDeviceVolumeType_GENERAL_PURPOSE_SSD,\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new es.Domain(this, 'Domain', {\n  version: es.ElasticsearchVersion.V7_4,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.EbsDeviceVolumeType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#GENERAL_PURPOSE_SSD",
        "@aws-cdk/aws-elasticsearch.Domain",
        "@aws-cdk/aws-elasticsearch.DomainProps",
        "@aws-cdk/aws-elasticsearch.EbsOptions",
        "@aws-cdk/aws-elasticsearch.ElasticsearchVersion",
        "@aws-cdk/aws-elasticsearch.ElasticsearchVersion#V7_4",
        "@aws-cdk/aws-elasticsearch.EncryptionAtRestOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as es from '@aws-cdk/aws-elasticsearch';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new es.Domain(this, 'Domain', {\n  version: es.ElasticsearchVersion.V7_4,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 16,
        "104": 1,
        "106": 2,
        "193": 3,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "5a059555b7ff6826adbafc5e647528d079bd481a6e71e7bcc297f35948adc5fd"
    },
    "93eb3404735753f58f4f1c92893fdae7249cc29a1eb54a2469eccc3f0fe3f6d8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n\nenable_vpn_gateway_options = ec2.EnableVpnGatewayOptions(\n    type=\"type\",\n\n    # the properties below are optional\n    amazon_side_asn=123,\n    vpn_route_propagation=[ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\n\nEnableVpnGatewayOptions enableVpnGatewayOptions = new EnableVpnGatewayOptions {\n    Type = \"type\",\n\n    // the properties below are optional\n    AmazonSideAsn = 123,\n    VpnRoutePropagation = new [] { new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\n\nEnableVpnGatewayOptions enableVpnGatewayOptions = EnableVpnGatewayOptions.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .amazonSideAsn(123)\n        .vpnRoutePropagation(List.of(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar subnet subnet\nvar subnetFilter subnetFilter\nenableVpnGatewayOptions := &enableVpnGatewayOptions{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tamazonSideAsn: jsii.Number(123),\n\tvpnRoutePropagation: []subnetSelection{\n\t\t&subnetSelection{\n\t\t\tavailabilityZones: []*string{\n\t\t\t\tjsii.String(\"availabilityZones\"),\n\t\t\t},\n\t\t\tonePerAz: jsii.Boolean(false),\n\t\t\tsubnetFilters: []*subnetFilter{\n\t\t\t\tsubnetFilter,\n\t\t\t},\n\t\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\t\tsubnets: []iSubnet{\n\t\t\t\tsubnet,\n\t\t\t},\n\t\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\nconst enableVpnGatewayOptions: ec2.EnableVpnGatewayOptions = {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n  vpnRoutePropagation: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.EnableVpnGatewayOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EnableVpnGatewayOptions",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst enableVpnGatewayOptions: ec2.EnableVpnGatewayOptions = {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n  vpnRoutePropagation: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 25,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 2,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "45873c4ad4e4a56a09c1af3d7b03fc04e7ecc1ae0ba1620b3acc5e306f05510a"
    },
    "5cdf145aaff50259aae9d7f3959d524e28c148e21fcbe7df0ce38e816ecf9c05": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_s3_assets import Asset\n\n# instance: ec2.Instance\n\n\nasset = Asset(self, \"Asset\",\n    path=\"./configure.sh\"\n)\n\nlocal_path = instance.user_data.add_s3_download_command(\n    bucket=asset.bucket,\n    bucket_key=asset.s3_object_key,\n    region=\"us-east-1\"\n)\ninstance.user_data.add_execute_file_command(\n    file_path=local_path,\n    arguments=\"--verbose -y\"\n)\nasset.grant_read(instance.role)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nInstance instance;\n\n\nAsset asset = new Asset(this, \"Asset\", new AssetProps {\n    Path = \"./configure.sh\"\n});\n\nstring localPath = instance.UserData.AddS3DownloadCommand(new S3DownloadOptions {\n    Bucket = asset.Bucket,\n    BucketKey = asset.S3ObjectKey,\n    Region = \"us-east-1\"\n});\ninstance.UserData.AddExecuteFileCommand(new ExecuteFileOptions {\n    FilePath = localPath,\n    Arguments = \"--verbose -y\"\n});\nasset.GrantRead(instance.Role);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.Asset;\n\nInstance instance;\n\n\nAsset asset = Asset.Builder.create(this, \"Asset\")\n        .path(\"./configure.sh\")\n        .build();\n\nString localPath = instance.userData.addS3DownloadCommand(S3DownloadOptions.builder()\n        .bucket(asset.getBucket())\n        .bucketKey(asset.getS3ObjectKey())\n        .region(\"us-east-1\")\n        .build());\ninstance.userData.addExecuteFileCommand(ExecuteFileOptions.builder()\n        .filePath(localPath)\n        .arguments(\"--verbose -y\")\n        .build());\nasset.grantRead(instance.getRole());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkawss3assets \"github.com/aws-samples/dummy/awscdkawss3assets\"type Asset awscdkawss3assets.Asset\n\nvar instance instance\n\nasset := NewAsset(this, jsii.String(\"Asset\"), &assetProps{\n\tpath: jsii.String(\"./configure.sh\"),\n})\n\nlocalPath := instance.userData.addS3DownloadCommand(&s3DownloadOptions{\n\tbucket: asset.bucket,\n\tbucketKey: asset.s3ObjectKey,\n\tregion: jsii.String(\"us-east-1\"),\n})\ninstance.userData.addExecuteFileCommand(&executeFileOptions{\n\tfilePath: localPath,\n\targuments: jsii.String(\"--verbose -y\"),\n})\nasset.grantRead(instance.role)",
          "version": "1"
        },
        "$": {
          "source": "import { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ExecuteFileOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ExecuteFileOptions",
        "@aws-cdk/aws-ec2.Instance#role",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.S3DownloadOptions",
        "@aws-cdk/aws-ec2.UserData#addExecuteFileCommand",
        "@aws-cdk/aws-ec2.UserData#addS3DownloadCommand",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.Asset#bucket",
        "@aws-cdk/aws-s3-assets.Asset#grantRead",
        "@aws-cdk/aws-s3-assets.Asset#s3ObjectKey",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "44fcc62eff0f5b60562b4e6eeff95e4d8404569f22eca6029f80e4db19728d4c"
    },
    "252e85c5162aecf37a4eafa5cfebb547e12ce3a27702532143e99d721a322f67": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyCustomLogGroup\"))\n\nrole := iam.NewRole(this, jsii.String(\"MyCustomRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"vpc-flow-logs.amazonaws.com\")),\n})\n\nec2.NewFlowLog(this, jsii.String(\"FlowLog\"), &flowLogProps{\n\tresourceType: ec2.flowLogResourceType.fromVpc(vpc),\n\tdestination: ec2.flowLogDestination.toCloudWatchLogs(logGroup, role),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLog"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8f628d6d42526bb9d4553494a8bb8fe99ccbf02698d035755c4b0de4a84136e1"
    },
    "83d02f8783d7650c312b70ec2966766a8cace58dd149e5ee23290125f696e1d9": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyCustomLogGroup\"))\n\nrole := iam.NewRole(this, jsii.String(\"MyCustomRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"vpc-flow-logs.amazonaws.com\")),\n})\n\nec2.NewFlowLog(this, jsii.String(\"FlowLog\"), &flowLogProps{\n\tresourceType: ec2.flowLogResourceType.fromVpc(vpc),\n\tdestination: ec2.flowLogDestination.toCloudWatchLogs(logGroup, role),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogDestination"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8f628d6d42526bb9d4553494a8bb8fe99ccbf02698d035755c4b0de4a84136e1"
    },
    "f8bfab2bc8beef5ce1f03abd5cdeffd2145acd4d7d82e72c0e3d503201091a3e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_s3 as s3\n\n# bucket: s3.Bucket\n# log_group: logs.LogGroup\n# role: iam.Role\n\nflow_log_destination_config = ec2.FlowLogDestinationConfig(\n    log_destination_type=ec2.FlowLogDestinationType.CLOUD_WATCH_LOGS,\n\n    # the properties below are optional\n    iam_role=role,\n    key_prefix=\"keyPrefix\",\n    log_group=log_group,\n    s3_bucket=bucket\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK.AWS.S3;\n\nBucket bucket;\nLogGroup logGroup;\nRole role;\n\nFlowLogDestinationConfig flowLogDestinationConfig = new FlowLogDestinationConfig {\n    LogDestinationType = FlowLogDestinationType.CLOUD_WATCH_LOGS,\n\n    // the properties below are optional\n    IamRole = role,\n    KeyPrefix = \"keyPrefix\",\n    LogGroup = logGroup,\n    S3Bucket = bucket\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.services.s3.*;\n\nBucket bucket;\nLogGroup logGroup;\nRole role;\n\nFlowLogDestinationConfig flowLogDestinationConfig = FlowLogDestinationConfig.builder()\n        .logDestinationType(FlowLogDestinationType.CLOUD_WATCH_LOGS)\n\n        // the properties below are optional\n        .iamRole(role)\n        .keyPrefix(\"keyPrefix\")\n        .logGroup(logGroup)\n        .s3Bucket(bucket)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import logs \"github.com/aws-samples/dummy/awscdkawslogs\"import s3 \"github.com/aws-samples/dummy/awscdkawss3\"\n\nvar bucket bucket\nvar logGroup logGroup\nvar role role\nflowLogDestinationConfig := &flowLogDestinationConfig{\n\tlogDestinationType: ec2.flowLogDestinationType_CLOUD_WATCH_LOGS,\n\n\t// the properties below are optional\n\tiamRole: role,\n\tkeyPrefix: jsii.String(\"keyPrefix\"),\n\tlogGroup: logGroup,\n\ts3Bucket: bucket,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\ndeclare const logGroup: logs.LogGroup;\ndeclare const role: iam.Role;\nconst flowLogDestinationConfig: ec2.FlowLogDestinationConfig = {\n  logDestinationType: ec2.FlowLogDestinationType.CLOUD_WATCH_LOGS,\n\n  // the properties below are optional\n  iamRole: role,\n  keyPrefix: 'keyPrefix',\n  logGroup: logGroup,\n  s3Bucket: bucket,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogDestinationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLogDestinationConfig",
        "@aws-cdk/aws-ec2.FlowLogDestinationType",
        "@aws-cdk/aws-ec2.FlowLogDestinationType#CLOUD_WATCH_LOGS",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\ndeclare const logGroup: logs.LogGroup;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst flowLogDestinationConfig: ec2.FlowLogDestinationConfig = {\n  logDestinationType: ec2.FlowLogDestinationType.CLOUD_WATCH_LOGS,\n\n  // the properties below are optional\n  iamRole: role,\n  keyPrefix: 'keyPrefix',\n  logGroup: logGroup,\n  s3Bucket: bucket,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 27,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "3ad232d1f8e3247b917b41734189e8357b037e26ad1487065b3119d350a79387"
    },
    "b9a85ccf0357adc1fe7c6adefc975c32bc894564b5e65194360e325c4d260c73": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\n\nvpc.add_flow_log(\"FlowLogS3\",\n    destination=ec2.FlowLogDestination.to_s3()\n)\n\nvpc.add_flow_log(\"FlowLogCloudWatch\",\n    traffic_type=ec2.FlowLogTrafficType.REJECT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.AddFlowLog(\"FlowLogS3\", new FlowLogOptions {\n    Destination = FlowLogDestination.ToS3()\n});\n\nvpc.AddFlowLog(\"FlowLogCloudWatch\", new FlowLogOptions {\n    TrafficType = FlowLogTrafficType.REJECT\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.addFlowLog(\"FlowLogS3\", FlowLogOptions.builder()\n        .destination(FlowLogDestination.toS3())\n        .build());\n\nvpc.addFlowLog(\"FlowLogCloudWatch\", FlowLogOptions.builder()\n        .trafficType(FlowLogTrafficType.REJECT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"Vpc\"))\n\nvpc.addFlowLog(jsii.String(\"FlowLogS3\"), &flowLogOptions{\n\tdestination: ec2.flowLogDestination.toS3(),\n})\n\nvpc.addFlowLog(jsii.String(\"FlowLogCloudWatch\"), &flowLogOptions{\n\ttrafficType: ec2.flowLogTrafficType_REJECT,\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toS3",
        "@aws-cdk/aws-ec2.FlowLogOptions",
        "@aws-cdk/aws-ec2.FlowLogTrafficType",
        "@aws-cdk/aws-ec2.FlowLogTrafficType#REJECT",
        "@aws-cdk/aws-ec2.Vpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b6da036125d677b39d7a3f85fa728bd579b3101821863f753c93fcd6afc8d1c3"
    },
    "778a8f2ab53e8b2d3920886883ed6c6cae64ce52b4cab1c179d5b7354705ef59": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyCustomLogGroup\"))\n\nrole := iam.NewRole(this, jsii.String(\"MyCustomRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"vpc-flow-logs.amazonaws.com\")),\n})\n\nec2.NewFlowLog(this, jsii.String(\"FlowLog\"), &flowLogProps{\n\tresourceType: ec2.flowLogResourceType.fromVpc(vpc),\n\tdestination: ec2.flowLogDestination.toCloudWatchLogs(logGroup, role),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8f628d6d42526bb9d4553494a8bb8fe99ccbf02698d035755c4b0de4a84136e1"
    },
    "41b537bb261e9b4b0e25e123aacdfecc36429d2b6ba120ad5a29ebfa4fe8195f": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyCustomLogGroup\"))\n\nrole := iam.NewRole(this, jsii.String(\"MyCustomRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"vpc-flow-logs.amazonaws.com\")),\n})\n\nec2.NewFlowLog(this, jsii.String(\"FlowLog\"), &flowLogProps{\n\tresourceType: ec2.flowLogResourceType.fromVpc(vpc),\n\tdestination: ec2.flowLogDestination.toCloudWatchLogs(logGroup, role),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogResourceType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8f628d6d42526bb9d4553494a8bb8fe99ccbf02698d035755c4b0de4a84136e1"
    },
    "803acdf5f726a514e48a71188e3d38fd6664a6eeda6320d19086d8d221c1655a": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\n\nvpc.add_flow_log(\"FlowLogS3\",\n    destination=ec2.FlowLogDestination.to_s3()\n)\n\nvpc.add_flow_log(\"FlowLogCloudWatch\",\n    traffic_type=ec2.FlowLogTrafficType.REJECT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.AddFlowLog(\"FlowLogS3\", new FlowLogOptions {\n    Destination = FlowLogDestination.ToS3()\n});\n\nvpc.AddFlowLog(\"FlowLogCloudWatch\", new FlowLogOptions {\n    TrafficType = FlowLogTrafficType.REJECT\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.addFlowLog(\"FlowLogS3\", FlowLogOptions.builder()\n        .destination(FlowLogDestination.toS3())\n        .build());\n\nvpc.addFlowLog(\"FlowLogCloudWatch\", FlowLogOptions.builder()\n        .trafficType(FlowLogTrafficType.REJECT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"Vpc\"))\n\nvpc.addFlowLog(jsii.String(\"FlowLogS3\"), &flowLogOptions{\n\tdestination: ec2.flowLogDestination.toS3(),\n})\n\nvpc.addFlowLog(jsii.String(\"FlowLogCloudWatch\"), &flowLogOptions{\n\ttrafficType: ec2.flowLogTrafficType_REJECT,\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogTrafficType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toS3",
        "@aws-cdk/aws-ec2.FlowLogOptions",
        "@aws-cdk/aws-ec2.FlowLogTrafficType",
        "@aws-cdk/aws-ec2.FlowLogTrafficType#REJECT",
        "@aws-cdk/aws-ec2.Vpc",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b6da036125d677b39d7a3f85fa728bd579b3101821863f753c93fcd6afc8d1c3"
    },
    "bf167f89306551b4f10e35ebd33c4de96815fd2f0ad122e7e2aa16157d82bfec": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ngateway_config = ec2.GatewayConfig(\n    az=\"az\",\n    gateway_id=\"gatewayId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nGatewayConfig gatewayConfig = new GatewayConfig {\n    Az = \"az\",\n    GatewayId = \"gatewayId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nGatewayConfig gatewayConfig = GatewayConfig.builder()\n        .az(\"az\")\n        .gatewayId(\"gatewayId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ngatewayConfig := &gatewayConfig{\n\taz: jsii.String(\"az\"),\n\tgatewayId: jsii.String(\"gatewayId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst gatewayConfig: ec2.GatewayConfig = {\n  az: 'az',\n  gatewayId: 'gatewayId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GatewayConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gatewayConfig: ec2.GatewayConfig = {\n  az: 'az',\n  gatewayId: 'gatewayId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "17873362d14c6b6ac9da960025c87c9fec9fc8333215fddc08cc2e3812443cf9"
    },
    "0ce2d3596b610fdca2ce4123dc24696dc8627a15796c4bf8929b2e8dfe407941": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Add gateway endpoints when creating the VPC\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tgatewayEndpoints: map[string]gatewayVpcEndpointOptions{\n\t\t\"S3\": &gatewayVpcEndpointOptions{\n\t\t\t\"service\": ec2.GatewayVpcEndpointAwsService_S3(),\n\t\t},\n\t},\n})\n\n// Alternatively gateway endpoints can be added on the VPC\ndynamoDbEndpoint := vpc.addGatewayEndpoint(jsii.String(\"DynamoDbEndpoint\"), &gatewayVpcEndpointOptions{\n\tservice: ec2.gatewayVpcEndpointAwsService_DYNAMODB(),\n})\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\niam.NewPolicyStatement(&policyStatementProps{\n\t // Restrict to listing and describing tables\n\tprincipals: []iPrincipal{\n\t\tiam.NewAnyPrincipal(),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"dynamodb:DescribeTable\"),\n\t\tjsii.String(\"dynamodb:ListTables\"),\n\t},\n\tresources: []*string{\n\t\tjsii.String(\"*\"),\n\t},\n}))\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(jsii.String(\"EcrDockerEndpoint\"), &interfaceVpcEndpointOptions{\n\tservice: ec2.interfaceVpcEndpointAwsService_ECR_DOCKER(),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "f2f9dbba26ca3fc2a8da6ba310517358a9df46cb03efe72ee9b3dd66e97d3842"
    },
    "1b5c115ed828a9ae02c7220b78f9a049c4860e80e4e34e92ce7228dca85a3d2c": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Add gateway endpoints when creating the VPC\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tgatewayEndpoints: map[string]gatewayVpcEndpointOptions{\n\t\t\"S3\": &gatewayVpcEndpointOptions{\n\t\t\t\"service\": ec2.GatewayVpcEndpointAwsService_S3(),\n\t\t},\n\t},\n})\n\n// Alternatively gateway endpoints can be added on the VPC\ndynamoDbEndpoint := vpc.addGatewayEndpoint(jsii.String(\"DynamoDbEndpoint\"), &gatewayVpcEndpointOptions{\n\tservice: ec2.gatewayVpcEndpointAwsService_DYNAMODB(),\n})\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\niam.NewPolicyStatement(&policyStatementProps{\n\t // Restrict to listing and describing tables\n\tprincipals: []iPrincipal{\n\t\tiam.NewAnyPrincipal(),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"dynamodb:DescribeTable\"),\n\t\tjsii.String(\"dynamodb:ListTables\"),\n\t},\n\tresources: []*string{\n\t\tjsii.String(\"*\"),\n\t},\n}))\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(jsii.String(\"EcrDockerEndpoint\"), &interfaceVpcEndpointOptions{\n\tservice: ec2.interfaceVpcEndpointAwsService_ECR_DOCKER(),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "f2f9dbba26ca3fc2a8da6ba310517358a9df46cb03efe72ee9b3dd66e97d3842"
    },
    "7d4861307fdb3d79bd9467098746b0a9e9d1da8b84963c10850aba65e89741d9": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Add gateway endpoints when creating the VPC\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tgatewayEndpoints: map[string]gatewayVpcEndpointOptions{\n\t\t\"S3\": &gatewayVpcEndpointOptions{\n\t\t\t\"service\": ec2.GatewayVpcEndpointAwsService_S3(),\n\t\t},\n\t},\n})\n\n// Alternatively gateway endpoints can be added on the VPC\ndynamoDbEndpoint := vpc.addGatewayEndpoint(jsii.String(\"DynamoDbEndpoint\"), &gatewayVpcEndpointOptions{\n\tservice: ec2.gatewayVpcEndpointAwsService_DYNAMODB(),\n})\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\niam.NewPolicyStatement(&policyStatementProps{\n\t // Restrict to listing and describing tables\n\tprincipals: []iPrincipal{\n\t\tiam.NewAnyPrincipal(),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"dynamodb:DescribeTable\"),\n\t\tjsii.String(\"dynamodb:ListTables\"),\n\t},\n\tresources: []*string{\n\t\tjsii.String(\"*\"),\n\t},\n}))\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(jsii.String(\"EcrDockerEndpoint\"), &interfaceVpcEndpointOptions{\n\tservice: ec2.interfaceVpcEndpointAwsService_ECR_DOCKER(),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "f2f9dbba26ca3fc2a8da6ba310517358a9df46cb03efe72ee9b3dd66e97d3842"
    },
    "7eeb07f7c86755273d445df65dc6d5f6ae5bc83a56c1d27beaaa4fbb0743965c": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nvpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    # Add only to ISOLATED subnets\n    subnets=[ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE_ISOLATED)\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nvpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB,\n    // Add only to ISOLATED subnets\n    Subnets = new [] { new SubnetSelection { SubnetType = SubnetType.PRIVATE_ISOLATED } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nvpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        // Add only to ISOLATED subnets\n        .subnets(List.of(SubnetSelection.builder().subnetType(SubnetType.PRIVATE_ISOLATED).build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvpc.addGatewayEndpoint(jsii.String(\"DynamoDbEndpoint\"), &gatewayVpcEndpointOptions{\n\tservice: ec2.gatewayVpcEndpointAwsService_DYNAMODB(),\n\t// Add only to ISOLATED subnets\n\tsubnets: []subnetSelection{\n\t\t&subnetSelection{\n\t\t\tsubnetType: ec2.subnetType_PRIVATE_ISOLATED,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nvpc.addGatewayEndpoint('DynamoDbEndpoint', {\n  service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n  // Add only to ISOLATED subnets\n  subnets: [\n    { subnetType: ec2.SubnetType.PRIVATE_ISOLATED }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
          "memberName": "subnets"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_ISOLATED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nvpc.addGatewayEndpoint('DynamoDbEndpoint', {\n  service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n  // Add only to ISOLATED subnets\n  subnets: [\n    { subnetType: ec2.SubnetType.PRIVATE_ISOLATED }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "62edba70233f463959ca112915b0b77cd16a4a52f34c79b443d18b9c0647f095"
    },
    "4b6e6c68f9c324d1555dbce37688e3e6ac180adfe98318e0b585b7535bc71d66": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# gateway_vpc_endpoint_service: ec2.IGatewayVpcEndpointService\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\ngateway_vpc_endpoint_props = ec2.GatewayVpcEndpointProps(\n    service=gateway_vpc_endpoint_service,\n    vpc=vpc,\n\n    # the properties below are optional\n    subnets=[ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nIGatewayVpcEndpointService gatewayVpcEndpointService;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nGatewayVpcEndpointProps gatewayVpcEndpointProps = new GatewayVpcEndpointProps {\n    Service = gatewayVpcEndpointService,\n    Vpc = vpc,\n\n    // the properties below are optional\n    Subnets = new [] { new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nIGatewayVpcEndpointService gatewayVpcEndpointService;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nGatewayVpcEndpointProps gatewayVpcEndpointProps = GatewayVpcEndpointProps.builder()\n        .service(gatewayVpcEndpointService)\n        .vpc(vpc)\n\n        // the properties below are optional\n        .subnets(List.of(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar gatewayVpcEndpointService iGatewayVpcEndpointService\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\ngatewayVpcEndpointProps := &gatewayVpcEndpointProps{\n\tservice: gatewayVpcEndpointService,\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tsubnets: []subnetSelection{\n\t\t&subnetSelection{\n\t\t\tavailabilityZones: []*string{\n\t\t\t\tjsii.String(\"availabilityZones\"),\n\t\t\t},\n\t\t\tonePerAz: jsii.Boolean(false),\n\t\t\tsubnetFilters: []*subnetFilter{\n\t\t\t\tsubnetFilter,\n\t\t\t},\n\t\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\t\tsubnets: []iSubnet{\n\t\t\t\tsubnet,\n\t\t\t},\n\t\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const gatewayVpcEndpointService: ec2.IGatewayVpcEndpointService;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst gatewayVpcEndpointProps: ec2.GatewayVpcEndpointProps = {\n  service: gatewayVpcEndpointService,\n  vpc: vpc,\n\n  // the properties below are optional\n  subnets: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpointProps",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const gatewayVpcEndpointService: ec2.IGatewayVpcEndpointService;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gatewayVpcEndpointProps: ec2.GatewayVpcEndpointProps = {\n  service: gatewayVpcEndpointService,\n  vpc: vpc,\n\n  // the properties below are optional\n  subnets: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 33,
        "91": 1,
        "130": 4,
        "153": 5,
        "169": 5,
        "192": 4,
        "193": 2,
        "194": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "89564d5ef3955dff9f5a08970f33fa21b7cf2017f4537560eafe4f8228ef97c0"
    },
    "4bc8b374268cd460d835be938991e78e52ab51c8ed003edea521e11c7f381701": {
      "translations": {
        "python": {
          "source": "ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.micro\"),\n    machine_image=ec2.GenericLinuxImage({\n        \"us-east-2\": \"ami-0f9c61b5a562a16af\"\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.micro\"),\n    MachineImage = new GenericLinuxImage(new Dictionary<string, string> {\n        { \"us-east-2\", \"ami-0f9c61b5a562a16af\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.micro\"))\n        .machineImage(new GenericLinuxImage(Map.of(\n                \"us-east-2\", \"ami-0f9c61b5a562a16af\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.micro\")),\n\tmachineImage: ec2.NewGenericLinuxImage(map[string]*string{\n\t\t\"us-east-2\": jsii.String(\"ami-0f9c61b5a562a16af\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "ec2.NatProvider.instance({\n   instanceType: new ec2.InstanceType('t3.micro'),\n   machineImage: new ec2.GenericLinuxImage({\n     'us-east-2': 'ami-0f9c61b5a562a16af'\n   })\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GenericLinuxImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nec2.NatProvider.instance({\n   instanceType: new ec2.InstanceType('t3.micro'),\n   machineImage: new ec2.GenericLinuxImage({\n     'us-east-2': 'ami-0f9c61b5a562a16af'\n   })\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "9e96dbdd7e71b558b4b6f1839a5c087c371fbbe229dee942aee81a9776e7a5ef"
    },
    "e99cc8c4bcd28a631c7f317824e5a6914d143e68dac42d1efe79ccfbc6778243": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# user_data: ec2.UserData\n\ngeneric_linux_image_props = ec2.GenericLinuxImageProps(\n    user_data=user_data\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nUserData userData;\n\nGenericLinuxImageProps genericLinuxImageProps = new GenericLinuxImageProps {\n    UserData = userData\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nUserData userData;\n\nGenericLinuxImageProps genericLinuxImageProps = GenericLinuxImageProps.builder()\n        .userData(userData)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar userData userData\ngenericLinuxImageProps := &genericLinuxImageProps{\n\tuserData: userData,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\nconst genericLinuxImageProps: ec2.GenericLinuxImageProps = {\n  userData: userData,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GenericLinuxImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GenericLinuxImageProps",
        "@aws-cdk/aws-ec2.UserData"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst genericLinuxImageProps: ec2.GenericLinuxImageProps = {\n  userData: userData,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6c5b7289ec36d020af2a9adea35ae9f7a5589406f05b832feff22eb1f48dfd87"
    },
    "847f5b59981c61a5c3af274ae3dbd6a75c6cfc1aaf2efd9b25d14793a5e2facb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# user_data: ec2.UserData\n\ngeneric_sSMParameter_image = ec2.GenericSSMParameterImage(\"parameterName\", ec2.OperatingSystemType.LINUX, user_data)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nUserData userData;\n\nGenericSSMParameterImage genericSSMParameterImage = new GenericSSMParameterImage(\"parameterName\", OperatingSystemType.LINUX, userData);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nUserData userData;\n\nGenericSSMParameterImage genericSSMParameterImage = new GenericSSMParameterImage(\"parameterName\", OperatingSystemType.LINUX, userData);",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar userData userData\ngenericSSMParameterImage := ec2.NewGenericSSMParameterImage(jsii.String(\"parameterName\"), ec2.operatingSystemType_LINUX, userData)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\nconst genericSSMParameterImage = new ec2.GenericSSMParameterImage('parameterName', ec2.OperatingSystemType.LINUX, /* all optional props */ userData);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GenericSSMParameterImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GenericSSMParameterImage",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.UserData"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst genericSSMParameterImage = new ec2.GenericSSMParameterImage('parameterName', ec2.OperatingSystemType.LINUX, /* all optional props */ userData);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "27eecfa24b54123aacdd31325434a62fd8081c4b6a28c547e82b2eb821ad6aeb"
    },
    "1c393e373f4348cae665bd9da9f8f1b7c2d8d13a5e293bbe527106cf12800428": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# user_data: ec2.UserData\n\ngeneric_windows_image = ec2.GenericWindowsImage({\n    \"ami_map_key\": \"amiMap\"\n},\n    user_data=user_data\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nUserData userData;\n\nGenericWindowsImage genericWindowsImage = new GenericWindowsImage(new Dictionary<string, string> {\n    { \"amiMapKey\", \"amiMap\" }\n}, new GenericWindowsImageProps {\n    UserData = userData\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nUserData userData;\n\nGenericWindowsImage genericWindowsImage = GenericWindowsImage.Builder.create(Map.of(\n        \"amiMapKey\", \"amiMap\"))\n.userData(userData)\n.build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar userData userData\ngenericWindowsImage := ec2.NewGenericWindowsImage(map[string]*string{\n\t\"amiMapKey\": jsii.String(\"amiMap\"),\n}, &genericWindowsImageProps{\n\tuserData: userData,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\nconst genericWindowsImage = new ec2.GenericWindowsImage({\n  amiMapKey: 'amiMap',\n}, /* all optional props */ {\n  userData: userData,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GenericWindowsImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GenericWindowsImage",
        "@aws-cdk/aws-ec2.GenericWindowsImageProps",
        "@aws-cdk/aws-ec2.UserData"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst genericWindowsImage = new ec2.GenericWindowsImage({\n  amiMapKey: 'amiMap',\n}, /* all optional props */ {\n  userData: userData,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bf883341ab77247f74fc2716b5c1dca14e1dff3792ee65696ad3410702e3c434"
    },
    "7b190d93405aa549eadad7152a8230fd9d6a1725f09d4655171fa930cbc3eed7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# user_data: ec2.UserData\n\ngeneric_windows_image_props = ec2.GenericWindowsImageProps(\n    user_data=user_data\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nUserData userData;\n\nGenericWindowsImageProps genericWindowsImageProps = new GenericWindowsImageProps {\n    UserData = userData\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nUserData userData;\n\nGenericWindowsImageProps genericWindowsImageProps = GenericWindowsImageProps.builder()\n        .userData(userData)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar userData userData\ngenericWindowsImageProps := &genericWindowsImageProps{\n\tuserData: userData,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\nconst genericWindowsImageProps: ec2.GenericWindowsImageProps = {\n  userData: userData,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GenericWindowsImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GenericWindowsImageProps",
        "@aws-cdk/aws-ec2.UserData"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst genericWindowsImageProps: ec2.GenericWindowsImageProps = {\n  userData: userData,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6437a1646f1fe0c154a7dd02c802e47cb7120ba1052f8071b34e1d521fa5c93a"
    },
    "adf3a2c05c46fae9193717b9f29a29b1356e5cb55e21730a8c3929d68000cf46": {
      "translations": {
        "python": {
          "source": "handle = ec2.InitServiceRestartHandle()\nec2.CloudFormationInit.from_elements(\n    ec2.InitCommand.shell_command(\"/usr/bin/custom-nginx-install.sh\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\", service_restart_handle=handle))",
          "version": "2"
        },
        "csharp": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.FromElements(InitCommand.ShellCommand(\"/usr/bin/custom-nginx-install.sh\", new InitCommandOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions { ServiceRestartHandle = handle }));",
          "version": "1"
        },
        "java": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.fromElements(InitCommand.shellCommand(\"/usr/bin/custom-nginx-install.sh\", InitCommandOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder().serviceRestartHandle(handle).build()));",
          "version": "1"
        },
        "go": {
          "source": "handle := ec2.NewInitServiceRestartHandle()\nec2.cloudFormationInit.fromElements(ec2.initCommand.shellCommand(jsii.String(\"/usr/bin/custom-nginx-install.sh\"), &initCommandOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "const handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitCommand"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitCommand",
        "@aws-cdk/aws-ec2.InitCommand#shellCommand",
        "@aws-cdk/aws-ec2.InitCommandOptions",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "0894b65a424b6720868cef5b17cf053e6e786749fa3ce705ecf3bebf3863901f"
    },
    "2c443a7ada883c59a78168da9258af83197972b3950f69001c0ea5f1ed42f385": {
      "translations": {
        "python": {
          "source": "handle = ec2.InitServiceRestartHandle()\nec2.CloudFormationInit.from_elements(\n    ec2.InitCommand.shell_command(\"/usr/bin/custom-nginx-install.sh\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\", service_restart_handle=handle))",
          "version": "2"
        },
        "csharp": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.FromElements(InitCommand.ShellCommand(\"/usr/bin/custom-nginx-install.sh\", new InitCommandOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions { ServiceRestartHandle = handle }));",
          "version": "1"
        },
        "java": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.fromElements(InitCommand.shellCommand(\"/usr/bin/custom-nginx-install.sh\", InitCommandOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder().serviceRestartHandle(handle).build()));",
          "version": "1"
        },
        "go": {
          "source": "handle := ec2.NewInitServiceRestartHandle()\nec2.cloudFormationInit.fromElements(ec2.initCommand.shellCommand(jsii.String(\"/usr/bin/custom-nginx-install.sh\"), &initCommandOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "const handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitCommandOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitCommand",
        "@aws-cdk/aws-ec2.InitCommand#shellCommand",
        "@aws-cdk/aws-ec2.InitCommandOptions",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "0894b65a424b6720868cef5b17cf053e6e786749fa3ce705ecf3bebf3863901f"
    },
    "95cc0f14876b955e49c2a0e54583fe85cb5a976c0e0df479d3e9fba70b108622": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninit_command_wait_duration = ec2.InitCommandWaitDuration.forever()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInitCommandWaitDuration initCommandWaitDuration = InitCommandWaitDuration.Forever();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInitCommandWaitDuration initCommandWaitDuration = InitCommandWaitDuration.forever();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninitCommandWaitDuration := ec2.initCommandWaitDuration.forever()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst initCommandWaitDuration = ec2.InitCommandWaitDuration.forever();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitCommandWaitDuration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InitCommandWaitDuration",
        "@aws-cdk/aws-ec2.InitCommandWaitDuration#forever"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst initCommandWaitDuration = ec2.InitCommandWaitDuration.forever();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "0bf1af3bdd015ada7612cddaf7c08e29aaeb45b33ca0db9352a50f3764aff545"
    },
    "15ed1669d74f296408d7c36a3ee07cf0cb0c2f20a3eb8280121d0809499a3436": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// Showing the most complex setup, if you have simpler requirements\n\t// you can use `CloudFormationInit.fromElements()`.\n\tinit: ec2.cloudFormationInit.fromConfigSets(&configSetProps{\n\t\tconfigSets: map[string][]*string{\n\t\t\t// Applies the configs below in this order\n\t\t\t\"default\": []*string{\n\t\t\t\tjsii.String(\"yumPreinstall\"),\n\t\t\t\tjsii.String(\"config\"),\n\t\t\t},\n\t\t},\n\t\tconfigs: map[string]initConfig{\n\t\t\t\"yumPreinstall\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitPackage.yum(jsii.String(\"git\")),\n\t\t\t}),\n\t\t\t\"config\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitFile.fromObject(jsii.String(\"/etc/stack.json\"), map[string]interface{}{\n\t\t\t\t\t\"stackId\": *stack.of(this).stackId,\n\t\t\t\t\t\"stackName\": *stack.of(this).stackName,\n\t\t\t\t\t\"region\": *stack.of(this).region,\n\t\t\t\t}),\n\t\t\t\tec2.InitGroup.fromName(jsii.String(\"my-group\")),\n\t\t\t\tec2.InitUser.fromName(jsii.String(\"my-user\")),\n\t\t\t\tec2.InitPackage.rpm(jsii.String(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")),\n\t\t\t}),\n\t\t},\n\t}),\n\tinitOptions: &applyCloudFormationInitOptions{\n\t\t// Optional, which configsets to activate (['default'] by default)\n\t\tconfigSets: []*string{\n\t\t\tjsii.String(\"default\"),\n\t\t},\n\n\t\t// Optional, how long the installation is expected to take (5 minutes by default)\n\t\ttimeout: duration.minutes(jsii.Number(30)),\n\n\t\t// Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeUrl: jsii.Boolean(true),\n\n\t\t// Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeRole: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e09877ee77c7133a1ded3fbcac431c014557be3ac85f628eb43b417156d12366"
    },
    "22c9c749050a0e23777f484424da47bae4c402dbd7f674d0e4449ca57d5729e2": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitElement"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "4712a08d8fed3afa310747aa1eb1aba5d6ba37a216e3aba56e4648c79c2ccf25": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    init=ec2.CloudFormationInit.from_elements(\n        ec2.InitFile.from_string(\"/etc/my_instance\", \"This got written during instance startup\")),\n    signals=autoscaling.Signals.wait_for_all(\n        timeout=Duration.minutes(10)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    Init = CloudFormationInit.FromElements(InitFile.FromString(\"/etc/my_instance\", \"This got written during instance startup\")),\n    Signals = Signals.WaitForAll(new SignalsOptions {\n        Timeout = Duration.Minutes(10)\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .init(CloudFormationInit.fromElements(InitFile.fromString(\"/etc/my_instance\", \"This got written during instance startup\")))\n        .signals(Signals.waitForAll(SignalsOptions.builder()\n                .timeout(Duration.minutes(10))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nautoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// ...\n\n\tinit: ec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/my_instance\"), jsii.String(\"This got written during instance startup\"))),\n\tsignals: autoscaling.signals.waitForAll(&signalsOptions{\n\t\ttimeout: duration.minutes(jsii.Number(10)),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitFile"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.Signals",
        "@aws-cdk/aws-autoscaling.Signals#waitForAll",
        "@aws-cdk/aws-autoscaling.SignalsOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 28,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "9c0de727f982accb5530f5e619861213519c037682dc9c85692b0b061c63f3e9"
    },
    "a359552edd75a2a1ff53837a61d92b7400e5ce0304a1c9b581dc5bd65bc70b39": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# docker_image: cdk.DockerImage\n# grantable: iam.IGrantable\n# init_service_restart_handle: ec2.InitServiceRestartHandle\n# local_bundling: cdk.ILocalBundling\n\ninit_file_asset_options = ec2.InitFileAssetOptions(\n    asset_hash=\"assetHash\",\n    asset_hash_type=cdk.AssetHashType.SOURCE,\n    base64_encoded=False,\n    bundling=cdk.BundlingOptions(\n        image=docker_image,\n\n        # the properties below are optional\n        command=[\"command\"],\n        entrypoint=[\"entrypoint\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        local=local_bundling,\n        output_type=cdk.BundlingOutput.ARCHIVED,\n        security_opt=\"securityOpt\",\n        user=\"user\",\n        volumes=[cdk.DockerVolume(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n\n            # the properties below are optional\n            consistency=cdk.DockerVolumeConsistency.CONSISTENT\n        )],\n        working_directory=\"workingDirectory\"\n    ),\n    exclude=[\"exclude\"],\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    group=\"group\",\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    mode=\"mode\",\n    owner=\"owner\",\n    readers=[grantable],\n    service_restart_handles=[init_service_restart_handle],\n    source_hash=\"sourceHash\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nDockerImage dockerImage;\nIGrantable grantable;\nInitServiceRestartHandle initServiceRestartHandle;\nILocalBundling localBundling;\nInitFileAssetOptions initFileAssetOptions = new InitFileAssetOptions {\n    AssetHash = \"assetHash\",\n    AssetHashType = AssetHashType.SOURCE,\n    Base64Encoded = false,\n    Bundling = new BundlingOptions {\n        Image = dockerImage,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Local = localBundling,\n        OutputType = BundlingOutput.ARCHIVED,\n        SecurityOpt = \"securityOpt\",\n        User = \"user\",\n        Volumes = new [] { new DockerVolume {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n\n            // the properties below are optional\n            Consistency = DockerVolumeConsistency.CONSISTENT\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    Exclude = new [] { \"exclude\" },\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    Group = \"group\",\n    IgnoreMode = IgnoreMode.GLOB,\n    Mode = \"mode\",\n    Owner = \"owner\",\n    Readers = new [] { grantable },\n    ServiceRestartHandles = new [] { initServiceRestartHandle },\n    SourceHash = \"sourceHash\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nDockerImage dockerImage;\nIGrantable grantable;\nInitServiceRestartHandle initServiceRestartHandle;\nILocalBundling localBundling;\n\nInitFileAssetOptions initFileAssetOptions = InitFileAssetOptions.builder()\n        .assetHash(\"assetHash\")\n        .assetHashType(AssetHashType.SOURCE)\n        .base64Encoded(false)\n        .bundling(BundlingOptions.builder()\n                .image(dockerImage)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .local(localBundling)\n                .outputType(BundlingOutput.ARCHIVED)\n                .securityOpt(\"securityOpt\")\n                .user(\"user\")\n                .volumes(List.of(DockerVolume.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n\n                        // the properties below are optional\n                        .consistency(DockerVolumeConsistency.CONSISTENT)\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .exclude(List.of(\"exclude\"))\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .group(\"group\")\n        .ignoreMode(IgnoreMode.GLOB)\n        .mode(\"mode\")\n        .owner(\"owner\")\n        .readers(List.of(grantable))\n        .serviceRestartHandles(List.of(initServiceRestartHandle))\n        .sourceHash(\"sourceHash\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws-samples/dummy/awscdkassets\"import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dockerImage dockerImage\nvar grantable iGrantable\nvar initServiceRestartHandle initServiceRestartHandle\nvar localBundling iLocalBundling\ninitFileAssetOptions := &initFileAssetOptions{\n\tassetHash: jsii.String(\"assetHash\"),\n\tassetHashType: cdk.assetHashType_SOURCE,\n\tbase64Encoded: jsii.Boolean(false),\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage,\n\n\t\t// the properties below are optional\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tentrypoint: []*string{\n\t\t\tjsii.String(\"entrypoint\"),\n\t\t},\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tlocal: localBundling,\n\t\toutputType: cdk.bundlingOutput_ARCHIVED,\n\t\tsecurityOpt: jsii.String(\"securityOpt\"),\n\t\tuser: jsii.String(\"user\"),\n\t\tvolumes: []dockerVolume{\n\t\t\t&dockerVolume{\n\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tconsistency: cdk.dockerVolumeConsistency_CONSISTENT,\n\t\t\t},\n\t\t},\n\t\tworkingDirectory: jsii.String(\"workingDirectory\"),\n\t},\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\tfollow: assets.followMode_NEVER,\n\tfollowSymlinks: cdk.symlinkFollowMode_NEVER,\n\tgroup: jsii.String(\"group\"),\n\tignoreMode: cdk.ignoreMode_GLOB,\n\tmode: jsii.String(\"mode\"),\n\towner: jsii.String(\"owner\"),\n\treaders: []*iGrantable{\n\t\tgrantable,\n\t},\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\tinitServiceRestartHandle,\n\t},\n\tsourceHash: jsii.String(\"sourceHash\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const initServiceRestartHandle: ec2.InitServiceRestartHandle;\ndeclare const localBundling: cdk.ILocalBundling;\nconst initFileAssetOptions: ec2.InitFileAssetOptions = {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  base64Encoded: false,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  group: 'group',\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  mode: 'mode',\n  owner: 'owner',\n  readers: [grantable],\n  serviceRestartHandles: [initServiceRestartHandle],\n  sourceHash: 'sourceHash',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitFileAssetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assets.FollowMode",
        "@aws-cdk/assets.FollowMode#NEVER",
        "@aws-cdk/aws-ec2.InitFileAssetOptions",
        "@aws-cdk/core.AssetHashType",
        "@aws-cdk/core.AssetHashType#SOURCE",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT",
        "@aws-cdk/core.ILocalBundling",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const initServiceRestartHandle: ec2.InitServiceRestartHandle;\ndeclare const localBundling: cdk.ILocalBundling;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst initFileAssetOptions: ec2.InitFileAssetOptions = {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  base64Encoded: false,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  group: 'group',\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  mode: 'mode',\n  owner: 'owner',\n  readers: [grantable],\n  serviceRestartHandles: [initServiceRestartHandle],\n  sourceHash: 'sourceHash',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 18,
        "75": 69,
        "91": 1,
        "130": 4,
        "153": 5,
        "169": 5,
        "192": 6,
        "193": 4,
        "194": 12,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 28,
        "290": 1
      },
      "fqnsFingerprint": "2f0a0108eed41019277e98b0c4a7a2cdd6cca64e93cbb13b851172fbe714c223"
    },
    "2f3a7d28276f1384fdf9c135d810c365e7c343c3c49262ee22865a36d3565590": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitFileOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "720540150fbc58d5aa51edbcd0c815614c8293a3ba5c39920b98f12bb4a0825b": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// Showing the most complex setup, if you have simpler requirements\n\t// you can use `CloudFormationInit.fromElements()`.\n\tinit: ec2.cloudFormationInit.fromConfigSets(&configSetProps{\n\t\tconfigSets: map[string][]*string{\n\t\t\t// Applies the configs below in this order\n\t\t\t\"default\": []*string{\n\t\t\t\tjsii.String(\"yumPreinstall\"),\n\t\t\t\tjsii.String(\"config\"),\n\t\t\t},\n\t\t},\n\t\tconfigs: map[string]initConfig{\n\t\t\t\"yumPreinstall\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitPackage.yum(jsii.String(\"git\")),\n\t\t\t}),\n\t\t\t\"config\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitFile.fromObject(jsii.String(\"/etc/stack.json\"), map[string]interface{}{\n\t\t\t\t\t\"stackId\": *stack.of(this).stackId,\n\t\t\t\t\t\"stackName\": *stack.of(this).stackName,\n\t\t\t\t\t\"region\": *stack.of(this).region,\n\t\t\t\t}),\n\t\t\t\tec2.InitGroup.fromName(jsii.String(\"my-group\")),\n\t\t\t\tec2.InitUser.fromName(jsii.String(\"my-user\")),\n\t\t\t\tec2.InitPackage.rpm(jsii.String(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")),\n\t\t\t}),\n\t\t},\n\t}),\n\tinitOptions: &applyCloudFormationInitOptions{\n\t\t// Optional, which configsets to activate (['default'] by default)\n\t\tconfigSets: []*string{\n\t\t\tjsii.String(\"default\"),\n\t\t},\n\n\t\t// Optional, how long the installation is expected to take (5 minutes by default)\n\t\ttimeout: duration.minutes(jsii.Number(30)),\n\n\t\t// Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeUrl: jsii.Boolean(true),\n\n\t\t// Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeRole: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e09877ee77c7133a1ded3fbcac431c014557be3ac85f628eb43b417156d12366"
    },
    "2e4b2b32c72681ffd56c06de676423deb4bd4aecf9d9e3ab708ea3cb03056fb5": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// Showing the most complex setup, if you have simpler requirements\n\t// you can use `CloudFormationInit.fromElements()`.\n\tinit: ec2.cloudFormationInit.fromConfigSets(&configSetProps{\n\t\tconfigSets: map[string][]*string{\n\t\t\t// Applies the configs below in this order\n\t\t\t\"default\": []*string{\n\t\t\t\tjsii.String(\"yumPreinstall\"),\n\t\t\t\tjsii.String(\"config\"),\n\t\t\t},\n\t\t},\n\t\tconfigs: map[string]initConfig{\n\t\t\t\"yumPreinstall\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitPackage.yum(jsii.String(\"git\")),\n\t\t\t}),\n\t\t\t\"config\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitFile.fromObject(jsii.String(\"/etc/stack.json\"), map[string]interface{}{\n\t\t\t\t\t\"stackId\": *stack.of(this).stackId,\n\t\t\t\t\t\"stackName\": *stack.of(this).stackName,\n\t\t\t\t\t\"region\": *stack.of(this).region,\n\t\t\t\t}),\n\t\t\t\tec2.InitGroup.fromName(jsii.String(\"my-group\")),\n\t\t\t\tec2.InitUser.fromName(jsii.String(\"my-user\")),\n\t\t\t\tec2.InitPackage.rpm(jsii.String(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")),\n\t\t\t}),\n\t\t},\n\t}),\n\tinitOptions: &applyCloudFormationInitOptions{\n\t\t// Optional, which configsets to activate (['default'] by default)\n\t\tconfigSets: []*string{\n\t\t\tjsii.String(\"default\"),\n\t\t},\n\n\t\t// Optional, how long the installation is expected to take (5 minutes by default)\n\t\ttimeout: duration.minutes(jsii.Number(30)),\n\n\t\t// Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeUrl: jsii.Boolean(true),\n\n\t\t// Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeRole: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitPackage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e09877ee77c7133a1ded3fbcac431c014557be3ac85f628eb43b417156d12366"
    },
    "bbf0f31277ad5c35ba3405b0e8770afd0570acbb0a8f4d244ba2f27e3b4042e5": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "f4622817fe7203d5959f163ed54639acc5d9643a9e568c2a652a8effb9648333": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitServiceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "b7caba29e1917f5167b940748fbf718bba5bd5e29fa6ca4ac5838a064b7d6d55": {
      "translations": {
        "python": {
          "source": "handle = ec2.InitServiceRestartHandle()\nec2.CloudFormationInit.from_elements(\n    ec2.InitCommand.shell_command(\"/usr/bin/custom-nginx-install.sh\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\", service_restart_handle=handle))",
          "version": "2"
        },
        "csharp": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.FromElements(InitCommand.ShellCommand(\"/usr/bin/custom-nginx-install.sh\", new InitCommandOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions { ServiceRestartHandle = handle }));",
          "version": "1"
        },
        "java": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.fromElements(InitCommand.shellCommand(\"/usr/bin/custom-nginx-install.sh\", InitCommandOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder().serviceRestartHandle(handle).build()));",
          "version": "1"
        },
        "go": {
          "source": "handle := ec2.NewInitServiceRestartHandle()\nec2.cloudFormationInit.fromElements(ec2.initCommand.shellCommand(jsii.String(\"/usr/bin/custom-nginx-install.sh\"), &initCommandOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "const handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitServiceRestartHandle"
        },
        "field": {
          "field": "markdown",
          "line": 9
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitCommand",
        "@aws-cdk/aws-ec2.InitCommand#shellCommand",
        "@aws-cdk/aws-ec2.InitCommandOptions",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "0894b65a424b6720868cef5b17cf053e6e786749fa3ce705ecf3bebf3863901f"
    },
    "a7c5f13b15c23ed3d0ece1e3696bc3e3b275cb82d34a26257f6bafb0a8a075ee": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitServiceRestartHandle"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "264a93c14e7c5d9cc4f9749caf8b771c4fe3466c4d88a73c43f9e7e8093d37c2": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "7c6d1fbc13098762acb2b53385433751628144d270617e71a2b18c4c8249a625": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# docker_image: cdk.DockerImage\n# grantable: iam.IGrantable\n# init_service_restart_handle: ec2.InitServiceRestartHandle\n# local_bundling: cdk.ILocalBundling\n\ninit_source_asset_options = ec2.InitSourceAssetOptions(\n    asset_hash=\"assetHash\",\n    asset_hash_type=cdk.AssetHashType.SOURCE,\n    bundling=cdk.BundlingOptions(\n        image=docker_image,\n\n        # the properties below are optional\n        command=[\"command\"],\n        entrypoint=[\"entrypoint\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        local=local_bundling,\n        output_type=cdk.BundlingOutput.ARCHIVED,\n        security_opt=\"securityOpt\",\n        user=\"user\",\n        volumes=[cdk.DockerVolume(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n\n            # the properties below are optional\n            consistency=cdk.DockerVolumeConsistency.CONSISTENT\n        )],\n        working_directory=\"workingDirectory\"\n    ),\n    exclude=[\"exclude\"],\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    readers=[grantable],\n    service_restart_handles=[init_service_restart_handle],\n    source_hash=\"sourceHash\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nDockerImage dockerImage;\nIGrantable grantable;\nInitServiceRestartHandle initServiceRestartHandle;\nILocalBundling localBundling;\nInitSourceAssetOptions initSourceAssetOptions = new InitSourceAssetOptions {\n    AssetHash = \"assetHash\",\n    AssetHashType = AssetHashType.SOURCE,\n    Bundling = new BundlingOptions {\n        Image = dockerImage,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Local = localBundling,\n        OutputType = BundlingOutput.ARCHIVED,\n        SecurityOpt = \"securityOpt\",\n        User = \"user\",\n        Volumes = new [] { new DockerVolume {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n\n            // the properties below are optional\n            Consistency = DockerVolumeConsistency.CONSISTENT\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    Exclude = new [] { \"exclude\" },\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB,\n    Readers = new [] { grantable },\n    ServiceRestartHandles = new [] { initServiceRestartHandle },\n    SourceHash = \"sourceHash\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nDockerImage dockerImage;\nIGrantable grantable;\nInitServiceRestartHandle initServiceRestartHandle;\nILocalBundling localBundling;\n\nInitSourceAssetOptions initSourceAssetOptions = InitSourceAssetOptions.builder()\n        .assetHash(\"assetHash\")\n        .assetHashType(AssetHashType.SOURCE)\n        .bundling(BundlingOptions.builder()\n                .image(dockerImage)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .local(localBundling)\n                .outputType(BundlingOutput.ARCHIVED)\n                .securityOpt(\"securityOpt\")\n                .user(\"user\")\n                .volumes(List.of(DockerVolume.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n\n                        // the properties below are optional\n                        .consistency(DockerVolumeConsistency.CONSISTENT)\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .exclude(List.of(\"exclude\"))\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .readers(List.of(grantable))\n        .serviceRestartHandles(List.of(initServiceRestartHandle))\n        .sourceHash(\"sourceHash\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws-samples/dummy/awscdkassets\"import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dockerImage dockerImage\nvar grantable iGrantable\nvar initServiceRestartHandle initServiceRestartHandle\nvar localBundling iLocalBundling\ninitSourceAssetOptions := &initSourceAssetOptions{\n\tassetHash: jsii.String(\"assetHash\"),\n\tassetHashType: cdk.assetHashType_SOURCE,\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage,\n\n\t\t// the properties below are optional\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tentrypoint: []*string{\n\t\t\tjsii.String(\"entrypoint\"),\n\t\t},\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tlocal: localBundling,\n\t\toutputType: cdk.bundlingOutput_ARCHIVED,\n\t\tsecurityOpt: jsii.String(\"securityOpt\"),\n\t\tuser: jsii.String(\"user\"),\n\t\tvolumes: []dockerVolume{\n\t\t\t&dockerVolume{\n\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tconsistency: cdk.dockerVolumeConsistency_CONSISTENT,\n\t\t\t},\n\t\t},\n\t\tworkingDirectory: jsii.String(\"workingDirectory\"),\n\t},\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\tfollow: assets.followMode_NEVER,\n\tfollowSymlinks: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n\treaders: []*iGrantable{\n\t\tgrantable,\n\t},\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\tinitServiceRestartHandle,\n\t},\n\tsourceHash: jsii.String(\"sourceHash\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const initServiceRestartHandle: ec2.InitServiceRestartHandle;\ndeclare const localBundling: cdk.ILocalBundling;\nconst initSourceAssetOptions: ec2.InitSourceAssetOptions = {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  serviceRestartHandles: [initServiceRestartHandle],\n  sourceHash: 'sourceHash',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitSourceAssetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assets.FollowMode",
        "@aws-cdk/assets.FollowMode#NEVER",
        "@aws-cdk/aws-ec2.InitSourceAssetOptions",
        "@aws-cdk/core.AssetHashType",
        "@aws-cdk/core.AssetHashType#SOURCE",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT",
        "@aws-cdk/core.ILocalBundling",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const initServiceRestartHandle: ec2.InitServiceRestartHandle;\ndeclare const localBundling: cdk.ILocalBundling;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst initSourceAssetOptions: ec2.InitSourceAssetOptions = {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  serviceRestartHandles: [initServiceRestartHandle],\n  sourceHash: 'sourceHash',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 65,
        "130": 4,
        "153": 5,
        "169": 5,
        "192": 6,
        "193": 4,
        "194": 12,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "d0f39aa88870dfb657112e29a98b75f92232acaadbb1581136933b4c7180520f"
    },
    "fd651f882d3dec4130dc05be18537549fee3e998c98f75418162b65ee84d0c65": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\n\nhandle := ec2.NewInitServiceRestartHandle()\n\nec2.cloudFormationInit.fromElements(ec2.initFile.fromString(jsii.String(\"/etc/nginx/nginx.conf\"), jsii.String(\"...\"), &initFileOptions{\n\tserviceRestartHandles: []initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initSource.fromS3Object(jsii.String(\"/var/www/html\"), myBucket, jsii.String(\"html.zip\"), &initSourceOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\thandle,\n\t},\n}), ec2.initService.enable(jsii.String(\"nginx\"), &initServiceOptions{\n\tserviceRestartHandle: handle,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5029f4605a216230fe663edc9b7dedcaacdac8bb1a13c3c6e4d8153ce1c6fe8"
    },
    "7a166b341f52b160dbd4ce3b177f2536a9be30dd3d8968f2ae06c6335ec2d2a7": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// Showing the most complex setup, if you have simpler requirements\n\t// you can use `CloudFormationInit.fromElements()`.\n\tinit: ec2.cloudFormationInit.fromConfigSets(&configSetProps{\n\t\tconfigSets: map[string][]*string{\n\t\t\t// Applies the configs below in this order\n\t\t\t\"default\": []*string{\n\t\t\t\tjsii.String(\"yumPreinstall\"),\n\t\t\t\tjsii.String(\"config\"),\n\t\t\t},\n\t\t},\n\t\tconfigs: map[string]initConfig{\n\t\t\t\"yumPreinstall\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitPackage.yum(jsii.String(\"git\")),\n\t\t\t}),\n\t\t\t\"config\": ec2.NewInitConfig([]InitElement{\n\t\t\t\tec2.InitFile.fromObject(jsii.String(\"/etc/stack.json\"), map[string]interface{}{\n\t\t\t\t\t\"stackId\": *stack.of(this).stackId,\n\t\t\t\t\t\"stackName\": *stack.of(this).stackName,\n\t\t\t\t\t\"region\": *stack.of(this).region,\n\t\t\t\t}),\n\t\t\t\tec2.InitGroup.fromName(jsii.String(\"my-group\")),\n\t\t\t\tec2.InitUser.fromName(jsii.String(\"my-user\")),\n\t\t\t\tec2.InitPackage.rpm(jsii.String(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")),\n\t\t\t}),\n\t\t},\n\t}),\n\tinitOptions: &applyCloudFormationInitOptions{\n\t\t// Optional, which configsets to activate (['default'] by default)\n\t\tconfigSets: []*string{\n\t\t\tjsii.String(\"default\"),\n\t\t},\n\n\t\t// Optional, how long the installation is expected to take (5 minutes by default)\n\t\ttimeout: duration.minutes(jsii.Number(30)),\n\n\t\t// Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeUrl: jsii.Boolean(true),\n\n\t\t// Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n\t\tincludeRole: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitUser"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e09877ee77c7133a1ded3fbcac431c014557be3ac85f628eb43b417156d12366"
    },
    "809e903e010b21e0b02b9736485ad8c322d1000d13083307bd0b7681902a50f5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninit_user_options = ec2.InitUserOptions(\n    groups=[\"groups\"],\n    home_dir=\"homeDir\",\n    user_id=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInitUserOptions initUserOptions = new InitUserOptions {\n    Groups = new [] { \"groups\" },\n    HomeDir = \"homeDir\",\n    UserId = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInitUserOptions initUserOptions = InitUserOptions.builder()\n        .groups(List.of(\"groups\"))\n        .homeDir(\"homeDir\")\n        .userId(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninitUserOptions := &initUserOptions{\n\tgroups: []*string{\n\t\tjsii.String(\"groups\"),\n\t},\n\thomeDir: jsii.String(\"homeDir\"),\n\tuserId: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst initUserOptions: ec2.InitUserOptions = {\n  groups: ['groups'],\n  homeDir: 'homeDir',\n  userId: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitUserOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InitUserOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst initUserOptions: ec2.InitUserOptions = {\n  groups: ['groups'],\n  homeDir: 'homeDir',\n  userId: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "15b911a39a5b2d590ac45271d1f3818bd20904272409ba0e9999d11d69cf844c"
    },
    "1b99cd37515535c9734bd6ce912b418a18697b7a95a8818a14a1c08a8b8ea74e": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.BlockDevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.BlockDeviceVolume.ebs(50)\n    ), ec2.BlockDevice(\n        device_name=\"/dev/sdm\",\n        volume=ec2.BlockDeviceVolume.ebs(100)\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"/dev/sda1\",\n        Volume = BlockDeviceVolume.Ebs(50)\n    }, new BlockDevice {\n        DeviceName = \"/dev/sdm\",\n        Volume = BlockDeviceVolume.Ebs(100)\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"/dev/sda1\")\n                .volume(BlockDeviceVolume.ebs(50))\n                .build(), BlockDevice.builder()\n                .deviceName(\"/dev/sdm\")\n                .volume(BlockDeviceVolume.ebs(100))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// ...\n\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sda1\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(50)),\n\t\t},\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sdm\"),\n\t\t\tvolume: ec2.*blockDeviceVolume.ebs(jsii.Number(100)),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Instance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62a8c742c24849e1e99019c80132de13323c25d4f04e2ef136549bfaf1e84bf6"
    },
    "304c53cdfb28ec85e0cf7a952c1a19468d42643da490ca41eca627615c0f21fe": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# source_instance: rds.DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar sourceInstance databaseInstance\nrds.NewDatabaseInstanceFromSnapshot(this, jsii.String(\"Instance\"), &databaseInstanceFromSnapshotProps{\n\tsnapshotIdentifier: jsii.String(\"my-snapshot\"),\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n})\nrds.NewDatabaseInstanceReadReplica(this, jsii.String(\"ReadReplica\"), &databaseInstanceReadReplicaProps{\n\tsourceDatabaseInstance: sourceInstance,\n\tinstanceType: ec2.*instanceType.of(ec2.*instanceClass_BURSTABLE2, ec2.*instanceSize_LARGE),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceClass"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7153afd4eb284ef3c2278bebbbbe30b5cd1d73154ed529df8d7d373f562d7cc1"
    },
    "b16d9da78d78592b1f14e0d42dcc2e3d9023bd53b3b70cc2d6757d116eff7c86": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# instance_type: ec2.InstanceType\n# machine_image: ec2.IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.BlockDevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.BlockDeviceVolume.ebs(50)\n    ), ec2.BlockDevice(\n        device_name=\"/dev/sdm\",\n        volume=ec2.BlockDeviceVolume.ebs(100)\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"/dev/sda1\",\n        Volume = BlockDeviceVolume.Ebs(50)\n    }, new BlockDevice {\n        DeviceName = \"/dev/sdm\",\n        Volume = BlockDeviceVolume.Ebs(100)\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"/dev/sda1\")\n                .volume(BlockDeviceVolume.ebs(50))\n                .build(), BlockDevice.builder()\n                .deviceName(\"/dev/sdm\")\n                .volume(BlockDeviceVolume.ebs(100))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar instanceType instanceType\nvar machineImage iMachineImage\n\nec2.NewInstance(this, jsii.String(\"Instance\"), &instanceProps{\n\tvpc: vpc,\n\tinstanceType: instanceType,\n\tmachineImage: machineImage,\n\n\t// ...\n\n\tblockDevices: []blockDevice{\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sda1\"),\n\t\t\tvolume: ec2.blockDeviceVolume.ebs(jsii.Number(50)),\n\t\t},\n\t\t&blockDevice{\n\t\t\tdeviceName: jsii.String(\"/dev/sdm\"),\n\t\t\tvolume: ec2.*blockDeviceVolume.ebs(jsii.Number(100)),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62a8c742c24849e1e99019c80132de13323c25d4f04e2ef136549bfaf1e84bf6"
    },
    "4ed7472048a071a637db7accbf8f2d8cb85776e588f81742607d776c045909b6": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"MyRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "role := iam.NewRole(this, jsii.String(\"MyRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"ec2.amazonaws.com\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.InstanceProps",
          "memberName": "role"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "214b413846f98673a2e9d590360641f28cae85952413e4c45f6b6fe49fd71330"
    },
    "cc439851c1a366c75a818664692e8aab8c195f863d9d096435206dd6f89f4d64": {
      "translations": {
        "python": {
          "source": "aspect = ec2.InstanceRequireImdsv2Aspect()\nAspects.of(self).add(aspect)",
          "version": "2"
        },
        "csharp": {
          "source": "InstanceRequireImdsv2Aspect aspect = new InstanceRequireImdsv2Aspect();\nAspects.Of(this).Add(aspect);",
          "version": "1"
        },
        "java": {
          "source": "InstanceRequireImdsv2Aspect aspect = new InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);",
          "version": "1"
        },
        "go": {
          "source": "aspect := ec2.NewInstanceRequireImdsv2Aspect()\naspects.of(this).add(aspect)",
          "version": "1"
        },
        "$": {
          "source": "const aspect = new ec2.InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceRequireImdsv2Aspect"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceRequireImdsv2Aspect",
        "@aws-cdk/core.Aspects#add",
        "@aws-cdk/core.Aspects#of",
        "@aws-cdk/core.IAspect",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst aspect = new ec2.InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "606ef34fecf9169354d00ceb09fb7481800af4172fd59c7db3948bfae42837e9"
    },
    "b4b05cc0672c73960fdff1af8d4cf7283c0536aba535de61ea73acd8d43cf63f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\ninstance_require_imdsv2_aspect_props = ec2.InstanceRequireImdsv2AspectProps(\n    suppress_launch_template_warning=False,\n    suppress_warnings=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInstanceRequireImdsv2AspectProps instanceRequireImdsv2AspectProps = new InstanceRequireImdsv2AspectProps {\n    SuppressLaunchTemplateWarning = false,\n    SuppressWarnings = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInstanceRequireImdsv2AspectProps instanceRequireImdsv2AspectProps = InstanceRequireImdsv2AspectProps.builder()\n        .suppressLaunchTemplateWarning(false)\n        .suppressWarnings(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\ninstanceRequireImdsv2AspectProps := &instanceRequireImdsv2AspectProps{\n\tsuppressLaunchTemplateWarning: jsii.Boolean(false),\n\tsuppressWarnings: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst instanceRequireImdsv2AspectProps: ec2.InstanceRequireImdsv2AspectProps = {\n  suppressLaunchTemplateWarning: false,\n  suppressWarnings: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceRequireImdsv2AspectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceRequireImdsv2AspectProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceRequireImdsv2AspectProps: ec2.InstanceRequireImdsv2AspectProps = {\n  suppressLaunchTemplateWarning: false,\n  suppressWarnings: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5e3db48990b4ef8cb56520dd10510f9c34e3ab7a446b912b180ff29226c6d715"
    },
    "b2fa2b32350678459cfba3e5fe7fc4b04f9c0929bcd3dd9fef3f3679b6a13044": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# source_instance: rds.DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar sourceInstance databaseInstance\nrds.NewDatabaseInstanceFromSnapshot(this, jsii.String(\"Instance\"), &databaseInstanceFromSnapshotProps{\n\tsnapshotIdentifier: jsii.String(\"my-snapshot\"),\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n})\nrds.NewDatabaseInstanceReadReplica(this, jsii.String(\"ReadReplica\"), &databaseInstanceReadReplicaProps{\n\tsourceDatabaseInstance: sourceInstance,\n\tinstanceType: ec2.*instanceType.of(ec2.*instanceClass_BURSTABLE2, ec2.*instanceSize_LARGE),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceSize"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7153afd4eb284ef3c2278bebbbbe30b5cd1d73154ed529df8d7d373f562d7cc1"
    },
    "65b40e434125cb2976f0b1b0495e45ea0101c031b4421e374c1001c869c06e55": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\",  # NOTE: 'admin' is reserved by DocumentDB\n        exclude_characters=\"\\\"@/:\",  # optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        secret_name=\"/myapp/mydocdb/masteruser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\",  // NOTE: 'admin' is reserved by DocumentDB\n        ExcludeCharacters = \"\\\"@/:\",  // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        SecretName = \"/myapp/mydocdb/masteruser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\") // NOTE: 'admin' is reserved by DocumentDB\n                .excludeCharacters(\"\\\"@/:\") // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n                .secretName(\"/myapp/mydocdb/masteruser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t\t // NOTE: 'admin' is reserved by DocumentDB\n\t\texcludeCharacters: jsii.String(\"\\\"@/:\"),\n\t\t // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n\t\tsecretName: jsii.String(\"/myapp/mydocdb/masteruser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c56889502f5d55a3fa58302a00c811da0be8e8546ae721c566230ac75cdb2446"
    },
    "6958facad74c9233e3d55420bf16f8648a958f7bcf86a6253b87db95bf525c5e": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nec2.NewInterfaceVpcEndpoint(this, jsii.String(\"VPC Endpoint\"), &interfaceVpcEndpointProps{\n\tvpc: vpc,\n\tservice: ec2.NewInterfaceVpcEndpointService(jsii.String(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\"), jsii.Number(443)),\n\t// Choose which availability zones to place the VPC endpoint in, based on\n\t// available AZs\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"us-east-1a\"),\n\t\t\tjsii.String(\"us-east-1c\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9100872ba4e916fe16d1281ceeba9234452cd6f44e213c524206066977c58c3e"
    },
    "cb9ece1ea837b5f5545cc1b2a8069a76d773324894f222ab9bea36b96a2507e8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# security_group: ec2.SecurityGroup\n\ninterface_vpc_endpoint_attributes = ec2.InterfaceVpcEndpointAttributes(\n    port=123,\n    vpc_endpoint_id=\"vpcEndpointId\",\n\n    # the properties below are optional\n    security_group_id=\"securityGroupId\",\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSecurityGroup securityGroup;\n\nInterfaceVpcEndpointAttributes interfaceVpcEndpointAttributes = new InterfaceVpcEndpointAttributes {\n    Port = 123,\n    VpcEndpointId = \"vpcEndpointId\",\n\n    // the properties below are optional\n    SecurityGroupId = \"securityGroupId\",\n    SecurityGroups = new [] { securityGroup }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSecurityGroup securityGroup;\n\nInterfaceVpcEndpointAttributes interfaceVpcEndpointAttributes = InterfaceVpcEndpointAttributes.builder()\n        .port(123)\n        .vpcEndpointId(\"vpcEndpointId\")\n\n        // the properties below are optional\n        .securityGroupId(\"securityGroupId\")\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar securityGroup securityGroup\ninterfaceVpcEndpointAttributes := &interfaceVpcEndpointAttributes{\n\tport: jsii.Number(123),\n\tvpcEndpointId: jsii.String(\"vpcEndpointId\"),\n\n\t// the properties below are optional\n\tsecurityGroupId: jsii.String(\"securityGroupId\"),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst interfaceVpcEndpointAttributes: ec2.InterfaceVpcEndpointAttributes = {\n  port: 123,\n  vpcEndpointId: 'vpcEndpointId',\n\n  // the properties below are optional\n  securityGroupId: 'securityGroupId',\n  securityGroups: [securityGroup],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst interfaceVpcEndpointAttributes: ec2.InterfaceVpcEndpointAttributes = {\n  port: 123,\n  vpcEndpointId: 'vpcEndpointId',\n\n  // the properties below are optional\n  securityGroupId: 'securityGroupId',\n  securityGroups: [securityGroup],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "4cf1ad69e91b5aac408d677daf3d9f8d5b7c866dc385ab0e882e14f9dd917acc"
    },
    "d6804b1b8c17a62b351c0ef92cbcfb2fab3903a67740ce49654e3f85740b7b10": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Add gateway endpoints when creating the VPC\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tgatewayEndpoints: map[string]gatewayVpcEndpointOptions{\n\t\t\"S3\": &gatewayVpcEndpointOptions{\n\t\t\t\"service\": ec2.GatewayVpcEndpointAwsService_S3(),\n\t\t},\n\t},\n})\n\n// Alternatively gateway endpoints can be added on the VPC\ndynamoDbEndpoint := vpc.addGatewayEndpoint(jsii.String(\"DynamoDbEndpoint\"), &gatewayVpcEndpointOptions{\n\tservice: ec2.gatewayVpcEndpointAwsService_DYNAMODB(),\n})\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\niam.NewPolicyStatement(&policyStatementProps{\n\t // Restrict to listing and describing tables\n\tprincipals: []iPrincipal{\n\t\tiam.NewAnyPrincipal(),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"dynamodb:DescribeTable\"),\n\t\tjsii.String(\"dynamodb:ListTables\"),\n\t},\n\tresources: []*string{\n\t\tjsii.String(\"*\"),\n\t},\n}))\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(jsii.String(\"EcrDockerEndpoint\"), &interfaceVpcEndpointOptions{\n\tservice: ec2.interfaceVpcEndpointAwsService_ECR_DOCKER(),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "f2f9dbba26ca3fc2a8da6ba310517358a9df46cb03efe72ee9b3dd66e97d3842"
    },
    "10edd13f962796404fbcdbffcf047c5e5cfe7e280cf25c8f941752ced4d93e38": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Add gateway endpoints when creating the VPC\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tgatewayEndpoints: map[string]gatewayVpcEndpointOptions{\n\t\t\"S3\": &gatewayVpcEndpointOptions{\n\t\t\t\"service\": ec2.GatewayVpcEndpointAwsService_S3(),\n\t\t},\n\t},\n})\n\n// Alternatively gateway endpoints can be added on the VPC\ndynamoDbEndpoint := vpc.addGatewayEndpoint(jsii.String(\"DynamoDbEndpoint\"), &gatewayVpcEndpointOptions{\n\tservice: ec2.gatewayVpcEndpointAwsService_DYNAMODB(),\n})\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\niam.NewPolicyStatement(&policyStatementProps{\n\t // Restrict to listing and describing tables\n\tprincipals: []iPrincipal{\n\t\tiam.NewAnyPrincipal(),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"dynamodb:DescribeTable\"),\n\t\tjsii.String(\"dynamodb:ListTables\"),\n\t},\n\tresources: []*string{\n\t\tjsii.String(\"*\"),\n\t},\n}))\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(jsii.String(\"EcrDockerEndpoint\"), &interfaceVpcEndpointOptions{\n\tservice: ec2.interfaceVpcEndpointAwsService_ECR_DOCKER(),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "f2f9dbba26ca3fc2a8da6ba310517358a9df46cb03efe72ee9b3dd66e97d3842"
    },
    "5459d11adc54cb49e09829734ac607a87d27c60368e86be7a8edcc2ebce6f52f": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nec2.NewInterfaceVpcEndpoint(this, jsii.String(\"VPC Endpoint\"), &interfaceVpcEndpointProps{\n\tvpc: vpc,\n\tservice: ec2.NewInterfaceVpcEndpointService(jsii.String(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\"), jsii.Number(443)),\n\t// Choose which availability zones to place the VPC endpoint in, based on\n\t// available AZs\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"us-east-1a\"),\n\t\t\tjsii.String(\"us-east-1c\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9100872ba4e916fe16d1281ceeba9234452cd6f44e213c524206066977c58c3e"
    },
    "878337aca001d67a824370cb65423cc3d631adb0cbc1ffb6e88f243e1aa69e21": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nec2.NewInterfaceVpcEndpoint(this, jsii.String(\"VPC Endpoint\"), &interfaceVpcEndpointProps{\n\tvpc: vpc,\n\tservice: ec2.NewInterfaceVpcEndpointService(jsii.String(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\"), jsii.Number(443)),\n\t// Choose which availability zones to place the VPC endpoint in, based on\n\t// available AZs\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"us-east-1a\"),\n\t\t\tjsii.String(\"us-east-1c\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9100872ba4e916fe16d1281ceeba9234452cd6f44e213c524206066977c58c3e"
    },
    "6c72a09252faea292e81ce9ef28d892725d94fab2972dc84c15adf9ecf2e2af3": {
      "translations": {
        "python": {
          "source": "boot_hook_conf = ec2.UserData.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.UserData.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\")\n\nmultipart_user_data = ec2.MultipartUserData()\n# The docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# Execute the rest of setup\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(setup_commands))\n\nec2.LaunchTemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UserData bootHookConf = UserData.ForLinux();\nbootHookConf.AddCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.ForLinux();\nsetupCommands.AddCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.AddPart(MultipartBody.FromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.AddPart(MultipartBody.FromUserData(setupCommands));\n\nnew LaunchTemplate(this, \"\", new LaunchTemplateProps {\n    UserData = multipartUserData,\n    BlockDevices = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserData bootHookConf = UserData.forLinux();\nbootHookConf.addCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.forLinux();\nsetupCommands.addCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(MultipartBody.fromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.addPart(MultipartBody.fromUserData(setupCommands));\n\nLaunchTemplate.Builder.create(this, \"\")\n        .userData(multipartUserData)\n        .blockDevices(List.of())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "bootHookConf := ec2.userData.forLinux()\nbootHookConf.addCommands(jsii.String(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\"))\n\nsetupCommands := ec2.userData.forLinux()\nsetupCommands.addCommands(jsii.String(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\"))\n\nmultipartUserData := ec2.NewMultipartUserData()\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.multipartBody.fromUserData(bootHookConf, jsii.String(\"text/cloud-boothook; charset=\\\"us-ascii\\\"\")))\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.multipartBody.fromUserData(setupCommands))\n\nec2.NewLaunchTemplate(this, jsii.String(\"\"), &launchTemplateProps{\n\tuserData: multipartUserData,\n\tblockDevices: []blockDevice{\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 32,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 14,
        "196": 8,
        "197": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "0dfa818b7cd80d44018159f4a0ac32318eeac68898ba108ba6245dce83a5c4ae"
    },
    "452ccfb42e0112fbd2e700ec0b5b8e8901700b7ec93ff1f313b48823249784c6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_attributes = ec2.LaunchTemplateAttributes(\n    launch_template_id=\"launchTemplateId\",\n    launch_template_name=\"launchTemplateName\",\n    version_number=\"versionNumber\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateAttributes launchTemplateAttributes = new LaunchTemplateAttributes {\n    LaunchTemplateId = \"launchTemplateId\",\n    LaunchTemplateName = \"launchTemplateName\",\n    VersionNumber = \"versionNumber\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateAttributes launchTemplateAttributes = LaunchTemplateAttributes.builder()\n        .launchTemplateId(\"launchTemplateId\")\n        .launchTemplateName(\"launchTemplateName\")\n        .versionNumber(\"versionNumber\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateAttributes := &launchTemplateAttributes{\n\tlaunchTemplateId: jsii.String(\"launchTemplateId\"),\n\tlaunchTemplateName: jsii.String(\"launchTemplateName\"),\n\tversionNumber: jsii.String(\"versionNumber\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateAttributes: ec2.LaunchTemplateAttributes = {\n  launchTemplateId: 'launchTemplateId',\n  launchTemplateName: 'launchTemplateName',\n  versionNumber: 'versionNumber',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplateAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateAttributes: ec2.LaunchTemplateAttributes = {\n  launchTemplateId: 'launchTemplateId',\n  launchTemplateName: 'launchTemplateName',\n  versionNumber: 'versionNumber',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6c81243c7946bbc09117e120fd532436f213c0fa54c01ddba6f8b3f061c544f3"
    },
    "65bb9dd365eef788d838eb46a09e9ca17bb588556a34c3535da75c41d27c5a19": {
      "translations": {
        "python": {
          "source": "boot_hook_conf = ec2.UserData.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.UserData.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\")\n\nmultipart_user_data = ec2.MultipartUserData()\n# The docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# Execute the rest of setup\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(setup_commands))\n\nec2.LaunchTemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UserData bootHookConf = UserData.ForLinux();\nbootHookConf.AddCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.ForLinux();\nsetupCommands.AddCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.AddPart(MultipartBody.FromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.AddPart(MultipartBody.FromUserData(setupCommands));\n\nnew LaunchTemplate(this, \"\", new LaunchTemplateProps {\n    UserData = multipartUserData,\n    BlockDevices = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserData bootHookConf = UserData.forLinux();\nbootHookConf.addCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.forLinux();\nsetupCommands.addCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(MultipartBody.fromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.addPart(MultipartBody.fromUserData(setupCommands));\n\nLaunchTemplate.Builder.create(this, \"\")\n        .userData(multipartUserData)\n        .blockDevices(List.of())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "bootHookConf := ec2.userData.forLinux()\nbootHookConf.addCommands(jsii.String(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\"))\n\nsetupCommands := ec2.userData.forLinux()\nsetupCommands.addCommands(jsii.String(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\"))\n\nmultipartUserData := ec2.NewMultipartUserData()\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.multipartBody.fromUserData(bootHookConf, jsii.String(\"text/cloud-boothook; charset=\\\"us-ascii\\\"\")))\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.multipartBody.fromUserData(setupCommands))\n\nec2.NewLaunchTemplate(this, jsii.String(\"\"), &launchTemplateProps{\n\tuserData: multipartUserData,\n\tblockDevices: []blockDevice{\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 32,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 14,
        "196": 8,
        "197": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "0dfa818b7cd80d44018159f4a0ac32318eeac68898ba108ba6245dce83a5c4ae"
    },
    "25466b3084759c7b75ef59ed3d3b47814807c97017b1701a4040d33f4a4d78f8": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"MyRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "role := iam.NewRole(this, jsii.String(\"MyRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"ec2.amazonaws.com\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateProps",
          "memberName": "role"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "214b413846f98673a2e9d590360641f28cae85952413e4c45f6b6fe49fd71330"
    },
    "f40722e19091bdf1f56024cad83a0b27ef8c13b2d48eac55ee2b27b5ff0766bd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_require_imdsv2_aspect = ec2.LaunchTemplateRequireImdsv2Aspect(\n    suppress_warnings=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateRequireImdsv2Aspect launchTemplateRequireImdsv2Aspect = new LaunchTemplateRequireImdsv2Aspect(new LaunchTemplateRequireImdsv2AspectProps {\n    SuppressWarnings = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateRequireImdsv2Aspect launchTemplateRequireImdsv2Aspect = LaunchTemplateRequireImdsv2Aspect.Builder.create()\n        .suppressWarnings(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateRequireImdsv2Aspect := ec2.NewLaunchTemplateRequireImdsv2Aspect(&launchTemplateRequireImdsv2AspectProps{\n\tsuppressWarnings: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateRequireImdsv2Aspect = new ec2.LaunchTemplateRequireImdsv2Aspect(/* all optional props */ {\n  suppressWarnings: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateRequireImdsv2Aspect"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplateRequireImdsv2Aspect",
        "@aws-cdk/aws-ec2.LaunchTemplateRequireImdsv2AspectProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateRequireImdsv2Aspect = new ec2.LaunchTemplateRequireImdsv2Aspect(/* all optional props */ {\n  suppressWarnings: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d48b19e40310ce57ba6070a70665f65a1f3c818a7187ce43b5a4828b27539547"
    },
    "50a6bbef6d486f35ab355c55b6fc1ea4a78f873e446b09febf7e81c3c93ccaf6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_require_imdsv2_aspect_props = ec2.LaunchTemplateRequireImdsv2AspectProps(\n    suppress_warnings=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateRequireImdsv2AspectProps launchTemplateRequireImdsv2AspectProps = new LaunchTemplateRequireImdsv2AspectProps {\n    SuppressWarnings = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateRequireImdsv2AspectProps launchTemplateRequireImdsv2AspectProps = LaunchTemplateRequireImdsv2AspectProps.builder()\n        .suppressWarnings(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateRequireImdsv2AspectProps := &launchTemplateRequireImdsv2AspectProps{\n\tsuppressWarnings: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateRequireImdsv2AspectProps: ec2.LaunchTemplateRequireImdsv2AspectProps = {\n  suppressWarnings: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateRequireImdsv2AspectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplateRequireImdsv2AspectProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateRequireImdsv2AspectProps: ec2.LaunchTemplateRequireImdsv2AspectProps = {\n  suppressWarnings: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2a320dfa5447ca13c2090605764a41f054736c1f36a99f0fbc1d2dcbef9e560f"
    },
    "e1be7025ea96e2108050591819cf9a293223b7806fa4ca31af4ca719a9121d18": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlaunch_template_special_versions = ec2.LaunchTemplateSpecialVersions()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLaunchTemplateSpecialVersions launchTemplateSpecialVersions = new LaunchTemplateSpecialVersions();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLaunchTemplateSpecialVersions launchTemplateSpecialVersions = new LaunchTemplateSpecialVersions();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlaunchTemplateSpecialVersions := ec2.NewLaunchTemplateSpecialVersions()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst launchTemplateSpecialVersions = new ec2.LaunchTemplateSpecialVersions();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateSpecialVersions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplateSpecialVersions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateSpecialVersions = new ec2.LaunchTemplateSpecialVersions();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "fc68207df91516b9b3f1f1777b5c4ce29148a19aa5aef25ea3f83b63da6580c3"
    },
    "7cb36e3315dec0215e74620f8cb1cdbbb00c2d48af6fd13e4119211473064490": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.core as cdk\n\n# expiration: cdk.Expiration\n\nlaunch_template_spot_options = ec2.LaunchTemplateSpotOptions(\n    block_duration=cdk.Duration.minutes(30),\n    interruption_behavior=ec2.SpotInstanceInterruption.STOP,\n    max_price=123,\n    request_type=ec2.SpotRequestType.ONE_TIME,\n    valid_until=expiration\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK;\n\nExpiration expiration;\nLaunchTemplateSpotOptions launchTemplateSpotOptions = new LaunchTemplateSpotOptions {\n    BlockDuration = Duration.Minutes(30),\n    InterruptionBehavior = SpotInstanceInterruption.STOP,\n    MaxPrice = 123,\n    RequestType = SpotRequestType.ONE_TIME,\n    ValidUntil = expiration\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.core.*;\n\nExpiration expiration;\n\nLaunchTemplateSpotOptions launchTemplateSpotOptions = LaunchTemplateSpotOptions.builder()\n        .blockDuration(Duration.minutes(30))\n        .interruptionBehavior(SpotInstanceInterruption.STOP)\n        .maxPrice(123)\n        .requestType(SpotRequestType.ONE_TIME)\n        .validUntil(expiration)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar expiration expiration\nlaunchTemplateSpotOptions := &launchTemplateSpotOptions{\n\tblockDuration: cdk.duration.minutes(jsii.Number(30)),\n\tinterruptionBehavior: ec2.spotInstanceInterruption_STOP,\n\tmaxPrice: jsii.Number(123),\n\trequestType: ec2.spotRequestType_ONE_TIME,\n\tvalidUntil: expiration,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const expiration: cdk.Expiration;\nconst launchTemplateSpotOptions: ec2.LaunchTemplateSpotOptions = {\n  blockDuration: cdk.Duration.minutes(30),\n  interruptionBehavior: ec2.SpotInstanceInterruption.STOP,\n  maxPrice: 123,\n  requestType: ec2.SpotRequestType.ONE_TIME,\n  validUntil: expiration,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateSpotOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplateSpotOptions",
        "@aws-cdk/aws-ec2.SpotInstanceInterruption",
        "@aws-cdk/aws-ec2.SpotInstanceInterruption#STOP",
        "@aws-cdk/aws-ec2.SpotRequestType",
        "@aws-cdk/aws-ec2.SpotRequestType#ONE_TIME",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Expiration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const expiration: cdk.Expiration;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateSpotOptions: ec2.LaunchTemplateSpotOptions = {\n  blockDuration: cdk.Duration.minutes(30),\n  interruptionBehavior: ec2.SpotInstanceInterruption.STOP,\n  maxPrice: 123,\n  requestType: ec2.SpotRequestType.ONE_TIME,\n  validUntil: expiration,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 23,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "340d74c0a9bd58db42b5533016f02a2530f2809bf01aa9b05a928418306010a2"
    },
    "1de02955cf131890a43d9d2b0053f6e27696822745277d09654981d713812aca": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nlinux_user_data_options = ec2.LinuxUserDataOptions(\n    shebang=\"shebang\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nLinuxUserDataOptions linuxUserDataOptions = new LinuxUserDataOptions {\n    Shebang = \"shebang\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nLinuxUserDataOptions linuxUserDataOptions = LinuxUserDataOptions.builder()\n        .shebang(\"shebang\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nlinuxUserDataOptions := &linuxUserDataOptions{\n\tshebang: jsii.String(\"shebang\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst linuxUserDataOptions: ec2.LinuxUserDataOptions = {\n  shebang: 'shebang',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LinuxUserDataOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LinuxUserDataOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst linuxUserDataOptions: ec2.LinuxUserDataOptions = {\n  shebang: 'shebang',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e42f8fe4826d3af7a406b55d59fc962c97d29544f75a67a26f5dfb70f1cbd38d"
    },
    "ffdf12474a55d0d2e252da5db49f845cedbcfeba2fbf176cd2403d507f7c099f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# init_service_restart_handle: ec2.InitServiceRestartHandle\n\nlocation_package_options = ec2.LocationPackageOptions(\n    key=\"key\",\n    service_restart_handles=[init_service_restart_handle]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInitServiceRestartHandle initServiceRestartHandle;\n\nLocationPackageOptions locationPackageOptions = new LocationPackageOptions {\n    Key = \"key\",\n    ServiceRestartHandles = new [] { initServiceRestartHandle }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInitServiceRestartHandle initServiceRestartHandle;\n\nLocationPackageOptions locationPackageOptions = LocationPackageOptions.builder()\n        .key(\"key\")\n        .serviceRestartHandles(List.of(initServiceRestartHandle))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar initServiceRestartHandle initServiceRestartHandle\nlocationPackageOptions := &locationPackageOptions{\n\tkey: jsii.String(\"key\"),\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\tinitServiceRestartHandle,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const initServiceRestartHandle: ec2.InitServiceRestartHandle;\nconst locationPackageOptions: ec2.LocationPackageOptions = {\n  key: 'key',\n  serviceRestartHandles: [initServiceRestartHandle],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LocationPackageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LocationPackageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const initServiceRestartHandle: ec2.InitServiceRestartHandle;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst locationPackageOptions: ec2.LocationPackageOptions = {\n  key: 'key',\n  serviceRestartHandles: [initServiceRestartHandle],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bcb5fd2914b1fda99d59b787c8dc651524bfc2920b2bed3e52cbd0e89e011029"
    },
    "7ea519f408ef39e7aadc505a5ae47b7022c8bb4b6e169e527b9f5112e63118e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# user_data: ec2.UserData\n\nlookup_machine_image = ec2.LookupMachineImage(\n    name=\"name\",\n\n    # the properties below are optional\n    filters={\n        \"filters_key\": [\"filters\"]\n    },\n    owners=[\"owners\"],\n    user_data=user_data,\n    windows=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nUserData userData;\n\nLookupMachineImage lookupMachineImage = new LookupMachineImage(new LookupMachineImageProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Filters = new Dictionary<string, string[]> {\n        { \"filtersKey\", new [] { \"filters\" } }\n    },\n    Owners = new [] { \"owners\" },\n    UserData = userData,\n    Windows = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nUserData userData;\n\nLookupMachineImage lookupMachineImage = LookupMachineImage.Builder.create()\n        .name(\"name\")\n\n        // the properties below are optional\n        .filters(Map.of(\n                \"filtersKey\", List.of(\"filters\")))\n        .owners(List.of(\"owners\"))\n        .userData(userData)\n        .windows(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar userData userData\nlookupMachineImage := ec2.NewLookupMachineImage(&lookupMachineImageProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tfilters: map[string][]*string{\n\t\t\"filtersKey\": []*string{\n\t\t\tjsii.String(\"filters\"),\n\t\t},\n\t},\n\towners: []*string{\n\t\tjsii.String(\"owners\"),\n\t},\n\tuserData: userData,\n\twindows: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\nconst lookupMachineImage = new ec2.LookupMachineImage({\n  name: 'name',\n\n  // the properties below are optional\n  filters: {\n    filtersKey: ['filters'],\n  },\n  owners: ['owners'],\n  userData: userData,\n  windows: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LookupMachineImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LookupMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.UserData"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lookupMachineImage = new ec2.LookupMachineImage({\n  name: 'name',\n\n  // the properties below are optional\n  filters: {\n    filtersKey: ['filters'],\n  },\n  owners: ['owners'],\n  userData: userData,\n  windows: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "91": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "f2372da91c5515c35ee51249764cb1c794ec4e587517e778f1d317dd0a993935"
    },
    "2f808930b372876518c3c933895d9ac522f64685202e2de15127f122c59d6a7b": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LookupMachineImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    },
    "3911e13c4ce53510f9cdcb82a34950908b2f4fd57467a62025160afd0475edfe": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ntemplate = ec2.LaunchTemplate(self, \"LaunchTemplate\",\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    security_group=ec2.SecurityGroup(self, \"LaunchTemplateSG\",\n        vpc=vpc\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = new LaunchTemplate(this, \"LaunchTemplate\", new LaunchTemplateProps {\n    MachineImage = MachineImage.LatestAmazonLinux(),\n    SecurityGroup = new SecurityGroup(this, \"LaunchTemplateSG\", new SecurityGroupProps {\n        Vpc = vpc\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = LaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .machineImage(MachineImage.latestAmazonLinux())\n        .securityGroup(SecurityGroup.Builder.create(this, \"LaunchTemplateSG\")\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ntemplate := ec2.NewLaunchTemplate(this, jsii.String(\"LaunchTemplate\"), &launchTemplateProps{\n\tmachineImage: ec2.machineImage.latestAmazonLinux(),\n\tsecurityGroup: ec2.NewSecurityGroup(this, jsii.String(\"LaunchTemplateSG\"), &securityGroupProps{\n\t\tvpc: vpc,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MachineImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ab10bfe5d20c8a881b863eb1e6f4063a6015f3f41b73bb95e2a38c69da0d971b"
    },
    "75d5e448d23ce9a835fb38208fa2fee6506405380e6db1d99a4bd9559a28aabe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# user_data: ec2.UserData\n\nmachine_image_config = ec2.MachineImageConfig(\n    image_id=\"imageId\",\n    os_type=ec2.OperatingSystemType.LINUX,\n    user_data=user_data\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nUserData userData;\n\nMachineImageConfig machineImageConfig = new MachineImageConfig {\n    ImageId = \"imageId\",\n    OsType = OperatingSystemType.LINUX,\n    UserData = userData\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nUserData userData;\n\nMachineImageConfig machineImageConfig = MachineImageConfig.builder()\n        .imageId(\"imageId\")\n        .osType(OperatingSystemType.LINUX)\n        .userData(userData)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar userData userData\nmachineImageConfig := &machineImageConfig{\n\timageId: jsii.String(\"imageId\"),\n\tosType: ec2.operatingSystemType_LINUX,\n\tuserData: userData,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\nconst machineImageConfig: ec2.MachineImageConfig = {\n  imageId: 'imageId',\n  osType: ec2.OperatingSystemType.LINUX,\n  userData: userData,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MachineImageConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MachineImageConfig",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.UserData"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst machineImageConfig: ec2.MachineImageConfig = {\n  imageId: 'imageId',\n  osType: ec2.OperatingSystemType.LINUX,\n  userData: userData,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "10e87664e16ba99a190dd216d3cc6a23cf76073db2b5227268e5ee2131c66502"
    },
    "4215f12fc58bb631bbd9f258be219776664d330d956f9b51b5b3583781cd2d53": {
      "translations": {
        "python": {
          "source": "multipart_user_data = ec2.MultipartUserData()\ncommands_user_data = ec2.UserData.for_linux()\nmultipart_user_data.add_user_data_part(commands_user_data, ec2.MultipartBody.SHELL_SCRIPT, True)\n\n# Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipart_user_data.add_commands(\"touch /root/multi.txt\")\ncommands_user_data.add_commands(\"touch /root/userdata.txt\")",
          "version": "2"
        },
        "csharp": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.ForLinux();\nmultipartUserData.AddUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.AddCommands(\"touch /root/multi.txt\");\ncommandsUserData.AddCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "java": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(\"touch /root/multi.txt\");\ncommandsUserData.addCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "go": {
          "source": "multipartUserData := ec2.NewMultipartUserData()\ncommandsUserData := ec2.userData.forLinux()\nmultipartUserData.addUserDataPart(commandsUserData, ec2.multipartBody_SHELL_SCRIPT(), jsii.Boolean(true))\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(jsii.String(\"touch /root/multi.txt\"))\ncommandsUserData.addCommands(jsii.String(\"touch /root/userdata.txt\"))",
          "version": "1"
        },
        "$": {
          "source": "const multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MultipartBody"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#SHELL_SCRIPT",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addCommands",
        "@aws-cdk/aws-ec2.MultipartUserData#addUserDataPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "106": 1,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "866b0cc018c530d1bb1bbccdd52239ee64b2957bbc050fa2a1315bf771624932"
    },
    "0479845b3ea95b19f7ae1a26a41ae2ddc94109f8ac50421dd4208975f6caca35": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmultipart_body_options = ec2.MultipartBodyOptions(\n    content_type=\"contentType\",\n\n    # the properties below are optional\n    body=\"body\",\n    transfer_encoding=\"transferEncoding\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMultipartBodyOptions multipartBodyOptions = new MultipartBodyOptions {\n    ContentType = \"contentType\",\n\n    // the properties below are optional\n    Body = \"body\",\n    TransferEncoding = \"transferEncoding\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMultipartBodyOptions multipartBodyOptions = MultipartBodyOptions.builder()\n        .contentType(\"contentType\")\n\n        // the properties below are optional\n        .body(\"body\")\n        .transferEncoding(\"transferEncoding\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmultipartBodyOptions := &multipartBodyOptions{\n\tcontentType: jsii.String(\"contentType\"),\n\n\t// the properties below are optional\n\tbody: jsii.String(\"body\"),\n\ttransferEncoding: jsii.String(\"transferEncoding\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst multipartBodyOptions: ec2.MultipartBodyOptions = {\n  contentType: 'contentType',\n\n  // the properties below are optional\n  body: 'body',\n  transferEncoding: 'transferEncoding',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MultipartBodyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBodyOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst multipartBodyOptions: ec2.MultipartBodyOptions = {\n  contentType: 'contentType',\n\n  // the properties below are optional\n  body: 'body',\n  transferEncoding: 'transferEncoding',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9644575c45724a36a4ab16fb7239f520a4c4d36f9d46459fc1033acab075abea"
    },
    "d522b1c7b322291145e1cafa6a4e6d7ff7e1fedf116a6286df8f4b4fcc7928e9": {
      "translations": {
        "python": {
          "source": "boot_hook_conf = ec2.UserData.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.UserData.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\")\n\nmultipart_user_data = ec2.MultipartUserData()\n# The docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# Execute the rest of setup\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(setup_commands))\n\nec2.LaunchTemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UserData bootHookConf = UserData.ForLinux();\nbootHookConf.AddCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.ForLinux();\nsetupCommands.AddCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.AddPart(MultipartBody.FromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.AddPart(MultipartBody.FromUserData(setupCommands));\n\nnew LaunchTemplate(this, \"\", new LaunchTemplateProps {\n    UserData = multipartUserData,\n    BlockDevices = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserData bootHookConf = UserData.forLinux();\nbootHookConf.addCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.forLinux();\nsetupCommands.addCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(MultipartBody.fromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.addPart(MultipartBody.fromUserData(setupCommands));\n\nLaunchTemplate.Builder.create(this, \"\")\n        .userData(multipartUserData)\n        .blockDevices(List.of())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "bootHookConf := ec2.userData.forLinux()\nbootHookConf.addCommands(jsii.String(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\"))\n\nsetupCommands := ec2.userData.forLinux()\nsetupCommands.addCommands(jsii.String(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\"))\n\nmultipartUserData := ec2.NewMultipartUserData()\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.multipartBody.fromUserData(bootHookConf, jsii.String(\"text/cloud-boothook; charset=\\\"us-ascii\\\"\")))\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.multipartBody.fromUserData(setupCommands))\n\nec2.NewLaunchTemplate(this, jsii.String(\"\"), &launchTemplateProps{\n\tuserData: multipartUserData,\n\tblockDevices: []blockDevice{\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MultipartUserData"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 32,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 14,
        "196": 8,
        "197": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "0dfa818b7cd80d44018159f4a0ac32318eeac68898ba108ba6245dce83a5c4ae"
    },
    "ed61b963c6242aa416526667c5e130811b30cbd62e0079f1f40889a09e29a2a1": {
      "translations": {
        "python": {
          "source": "# multi_part: ec2.MultipartUserData\n# user_data: ec2.UserData\n# content_type: str\n\n\nmulti_part.add_part(ec2.MultipartBody.from_user_data(user_data, content_type))",
          "version": "2"
        },
        "csharp": {
          "source": "MultipartUserData multiPart;\nUserData userData;\nstring contentType;\n\n\nmultiPart.AddPart(MultipartBody.FromUserData(userData, contentType));",
          "version": "1"
        },
        "java": {
          "source": "MultipartUserData multiPart;\nUserData userData;\nString contentType;\n\n\nmultiPart.addPart(MultipartBody.fromUserData(userData, contentType));",
          "version": "1"
        },
        "go": {
          "source": "var multiPart multipartUserData\nvar userData userData\nvar contentType string\n\nmultiPart.addPart(ec2.multipartBody.fromUserData(userData, contentType))",
          "version": "1"
        },
        "$": {
          "source": "declare const multiPart: ec2.MultipartUserData;\ndeclare const userData: ec2.UserData;\ndeclare const contentType: string;\n\nmultiPart.addPart(ec2.MultipartBody.fromUserData(userData, contentType));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.MultipartUserData",
          "memberName": "addUserDataPart"
        },
        "field": {
          "field": "markdown",
          "line": 7
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const multiPart: ec2.MultipartUserData;\ndeclare const userData: ec2.UserData;\ndeclare const contentType: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmultiPart.addPart(ec2.MultipartBody.fromUserData(userData, contentType));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 14,
        "130": 3,
        "143": 1,
        "153": 2,
        "169": 2,
        "194": 3,
        "196": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "7e57d5247ac38b5762890c0de39de09827712f71259b46a496e258b812cf1ccf"
    },
    "ecf33f66743a37ebc940f820807a5359e2db6ff50b7f313519186085307e6723": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nmultipart_user_data_options = ec2.MultipartUserDataOptions(\n    parts_separator=\"partsSeparator\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nMultipartUserDataOptions multipartUserDataOptions = new MultipartUserDataOptions {\n    PartsSeparator = \"partsSeparator\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nMultipartUserDataOptions multipartUserDataOptions = MultipartUserDataOptions.builder()\n        .partsSeparator(\"partsSeparator\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nmultipartUserDataOptions := &multipartUserDataOptions{\n\tpartsSeparator: jsii.String(\"partsSeparator\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst multipartUserDataOptions: ec2.MultipartUserDataOptions = {\n  partsSeparator: 'partsSeparator',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MultipartUserDataOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartUserDataOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst multipartUserDataOptions: ec2.MultipartUserDataOptions = {\n  partsSeparator: 'partsSeparator',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ebc8411b6afdbc715c3f36d84f2e416b33410eb8fc7281c7c1a0c4876ad35f54"
    },
    "721ba2936b4264ea5eac986155ce5d01f27ff6c821fb6b18e902de74a3b2e896": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# init_service_restart_handle: ec2.InitServiceRestartHandle\n\nnamed_package_options = ec2.NamedPackageOptions(\n    service_restart_handles=[init_service_restart_handle],\n    version=[\"version\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nInitServiceRestartHandle initServiceRestartHandle;\n\nNamedPackageOptions namedPackageOptions = new NamedPackageOptions {\n    ServiceRestartHandles = new [] { initServiceRestartHandle },\n    Version = new [] { \"version\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nInitServiceRestartHandle initServiceRestartHandle;\n\nNamedPackageOptions namedPackageOptions = NamedPackageOptions.builder()\n        .serviceRestartHandles(List.of(initServiceRestartHandle))\n        .version(List.of(\"version\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar initServiceRestartHandle initServiceRestartHandle\nnamedPackageOptions := &namedPackageOptions{\n\tserviceRestartHandles: []*initServiceRestartHandle{\n\t\tinitServiceRestartHandle,\n\t},\n\tversion: []*string{\n\t\tjsii.String(\"version\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const initServiceRestartHandle: ec2.InitServiceRestartHandle;\nconst namedPackageOptions: ec2.NamedPackageOptions = {\n  serviceRestartHandles: [initServiceRestartHandle],\n  version: ['version'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NamedPackageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.NamedPackageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const initServiceRestartHandle: ec2.InitServiceRestartHandle;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst namedPackageOptions: ec2.NamedPackageOptions = {\n  serviceRestartHandles: [initServiceRestartHandle],\n  version: ['version'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "48049648bd541d56d737096483564b07d8c9adc4a4f9145bb569902aa5fc0da5"
    },
    "254cfb4b5706055f62d753474694d12de08b724e565cfcb6ebf847d193292888": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nnat_gateway_props = ec2.NatGatewayProps(\n    eip_allocation_ids=[\"eipAllocationIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNatGatewayProps natGatewayProps = new NatGatewayProps {\n    EipAllocationIds = new [] { \"eipAllocationIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNatGatewayProps natGatewayProps = NatGatewayProps.builder()\n        .eipAllocationIds(List.of(\"eipAllocationIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nnatGatewayProps := &natGatewayProps{\n\teipAllocationIds: []*string{\n\t\tjsii.String(\"eipAllocationIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst natGatewayProps: ec2.NatGatewayProps = {\n  eipAllocationIds: ['eipAllocationIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.NatGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst natGatewayProps: ec2.NatGatewayProps = {\n  eipAllocationIds: ['eipAllocationIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f64b481ba989c5359e7422bd1042b7fc6dac483f3aee28d98807820377918dce"
    },
    "016047238c439792bd6824405f8299402d553c7a38217e1ab7b12463819ec6bc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nnat_instance_image = ec2.NatInstanceImage()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNatInstanceImage natInstanceImage = new NatInstanceImage();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNatInstanceImage natInstanceImage = new NatInstanceImage();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nnatInstanceImage := ec2.NewNatInstanceImage()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst natInstanceImage = new ec2.NatInstanceImage();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatInstanceImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.NatInstanceImage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst natInstanceImage = new ec2.NatInstanceImage();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "815cb9074a75f83468d912d73df570d6a536e948f7941dfd6599a28223f4e2c3"
    },
    "dba5a021589c79f7c12f0de78c4392393aafd3e68b0818fe5a008de851c0327d": {
      "translations": {
        "python": {
          "source": "# Configure the `natGatewayProvider` when defining a Vpc\nnat_gateway_provider = ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.small\")\n)\n\nvpc = ec2.Vpc(self, \"MyVpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # The 'natGateways' parameter now controls the number of NAT instances\n    nat_gateways=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.small\")\n});\n\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    NatGatewayProvider = natGatewayProvider,\n\n    // The 'natGateways' parameter now controls the number of NAT instances\n    NatGateways = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .build());\n\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .natGatewayProvider(natGatewayProvider)\n\n        // The 'natGateways' parameter now controls the number of NAT instances\n        .natGateways(2)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nnatGatewayProvider := ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.small\")),\n})\n\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tnatGatewayProvider: natGatewayProvider,\n\n\t// The 'natGateways' parameter now controls the number of NAT instances\n\tnatGateways: jsii.Number(2),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.Environment",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:enable-lookups\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nclass NatInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });\n    /// !hide\n\n    Array.isArray(vpc);\n    Array.isArray(natGatewayProvider.configuredGateways);\n  }\n}\n\nconst app = new cdk.App();\nnew NatInstanceStack(app, 'aws-cdk-vpc-nat-instances', {\n  env: {\n    account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n  },\n});\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "47200eef6d144ecb2ed17059b40899591147fa0495bd9b08d6e7e580043c7f58"
    },
    "7d823bb19d3aa1bb3b37114cb488dacd4eb0f7914ba9439a25bb28a658ca854d": {
      "translations": {
        "python": {
          "source": "ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.micro\"),\n    machine_image=ec2.GenericLinuxImage({\n        \"us-east-2\": \"ami-0f9c61b5a562a16af\"\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.micro\"),\n    MachineImage = new GenericLinuxImage(new Dictionary<string, string> {\n        { \"us-east-2\", \"ami-0f9c61b5a562a16af\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.micro\"))\n        .machineImage(new GenericLinuxImage(Map.of(\n                \"us-east-2\", \"ami-0f9c61b5a562a16af\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.micro\")),\n\tmachineImage: ec2.NewGenericLinuxImage(map[string]*string{\n\t\t\"us-east-2\": jsii.String(\"ami-0f9c61b5a562a16af\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "ec2.NatProvider.instance({\n   instanceType: new ec2.InstanceType('t3.micro'),\n   machineImage: new ec2.GenericLinuxImage({\n     'us-east-2': 'ami-0f9c61b5a562a16af'\n   })\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.NatInstanceProps",
          "memberName": "machineImage"
        },
        "field": {
          "field": "markdown",
          "line": 5
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nec2.NatProvider.instance({\n   instanceType: new ec2.InstanceType('t3.micro'),\n   machineImage: new ec2.GenericLinuxImage({\n     'us-east-2': 'ami-0f9c61b5a562a16af'\n   })\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "9e96dbdd7e71b558b4b6f1839a5c087c371fbbe229dee942aee81a9776e7a5ef"
    },
    "148162506df6cb69f2d48d52e1b24b54e541ae1c14d363f47eb4fc1e2e2232a9": {
      "translations": {
        "python": {
          "source": "# Configure the `natGatewayProvider` when defining a Vpc\nnat_gateway_provider = ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.small\")\n)\n\nvpc = ec2.Vpc(self, \"MyVpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # The 'natGateways' parameter now controls the number of NAT instances\n    nat_gateways=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.small\")\n});\n\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    NatGatewayProvider = natGatewayProvider,\n\n    // The 'natGateways' parameter now controls the number of NAT instances\n    NatGateways = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .build());\n\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .natGatewayProvider(natGatewayProvider)\n\n        // The 'natGateways' parameter now controls the number of NAT instances\n        .natGateways(2)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nnatGatewayProvider := ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.small\")),\n})\n\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tnatGatewayProvider: natGatewayProvider,\n\n\t// The 'natGateways' parameter now controls the number of NAT instances\n\tnatGateways: jsii.Number(2),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatInstanceProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.Environment",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:enable-lookups\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nclass NatInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });\n    /// !hide\n\n    Array.isArray(vpc);\n    Array.isArray(natGatewayProvider.configuredGateways);\n  }\n}\n\nconst app = new cdk.App();\nnew NatInstanceStack(app, 'aws-cdk-vpc-nat-instances', {\n  env: {\n    account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n  },\n});\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "47200eef6d144ecb2ed17059b40899591147fa0495bd9b08d6e7e580043c7f58"
    },
    "2efd1eede74a6fa9c3745422a4864751db5a1149f98803e00d7c72821d385f5f": {
      "translations": {
        "python": {
          "source": "# Configure the `natGatewayProvider` when defining a Vpc\nnat_gateway_provider = ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.small\")\n)\n\nvpc = ec2.Vpc(self, \"MyVpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # The 'natGateways' parameter now controls the number of NAT instances\n    nat_gateways=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.small\")\n});\n\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    NatGatewayProvider = natGatewayProvider,\n\n    // The 'natGateways' parameter now controls the number of NAT instances\n    NatGateways = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .build());\n\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .natGatewayProvider(natGatewayProvider)\n\n        // The 'natGateways' parameter now controls the number of NAT instances\n        .natGateways(2)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nnatGatewayProvider := ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.small\")),\n})\n\nvpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tnatGatewayProvider: natGatewayProvider,\n\n\t// The 'natGateways' parameter now controls the number of NAT instances\n\tnatGateways: jsii.Number(2),\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.Environment",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:enable-lookups\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nclass NatInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });\n    /// !hide\n\n    Array.isArray(vpc);\n    Array.isArray(natGatewayProvider.configuredGateways);\n  }\n}\n\nconst app = new cdk.App();\nnew NatInstanceStack(app, 'aws-cdk-vpc-nat-instances', {\n  env: {\n    account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n  },\n});\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "47200eef6d144ecb2ed17059b40899591147fa0495bd9b08d6e7e580043c7f58"
    },
    "22ed6604e137a6162837e0288d1804db76419d2de055c0025cec52fe8337463a": {
      "translations": {
        "python": {
          "source": "# instance_type: ec2.InstanceType\n\n\nprovider = ec2.NatProvider.instance(\n    instance_type=instance_type,\n    default_allowed_traffic=ec2.NatTrafficDirection.OUTBOUND_ONLY\n)\nec2.Vpc(self, \"TheVPC\",\n    nat_gateway_provider=provider\n)\nprovider.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/8\"), ec2.Port.tcp(80))",
          "version": "2"
        },
        "csharp": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = instanceType,\n    DefaultAllowedTraffic = NatTrafficDirection.OUTBOUND_ONLY\n});\nnew Vpc(this, \"TheVPC\", new VpcProps {\n    NatGatewayProvider = provider\n});\nprovider.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/8\"), Port.Tcp(80));",
          "version": "1"
        },
        "java": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(instanceType)\n        .defaultAllowedTraffic(NatTrafficDirection.OUTBOUND_ONLY)\n        .build());\nVpc.Builder.create(this, \"TheVPC\")\n        .natGatewayProvider(provider)\n        .build();\nprovider.connections.allowFrom(Peer.ipv4(\"1.2.3.4/8\"), Port.tcp(80));",
          "version": "1"
        },
        "go": {
          "source": "var instanceType instanceType\n\nprovider := ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: instanceType,\n\tdefaultAllowedTraffic: ec2.natTrafficDirection_OUTBOUND_ONLY,\n})\nec2.NewVpc(this, jsii.String(\"TheVPC\"), &vpcProps{\n\tnatGatewayProvider: provider,\n})\nprovider.connections.allowFrom(ec2.peer.ipv4(jsii.String(\"1.2.3.4/8\")), ec2.port.tcp(jsii.Number(80)))",
          "version": "1"
        },
        "$": {
          "source": "declare const instanceType: ec2.InstanceType;\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  defaultAllowedTraffic: ec2.NatTrafficDirection.OUTBOUND_ONLY,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatTrafficDirection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.NatTrafficDirection",
        "@aws-cdk/aws-ec2.NatTrafficDirection#OUTBOUND_ONLY",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  defaultAllowedTraffic: ec2.NatTrafficDirection.OUTBOUND_ONLY,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "52cff934f9b32aac8cfc0232c4caedd0f25d08dba0c724e1ec42e6be7a1f7dd4"
    },
    "548ad2aa51b4e6463d4a0e506c95a39713bf5c86009b51f195960d0230012d00": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\nnetwork_acl = ec2.NetworkAcl(self, \"MyNetworkAcl\",\n    vpc=vpc,\n\n    # the properties below are optional\n    network_acl_name=\"networkAclName\",\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nNetworkAcl networkAcl = new NetworkAcl(this, \"MyNetworkAcl\", new NetworkAclProps {\n    Vpc = vpc,\n\n    // the properties below are optional\n    NetworkAclName = \"networkAclName\",\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nNetworkAcl networkAcl = NetworkAcl.Builder.create(this, \"MyNetworkAcl\")\n        .vpc(vpc)\n\n        // the properties below are optional\n        .networkAclName(\"networkAclName\")\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\nnetworkAcl := ec2.NewNetworkAcl(this, jsii.String(\"MyNetworkAcl\"), &networkAclProps{\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tnetworkAclName: jsii.String(\"networkAclName\"),\n\tsubnetSelection: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst networkAcl = new ec2.NetworkAcl(this, 'MyNetworkAcl', {\n  vpc: vpc,\n\n  // the properties below are optional\n  networkAclName: 'networkAclName',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NetworkAcl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.NetworkAcl",
        "@aws-cdk/aws-ec2.NetworkAclProps",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkAcl = new ec2.NetworkAcl(this, 'MyNetworkAcl', {\n  vpc: vpc,\n\n  // the properties below are optional\n  networkAclName: 'networkAclName',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 29,
        "91": 1,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 3,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "73dcbeffcb3e1cc25622f85f362676cfd09eb1ee69765d540293aa0f21394e0c"
    },
    "e637aedf70637da02a179fa4451e63404fa542ecfc17da74570f2bf11b168bb7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# acl_cidr: ec2.AclCidr\n# acl_traffic: ec2.AclTraffic\n# network_acl: ec2.NetworkAcl\n\nnetwork_acl_entry = ec2.NetworkAclEntry(self, \"MyNetworkAclEntry\",\n    cidr=acl_cidr,\n    network_acl=network_acl,\n    rule_number=123,\n    traffic=acl_traffic,\n\n    # the properties below are optional\n    direction=ec2.TrafficDirection.EGRESS,\n    network_acl_entry_name=\"networkAclEntryName\",\n    rule_action=ec2.Action.ALLOW\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclCidr aclCidr;\nAclTraffic aclTraffic;\nNetworkAcl networkAcl;\n\nNetworkAclEntry networkAclEntry = new NetworkAclEntry(this, \"MyNetworkAclEntry\", new NetworkAclEntryProps {\n    Cidr = aclCidr,\n    NetworkAcl = networkAcl,\n    RuleNumber = 123,\n    Traffic = aclTraffic,\n\n    // the properties below are optional\n    Direction = TrafficDirection.EGRESS,\n    NetworkAclEntryName = \"networkAclEntryName\",\n    RuleAction = Action.ALLOW\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclCidr aclCidr;\nAclTraffic aclTraffic;\nNetworkAcl networkAcl;\n\nNetworkAclEntry networkAclEntry = NetworkAclEntry.Builder.create(this, \"MyNetworkAclEntry\")\n        .cidr(aclCidr)\n        .networkAcl(networkAcl)\n        .ruleNumber(123)\n        .traffic(aclTraffic)\n\n        // the properties below are optional\n        .direction(TrafficDirection.EGRESS)\n        .networkAclEntryName(\"networkAclEntryName\")\n        .ruleAction(Action.ALLOW)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar aclCidr aclCidr\nvar aclTraffic aclTraffic\nvar networkAcl networkAcl\nnetworkAclEntry := ec2.NewNetworkAclEntry(this, jsii.String(\"MyNetworkAclEntry\"), &networkAclEntryProps{\n\tcidr: aclCidr,\n\tnetworkAcl: networkAcl,\n\truleNumber: jsii.Number(123),\n\ttraffic: aclTraffic,\n\n\t// the properties below are optional\n\tdirection: ec2.trafficDirection_EGRESS,\n\tnetworkAclEntryName: jsii.String(\"networkAclEntryName\"),\n\truleAction: ec2.action_ALLOW,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const aclCidr: ec2.AclCidr;\ndeclare const aclTraffic: ec2.AclTraffic;\ndeclare const networkAcl: ec2.NetworkAcl;\nconst networkAclEntry = new ec2.NetworkAclEntry(this, 'MyNetworkAclEntry', {\n  cidr: aclCidr,\n  networkAcl: networkAcl,\n  ruleNumber: 123,\n  traffic: aclTraffic,\n\n  // the properties below are optional\n  direction: ec2.TrafficDirection.EGRESS,\n  networkAclEntryName: 'networkAclEntryName',\n  ruleAction: ec2.Action.ALLOW,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NetworkAclEntry"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclCidr",
        "@aws-cdk/aws-ec2.AclTraffic",
        "@aws-cdk/aws-ec2.Action",
        "@aws-cdk/aws-ec2.Action#ALLOW",
        "@aws-cdk/aws-ec2.INetworkAcl",
        "@aws-cdk/aws-ec2.NetworkAclEntry",
        "@aws-cdk/aws-ec2.NetworkAclEntryProps",
        "@aws-cdk/aws-ec2.TrafficDirection",
        "@aws-cdk/aws-ec2.TrafficDirection#EGRESS",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const aclCidr: ec2.AclCidr;\ndeclare const aclTraffic: ec2.AclTraffic;\ndeclare const networkAcl: ec2.NetworkAcl;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkAclEntry = new ec2.NetworkAclEntry(this, 'MyNetworkAclEntry', {\n  cidr: aclCidr,\n  networkAcl: networkAcl,\n  ruleNumber: 123,\n  traffic: aclTraffic,\n\n  // the properties below are optional\n  direction: ec2.TrafficDirection.EGRESS,\n  networkAclEntryName: 'networkAclEntryName',\n  ruleAction: ec2.Action.ALLOW,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 29,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "df7f4d1cfeb62ce0373e16c402766db213c516fa5dc527d0f0b82a972f60bde4"
    },
    "453b97543cd660afcbfdf7e8782cd33736a24c230d12f313f16110554a5dc18b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# acl_cidr: ec2.AclCidr\n# acl_traffic: ec2.AclTraffic\n# network_acl: ec2.NetworkAcl\n\nnetwork_acl_entry_props = ec2.NetworkAclEntryProps(\n    cidr=acl_cidr,\n    network_acl=network_acl,\n    rule_number=123,\n    traffic=acl_traffic,\n\n    # the properties below are optional\n    direction=ec2.TrafficDirection.EGRESS,\n    network_acl_entry_name=\"networkAclEntryName\",\n    rule_action=ec2.Action.ALLOW\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nAclCidr aclCidr;\nAclTraffic aclTraffic;\nNetworkAcl networkAcl;\n\nNetworkAclEntryProps networkAclEntryProps = new NetworkAclEntryProps {\n    Cidr = aclCidr,\n    NetworkAcl = networkAcl,\n    RuleNumber = 123,\n    Traffic = aclTraffic,\n\n    // the properties below are optional\n    Direction = TrafficDirection.EGRESS,\n    NetworkAclEntryName = \"networkAclEntryName\",\n    RuleAction = Action.ALLOW\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nAclCidr aclCidr;\nAclTraffic aclTraffic;\nNetworkAcl networkAcl;\n\nNetworkAclEntryProps networkAclEntryProps = NetworkAclEntryProps.builder()\n        .cidr(aclCidr)\n        .networkAcl(networkAcl)\n        .ruleNumber(123)\n        .traffic(aclTraffic)\n\n        // the properties below are optional\n        .direction(TrafficDirection.EGRESS)\n        .networkAclEntryName(\"networkAclEntryName\")\n        .ruleAction(Action.ALLOW)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar aclCidr aclCidr\nvar aclTraffic aclTraffic\nvar networkAcl networkAcl\nnetworkAclEntryProps := &networkAclEntryProps{\n\tcidr: aclCidr,\n\tnetworkAcl: networkAcl,\n\truleNumber: jsii.Number(123),\n\ttraffic: aclTraffic,\n\n\t// the properties below are optional\n\tdirection: ec2.trafficDirection_EGRESS,\n\tnetworkAclEntryName: jsii.String(\"networkAclEntryName\"),\n\truleAction: ec2.action_ALLOW,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const aclCidr: ec2.AclCidr;\ndeclare const aclTraffic: ec2.AclTraffic;\ndeclare const networkAcl: ec2.NetworkAcl;\nconst networkAclEntryProps: ec2.NetworkAclEntryProps = {\n  cidr: aclCidr,\n  networkAcl: networkAcl,\n  ruleNumber: 123,\n  traffic: aclTraffic,\n\n  // the properties below are optional\n  direction: ec2.TrafficDirection.EGRESS,\n  networkAclEntryName: 'networkAclEntryName',\n  ruleAction: ec2.Action.ALLOW,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NetworkAclEntryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AclCidr",
        "@aws-cdk/aws-ec2.AclTraffic",
        "@aws-cdk/aws-ec2.Action",
        "@aws-cdk/aws-ec2.Action#ALLOW",
        "@aws-cdk/aws-ec2.INetworkAcl",
        "@aws-cdk/aws-ec2.NetworkAclEntryProps",
        "@aws-cdk/aws-ec2.TrafficDirection",
        "@aws-cdk/aws-ec2.TrafficDirection#EGRESS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const aclCidr: ec2.AclCidr;\ndeclare const aclTraffic: ec2.AclTraffic;\ndeclare const networkAcl: ec2.NetworkAcl;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkAclEntryProps: ec2.NetworkAclEntryProps = {\n  cidr: aclCidr,\n  networkAcl: networkAcl,\n  ruleNumber: 123,\n  traffic: aclTraffic,\n\n  // the properties below are optional\n  direction: ec2.TrafficDirection.EGRESS,\n  networkAclEntryName: 'networkAclEntryName',\n  ruleAction: ec2.Action.ALLOW,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 29,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "843e8f47cbaeeaab3195f89ce269a9b5bb64173aeff16a9387deae7b447a7b4c"
    },
    "1f35c021e38a41e54343f6631a4d47e80207077bcd347aecc1578028464b709f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\nnetwork_acl_props = ec2.NetworkAclProps(\n    vpc=vpc,\n\n    # the properties below are optional\n    network_acl_name=\"networkAclName\",\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nNetworkAclProps networkAclProps = new NetworkAclProps {\n    Vpc = vpc,\n\n    // the properties below are optional\n    NetworkAclName = \"networkAclName\",\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nNetworkAclProps networkAclProps = NetworkAclProps.builder()\n        .vpc(vpc)\n\n        // the properties below are optional\n        .networkAclName(\"networkAclName\")\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\nnetworkAclProps := &networkAclProps{\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tnetworkAclName: jsii.String(\"networkAclName\"),\n\tsubnetSelection: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst networkAclProps: ec2.NetworkAclProps = {\n  vpc: vpc,\n\n  // the properties below are optional\n  networkAclName: 'networkAclName',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NetworkAclProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.NetworkAclProps",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkAclProps: ec2.NetworkAclProps = {\n  vpc: vpc,\n\n  // the properties below are optional\n  networkAclName: 'networkAclName',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 29,
        "91": 1,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 3,
        "193": 2,
        "194": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "6d6a6affaf94aad37fe61392efea3943bc6f04cdb88f06ff1f7ba634095f5057"
    },
    "00548eb968b5f462245547652249de563f238995f0df2d38c477a578e9b42e4f": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.OperatingSystemType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    },
    "44a1b8ef640cda5f80682808980e0d0a293c469d2511200c5aaa80faffe015b1": {
      "translations": {
        "python": {
          "source": "# instance_type: ec2.InstanceType\n\n\nprovider = ec2.NatProvider.instance(\n    instance_type=instance_type,\n    default_allowed_traffic=ec2.NatTrafficDirection.OUTBOUND_ONLY\n)\nec2.Vpc(self, \"TheVPC\",\n    nat_gateway_provider=provider\n)\nprovider.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/8\"), ec2.Port.tcp(80))",
          "version": "2"
        },
        "csharp": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = instanceType,\n    DefaultAllowedTraffic = NatTrafficDirection.OUTBOUND_ONLY\n});\nnew Vpc(this, \"TheVPC\", new VpcProps {\n    NatGatewayProvider = provider\n});\nprovider.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/8\"), Port.Tcp(80));",
          "version": "1"
        },
        "java": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(instanceType)\n        .defaultAllowedTraffic(NatTrafficDirection.OUTBOUND_ONLY)\n        .build());\nVpc.Builder.create(this, \"TheVPC\")\n        .natGatewayProvider(provider)\n        .build();\nprovider.connections.allowFrom(Peer.ipv4(\"1.2.3.4/8\"), Port.tcp(80));",
          "version": "1"
        },
        "go": {
          "source": "var instanceType instanceType\n\nprovider := ec2.natProvider.instance(&natInstanceProps{\n\tinstanceType: instanceType,\n\tdefaultAllowedTraffic: ec2.natTrafficDirection_OUTBOUND_ONLY,\n})\nec2.NewVpc(this, jsii.String(\"TheVPC\"), &vpcProps{\n\tnatGatewayProvider: provider,\n})\nprovider.connections.allowFrom(ec2.peer.ipv4(jsii.String(\"1.2.3.4/8\")), ec2.port.tcp(jsii.Number(80)))",
          "version": "1"
        },
        "$": {
          "source": "declare const instanceType: ec2.InstanceType;\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  defaultAllowedTraffic: ec2.NatTrafficDirection.OUTBOUND_ONLY,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Peer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.NatTrafficDirection",
        "@aws-cdk/aws-ec2.NatTrafficDirection#OUTBOUND_ONLY",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  defaultAllowedTraffic: ec2.NatTrafficDirection.OUTBOUND_ONLY,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "52cff934f9b32aac8cfc0232c4caedd0f25d08dba0c724e1ec42e6be7a1f7dd4"
    },
    "834e1b2a66132cc7b80bd0a61b175625ee55332fd67b29fb1d8ee17190f32676": {
      "translations": {
        "python": {
          "source": "# load_balancer: elbv2.ApplicationLoadBalancer\n\n\nvpc = ec2.Vpc(self, \"MyVPC\")\nproject = codebuild.Project(self, \"MyProject\",\n    vpc=vpc,\n    build_spec=codebuild.BuildSpec.from_object({})\n)\n\nproject.connections.allow_to(load_balancer, ec2.Port.tcp(443))",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer loadBalancer;\n\n\nVpc vpc = new Vpc(this, \"MyVPC\");\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    Vpc = vpc,\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> { })\n});\n\nproject.Connections.AllowTo(loadBalancer, Port.Tcp(443));",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer loadBalancer;\n\n\nVpc vpc = new Vpc(this, \"MyVPC\");\nProject project = Project.Builder.create(this, \"MyProject\")\n        .vpc(vpc)\n        .buildSpec(BuildSpec.fromObject(Map.of()))\n        .build();\n\nproject.connections.allowTo(loadBalancer, Port.tcp(443));",
          "version": "1"
        },
        "go": {
          "source": "var loadBalancer applicationLoadBalancer\n\nvpc := ec2.NewVpc(this, jsii.String(\"MyVPC\"))\nproject := codebuild.NewProject(this, jsii.String(\"MyProject\"), &projectProps{\n\tvpc: vpc,\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t}),\n})\n\nproject.connections.allowTo(loadBalancer, ec2.port.tcp(jsii.Number(443)))",
          "version": "1"
        },
        "$": {
          "source": "declare const loadBalancer: elbv2.ApplicationLoadBalancer;\n\nconst vpc = new ec2.Vpc(this, 'MyVPC');\nconst project = new codebuild.Project(this, 'MyProject', {\n  vpc: vpc,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n  }),\n});\n\nproject.connections.allowTo(loadBalancer, ec2.Port.tcp(443));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Port"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const loadBalancer: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'MyVPC');\nconst project = new codebuild.Project(this, 'MyProject', {\n  vpc: vpc,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n  }),\n});\n\nproject.connections.allowTo(loadBalancer, ec2.Port.tcp(443));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1dc5a6869e5bd026d04dd8b9e6cbaed7e34c17da870ebb949810af776c732b5e"
    },
    "24624263b218b107d85c2f40da184624d50294f69aa18883228febf7775733f4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nport_props = ec2.PortProps(\n    protocol=ec2.Protocol.ALL,\n    string_representation=\"stringRepresentation\",\n\n    # the properties below are optional\n    from_port=123,\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPortProps portProps = new PortProps {\n    Protocol = Protocol.ALL,\n    StringRepresentation = \"stringRepresentation\",\n\n    // the properties below are optional\n    FromPort = 123,\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPortProps portProps = PortProps.builder()\n        .protocol(Protocol.ALL)\n        .stringRepresentation(\"stringRepresentation\")\n\n        // the properties below are optional\n        .fromPort(123)\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nportProps := &portProps{\n\tprotocol: ec2.protocol_ALL,\n\tstringRepresentation: jsii.String(\"stringRepresentation\"),\n\n\t// the properties below are optional\n\tfromPort: jsii.Number(123),\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst portProps: ec2.PortProps = {\n  protocol: ec2.Protocol.ALL,\n  stringRepresentation: 'stringRepresentation',\n\n  // the properties below are optional\n  fromPort: 123,\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.PortProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.PortProps",
        "@aws-cdk/aws-ec2.Protocol",
        "@aws-cdk/aws-ec2.Protocol#ALL"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst portProps: ec2.PortProps = {\n  protocol: ec2.Protocol.ALL,\n  stringRepresentation: 'stringRepresentation',\n\n  // the properties below are optional\n  fromPort: 123,\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 11,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "666683f31a340ad90c6a7081ba03f4a2ac22f8867caa8579fe06598cee1d48d8"
    },
    "caa0e0de0fd4bc0e59ef3656d50eaaea754d6ff1f09090937eb04a158576b7df": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_subnet = ec2.PrivateSubnet(self, \"MyPrivateSubnet\",\n    availability_zone=\"availabilityZone\",\n    cidr_block=\"cidrBlock\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    map_public_ip_on_launch=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateSubnet privateSubnet = new PrivateSubnet(this, \"MyPrivateSubnet\", new PrivateSubnetProps {\n    AvailabilityZone = \"availabilityZone\",\n    CidrBlock = \"cidrBlock\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    MapPublicIpOnLaunch = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateSubnet privateSubnet = PrivateSubnet.Builder.create(this, \"MyPrivateSubnet\")\n        .availabilityZone(\"availabilityZone\")\n        .cidrBlock(\"cidrBlock\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .mapPublicIpOnLaunch(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateSubnet := ec2.NewPrivateSubnet(this, jsii.String(\"MyPrivateSubnet\"), &privateSubnetProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tmapPublicIpOnLaunch: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateSubnet = new ec2.PrivateSubnet(this, 'MyPrivateSubnet', {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.PrivateSubnet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.PrivateSubnet",
        "@aws-cdk/aws-ec2.PrivateSubnetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateSubnet = new ec2.PrivateSubnet(this, 'MyPrivateSubnet', {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "21a322ceaf0bea76ee80926b48541966a8f11045785f5098813a439c98871d65"
    },
    "f64e5fe9cf2ca4503de6905d79abc84705cc76d9c3efefa6acb446c685ff1f6e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_subnet_attributes = ec2.PrivateSubnetAttributes(\n    subnet_id=\"subnetId\",\n\n    # the properties below are optional\n    availability_zone=\"availabilityZone\",\n    ipv4_cidr_block=\"ipv4CidrBlock\",\n    route_table_id=\"routeTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateSubnetAttributes privateSubnetAttributes = new PrivateSubnetAttributes {\n    SubnetId = \"subnetId\",\n\n    // the properties below are optional\n    AvailabilityZone = \"availabilityZone\",\n    Ipv4CidrBlock = \"ipv4CidrBlock\",\n    RouteTableId = \"routeTableId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateSubnetAttributes privateSubnetAttributes = PrivateSubnetAttributes.builder()\n        .subnetId(\"subnetId\")\n\n        // the properties below are optional\n        .availabilityZone(\"availabilityZone\")\n        .ipv4CidrBlock(\"ipv4CidrBlock\")\n        .routeTableId(\"routeTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateSubnetAttributes := &privateSubnetAttributes{\n\tsubnetId: jsii.String(\"subnetId\"),\n\n\t// the properties below are optional\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tipv4CidrBlock: jsii.String(\"ipv4CidrBlock\"),\n\trouteTableId: jsii.String(\"routeTableId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateSubnetAttributes: ec2.PrivateSubnetAttributes = {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  availabilityZone: 'availabilityZone',\n  ipv4CidrBlock: 'ipv4CidrBlock',\n  routeTableId: 'routeTableId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.PrivateSubnetAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.PrivateSubnetAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateSubnetAttributes: ec2.PrivateSubnetAttributes = {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  availabilityZone: 'availabilityZone',\n  ipv4CidrBlock: 'ipv4CidrBlock',\n  routeTableId: 'routeTableId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "74736f682940baeda60e77e04381f1397b976d4f608efe8d2317427037bb3c24"
    },
    "8b4e4a634ccf68a624524a94cc17408f9dcf3c2f274ff2baf0f7c5e4514f55e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nprivate_subnet_props = ec2.PrivateSubnetProps(\n    availability_zone=\"availabilityZone\",\n    cidr_block=\"cidrBlock\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    map_public_ip_on_launch=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPrivateSubnetProps privateSubnetProps = new PrivateSubnetProps {\n    AvailabilityZone = \"availabilityZone\",\n    CidrBlock = \"cidrBlock\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    MapPublicIpOnLaunch = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPrivateSubnetProps privateSubnetProps = PrivateSubnetProps.builder()\n        .availabilityZone(\"availabilityZone\")\n        .cidrBlock(\"cidrBlock\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .mapPublicIpOnLaunch(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nprivateSubnetProps := &privateSubnetProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tmapPublicIpOnLaunch: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst privateSubnetProps: ec2.PrivateSubnetProps = {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.PrivateSubnetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.PrivateSubnetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateSubnetProps: ec2.PrivateSubnetProps = {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e516f6051e4ca5a0ad3c16a15be32982a21e3a5f0f58ab9e12934f4d9b6e43bb"
    },
    "50897949641211245c823921cc1d5f7b24e9c786e11a54f743a0758403de9fba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\npublic_subnet = ec2.PublicSubnet(self, \"MyPublicSubnet\",\n    availability_zone=\"availabilityZone\",\n    cidr_block=\"cidrBlock\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    map_public_ip_on_launch=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPublicSubnet publicSubnet = new PublicSubnet(this, \"MyPublicSubnet\", new PublicSubnetProps {\n    AvailabilityZone = \"availabilityZone\",\n    CidrBlock = \"cidrBlock\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    MapPublicIpOnLaunch = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPublicSubnet publicSubnet = PublicSubnet.Builder.create(this, \"MyPublicSubnet\")\n        .availabilityZone(\"availabilityZone\")\n        .cidrBlock(\"cidrBlock\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .mapPublicIpOnLaunch(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\npublicSubnet := ec2.NewPublicSubnet(this, jsii.String(\"MyPublicSubnet\"), &publicSubnetProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tmapPublicIpOnLaunch: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst publicSubnet = new ec2.PublicSubnet(this, 'MyPublicSubnet', {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.PublicSubnet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.PublicSubnet",
        "@aws-cdk/aws-ec2.PublicSubnetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publicSubnet = new ec2.PublicSubnet(this, 'MyPublicSubnet', {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b0fcda92c2f77ebeff045ff0256374b2692a0fa1811652478443e2f80af2dde7"
    },
    "6ca871e729e0f2a780bcd017ef5c1b0dca9e33d0192038f66d050f5caf3b7002": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\npublic_subnet_attributes = ec2.PublicSubnetAttributes(\n    subnet_id=\"subnetId\",\n\n    # the properties below are optional\n    availability_zone=\"availabilityZone\",\n    ipv4_cidr_block=\"ipv4CidrBlock\",\n    route_table_id=\"routeTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPublicSubnetAttributes publicSubnetAttributes = new PublicSubnetAttributes {\n    SubnetId = \"subnetId\",\n\n    // the properties below are optional\n    AvailabilityZone = \"availabilityZone\",\n    Ipv4CidrBlock = \"ipv4CidrBlock\",\n    RouteTableId = \"routeTableId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPublicSubnetAttributes publicSubnetAttributes = PublicSubnetAttributes.builder()\n        .subnetId(\"subnetId\")\n\n        // the properties below are optional\n        .availabilityZone(\"availabilityZone\")\n        .ipv4CidrBlock(\"ipv4CidrBlock\")\n        .routeTableId(\"routeTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\npublicSubnetAttributes := &publicSubnetAttributes{\n\tsubnetId: jsii.String(\"subnetId\"),\n\n\t// the properties below are optional\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tipv4CidrBlock: jsii.String(\"ipv4CidrBlock\"),\n\trouteTableId: jsii.String(\"routeTableId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst publicSubnetAttributes: ec2.PublicSubnetAttributes = {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  availabilityZone: 'availabilityZone',\n  ipv4CidrBlock: 'ipv4CidrBlock',\n  routeTableId: 'routeTableId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.PublicSubnetAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.PublicSubnetAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publicSubnetAttributes: ec2.PublicSubnetAttributes = {\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  availabilityZone: 'availabilityZone',\n  ipv4CidrBlock: 'ipv4CidrBlock',\n  routeTableId: 'routeTableId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "6b5516a5f496674205051fd0930f092d70e1859908619d00755fa8314d974477"
    },
    "b289479ed97c6d8b463ef49f4413fceb18d138bc8a901f2c1b42aa86bb6f8c05": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\npublic_subnet_props = ec2.PublicSubnetProps(\n    availability_zone=\"availabilityZone\",\n    cidr_block=\"cidrBlock\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    map_public_ip_on_launch=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nPublicSubnetProps publicSubnetProps = new PublicSubnetProps {\n    AvailabilityZone = \"availabilityZone\",\n    CidrBlock = \"cidrBlock\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    MapPublicIpOnLaunch = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nPublicSubnetProps publicSubnetProps = PublicSubnetProps.builder()\n        .availabilityZone(\"availabilityZone\")\n        .cidrBlock(\"cidrBlock\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .mapPublicIpOnLaunch(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\npublicSubnetProps := &publicSubnetProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tmapPublicIpOnLaunch: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst publicSubnetProps: ec2.PublicSubnetProps = {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.PublicSubnetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.PublicSubnetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publicSubnetProps: ec2.PublicSubnetProps = {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "f178381fb05e4f16359f9bff28cb11431b03b1f67cfd61a5ec8221e9284ca7e0"
    },
    "03895d6b8cb5d163671155f2177e224adcdb9aa9510a50ffb676a334144755c2": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"VPC\",\n    subnet_configuration=[ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.PUBLIC,\n        name=\"Public\"\n    ), ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.ISOLATED,\n        name=\"Isolated\"\n    )]\n)\n\n(vpc.isolated_subnets[0]).add_route(\"StaticRoute\",\n    router_id=vpc.internet_gateway_id,\n    router_type=ec2.RouterType.GATEWAY,\n    destination_cidr_block=\"8.8.8.8/32\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\", new VpcProps {\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        SubnetType = SubnetType.PUBLIC,\n        Name = \"Public\"\n    }, new SubnetConfiguration {\n        SubnetType = SubnetType.ISOLATED,\n        Name = \"Isolated\"\n    } }\n});\n\n((Subnet)vpc.IsolatedSubnets[0]).AddRoute(\"StaticRoute\", new AddRouteOptions {\n    RouterId = vpc.InternetGatewayId,\n    RouterType = RouterType.GATEWAY,\n    DestinationCidrBlock = \"8.8.8.8/32\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"VPC\")\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .name(\"Public\")\n                .build(), SubnetConfiguration.builder()\n                .subnetType(SubnetType.ISOLATED)\n                .name(\"Isolated\")\n                .build()))\n        .build();\n\n((Subnet)vpc.isolatedSubnets[0]).addRoute(\"StaticRoute\", AddRouteOptions.builder()\n        .routerId(vpc.getInternetGatewayId())\n        .routerType(RouterType.GATEWAY)\n        .destinationCidrBlock(\"8.8.8.8/32\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tsubnetConfiguration: []subnetConfiguration{\n\t\t&subnetConfiguration{\n\t\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t\t\tname: jsii.String(\"Public\"),\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tsubnetType: ec2.*subnetType_ISOLATED,\n\t\t\tname: jsii.String(\"Isolated\"),\n\t\t},\n\t},\n})\n\n(vpc.isolatedSubnets[0].(subnet)).addRoute(jsii.String(\"StaticRoute\"), &addRouteOptions{\n\trouterId: vpc.internetGatewayId,\n\trouterType: ec2.routerType_GATEWAY,\n\tdestinationCidrBlock: jsii.String(\"8.8.8.8/32\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.RouterType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AddRouteOptions",
        "@aws-cdk/aws-ec2.RouterType",
        "@aws-cdk/aws-ec2.RouterType#GATEWAY",
        "@aws-cdk/aws-ec2.Subnet#addRoute",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#internetGatewayId",
        "@aws-cdk/aws-ec2.Vpc#isolatedSubnets",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 10,
        "195": 1,
        "196": 1,
        "197": 1,
        "200": 1,
        "217": 1,
        "218": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "c0dece50f85513d8ffd53d3c5e0214b0717c27a75490a255ffd9577f2fbfa36f"
    },
    "ac76f02be68341222fa3c0ff12a9e1537ba7eb0e374c011dcfa2f0332e8264a3": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_s3_assets import Asset\n\n# instance: ec2.Instance\n\n\nasset = Asset(self, \"Asset\",\n    path=\"./configure.sh\"\n)\n\nlocal_path = instance.user_data.add_s3_download_command(\n    bucket=asset.bucket,\n    bucket_key=asset.s3_object_key,\n    region=\"us-east-1\"\n)\ninstance.user_data.add_execute_file_command(\n    file_path=local_path,\n    arguments=\"--verbose -y\"\n)\nasset.grant_read(instance.role)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nInstance instance;\n\n\nAsset asset = new Asset(this, \"Asset\", new AssetProps {\n    Path = \"./configure.sh\"\n});\n\nstring localPath = instance.UserData.AddS3DownloadCommand(new S3DownloadOptions {\n    Bucket = asset.Bucket,\n    BucketKey = asset.S3ObjectKey,\n    Region = \"us-east-1\"\n});\ninstance.UserData.AddExecuteFileCommand(new ExecuteFileOptions {\n    FilePath = localPath,\n    Arguments = \"--verbose -y\"\n});\nasset.GrantRead(instance.Role);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.Asset;\n\nInstance instance;\n\n\nAsset asset = Asset.Builder.create(this, \"Asset\")\n        .path(\"./configure.sh\")\n        .build();\n\nString localPath = instance.userData.addS3DownloadCommand(S3DownloadOptions.builder()\n        .bucket(asset.getBucket())\n        .bucketKey(asset.getS3ObjectKey())\n        .region(\"us-east-1\")\n        .build());\ninstance.userData.addExecuteFileCommand(ExecuteFileOptions.builder()\n        .filePath(localPath)\n        .arguments(\"--verbose -y\")\n        .build());\nasset.grantRead(instance.getRole());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkawss3assets \"github.com/aws-samples/dummy/awscdkawss3assets\"type Asset awscdkawss3assets.Asset\n\nvar instance instance\n\nasset := NewAsset(this, jsii.String(\"Asset\"), &assetProps{\n\tpath: jsii.String(\"./configure.sh\"),\n})\n\nlocalPath := instance.userData.addS3DownloadCommand(&s3DownloadOptions{\n\tbucket: asset.bucket,\n\tbucketKey: asset.s3ObjectKey,\n\tregion: jsii.String(\"us-east-1\"),\n})\ninstance.userData.addExecuteFileCommand(&executeFileOptions{\n\tfilePath: localPath,\n\targuments: jsii.String(\"--verbose -y\"),\n})\nasset.grantRead(instance.role)",
          "version": "1"
        },
        "$": {
          "source": "import { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.S3DownloadOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ExecuteFileOptions",
        "@aws-cdk/aws-ec2.Instance#role",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.S3DownloadOptions",
        "@aws-cdk/aws-ec2.UserData#addExecuteFileCommand",
        "@aws-cdk/aws-ec2.UserData#addS3DownloadCommand",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.Asset#bucket",
        "@aws-cdk/aws-s3-assets.Asset#grantRead",
        "@aws-cdk/aws-s3-assets.Asset#s3ObjectKey",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "44fcc62eff0f5b60562b4e6eeff95e4d8404569f22eca6029f80e4db19728d4c"
    },
    "fab2422d1a99d6e209975e9c7c241b1da286012f522c6425c56dd8e732df66d1": {
      "translations": {
        "python": {
          "source": "security_group = ec2.SecurityGroup.from_security_group_id(self, \"SG\", \"sg-12345\",\n    mutable=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISecurityGroup securityGroup = SecurityGroup.FromSecurityGroupId(this, \"SG\", \"sg-12345\", new SecurityGroupImportOptions {\n    Mutable = false\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup securityGroup = SecurityGroup.fromSecurityGroupId(this, \"SG\", \"sg-12345\", SecurityGroupImportOptions.builder()\n        .mutable(false)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "securityGroup := ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"SG\"), jsii.String(\"sg-12345\"), &securityGroupImportOptions{\n\tmutable: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {\n   mutable: false\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SecurityGroup"
        },
        "field": {
          "field": "markdown",
          "line": 28
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {\n   mutable: false\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "cecb318f92a7fab80ee2a930ecbd7a2400add8bb1ac041f751ae9662a8432100"
    },
    "66f2c2597599faf9b39ae96b0c35e86e9709c3313078911ffec1b5931cddae50": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ntemplate = ec2.LaunchTemplate(self, \"LaunchTemplate\",\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    security_group=ec2.SecurityGroup(self, \"LaunchTemplateSG\",\n        vpc=vpc\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = new LaunchTemplate(this, \"LaunchTemplate\", new LaunchTemplateProps {\n    MachineImage = MachineImage.LatestAmazonLinux(),\n    SecurityGroup = new SecurityGroup(this, \"LaunchTemplateSG\", new SecurityGroupProps {\n        Vpc = vpc\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = LaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .machineImage(MachineImage.latestAmazonLinux())\n        .securityGroup(SecurityGroup.Builder.create(this, \"LaunchTemplateSG\")\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ntemplate := ec2.NewLaunchTemplate(this, jsii.String(\"LaunchTemplate\"), &launchTemplateProps{\n\tmachineImage: ec2.machineImage.latestAmazonLinux(),\n\tsecurityGroup: ec2.NewSecurityGroup(this, jsii.String(\"LaunchTemplateSG\"), &securityGroupProps{\n\t\tvpc: vpc,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SecurityGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ab10bfe5d20c8a881b863eb1e6f4063a6015f3f41b73bb95e2a38c69da0d971b"
    },
    "0cdb6d385f2c99950d074b25703b68e9b94e47b2678076cab19de922c602b2fd": {
      "translations": {
        "python": {
          "source": "security_group = ec2.SecurityGroup.from_security_group_id(self, \"SG\", \"sg-12345\",\n    mutable=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISecurityGroup securityGroup = SecurityGroup.FromSecurityGroupId(this, \"SG\", \"sg-12345\", new SecurityGroupImportOptions {\n    Mutable = false\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup securityGroup = SecurityGroup.fromSecurityGroupId(this, \"SG\", \"sg-12345\", SecurityGroupImportOptions.builder()\n        .mutable(false)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "securityGroup := ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"SG\"), jsii.String(\"sg-12345\"), &securityGroupImportOptions{\n\tmutable: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {\n   mutable: false\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SecurityGroupImportOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {\n   mutable: false\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "cecb318f92a7fab80ee2a930ecbd7a2400add8bb1ac041f751ae9662a8432100"
    },
    "69f0b05f4d033361fc998c1d7b9972505d9573882156558f32a51a3242a8685f": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nsecurity_group1 = ec2.SecurityGroup(self, \"SecurityGroup1\", vpc=vpc)\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True,\n    security_group=security_group1\n)\n\nsecurity_group2 = ec2.SecurityGroup(self, \"SecurityGroup2\", vpc=vpc)\nlb.add_security_group(security_group2)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nSecurityGroup securityGroup1 = new SecurityGroup(this, \"SecurityGroup1\", new SecurityGroupProps { Vpc = vpc });\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true,\n    SecurityGroup = securityGroup1\n});\n\nSecurityGroup securityGroup2 = new SecurityGroup(this, \"SecurityGroup2\", new SecurityGroupProps { Vpc = vpc });\nlb.AddSecurityGroup(securityGroup2);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nSecurityGroup securityGroup1 = SecurityGroup.Builder.create(this, \"SecurityGroup1\").vpc(vpc).build();\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .securityGroup(securityGroup1)\n        .build();\n\nSecurityGroup securityGroup2 = SecurityGroup.Builder.create(this, \"SecurityGroup2\").vpc(vpc).build();\nlb.addSecurityGroup(securityGroup2);",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nsecurityGroup1 := ec2.NewSecurityGroup(this, jsii.String(\"SecurityGroup1\"), &securityGroupProps{\n\tvpc: vpc,\n})\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n\tsecurityGroup: securityGroup1,\n})\n\nsecurityGroup2 := ec2.NewSecurityGroup(this, jsii.String(\"SecurityGroup2\"), &securityGroupProps{\n\tvpc: vpc,\n})\nlb.addSecurityGroup(securityGroup2)",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst securityGroup1 = new ec2.SecurityGroup(this, 'SecurityGroup1', { vpc });\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  securityGroup: securityGroup1, // Optional - will be automatically created otherwise\n});\n\nconst securityGroup2 = new ec2.SecurityGroup(this, 'SecurityGroup2', { vpc });\nlb.addSecurityGroup(securityGroup2);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SecurityGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addSecurityGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst securityGroup1 = new ec2.SecurityGroup(this, 'SecurityGroup1', { vpc });\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  securityGroup: securityGroup1, // Optional - will be automatically created otherwise\n});\n\nconst securityGroup2 = new ec2.SecurityGroup(this, 'SecurityGroup2', { vpc });\nlb.addSecurityGroup(securityGroup2);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 3,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 2,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "abd72ab69cb8c9c7cccff68029f0f0addcca5673bdab232b90bc71d88937ce4a"
    },
    "61fd641949dbec560cc50d9a2988b42742d62429df8b7e3b75f5a8ac0522183b": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"TheVPC\",\n    cidr=\"10.0.0.0/16\"\n)\n\n# Iterate the private subnets\nselection = vpc.select_subnets(\n    subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n)\n\nfor subnet in selection.subnets:\n    pass",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"TheVPC\", new VpcProps {\n    Cidr = \"10.0.0.0/16\"\n});\n\n// Iterate the private subnets\nSelectedSubnets selection = vpc.SelectSubnets(new SubnetSelection {\n    SubnetType = SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (var subnet in selection.Subnets)\n{\n}",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"TheVPC\")\n        .cidr(\"10.0.0.0/16\")\n        .build();\n\n// Iterate the private subnets\nSelectedSubnets selection = vpc.selectSubnets(SubnetSelection.builder()\n        .subnetType(SubnetType.PRIVATE_WITH_NAT)\n        .build());\n\nfor (Object subnet : selection.getSubnets()) {\n}",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"TheVPC\"), &vpcProps{\n\tcidr: jsii.String(\"10.0.0.0/16\"),\n})\n\n// Iterate the private subnets\nselection := vpc.selectSubnets(&subnetSelection{\n\tsubnetType: ec2.subnetType_PRIVATE_WITH_NAT,\n})\n\nfor _, subnet := range selection.subnets {}",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'TheVPC', {\n   cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the private subnets\nconst selection = vpc.selectSubnets({\n   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (const subnet of selection.subnets) {\n   // ...\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SelectedSubnets"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SelectedSubnets",
        "@aws-cdk/aws-ec2.SelectedSubnets#subnets",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'TheVPC', {\n   cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the private subnets\nconst selection = vpc.selectSubnets({\n   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (const subnet of selection.subnets) {\n   // ...\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "223": 1,
        "225": 2,
        "232": 1,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "508b9f78300e2cf95e5b989ec157faaf4950d6cfbe2f7922bf737bd87b9c3f40"
    },
    "5829438cd5f67a51028827ba819b231fd9f53e12509570b3a483fab580604454": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SsmParameterImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    },
    "48c484829d946dc84d8cc9d0c49ef478b3b7e416e9680aaee243b2ea96c1b6f5": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    task_subnets=ec2.SubnetSelection(\n        subnets=[ec2.Subnet.from_subnet_id(self, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TaskSubnets = new SubnetSelection {\n        Subnets = new [] { Subnet.FromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\") }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .taskSubnets(SubnetSelection.builder()\n                .subnets(List.of(Subnet.fromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nloadBalancedFargateService := ecsPatterns.NewApplicationLoadBalancedFargateService(this, jsii.String(\"Service\"), &applicationLoadBalancedFargateServiceProps{\n\tcluster: cluster,\n\tmemoryLimitMiB: jsii.Number(1024),\n\tdesiredCount: jsii.Number(1),\n\tcpu: jsii.Number(512),\n\ttaskImageOptions: &applicationLoadBalancedTaskImageOptions{\n\t\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\t},\n\ttaskSubnets: &subnetSelection{\n\t\tsubnets: []iSubnet{\n\t\t\tec2.subnet.fromSubnetId(this, jsii.String(\"subnet\"), jsii.String(\"VpcISOLATEDSubnet1Subnet80F07FA0\")),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Subnet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6958114904ff7b77cf2bbd7d1f5ea705df2d7a2c42d3061cffbeb6fba63d9276"
    },
    "26e3bff9dcbaf47940a4a9763e6d80fb0f5750d4f12badf59dc8f051e8591d75": {
      "translations": {
        "python": {
          "source": "# Supply all properties\nsubnet1 = ec2.Subnet.from_subnet_attributes(self, \"SubnetFromAttributes\",\n    subnet_id=\"s-1234\",\n    availability_zone=\"pub-az-4465\",\n    route_table_id=\"rt-145\"\n)\n\n# Supply only subnet id\nsubnet2 = ec2.Subnet.from_subnet_id(self, \"SubnetFromId\", \"s-1234\")",
          "version": "2"
        },
        "csharp": {
          "source": "// Supply all properties\nISubnet subnet1 = Subnet.FromSubnetAttributes(this, \"SubnetFromAttributes\", new SubnetAttributes {\n    SubnetId = \"s-1234\",\n    AvailabilityZone = \"pub-az-4465\",\n    RouteTableId = \"rt-145\"\n});\n\n// Supply only subnet id\nISubnet subnet2 = Subnet.FromSubnetId(this, \"SubnetFromId\", \"s-1234\");",
          "version": "1"
        },
        "java": {
          "source": "// Supply all properties\nISubnet subnet1 = Subnet.fromSubnetAttributes(this, \"SubnetFromAttributes\", SubnetAttributes.builder()\n        .subnetId(\"s-1234\")\n        .availabilityZone(\"pub-az-4465\")\n        .routeTableId(\"rt-145\")\n        .build());\n\n// Supply only subnet id\nISubnet subnet2 = Subnet.fromSubnetId(this, \"SubnetFromId\", \"s-1234\");",
          "version": "1"
        },
        "go": {
          "source": "// Supply all properties\nsubnet1 := ec2.subnet.fromSubnetAttributes(this, jsii.String(\"SubnetFromAttributes\"), &subnetAttributes{\n\tsubnetId: jsii.String(\"s-1234\"),\n\tavailabilityZone: jsii.String(\"pub-az-4465\"),\n\trouteTableId: jsii.String(\"rt-145\"),\n})\n\n// Supply only subnet id\nsubnet2 := ec2.subnet.fromSubnetId(this, jsii.String(\"SubnetFromId\"), jsii.String(\"s-1234\"))",
          "version": "1"
        },
        "$": {
          "source": "// Supply all properties\nconst subnet1 = ec2.Subnet.fromSubnetAttributes(this, 'SubnetFromAttributes', {\n  subnetId: 's-1234',\n  availabilityZone: 'pub-az-4465',\n  routeTableId: 'rt-145'\n});\n\n// Supply only subnet id\nconst subnet2 = ec2.Subnet.fromSubnetId(this, 'SubnetFromId', 's-1234');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISubnet",
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetAttributes",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Supply all properties\nconst subnet1 = ec2.Subnet.fromSubnetAttributes(this, 'SubnetFromAttributes', {\n  subnetId: 's-1234',\n  availabilityZone: 'pub-az-4465',\n  routeTableId: 'rt-145'\n});\n\n// Supply only subnet id\nconst subnet2 = ec2.Subnet.fromSubnetId(this, 'SubnetFromId', 's-1234');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "6dd4bf896ce6fea3aa7ddde8ac1aedb06c7483d03b9e999bb83909bff54e9a9c"
    },
    "77a887622f11dfeb8886c4ad147515f7af37719b2b716dcd5993ad9c15b81657": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nsubnet_configuration = ec2.SubnetConfiguration(\n    name=\"name\",\n    subnet_type=ec2.SubnetType.ISOLATED,\n\n    # the properties below are optional\n    cidr_mask=123,\n    map_public_ip_on_launch=False,\n    reserved=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSubnetConfiguration subnetConfiguration = new SubnetConfiguration {\n    Name = \"name\",\n    SubnetType = SubnetType.ISOLATED,\n\n    // the properties below are optional\n    CidrMask = 123,\n    MapPublicIpOnLaunch = false,\n    Reserved = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSubnetConfiguration subnetConfiguration = SubnetConfiguration.builder()\n        .name(\"name\")\n        .subnetType(SubnetType.ISOLATED)\n\n        // the properties below are optional\n        .cidrMask(123)\n        .mapPublicIpOnLaunch(false)\n        .reserved(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nsubnetConfiguration := &subnetConfiguration{\n\tname: jsii.String(\"name\"),\n\tsubnetType: ec2.subnetType_ISOLATED,\n\n\t// the properties below are optional\n\tcidrMask: jsii.Number(123),\n\tmapPublicIpOnLaunch: jsii.Boolean(false),\n\treserved: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst subnetConfiguration: ec2.SubnetConfiguration = {\n  name: 'name',\n  subnetType: ec2.SubnetType.ISOLATED,\n\n  // the properties below are optional\n  cidrMask: 123,\n  mapPublicIpOnLaunch: false,\n  reserved: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetConfiguration",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subnetConfiguration: ec2.SubnetConfiguration = {\n  name: 'name',\n  subnetType: ec2.SubnetType.ISOLATED,\n\n  // the properties below are optional\n  cidrMask: 123,\n  mapPublicIpOnLaunch: false,\n  reserved: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6be011a9d25d638e127f9c0ad4b86fe9321cdbf20325def7aaeab4a9605fdbe8"
    },
    "d486afe4d63e24dd1d31d5bf96e1f7ca4a60edc09ee61705773b22f34610bbd2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nsubnet_filter = ec2.SubnetFilter.availability_zones([\"availabilityZones\"])",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSubnetFilter subnetFilter = SubnetFilter.AvailabilityZones(new [] { \"availabilityZones\" });",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSubnetFilter subnetFilter = SubnetFilter.availabilityZones(List.of(\"availabilityZones\"));",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nsubnetFilter := ec2.subnetFilter.availabilityZones([]*string{\n\tjsii.String(\"availabilityZones\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst subnetFilter = ec2.SubnetFilter.availabilityZones(['availabilityZones']);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetFilter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetFilter",
        "@aws-cdk/aws-ec2.SubnetFilter#availabilityZones"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subnetFilter = ec2.SubnetFilter.availabilityZones(['availabilityZones']);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "192": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "f0c8d9ae04ada5ca545722252d909935f09433202328e5de1dc0337bf49fb1ee"
    },
    "c48122d898814f9ab23201c48d2ef3c21da81221fc530c72db5cd1acc7ab38c9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# network_acl: ec2.NetworkAcl\n# subnet: ec2.Subnet\n\nsubnet_network_acl_association = ec2.SubnetNetworkAclAssociation(self, \"MySubnetNetworkAclAssociation\",\n    network_acl=network_acl,\n    subnet=subnet,\n\n    # the properties below are optional\n    subnet_network_acl_association_name=\"subnetNetworkAclAssociationName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNetworkAcl networkAcl;\nSubnet subnet;\n\nSubnetNetworkAclAssociation subnetNetworkAclAssociation = new SubnetNetworkAclAssociation(this, \"MySubnetNetworkAclAssociation\", new SubnetNetworkAclAssociationProps {\n    NetworkAcl = networkAcl,\n    Subnet = subnet,\n\n    // the properties below are optional\n    SubnetNetworkAclAssociationName = \"subnetNetworkAclAssociationName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNetworkAcl networkAcl;\nSubnet subnet;\n\nSubnetNetworkAclAssociation subnetNetworkAclAssociation = SubnetNetworkAclAssociation.Builder.create(this, \"MySubnetNetworkAclAssociation\")\n        .networkAcl(networkAcl)\n        .subnet(subnet)\n\n        // the properties below are optional\n        .subnetNetworkAclAssociationName(\"subnetNetworkAclAssociationName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar networkAcl networkAcl\nvar subnet subnet\nsubnetNetworkAclAssociation := ec2.NewSubnetNetworkAclAssociation(this, jsii.String(\"MySubnetNetworkAclAssociation\"), &subnetNetworkAclAssociationProps{\n\tnetworkAcl: networkAcl,\n\tsubnet: subnet,\n\n\t// the properties below are optional\n\tsubnetNetworkAclAssociationName: jsii.String(\"subnetNetworkAclAssociationName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const networkAcl: ec2.NetworkAcl;\ndeclare const subnet: ec2.Subnet;\nconst subnetNetworkAclAssociation = new ec2.SubnetNetworkAclAssociation(this, 'MySubnetNetworkAclAssociation', {\n  networkAcl: networkAcl,\n  subnet: subnet,\n\n  // the properties below are optional\n  subnetNetworkAclAssociationName: 'subnetNetworkAclAssociationName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetNetworkAclAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.INetworkAcl",
        "@aws-cdk/aws-ec2.ISubnet",
        "@aws-cdk/aws-ec2.SubnetNetworkAclAssociation",
        "@aws-cdk/aws-ec2.SubnetNetworkAclAssociationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const networkAcl: ec2.NetworkAcl;\ndeclare const subnet: ec2.Subnet;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subnetNetworkAclAssociation = new ec2.SubnetNetworkAclAssociation(this, 'MySubnetNetworkAclAssociation', {\n  networkAcl: networkAcl,\n  subnet: subnet,\n\n  // the properties below are optional\n  subnetNetworkAclAssociationName: 'subnetNetworkAclAssociationName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "073c9a606f5493acf209b672709a06ff63ce7daed9e25d490582d393cdaa24bf"
    },
    "dd67c9a703a146aa72239381fb0f236dd181d27d7c2e44bd7073e4aba11a6731": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# network_acl: ec2.NetworkAcl\n# subnet: ec2.Subnet\n\nsubnet_network_acl_association_props = ec2.SubnetNetworkAclAssociationProps(\n    network_acl=network_acl,\n    subnet=subnet,\n\n    # the properties below are optional\n    subnet_network_acl_association_name=\"subnetNetworkAclAssociationName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nNetworkAcl networkAcl;\nSubnet subnet;\n\nSubnetNetworkAclAssociationProps subnetNetworkAclAssociationProps = new SubnetNetworkAclAssociationProps {\n    NetworkAcl = networkAcl,\n    Subnet = subnet,\n\n    // the properties below are optional\n    SubnetNetworkAclAssociationName = \"subnetNetworkAclAssociationName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nNetworkAcl networkAcl;\nSubnet subnet;\n\nSubnetNetworkAclAssociationProps subnetNetworkAclAssociationProps = SubnetNetworkAclAssociationProps.builder()\n        .networkAcl(networkAcl)\n        .subnet(subnet)\n\n        // the properties below are optional\n        .subnetNetworkAclAssociationName(\"subnetNetworkAclAssociationName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar networkAcl networkAcl\nvar subnet subnet\nsubnetNetworkAclAssociationProps := &subnetNetworkAclAssociationProps{\n\tnetworkAcl: networkAcl,\n\tsubnet: subnet,\n\n\t// the properties below are optional\n\tsubnetNetworkAclAssociationName: jsii.String(\"subnetNetworkAclAssociationName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const networkAcl: ec2.NetworkAcl;\ndeclare const subnet: ec2.Subnet;\nconst subnetNetworkAclAssociationProps: ec2.SubnetNetworkAclAssociationProps = {\n  networkAcl: networkAcl,\n  subnet: subnet,\n\n  // the properties below are optional\n  subnetNetworkAclAssociationName: 'subnetNetworkAclAssociationName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetNetworkAclAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.INetworkAcl",
        "@aws-cdk/aws-ec2.ISubnet",
        "@aws-cdk/aws-ec2.SubnetNetworkAclAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const networkAcl: ec2.NetworkAcl;\ndeclare const subnet: ec2.Subnet;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subnetNetworkAclAssociationProps: ec2.SubnetNetworkAclAssociationProps = {\n  networkAcl: networkAcl,\n  subnet: subnet,\n\n  // the properties below are optional\n  subnetNetworkAclAssociationName: 'subnetNetworkAclAssociationName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "03cd6743cc42e1d4e2300a3fec9e1c9087347d488e60286a3206f240a796fa90"
    },
    "d761def377a1eaf0921c333d4841c14c4c317992ed46feba21addcc80f649ba3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nsubnet_props = ec2.SubnetProps(\n    availability_zone=\"availabilityZone\",\n    cidr_block=\"cidrBlock\",\n    vpc_id=\"vpcId\",\n\n    # the properties below are optional\n    map_public_ip_on_launch=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nSubnetProps subnetProps = new SubnetProps {\n    AvailabilityZone = \"availabilityZone\",\n    CidrBlock = \"cidrBlock\",\n    VpcId = \"vpcId\",\n\n    // the properties below are optional\n    MapPublicIpOnLaunch = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nSubnetProps subnetProps = SubnetProps.builder()\n        .availabilityZone(\"availabilityZone\")\n        .cidrBlock(\"cidrBlock\")\n        .vpcId(\"vpcId\")\n\n        // the properties below are optional\n        .mapPublicIpOnLaunch(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nsubnetProps := &subnetProps{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tcidrBlock: jsii.String(\"cidrBlock\"),\n\tvpcId: jsii.String(\"vpcId\"),\n\n\t// the properties below are optional\n\tmapPublicIpOnLaunch: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst subnetProps: ec2.SubnetProps = {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subnetProps: ec2.SubnetProps = {\n  availabilityZone: 'availabilityZone',\n  cidrBlock: 'cidrBlock',\n  vpcId: 'vpcId',\n\n  // the properties below are optional\n  mapPublicIpOnLaunch: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "33d9233bc82a37b528ac64c6f891e275d5b0d5bcefb4fa698d4fc3f168257f1e"
    },
    "925701fd6518928491421f44152f32e06d26de7bc4017aa122c77a9f478aaf7a": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\",  # NOTE: 'admin' is reserved by DocumentDB\n        exclude_characters=\"\\\"@/:\",  # optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        secret_name=\"/myapp/mydocdb/masteruser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\",  // NOTE: 'admin' is reserved by DocumentDB\n        ExcludeCharacters = \"\\\"@/:\",  // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        SecretName = \"/myapp/mydocdb/masteruser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\") // NOTE: 'admin' is reserved by DocumentDB\n                .excludeCharacters(\"\\\"@/:\") // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n                .secretName(\"/myapp/mydocdb/masteruser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t\t // NOTE: 'admin' is reserved by DocumentDB\n\t\texcludeCharacters: jsii.String(\"\\\"@/:\"),\n\t\t // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n\t\tsecretName: jsii.String(\"/myapp/mydocdb/masteruser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c56889502f5d55a3fa58302a00c811da0be8e8546ae721c566230ac75cdb2446"
    },
    "76bd1aae64cce9cb48ea3867750a41ef55ea39af256f0571832407065db9dbff": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\",  # NOTE: 'admin' is reserved by DocumentDB\n        exclude_characters=\"\\\"@/:\",  # optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        secret_name=\"/myapp/mydocdb/masteruser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\",  // NOTE: 'admin' is reserved by DocumentDB\n        ExcludeCharacters = \"\\\"@/:\",  // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        SecretName = \"/myapp/mydocdb/masteruser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\") // NOTE: 'admin' is reserved by DocumentDB\n                .excludeCharacters(\"\\\"@/:\") // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n                .secretName(\"/myapp/mydocdb/masteruser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t\t // NOTE: 'admin' is reserved by DocumentDB\n\t\texcludeCharacters: jsii.String(\"\\\"@/:\"),\n\t\t // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n\t\tsecretName: jsii.String(\"/myapp/mydocdb/masteruser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c56889502f5d55a3fa58302a00c811da0be8e8546ae721c566230ac75cdb2446"
    },
    "5dad6b7c3d639bd15591411db7953874dc4b7cdd53faefc02a3fd0ff47518da0": {
      "translations": {
        "python": {
          "source": "multipart_user_data = ec2.MultipartUserData()\ncommands_user_data = ec2.UserData.for_linux()\nmultipart_user_data.add_user_data_part(commands_user_data, ec2.MultipartBody.SHELL_SCRIPT, True)\n\n# Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipart_user_data.add_commands(\"touch /root/multi.txt\")\ncommands_user_data.add_commands(\"touch /root/userdata.txt\")",
          "version": "2"
        },
        "csharp": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.ForLinux();\nmultipartUserData.AddUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.AddCommands(\"touch /root/multi.txt\");\ncommandsUserData.AddCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "java": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(\"touch /root/multi.txt\");\ncommandsUserData.addCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "go": {
          "source": "multipartUserData := ec2.NewMultipartUserData()\ncommandsUserData := ec2.userData.forLinux()\nmultipartUserData.addUserDataPart(commandsUserData, ec2.multipartBody_SHELL_SCRIPT(), jsii.Boolean(true))\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(jsii.String(\"touch /root/multi.txt\"))\ncommandsUserData.addCommands(jsii.String(\"touch /root/userdata.txt\"))",
          "version": "1"
        },
        "$": {
          "source": "const multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.UserData"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#SHELL_SCRIPT",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addCommands",
        "@aws-cdk/aws-ec2.MultipartUserData#addUserDataPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "106": 1,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "866b0cc018c530d1bb1bbccdd52239ee64b2957bbc050fa2a1315bf771624932"
    },
    "36ad81134641bc582a22fce8d735ac3724269657e64ac1f7651e811d9c797c5b": {
      "translations": {
        "python": {
          "source": "# instance: ec2.Instance\n# role: iam.Role\n\n\nvolume = ec2.Volume(self, \"Volume\",\n    availability_zone=\"us-west-2a\",\n    size=Size.gibibytes(500),\n    encrypted=True\n)\n\nvolume.grant_attach_volume(role, [instance])",
          "version": "2"
        },
        "csharp": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = new Volume(this, \"Volume\", new VolumeProps {\n    AvailabilityZone = \"us-west-2a\",\n    Size = Size.Gibibytes(500),\n    Encrypted = true\n});\n\nvolume.GrantAttachVolume(role, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = Volume.Builder.create(this, \"Volume\")\n        .availabilityZone(\"us-west-2a\")\n        .size(Size.gibibytes(500))\n        .encrypted(true)\n        .build();\n\nvolume.grantAttachVolume(role, List.of(instance));",
          "version": "1"
        },
        "go": {
          "source": "var instance instance\nvar role role\n\nvolume := ec2.NewVolume(this, jsii.String(\"Volume\"), &volumeProps{\n\tavailabilityZone: jsii.String(\"us-west-2a\"),\n\tsize: size.gibibytes(jsii.Number(500)),\n\tencrypted: jsii.Boolean(true),\n})\n\nvolume.grantAttachVolume(role, []iInstance{\n\tinstance,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Volume"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Volume",
        "@aws-cdk/aws-ec2.VolumeProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5870b82ddce091122d41ff84a3a5fdc3f245394683d47180a4b2c3d65d3051bd"
    },
    "397d75f4764998577f596ee33aa6bcfe6183cfe0a78f8f28d14bfeb98a189caf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_kms as kms\n\n# key: kms.Key\n\nvolume_attributes = ec2.VolumeAttributes(\n    availability_zone=\"availabilityZone\",\n    volume_id=\"volumeId\",\n\n    # the properties below are optional\n    encryption_key=key\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.KMS;\n\nKey key;\n\nVolumeAttributes volumeAttributes = new VolumeAttributes {\n    AvailabilityZone = \"availabilityZone\",\n    VolumeId = \"volumeId\",\n\n    // the properties below are optional\n    EncryptionKey = key\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.kms.*;\n\nKey key;\n\nVolumeAttributes volumeAttributes = VolumeAttributes.builder()\n        .availabilityZone(\"availabilityZone\")\n        .volumeId(\"volumeId\")\n\n        // the properties below are optional\n        .encryptionKey(key)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import kms \"github.com/aws-samples/dummy/awscdkawskms\"\n\nvar key key\nvolumeAttributes := &volumeAttributes{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tvolumeId: jsii.String(\"volumeId\"),\n\n\t// the properties below are optional\n\tencryptionKey: key,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as kms from '@aws-cdk/aws-kms';\n\ndeclare const key: kms.Key;\nconst volumeAttributes: ec2.VolumeAttributes = {\n  availabilityZone: 'availabilityZone',\n  volumeId: 'volumeId',\n\n  // the properties below are optional\n  encryptionKey: key,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VolumeAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VolumeAttributes",
        "@aws-cdk/aws-kms.IKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as kms from '@aws-cdk/aws-kms';\n\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst volumeAttributes: ec2.VolumeAttributes = {\n  availabilityZone: 'availabilityZone',\n  volumeId: 'volumeId',\n\n  // the properties below are optional\n  encryptionKey: key,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d7b4f95e628376969f8c2ca514a07cbeede5c7644af3f8d3e64288adbfcc9b94"
    },
    "bd0c5d091220ab5b8a782ee4496ae36b218c0f6f0f328092406fe3845cdc9e72": {
      "translations": {
        "python": {
          "source": "# instance: ec2.Instance\n# role: iam.Role\n\n\nvolume = ec2.Volume(self, \"Volume\",\n    availability_zone=\"us-west-2a\",\n    size=Size.gibibytes(500),\n    encrypted=True\n)\n\nvolume.grant_attach_volume(role, [instance])",
          "version": "2"
        },
        "csharp": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = new Volume(this, \"Volume\", new VolumeProps {\n    AvailabilityZone = \"us-west-2a\",\n    Size = Size.Gibibytes(500),\n    Encrypted = true\n});\n\nvolume.GrantAttachVolume(role, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = Volume.Builder.create(this, \"Volume\")\n        .availabilityZone(\"us-west-2a\")\n        .size(Size.gibibytes(500))\n        .encrypted(true)\n        .build();\n\nvolume.grantAttachVolume(role, List.of(instance));",
          "version": "1"
        },
        "go": {
          "source": "var instance instance\nvar role role\n\nvolume := ec2.NewVolume(this, jsii.String(\"Volume\"), &volumeProps{\n\tavailabilityZone: jsii.String(\"us-west-2a\"),\n\tsize: size.gibibytes(jsii.Number(500)),\n\tencrypted: jsii.Boolean(true),\n})\n\nvolume.grantAttachVolume(role, []iInstance{\n\tinstance,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VolumeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Volume",
        "@aws-cdk/aws-ec2.VolumeProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5870b82ddce091122d41ff84a3a5fdc3f245394683d47180a4b2c3d65d3051bd"
    },
    "5e244c7e7025e2773b057b0430ee6a96c186a2401830661fa73acc737cb2d573": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"TheVPC\",\n    cidr=\"10.0.0.0/16\"\n)\n\n# Iterate the private subnets\nselection = vpc.select_subnets(\n    subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n)\n\nfor subnet in selection.subnets:\n    pass",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"TheVPC\", new VpcProps {\n    Cidr = \"10.0.0.0/16\"\n});\n\n// Iterate the private subnets\nSelectedSubnets selection = vpc.SelectSubnets(new SubnetSelection {\n    SubnetType = SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (var subnet in selection.Subnets)\n{\n}",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"TheVPC\")\n        .cidr(\"10.0.0.0/16\")\n        .build();\n\n// Iterate the private subnets\nSelectedSubnets selection = vpc.selectSubnets(SubnetSelection.builder()\n        .subnetType(SubnetType.PRIVATE_WITH_NAT)\n        .build());\n\nfor (Object subnet : selection.getSubnets()) {\n}",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"TheVPC\"), &vpcProps{\n\tcidr: jsii.String(\"10.0.0.0/16\"),\n})\n\n// Iterate the private subnets\nselection := vpc.selectSubnets(&subnetSelection{\n\tsubnetType: ec2.subnetType_PRIVATE_WITH_NAT,\n})\n\nfor _, subnet := range selection.subnets {}",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'TheVPC', {\n   cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the private subnets\nconst selection = vpc.selectSubnets({\n   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (const subnet of selection.subnets) {\n   // ...\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Vpc"
        },
        "field": {
          "field": "markdown",
          "line": 6
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SelectedSubnets",
        "@aws-cdk/aws-ec2.SelectedSubnets#subnets",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'TheVPC', {\n   cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the private subnets\nconst selection = vpc.selectSubnets({\n   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (const subnet of selection.subnets) {\n   // ...\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "223": 1,
        "225": 2,
        "232": 1,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "508b9f78300e2cf95e5b989ec157faaf4950d6cfbe2f7922bf737bd87b9c3f40"
    },
    "9e95b14a111e16dc791beec6604d66879d536bdf1d00ad4f748f89b540f4751f": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\", max_azs=1)\ncluster = ecs.Cluster(self, \"EcsCluster\", vpc=vpc)\nsecurity_group = ec2.SecurityGroup(self, \"SG\", vpc=vpc)\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\", new VpcProps { MaxAzs = 1 });\nCluster cluster = new Cluster(this, \"EcsCluster\", new ClusterProps { Vpc = vpc });\nSecurityGroup securityGroup = new SecurityGroup(this, \"SG\", new SecurityGroupProps { Vpc = vpc });\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    SecurityGroups = new [] { securityGroup }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"Vpc\").maxAzs(1).build();\nCluster cluster = Cluster.Builder.create(this, \"EcsCluster\").vpc(vpc).build();\nSecurityGroup securityGroup = SecurityGroup.Builder.create(this, \"SG\").vpc(vpc).build();\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"Vpc\"), &vpcProps{\n\tmaxAzs: jsii.Number(1),\n})\ncluster := ecs.NewCluster(this, jsii.String(\"EcsCluster\"), &clusterProps{\n\tvpc: vpc,\n})\nsecurityGroup := ec2.NewSecurityGroup(this, jsii.String(\"SG\"), &securityGroupProps{\n\tvpc: vpc,\n})\n\nscheduledFargateTask := ecsPatterns.NewScheduledFargateTask(this, jsii.String(\"ScheduledFargateTask\"), &scheduledFargateTaskProps{\n\tcluster: cluster,\n\tscheduledFargateTaskImageOptions: &scheduledFargateTaskImageOptions{\n\t\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\t\tmemoryLimitMiB: jsii.Number(512),\n\t},\n\tschedule: appscaling.schedule.expression(jsii.String(\"rate(1 minute)\")),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst securityGroup = new ec2.SecurityGroup(this, 'SG', { vpc });\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  securityGroups: [securityGroup],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Vpc"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst securityGroup = new ec2.SecurityGroup(this, 'SG', { vpc });\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  securityGroups: [securityGroup],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 28,
        "104": 4,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 6,
        "282": 3
      },
      "fqnsFingerprint": "246b8cd298e8d1efaf977bbdf8fa2dd32784267cdfe4003dc4d0c90e696a4232"
    },
    "967547f32c134fef0f2206ccdd1c56ce91665ba4760e1dc97bd02dc22d094a9b": {
      "translations": {
        "python": {
          "source": "sg = ec2.SecurityGroup.from_security_group_id(self, \"FsxSecurityGroup\", \"{SECURITY-GROUP-ID}\")\nfs = fsx.LustreFileSystem.from_lustre_file_system_attributes(self, \"FsxLustreFileSystem\",\n    dns_name=\"{FILE-SYSTEM-DNS-NAME}\",\n    file_system_id=\"{FILE-SYSTEM-ID}\",\n    security_group=sg\n)\n\nvpc = ec2.Vpc.from_vpc_attributes(self, \"Vpc\",\n    availability_zones=[\"us-west-2a\", \"us-west-2b\"],\n    public_subnet_ids=[\"{US-WEST-2A-SUBNET-ID}\", \"{US-WEST-2B-SUBNET-ID}\"],\n    vpc_id=\"{VPC-ID}\"\n)\n\ninst = ec2.Instance(self, \"inst\",\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n    machine_image=ec2.AmazonLinuxImage(\n        generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n    ),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    )\n)\n\nfs.connections.allow_default_port_from(inst)",
          "version": "2"
        },
        "csharp": {
          "source": "ISecurityGroup sg = SecurityGroup.FromSecurityGroupId(this, \"FsxSecurityGroup\", \"{SECURITY-GROUP-ID}\");\nIFileSystem fs = LustreFileSystem.FromLustreFileSystemAttributes(this, \"FsxLustreFileSystem\", new FileSystemAttributes {\n    DnsName = \"{FILE-SYSTEM-DNS-NAME}\",\n    FileSystemId = \"{FILE-SYSTEM-ID}\",\n    SecurityGroup = sg\n});\n\nIVpc vpc = Vpc.FromVpcAttributes(this, \"Vpc\", new VpcAttributes {\n    AvailabilityZones = new [] { \"us-west-2a\", \"us-west-2b\" },\n    PublicSubnetIds = new [] { \"{US-WEST-2A-SUBNET-ID}\", \"{US-WEST-2B-SUBNET-ID}\" },\n    VpcId = \"{VPC-ID}\"\n});\n\nInstance inst = new Instance(this, \"inst\", new InstanceProps {\n    InstanceType = InstanceType.Of(InstanceClass.T2, InstanceSize.LARGE),\n    MachineImage = new AmazonLinuxImage(new AmazonLinuxImageProps {\n        Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n    }),\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    }\n});\n\nfs.Connections.AllowDefaultPortFrom(inst);",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup sg = SecurityGroup.fromSecurityGroupId(this, \"FsxSecurityGroup\", \"{SECURITY-GROUP-ID}\");\nIFileSystem fs = LustreFileSystem.fromLustreFileSystemAttributes(this, \"FsxLustreFileSystem\", FileSystemAttributes.builder()\n        .dnsName(\"{FILE-SYSTEM-DNS-NAME}\")\n        .fileSystemId(\"{FILE-SYSTEM-ID}\")\n        .securityGroup(sg)\n        .build());\n\nIVpc vpc = Vpc.fromVpcAttributes(this, \"Vpc\", VpcAttributes.builder()\n        .availabilityZones(List.of(\"us-west-2a\", \"us-west-2b\"))\n        .publicSubnetIds(List.of(\"{US-WEST-2A-SUBNET-ID}\", \"{US-WEST-2B-SUBNET-ID}\"))\n        .vpcId(\"{VPC-ID}\")\n        .build());\n\nInstance inst = Instance.Builder.create(this, \"inst\")\n        .instanceType(InstanceType.of(InstanceClass.T2, InstanceSize.LARGE))\n        .machineImage(AmazonLinuxImage.Builder.create()\n                .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                .build())\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .build();\n\nfs.connections.allowDefaultPortFrom(inst);",
          "version": "1"
        },
        "go": {
          "source": "sg := ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"FsxSecurityGroup\"), jsii.String(\"{SECURITY-GROUP-ID}\"))\nfs := fsx.lustreFileSystem.fromLustreFileSystemAttributes(this, jsii.String(\"FsxLustreFileSystem\"), &fileSystemAttributes{\n\tdnsName: jsii.String(\"{FILE-SYSTEM-DNS-NAME}\"),\n\tfileSystemId: jsii.String(\"{FILE-SYSTEM-ID}\"),\n\tsecurityGroup: sg,\n})\n\nvpc := ec2.vpc.fromVpcAttributes(this, jsii.String(\"Vpc\"), &vpcAttributes{\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"us-west-2a\"),\n\t\tjsii.String(\"us-west-2b\"),\n\t},\n\tpublicSubnetIds: []*string{\n\t\tjsii.String(\"{US-WEST-2A-SUBNET-ID}\"),\n\t\tjsii.String(\"{US-WEST-2B-SUBNET-ID}\"),\n\t},\n\tvpcId: jsii.String(\"{VPC-ID}\"),\n})\n\ninst := ec2.NewInstance(this, jsii.String(\"inst\"), &instanceProps{\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_T2, ec2.instanceSize_LARGE),\n\tmachineImage: ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\t\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX_2,\n\t}),\n\tvpc: vpc,\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\nfs.connections.allowDefaultPortFrom(inst)",
          "version": "1"
        },
        "$": {
          "source": "const sg = ec2.SecurityGroup.fromSecurityGroupId(this, 'FsxSecurityGroup', '{SECURITY-GROUP-ID}');\nconst fs = fsx.LustreFileSystem.fromLustreFileSystemAttributes(this, 'FsxLustreFileSystem', {\n  dnsName: '{FILE-SYSTEM-DNS-NAME}',\n  fileSystemId: '{FILE-SYSTEM-ID}',\n  securityGroup: sg,\n});\n\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'Vpc', {\n  availabilityZones: ['us-west-2a', 'us-west-2b'],\n  publicSubnetIds: ['{US-WEST-2A-SUBNET-ID}', '{US-WEST-2B-SUBNET-ID}'],\n  vpcId: '{VPC-ID}',\n});\n\nconst inst = new ec2.Instance(this, 'inst', {\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n  }),\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n});\n\nfs.connections.allowDefaultPortFrom(inst);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IConnectable#connections",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#T2",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromVpcAttributes",
        "@aws-cdk/aws-ec2.VpcAttributes",
        "@aws-cdk/aws-fsx.FileSystemAttributes",
        "@aws-cdk/aws-fsx.IFileSystem",
        "@aws-cdk/aws-fsx.LustreFileSystem",
        "@aws-cdk/aws-fsx.LustreFileSystem#fromLustreFileSystemAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as fsx from '@aws-cdk/aws-fsx';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sg = ec2.SecurityGroup.fromSecurityGroupId(this, 'FsxSecurityGroup', '{SECURITY-GROUP-ID}');\nconst fs = fsx.LustreFileSystem.fromLustreFileSystemAttributes(this, 'FsxLustreFileSystem', {\n  dnsName: '{FILE-SYSTEM-DNS-NAME}',\n  fileSystemId: '{FILE-SYSTEM-ID}',\n  securityGroup: sg,\n});\n\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'Vpc', {\n  availabilityZones: ['us-west-2a', 'us-west-2b'],\n  publicSubnetIds: ['{US-WEST-2A-SUBNET-ID}', '{US-WEST-2B-SUBNET-ID}'],\n  vpcId: '{VPC-ID}',\n});\n\nconst inst = new ec2.Instance(this, 'inst', {\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n  machineImage: new ec2.AmazonLinuxImage({\n    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n  }),\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n});\n\nfs.connections.allowDefaultPortFrom(inst);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 12,
        "75": 49,
        "104": 4,
        "192": 2,
        "193": 5,
        "194": 20,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 1
      },
      "fqnsFingerprint": "d9cbe81093922caa9a75368f9b14b001e46b2de01051c64b1076900e6ba0ef67"
    },
    "54845e30ae14efd958a15b8acb510e2247efe0f4ed81ea2d9114e5ff6fef3b7f": {
      "translations": {
        "python": {
          "source": "# network_load_balancer1: elbv2.NetworkLoadBalancer\n# network_load_balancer2: elbv2.NetworkLoadBalancer\n\n\nec2.VpcEndpointService(self, \"EndpointService\",\n    vpc_endpoint_service_load_balancers=[network_load_balancer1, network_load_balancer2],\n    acceptance_required=True,\n    allowed_principals=[iam.ArnPrincipal(\"arn:aws:iam::123456789012:root\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nnew VpcEndpointService(this, \"EndpointService\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { networkLoadBalancer1, networkLoadBalancer2 },\n    AcceptanceRequired = true,\n    AllowedPrincipals = new [] { new ArnPrincipal(\"arn:aws:iam::123456789012:root\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nVpcEndpointService.Builder.create(this, \"EndpointService\")\n        .vpcEndpointServiceLoadBalancers(List.of(networkLoadBalancer1, networkLoadBalancer2))\n        .acceptanceRequired(true)\n        .allowedPrincipals(List.of(new ArnPrincipal(\"arn:aws:iam::123456789012:root\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var networkLoadBalancer1 networkLoadBalancer\nvar networkLoadBalancer2 networkLoadBalancer\n\nec2.NewVpcEndpointService(this, jsii.String(\"EndpointService\"), &vpcEndpointServiceProps{\n\tvpcEndpointServiceLoadBalancers: []iVpcEndpointServiceLoadBalancer{\n\t\tnetworkLoadBalancer1,\n\t\tnetworkLoadBalancer2,\n\t},\n\tacceptanceRequired: jsii.Boolean(true),\n\tallowedPrincipals: []arnPrincipal{\n\t\tiam.NewArnPrincipal(jsii.String(\"arn:aws:iam::123456789012:root\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcEndpointService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-iam.ArnPrincipal",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "217df103b1608c2006e3875bd15ea87432079d0f44794235e163617cf8c9e93b"
    },
    "51be01cf26862f470466c2e873e50b86e9dcd73c032b4402ea34786c95c2173e": {
      "translations": {
        "python": {
          "source": "# network_load_balancer1: elbv2.NetworkLoadBalancer\n# network_load_balancer2: elbv2.NetworkLoadBalancer\n\n\nec2.VpcEndpointService(self, \"EndpointService\",\n    vpc_endpoint_service_load_balancers=[network_load_balancer1, network_load_balancer2],\n    acceptance_required=True,\n    allowed_principals=[iam.ArnPrincipal(\"arn:aws:iam::123456789012:root\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nnew VpcEndpointService(this, \"EndpointService\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { networkLoadBalancer1, networkLoadBalancer2 },\n    AcceptanceRequired = true,\n    AllowedPrincipals = new [] { new ArnPrincipal(\"arn:aws:iam::123456789012:root\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nVpcEndpointService.Builder.create(this, \"EndpointService\")\n        .vpcEndpointServiceLoadBalancers(List.of(networkLoadBalancer1, networkLoadBalancer2))\n        .acceptanceRequired(true)\n        .allowedPrincipals(List.of(new ArnPrincipal(\"arn:aws:iam::123456789012:root\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var networkLoadBalancer1 networkLoadBalancer\nvar networkLoadBalancer2 networkLoadBalancer\n\nec2.NewVpcEndpointService(this, jsii.String(\"EndpointService\"), &vpcEndpointServiceProps{\n\tvpcEndpointServiceLoadBalancers: []iVpcEndpointServiceLoadBalancer{\n\t\tnetworkLoadBalancer1,\n\t\tnetworkLoadBalancer2,\n\t},\n\tacceptanceRequired: jsii.Boolean(true),\n\tallowedPrincipals: []arnPrincipal{\n\t\tiam.NewArnPrincipal(jsii.String(\"arn:aws:iam::123456789012:root\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcEndpointServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-iam.ArnPrincipal",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "217df103b1608c2006e3875bd15ea87432079d0f44794235e163617cf8c9e93b"
    },
    "0bc805d8094182dea0ebcf959a46450ad070cb9807872ee7003474cedc471a09": {
      "translations": {
        "python": {
          "source": "# create a cloud9 ec2 environment in a new VPC\nvpc = ec2.Vpc(self, \"VPC\", max_azs=3)\ncloud9.Ec2Environment(self, \"Cloud9Env\", vpc=vpc)\n\n# or create the cloud9 environment in the default VPC with specific instanceType\ndefault_vpc = ec2.Vpc.from_lookup(self, \"DefaultVPC\", is_default=True)\ncloud9.Ec2Environment(self, \"Cloud9Env2\",\n    vpc=default_vpc,\n    instance_type=ec2.InstanceType(\"t3.large\")\n)\n\n# or specify in a different subnetSelection\nc9env = cloud9.Ec2Environment(self, \"Cloud9Env3\",\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    )\n)\n\n# print the Cloud9 IDE URL in the output\nCfnOutput(self, \"URL\", value=c9env.ide_url)",
          "version": "2"
        },
        "csharp": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = new Vpc(this, \"VPC\", new VpcProps { MaxAzs = 3 });\nnew Ec2Environment(this, \"Cloud9Env\", new Ec2EnvironmentProps { Vpc = vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.FromLookup(this, \"DefaultVPC\", new VpcLookupOptions { IsDefault = true });\nnew Ec2Environment(this, \"Cloud9Env2\", new Ec2EnvironmentProps {\n    Vpc = defaultVpc,\n    InstanceType = new InstanceType(\"t3.large\")\n});\n\n// or specify in a different subnetSelection\nEc2Environment c9env = new Ec2Environment(this, \"Cloud9Env3\", new Ec2EnvironmentProps {\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    }\n});\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, \"URL\", new CfnOutputProps { Value = c9env.IdeUrl });",
          "version": "1"
        },
        "java": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = Vpc.Builder.create(this, \"VPC\").maxAzs(3).build();\nEc2Environment.Builder.create(this, \"Cloud9Env\").vpc(vpc).build();\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.fromLookup(this, \"DefaultVPC\", VpcLookupOptions.builder().isDefault(true).build());\nEc2Environment.Builder.create(this, \"Cloud9Env2\")\n        .vpc(defaultVpc)\n        .instanceType(new InstanceType(\"t3.large\"))\n        .build();\n\n// or specify in a different subnetSelection\nEc2Environment c9env = Ec2Environment.Builder.create(this, \"Cloud9Env3\")\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .build();\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nCfnOutput.Builder.create(this, \"URL\").value(c9env.getIdeUrl()).build();",
          "version": "1"
        },
        "go": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tmaxAzs: jsii.Number(3),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n})\n\n// or create the cloud9 environment in the default VPC with specific instanceType\ndefaultVpc := ec2.vpc.fromLookup(this, jsii.String(\"DefaultVPC\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env2\"), &ec2EnvironmentProps{\n\tvpc: defaultVpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.large\")),\n})\n\n// or specify in a different subnetSelection\nc9env := cloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env3\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n\tsubnetSelection: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t},\n})\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nNewCfnOutput(this, jsii.String(\"URL\"), &cfnOutputProps{\n\tvalue: c9env.ideUrl,\n})",
          "version": "1"
        },
        "$": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcLookupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.Ec2Environment",
        "@aws-cdk/aws-cloud9.Ec2Environment#ideUrl",
        "@aws-cdk/aws-cloud9.Ec2EnvironmentProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 32,
        "104": 6,
        "106": 1,
        "193": 7,
        "194": 10,
        "196": 1,
        "197": 6,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2
      },
      "fqnsFingerprint": "5d3d6440dd7e69ec4ee2dd728667dc0a97105dea82a46595cc4ed2eeab79ebf7"
    },
    "9f3dc7789636a909ef3c0ff768e160b44f33a37e5c29dbd17e8644f1100ad77a": {
      "translations": {
        "python": {
          "source": "# create a cloud9 ec2 environment in a new VPC\nvpc = ec2.Vpc(self, \"VPC\", max_azs=3)\ncloud9.Ec2Environment(self, \"Cloud9Env\", vpc=vpc)\n\n# or create the cloud9 environment in the default VPC with specific instanceType\ndefault_vpc = ec2.Vpc.from_lookup(self, \"DefaultVPC\", is_default=True)\ncloud9.Ec2Environment(self, \"Cloud9Env2\",\n    vpc=default_vpc,\n    instance_type=ec2.InstanceType(\"t3.large\")\n)\n\n# or specify in a different subnetSelection\nc9env = cloud9.Ec2Environment(self, \"Cloud9Env3\",\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    )\n)\n\n# print the Cloud9 IDE URL in the output\nCfnOutput(self, \"URL\", value=c9env.ide_url)",
          "version": "2"
        },
        "csharp": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = new Vpc(this, \"VPC\", new VpcProps { MaxAzs = 3 });\nnew Ec2Environment(this, \"Cloud9Env\", new Ec2EnvironmentProps { Vpc = vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.FromLookup(this, \"DefaultVPC\", new VpcLookupOptions { IsDefault = true });\nnew Ec2Environment(this, \"Cloud9Env2\", new Ec2EnvironmentProps {\n    Vpc = defaultVpc,\n    InstanceType = new InstanceType(\"t3.large\")\n});\n\n// or specify in a different subnetSelection\nEc2Environment c9env = new Ec2Environment(this, \"Cloud9Env3\", new Ec2EnvironmentProps {\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    }\n});\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, \"URL\", new CfnOutputProps { Value = c9env.IdeUrl });",
          "version": "1"
        },
        "java": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = Vpc.Builder.create(this, \"VPC\").maxAzs(3).build();\nEc2Environment.Builder.create(this, \"Cloud9Env\").vpc(vpc).build();\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.fromLookup(this, \"DefaultVPC\", VpcLookupOptions.builder().isDefault(true).build());\nEc2Environment.Builder.create(this, \"Cloud9Env2\")\n        .vpc(defaultVpc)\n        .instanceType(new InstanceType(\"t3.large\"))\n        .build();\n\n// or specify in a different subnetSelection\nEc2Environment c9env = Ec2Environment.Builder.create(this, \"Cloud9Env3\")\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .build();\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nCfnOutput.Builder.create(this, \"URL\").value(c9env.getIdeUrl()).build();",
          "version": "1"
        },
        "go": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tmaxAzs: jsii.Number(3),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n})\n\n// or create the cloud9 environment in the default VPC with specific instanceType\ndefaultVpc := ec2.vpc.fromLookup(this, jsii.String(\"DefaultVPC\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env2\"), &ec2EnvironmentProps{\n\tvpc: defaultVpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.large\")),\n})\n\n// or specify in a different subnetSelection\nc9env := cloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env3\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n\tsubnetSelection: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t},\n})\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nNewCfnOutput(this, jsii.String(\"URL\"), &cfnOutputProps{\n\tvalue: c9env.ideUrl,\n})",
          "version": "1"
        },
        "$": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.Ec2Environment",
        "@aws-cdk/aws-cloud9.Ec2Environment#ideUrl",
        "@aws-cdk/aws-cloud9.Ec2EnvironmentProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 32,
        "104": 6,
        "106": 1,
        "193": 7,
        "194": 10,
        "196": 1,
        "197": 6,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2
      },
      "fqnsFingerprint": "5d3d6440dd7e69ec4ee2dd728667dc0a97105dea82a46595cc4ed2eeab79ebf7"
    },
    "0b5e164e0e081e931c500ec2cfa75d430d16bd4b62cdba60c7910981e29d303c": {
      "translations": {
        "python": {
          "source": "ec2.Vpc(self, \"VPC\",\n    subnet_configuration=[ec2.SubnetConfiguration(\n        cidr_mask=24,\n        name=\"ingress\",\n        subnet_type=ec2.SubnetType.PUBLIC\n    ), ec2.SubnetConfiguration(\n        cidr_mask=24,\n        name=\"application\",\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ), ec2.SubnetConfiguration(\n        cidr_mask=28,\n        name=\"rds\",\n        subnet_type=ec2.SubnetType.PRIVATE_ISOLATED\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Vpc(this, \"VPC\", new VpcProps {\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        CidrMask = 24,\n        Name = \"ingress\",\n        SubnetType = SubnetType.PUBLIC\n    }, new SubnetConfiguration {\n        CidrMask = 24,\n        Name = \"application\",\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }, new SubnetConfiguration {\n        CidrMask = 28,\n        Name = \"rds\",\n        SubnetType = SubnetType.PRIVATE_ISOLATED\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc.Builder.create(this, \"VPC\")\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .cidrMask(24)\n                .name(\"ingress\")\n                .subnetType(SubnetType.PUBLIC)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(24)\n                .name(\"application\")\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(28)\n                .name(\"rds\")\n                .subnetType(SubnetType.PRIVATE_ISOLATED)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tsubnetConfiguration: []subnetConfiguration{\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(24),\n\t\t\tname: jsii.String(\"ingress\"),\n\t\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(24),\n\t\t\tname: jsii.String(\"application\"),\n\t\t\tsubnetType: ec2.*subnetType_PRIVATE_WITH_NAT,\n\t\t},\n\t\t&subnetConfiguration{\n\t\t\tcidrMask: jsii.Number(28),\n\t\t\tname: jsii.String(\"rds\"),\n\t\t\tsubnetType: ec2.*subnetType_PRIVATE_ISOLATED,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new ec2.Vpc(this, 'VPC', {\n   subnetConfiguration: [\n      {\n        cidrMask: 24,\n        name: 'ingress',\n        subnetType: ec2.SubnetType.PUBLIC,\n      },\n      {\n        cidrMask: 24,\n        name: 'application',\n        subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n      },\n      {\n        cidrMask: 28,\n        name: 'rds',\n        subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n      }\n   ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.VpcProps",
          "memberName": "subnetConfiguration"
        },
        "field": {
          "field": "markdown",
          "line": 7
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew ec2.Vpc(this, 'VPC', {\n   subnetConfiguration: [\n      {\n        cidrMask: 24,\n        name: 'ingress',\n        subnetType: ec2.SubnetType.PUBLIC,\n      },\n      {\n        cidrMask: 24,\n        name: 'application',\n        subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n      },\n      {\n        cidrMask: 28,\n        name: 'rds',\n        subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n      }\n   ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 21,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "672c51ae22a875add34d415d546a92a2345303c4d2ac875b808af37e3b7ef2c0"
    },
    "7e7eb5f710a826229e20e2b8777dd98b2c722db77cf6150ae6f583a314a4d0b4": {
      "translations": {
        "python": {
          "source": "# Across all tunnels in the account/region\nall_data_out = ec2.VpnConnection.metric_all_tunnel_data_out()\n\n# For a specific vpn connection\nvpn_connection = vpc.add_vpn_connection(\"Dynamic\",\n    ip=\"1.2.3.4\"\n)\nstate = vpn_connection.metric_tunnel_state()",
          "version": "2"
        },
        "csharp": {
          "source": "// Across all tunnels in the account/region\nMetric allDataOut = VpnConnection.MetricAllTunnelDataOut();\n\n// For a specific vpn connection\nVpnConnection vpnConnection = vpc.AddVpnConnection(\"Dynamic\", new VpnConnectionOptions {\n    Ip = \"1.2.3.4\"\n});\nMetric state = vpnConnection.MetricTunnelState();",
          "version": "1"
        },
        "java": {
          "source": "// Across all tunnels in the account/region\nMetric allDataOut = VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nVpnConnection vpnConnection = vpc.addVpnConnection(\"Dynamic\", VpnConnectionOptions.builder()\n        .ip(\"1.2.3.4\")\n        .build());\nMetric state = vpnConnection.metricTunnelState();",
          "version": "1"
        },
        "go": {
          "source": "// Across all tunnels in the account/region\nallDataOut := ec2.vpnConnection.metricAllTunnelDataOut()\n\n// For a specific vpn connection\nvpnConnection := vpc.addVpnConnection(jsii.String(\"Dynamic\"), &vpnConnectionOptions{\n\tip: jsii.String(\"1.2.3.4\"),\n})\nstate := vpnConnection.metricTunnelState()",
          "version": "1"
        },
        "$": {
          "source": "// Across all tunnels in the account/region\nconst allDataOut = ec2.VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nconst vpnConnection = vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\nconst state = vpnConnection.metricTunnelState();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpnConnection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-ec2.VpnConnection",
        "@aws-cdk/aws-ec2.VpnConnection#metricAllTunnelDataOut",
        "@aws-cdk/aws-ec2.VpnConnectionOptions"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\n// Across all tunnels in the account/region\nconst allDataOut = ec2.VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nconst vpnConnection = vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\nconst state = vpnConnection.metricTunnelState();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "193": 1,
        "194": 4,
        "196": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "e3f0f68b09fd9c20f8a027bfaa0b29b4a0a0f820f18ce6d423b1b19fcf9949a1"
    },
    "0632c705838d357f0fd780361559a90543102a35e713ba867cd824961aaddff0": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"MyVpc\",\n    vpn_connections={\n        \"dynamic\": ec2.VpnConnectionOptions( # Dynamic routing (BGP)\n            ip=\"1.2.3.4\"),\n        \"static\": ec2.VpnConnectionOptions( # Static routing\n            ip=\"4.5.6.7\",\n            static_routes=[\"192.168.10.0/24\", \"192.168.20.0/24\"\n            ])\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    VpnConnections = new Dictionary<string, VpnConnectionOptions> {\n        { \"dynamic\", new VpnConnectionOptions {  // Dynamic routing (BGP)\n            Ip = \"1.2.3.4\" } },\n        { \"static\", new VpnConnectionOptions {  // Static routing\n            Ip = \"4.5.6.7\",\n            StaticRoutes = new [] { \"192.168.10.0/24\", \"192.168.20.0/24\" } } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .vpnConnections(Map.of(\n                \"dynamic\", VpnConnectionOptions.builder() // Dynamic routing (BGP)\n                        .ip(\"1.2.3.4\").build(),\n                \"static\", VpnConnectionOptions.builder() // Static routing\n                        .ip(\"4.5.6.7\")\n                        .staticRoutes(List.of(\"192.168.10.0/24\", \"192.168.20.0/24\")).build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"MyVpc\"), &vpcProps{\n\tvpnConnections: map[string]vpnConnectionOptions{\n\t\t\"dynamic\": &vpnConnectionOptions{\n\t\t\t // Dynamic routing (BGP)\n\t\t\t\"ip\": jsii.String(\"1.2.3.4\"),\n\t\t},\n\t\t\"static\": &vpnConnectionOptions{\n\t\t\t // Static routing\n\t\t\t\"ip\": jsii.String(\"4.5.6.7\"),\n\t\t\t\"staticRoutes\": []*string{\n\t\t\t\tjsii.String(\"192.168.10.0/24\"),\n\t\t\t\tjsii.String(\"192.168.20.0/24\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnConnections: {\n    dynamic: { // Dynamic routing (BGP)\n      ip: '1.2.3.4'\n    },\n    static: { // Static routing\n      ip: '4.5.6.7',\n      staticRoutes: [\n        '192.168.10.0/24',\n        '192.168.20.0/24'\n      ]\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpnConnectionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ec2.VpnConnectionOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnConnections: {\n    dynamic: { // Dynamic routing (BGP)\n      ip: '1.2.3.4'\n    },\n    static: { // Static routing\n      ip: '4.5.6.7',\n      staticRoutes: [\n        '192.168.10.0/24',\n        '192.168.20.0/24'\n      ]\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "47479064a5422c7120a9e1a2f3af4f8df164aa0773f6cfdd70ec88780c9a2d51"
    },
    "eec589f104bd0d7a852a84fc912bc5d0e3b92b79c8ee8a1cd70d2014b2153c0b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.core as cdk\n\n# secret_value: cdk.SecretValue\n# vpc: ec2.Vpc\n\nvpn_connection_props = ec2.VpnConnectionProps(\n    ip=\"ip\",\n    vpc=vpc,\n\n    # the properties below are optional\n    asn=123,\n    static_routes=[\"staticRoutes\"],\n    tunnel_options=[ec2.VpnTunnelOption(\n        pre_shared_key=\"preSharedKey\",\n        pre_shared_key_secret=secret_value,\n        tunnel_inside_cidr=\"tunnelInsideCidr\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK;\n\nSecretValue secretValue;\nVpc vpc;\nVpnConnectionProps vpnConnectionProps = new VpnConnectionProps {\n    Ip = \"ip\",\n    Vpc = vpc,\n\n    // the properties below are optional\n    Asn = 123,\n    StaticRoutes = new [] { \"staticRoutes\" },\n    TunnelOptions = new [] { new VpnTunnelOption {\n        PreSharedKey = \"preSharedKey\",\n        PreSharedKeySecret = secretValue,\n        TunnelInsideCidr = \"tunnelInsideCidr\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.core.*;\n\nSecretValue secretValue;\nVpc vpc;\n\nVpnConnectionProps vpnConnectionProps = VpnConnectionProps.builder()\n        .ip(\"ip\")\n        .vpc(vpc)\n\n        // the properties below are optional\n        .asn(123)\n        .staticRoutes(List.of(\"staticRoutes\"))\n        .tunnelOptions(List.of(VpnTunnelOption.builder()\n                .preSharedKey(\"preSharedKey\")\n                .preSharedKeySecret(secretValue)\n                .tunnelInsideCidr(\"tunnelInsideCidr\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar secretValue secretValue\nvar vpc vpc\nvpnConnectionProps := &vpnConnectionProps{\n\tip: jsii.String(\"ip\"),\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tasn: jsii.Number(123),\n\tstaticRoutes: []*string{\n\t\tjsii.String(\"staticRoutes\"),\n\t},\n\ttunnelOptions: []vpnTunnelOption{\n\t\t&vpnTunnelOption{\n\t\t\tpreSharedKey: jsii.String(\"preSharedKey\"),\n\t\t\tpreSharedKeySecret: secretValue,\n\t\t\ttunnelInsideCidr: jsii.String(\"tunnelInsideCidr\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\ndeclare const vpc: ec2.Vpc;\nconst vpnConnectionProps: ec2.VpnConnectionProps = {\n  ip: 'ip',\n  vpc: vpc,\n\n  // the properties below are optional\n  asn: 123,\n  staticRoutes: ['staticRoutes'],\n  tunnelOptions: [{\n    preSharedKey: 'preSharedKey',\n    preSharedKeySecret: secretValue,\n    tunnelInsideCidr: 'tunnelInsideCidr',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpnConnectionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.VpnConnectionProps",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpnConnectionProps: ec2.VpnConnectionProps = {\n  ip: 'ip',\n  vpc: vpc,\n\n  // the properties below are optional\n  asn: 123,\n  staticRoutes: ['staticRoutes'],\n  tunnelOptions: [{\n    preSharedKey: 'preSharedKey',\n    preSharedKeySecret: secretValue,\n    tunnelInsideCidr: 'tunnelInsideCidr',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 21,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "17ad27d02268b6d31d3bdc5d34fcf357553e253a686787c8ed76d46e0b33bb71"
    },
    "f13581ed523477fd9c18f201e810f9e1583a7904325271ad21685186016d74c3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nvpn_gateway = ec2.VpnGateway(self, \"MyVpnGateway\",\n    type=\"type\",\n\n    # the properties below are optional\n    amazon_side_asn=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nVpnGateway vpnGateway = new VpnGateway(this, \"MyVpnGateway\", new VpnGatewayProps {\n    Type = \"type\",\n\n    // the properties below are optional\n    AmazonSideAsn = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nVpnGateway vpnGateway = VpnGateway.Builder.create(this, \"MyVpnGateway\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .amazonSideAsn(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nvpnGateway := ec2.NewVpnGateway(this, jsii.String(\"MyVpnGateway\"), &vpnGatewayProps{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tamazonSideAsn: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst vpnGateway = new ec2.VpnGateway(this, 'MyVpnGateway', {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpnGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpnGateway",
        "@aws-cdk/aws-ec2.VpnGatewayProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpnGateway = new ec2.VpnGateway(this, 'MyVpnGateway', {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f6592d5cd798ddb8094fcb8558056f69c14f164a8414bb8a722577e7ae28c292"
    },
    "19bd3451c4edbc6dc47da52a019556f41027deaedafa43d48b25b46a59e9fe7a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\nvpn_gateway_props = ec2.VpnGatewayProps(\n    type=\"type\",\n\n    # the properties below are optional\n    amazon_side_asn=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nVpnGatewayProps vpnGatewayProps = new VpnGatewayProps {\n    Type = \"type\",\n\n    // the properties below are optional\n    AmazonSideAsn = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nVpnGatewayProps vpnGatewayProps = VpnGatewayProps.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .amazonSideAsn(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nvpnGatewayProps := &vpnGatewayProps{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tamazonSideAsn: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nconst vpnGatewayProps: ec2.VpnGatewayProps = {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpnGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpnGatewayProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpnGatewayProps: ec2.VpnGatewayProps = {\n  type: 'type',\n\n  // the properties below are optional\n  amazonSideAsn: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "999baa7763fb00eb24a18a95bb03fca38baf8e9a488cbec8bd9d9917355c2370"
    },
    "7ef8d0d070ef5c5acc1c3fcd707c86db3193f2775d94e9e29e4286cfcd872d54": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.core as cdk\n\n# secret_value: cdk.SecretValue\n\nvpn_tunnel_option = ec2.VpnTunnelOption(\n    pre_shared_key=\"preSharedKey\",\n    pre_shared_key_secret=secret_value,\n    tunnel_inside_cidr=\"tunnelInsideCidr\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK;\n\nSecretValue secretValue;\nVpnTunnelOption vpnTunnelOption = new VpnTunnelOption {\n    PreSharedKey = \"preSharedKey\",\n    PreSharedKeySecret = secretValue,\n    TunnelInsideCidr = \"tunnelInsideCidr\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.core.*;\n\nSecretValue secretValue;\n\nVpnTunnelOption vpnTunnelOption = VpnTunnelOption.builder()\n        .preSharedKey(\"preSharedKey\")\n        .preSharedKeySecret(secretValue)\n        .tunnelInsideCidr(\"tunnelInsideCidr\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar secretValue secretValue\nvpnTunnelOption := &vpnTunnelOption{\n\tpreSharedKey: jsii.String(\"preSharedKey\"),\n\tpreSharedKeySecret: secretValue,\n\ttunnelInsideCidr: jsii.String(\"tunnelInsideCidr\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\nconst vpnTunnelOption: ec2.VpnTunnelOption = {\n  preSharedKey: 'preSharedKey',\n  preSharedKeySecret: secretValue,\n  tunnelInsideCidr: 'tunnelInsideCidr',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpnTunnelOption"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpnTunnelOption",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpnTunnelOption: ec2.VpnTunnelOption = {\n  preSharedKey: 'preSharedKey',\n  preSharedKeySecret: secretValue,\n  tunnelInsideCidr: 'tunnelInsideCidr',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "57145d676cbe626292516f2b65f260fcc57069c38149dbe89abc848c4250bacd"
    },
    "00815811ff441452a2996b411180b0249f399f5c137a1464613f7c0c80ceedf5": {
      "translations": {
        "python": {
          "source": "# Pick a Windows edition to use\nwindows = ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.AmazonLinuxImage(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\n\nlinux = ec2.GenericLinuxImage({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = new AmazonLinuxImage(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = AmazonLinuxImage.Builder.create()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .build();\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick a Windows edition to use\nwindows := ec2.NewWindowsImage(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.NewAmazonLinuxImage(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nlinux := ec2.NewGenericLinuxImage(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.WindowsImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.WindowsImage",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\n\n/// !show\n// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 28,
        "193": 2,
        "194": 13,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6
      },
      "fqnsFingerprint": "9a2c1598b6c15067ddbb0d3570f9e62b88067d3c8cd1575d3dcfccb5dabb0d95"
    },
    "cbff92ab629d09899f256eb7c06454fccec11968f0ec1d78c521a8044ee6edf9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\n\n# user_data: ec2.UserData\n\nwindows_image_props = ec2.WindowsImageProps(\n    user_data=user_data\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\n\nUserData userData;\n\nWindowsImageProps windowsImageProps = new WindowsImageProps {\n    UserData = userData\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\n\nUserData userData;\n\nWindowsImageProps windowsImageProps = WindowsImageProps.builder()\n        .userData(userData)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar userData userData\nwindowsImageProps := &windowsImageProps{\n\tuserData: userData,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\nconst windowsImageProps: ec2.WindowsImageProps = {\n  userData: userData,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.WindowsImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.WindowsImageProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const userData: ec2.UserData;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst windowsImageProps: ec2.WindowsImageProps = {\n  userData: userData,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7c1e38601f8030d0a14d67f0553cce76d4bcc5d6badc31e7906fca84703efcfc"
    },
    "6ae81e911a7b4a00aa7e58b7c766f754094d0f6cf47be7c94258a03b6bf073d2": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_ssm_parameter(\"/my/ami\", os=ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSsmParameter(\"/my/ami\", new SsmParameterImageOptions { Os = OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSsmParameter(\"/my/ami\", SsmParameterImageOptions.builder().os(OperatingSystemType.LINUX).build());\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "go": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\namznLinux := ec2.machineImage.latestAmazonLinux(&amazonLinuxImageProps{\n\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX,\n\tedition: ec2.amazonLinuxEdition_STANDARD,\n\tvirtualization: ec2.amazonLinuxVirt_HVM,\n\tstorage: ec2.amazonLinuxStorage_GENERAL_PURPOSE,\n\tcpuType: ec2.amazonLinuxCpuType_X86_64,\n})\n\n// Pick a Windows edition to use\nwindows := ec2.machineImage.latestWindows(ec2.windowsVersion_WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n// Read AMI id from SSM parameter store\nssm := ec2.machineImage.fromSsmParameter(jsii.String(\"/my/ami\"), &ssmParameterImageOptions{\n\tos: ec2.operatingSystemType_LINUX,\n})\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nnatAmi := ec2.machineImage.lookup(&lookupMachineImageProps{\n\tname: jsii.String(\"amzn-ami-vpc-nat-*\"),\n\towners: []*string{\n\t\tjsii.String(\"amazon\"),\n\t},\n})\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nlinux := ec2.machineImage.genericLinux(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\ngenericWindows := ec2.machineImage.genericWindows(map[string]*string{\n\t\"us-east-1\": jsii.String(\"ami-97785bed\"),\n\t\"eu-west-1\": jsii.String(\"ami-12345678\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.WindowsVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSsmParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.SsmParameterImageOptions",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSsmParameter('/my/ami', { os: ec2.OperatingSystemType.LINUX });\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 53,
        "192": 1,
        "193": 5,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 12
      },
      "fqnsFingerprint": "0ffb41956702333e1a50d837b1cbcdd148510aa3c9cca1e5e52abdf5c22113ec"
    }
  }
}
